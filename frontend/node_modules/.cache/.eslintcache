[{"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\index.tsx":"1","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\App.tsx":"2","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\routes.tsx":"3","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\TemplateView.tsx":"4","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Template.tsx":"5","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\register.tsx":"6","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Dashboard.tsx":"7","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\garment-template.tsx":"8","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\login.tsx":"9","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\home.tsx":"10","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Create_template.tsx":"11","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\aqlHelpers.ts":"12","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\csrf.ts":"13","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\components\\AccessManager.tsx":"14","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\components\\ConnectionsPanel.tsx":"15","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\aqlTables.ts":"16"},{"size":332,"mtime":1740314516837,"results":"17","hashOfConfig":"18"},{"size":244,"mtime":1745474310903,"results":"19","hashOfConfig":"18"},{"size":1303,"mtime":1746938442097,"results":"20","hashOfConfig":"18"},{"size":8303,"mtime":1747209984802,"results":"21","hashOfConfig":"18"},{"size":13888,"mtime":1747209984732,"results":"22","hashOfConfig":"18"},{"size":10401,"mtime":1747196602198,"results":"23","hashOfConfig":"18"},{"size":14204,"mtime":1747210572962,"results":"24","hashOfConfig":"18"},{"size":136554,"mtime":1747209984809,"results":"25","hashOfConfig":"18"},{"size":5040,"mtime":1747195134646,"results":"26","hashOfConfig":"18"},{"size":47999,"mtime":1747210274396,"results":"27","hashOfConfig":"18"},{"size":116711,"mtime":1747209984357,"results":"28","hashOfConfig":"18"},{"size":466,"mtime":1746859391926,"results":"29","hashOfConfig":"18"},{"size":1118,"mtime":1746677293210,"results":"30","hashOfConfig":"18"},{"size":23977,"mtime":1746854187901,"results":"31","hashOfConfig":"18"},{"size":10716,"mtime":1745322908030,"results":"32","hashOfConfig":"18"},{"size":4935,"mtime":1747055501583,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1vmq1fr",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\index.tsx",[],["68","69"],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\App.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\routes.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\TemplateView.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Template.tsx",["70"],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\register.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Dashboard.tsx",["71"],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\garment-template.tsx",["72"],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\login.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\home.tsx",["73","74","75","76"],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Create_template.tsx",["77","78","79","80","81","82"],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\aqlHelpers.ts",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\csrf.ts",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\components\\AccessManager.tsx",["83","84","85","86","87","88"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  User,\r\n  UserPlus,\r\n  Mail,\r\n  Shield,\r\n  Check,\r\n  X,\r\n  Edit2,\r\n  Trash2,\r\n  Search,\r\n  AlertCircle,\r\n  Info,\r\n  Copy,\r\n  ExternalLink,\r\n  Users\r\n} from 'lucide-react';\r\nimport './AccessManager.css';\r\n\r\n// Define permission types\r\nexport type PermissionLevel = 'owner' | 'admin' | 'editor' | 'viewer';\r\n\r\nexport interface UserPermission {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  permissionLevel: PermissionLevel;\r\n  status: 'active' | 'pending' | 'expired';\r\n  lastAccessed?: Date;\r\n}\r\n\r\nexport interface Connection {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  initials: string;\r\n  status: 'active' | 'pending' | 'declined';\r\n}\r\n\r\ninterface CurrentUser {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\ninterface AccessManagerProps {\r\n  templateId: string;\r\n  templateTitle: string;\r\n  initialUsers?: UserPermission[];\r\n  onUpdatePermissions?: (users: UserPermission[]) => void;\r\n}\r\n\r\nconst generateId = () => Math.random().toString(36).substring(2, 9);\r\n\r\nconst getPermissionLabel = (level: PermissionLevel): string => {\r\n  switch (level) {\r\n    case 'owner':\r\n      return 'Owner';\r\n    case 'admin':\r\n      return 'Administrator';\r\n    case 'editor':\r\n      return 'Editor';\r\n    case 'viewer':\r\n      return 'Viewer';\r\n    default:\r\n      return 'Unknown';\r\n  }\r\n};\r\n\r\nconst getPermissionDescription = (level: PermissionLevel): string => {\r\n  switch (level) {\r\n    case 'owner':\r\n      return 'Full control including template deletion and ownership transfer';\r\n    case 'admin':\r\n      return 'Can edit template, manage users, and publish';\r\n    case 'editor':\r\n      return 'Can edit template content but cannot publish or manage users';\r\n    case 'viewer':\r\n      return 'Can only view and use the template';\r\n    default:\r\n      return '';\r\n  }\r\n};\r\n\r\nconst AccessManager: React.FC<AccessManagerProps> = ({\r\n  templateId,\r\n  templateTitle,\r\n  initialUsers = [],\r\n  onUpdatePermissions\r\n}) => {\r\n  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Fetch current user data\r\n  useEffect(() => {\r\n    const fetchCurrentUser = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/users/auth-status/', {\r\n          withCredentials: true\r\n        });\r\n        setCurrentUser(response.data.user);\r\n      } catch (error) {\r\n        console.error('Failed to fetch current user:', error);\r\n        // If we can't get the user from API, try to get from localStorage\r\n        const email = localStorage.getItem('username');\r\n        if (email) {\r\n          setCurrentUser({\r\n            id: 0,\r\n            username: email.split('@')[0],\r\n            email: email\r\n          });\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCurrentUser();\r\n  }, []);\r\n\r\n  // Create default owner based on current user\r\n  const createDefaultOwner = (): UserPermission => {\r\n    return {\r\n      id: generateId(),\r\n      name: currentUser ? (currentUser.username || currentUser.email.split('@')[0]) : 'You',\r\n      email: currentUser ? currentUser.email : 'current.user@example.com',\r\n      permissionLevel: 'owner',\r\n      status: 'active',\r\n      lastAccessed: new Date()\r\n    };\r\n  };\r\n\r\n  const [users, setUsers] = useState<UserPermission[]>(\r\n    initialUsers.length > 0 ? initialUsers : [createDefaultOwner()]\r\n  );\r\n\r\n  // Update default owner when current user is loaded\r\n  useEffect(() => {\r\n    if (!isLoading && currentUser && initialUsers.length === 0) {\r\n      setUsers([createDefaultOwner()]);\r\n    }\r\n  }, [currentUser, isLoading, initialUsers.length]);\r\n\r\n  const [showInviteForm, setShowInviteForm] = useState(false);\r\n  const [newUserEmail, setNewUserEmail] = useState('');\r\n  const [newUserPermission, setNewUserPermission] = useState<PermissionLevel>('viewer');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [editingUserId, setEditingUserId] = useState<string | null>(null);\r\n  const [showShareLink, setShowShareLink] = useState(false);\r\n  const [shareLink, setShareLink] = useState('');\r\n  const [linkCopied, setLinkCopied] = useState(false);\r\n  const [showPermissionDetails, setShowPermissionDetails] = useState(false);\r\n  const [showConnectionsModal, setShowConnectionsModal] = useState(false);\r\n  const [inviteTab, setInviteTab] = useState<'email' | 'connections'>('email');\r\n\r\n  // Sample connections data for demonstration\r\n  // Map to store individual permission levels for each connection\r\n  const [connectionPermissions, setConnectionPermissions] = useState<Record<string, PermissionLevel>>({});\r\n\r\n  const [connections, setConnections] = useState<Connection[]>([\r\n    {\r\n      id: '1',\r\n      name: 'Grace Miller',\r\n      email: 'grace.miller@example.com',\r\n      initials: 'GM',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'John Martinez',\r\n      email: 'john.martinez@example.com',\r\n      initials: 'JM',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Sarah Johnson',\r\n      email: 'sarah.johnson@example.com',\r\n      initials: 'SJ',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '4',\r\n      name: 'Michael Brown',\r\n      email: 'michael.brown@example.com',\r\n      initials: 'MB',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '5',\r\n      name: 'Emily Davis',\r\n      email: 'emily.davis@example.com',\r\n      initials: 'ED',\r\n      status: 'active'\r\n    }\r\n  ]);\r\n\r\n  // Generate a share link\r\n  useEffect(() => {\r\n    setShareLink(`https://fashcognitive.com/templates/share/${templateId}?token=${generateId()}`);\r\n  }, [templateId]);\r\n\r\n  // Update parent component when users change\r\n  useEffect(() => {\r\n    if (onUpdatePermissions) {\r\n      onUpdatePermissions(users);\r\n    }\r\n  }, [users, onUpdatePermissions]);\r\n\r\n  const handleAddUser = () => {\r\n    if (!newUserEmail.trim()) return;\r\n\r\n    // Check if user already exists\r\n    if (users.some(user => user.email.toLowerCase() === newUserEmail.toLowerCase())) {\r\n      alert('This user has already been invited.');\r\n      return;\r\n    }\r\n\r\n    const newUser: UserPermission = {\r\n      id: generateId(),\r\n      name: newUserEmail.split('@')[0], // Extract name from email\r\n      email: newUserEmail,\r\n      permissionLevel: newUserPermission,\r\n      status: 'pending'\r\n    };\r\n\r\n    setUsers([...users, newUser]);\r\n    setNewUserEmail('');\r\n    setNewUserPermission('viewer');\r\n    setShowInviteForm(false);\r\n  };\r\n\r\n  const handleAddConnection = (connection: Connection, permissionLevel: PermissionLevel) => {\r\n    // Check if connection already exists as a user\r\n    if (users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())) {\r\n      alert('This user has already been invited.');\r\n      return;\r\n    }\r\n\r\n    const newUser: UserPermission = {\r\n      id: generateId(),\r\n      name: connection.name,\r\n      email: connection.email,\r\n      avatar: connection.avatar,\r\n      permissionLevel: permissionLevel,\r\n      status: 'pending'\r\n    };\r\n\r\n    setUsers([...users, newUser]);\r\n    setShowInviteForm(false);\r\n  };\r\n\r\n  // Initialize connection permissions with default values\r\n  useEffect(() => {\r\n    const newPermissions: Record<string, PermissionLevel> = {};\r\n    connections.forEach(connection => {\r\n      if (!connectionPermissions[connection.id]) {\r\n        newPermissions[connection.id] = 'viewer';\r\n      }\r\n    });\r\n\r\n    if (Object.keys(newPermissions).length > 0) {\r\n      setConnectionPermissions(prev => ({ ...prev, ...newPermissions }));\r\n    }\r\n  }, [connections, connectionPermissions]);\r\n\r\n  const handleConnectionPermissionChange = (connectionId: string, permissionLevel: PermissionLevel) => {\r\n    setConnectionPermissions(prev => ({\r\n      ...prev,\r\n      [connectionId]: permissionLevel\r\n    }));\r\n  };\r\n\r\n  // Filter connections that are not already users\r\n  const availableConnections = connections.filter(\r\n    connection => !users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())\r\n  );\r\n\r\n  const handleUpdatePermission = (userId: string, permissionLevel: PermissionLevel) => {\r\n    setUsers(users.map(user =>\r\n      user.id === userId ? { ...user, permissionLevel } : user\r\n    ));\r\n    setEditingUserId(null);\r\n  };\r\n\r\n  const handleRemoveUser = (userId: string) => {\r\n    // Don't allow removing the owner\r\n    if (users.find(user => user.id === userId)?.permissionLevel === 'owner') {\r\n      alert('You cannot remove the owner of the template.');\r\n      return;\r\n    }\r\n\r\n    setUsers(users.filter(user => user.id !== userId));\r\n  };\r\n\r\n  const handleTransferOwnership = (userId: string) => {\r\n    // Find current owner and new owner\r\n    const currentOwner = users.find(user => user.permissionLevel === 'owner');\r\n    const newOwner = users.find(user => user.id === userId);\r\n\r\n    if (!currentOwner || !newOwner) return;\r\n\r\n    // Swap permissions\r\n    setUsers(users.map(user => {\r\n      if (user.id === currentOwner.id) {\r\n        return { ...user, permissionLevel: 'admin' };\r\n      }\r\n      if (user.id === userId) {\r\n        return { ...user, permissionLevel: 'owner' };\r\n      }\r\n      return user;\r\n    }));\r\n\r\n    setEditingUserId(null);\r\n  };\r\n\r\n  const copyShareLink = () => {\r\n    navigator.clipboard.writeText(shareLink);\r\n    setLinkCopied(true);\r\n    setTimeout(() => setLinkCopied(false), 2000);\r\n  };\r\n\r\n  // Filter users based on search term\r\n  const filteredUsers = users.filter(user =>\r\n    user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"access-manager\">\r\n      <div style={{ width: '100%', maxWidth: '1000px' }}>\r\n      <div className=\"access-header\">\r\n        <h2>Manage Access</h2>\r\n        <p>Control who can view and edit \"{templateTitle}\"</p>\r\n      </div>\r\n\r\n      {isLoading && (\r\n        <div style={{ textAlign: 'center', padding: '20px' }}>\r\n          <p>Loading user information...</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"access-actions\">\r\n        <div className=\"search-container\">\r\n          <Search size={18} className=\"search-icon\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search users...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"search-input\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"action-buttons\">\r\n          <button\r\n            className=\"share-link-button\"\r\n            onClick={() => setShowShareLink(!showShareLink)}\r\n          >\r\n            <ExternalLink size={16} />\r\n            Share Link\r\n          </button>\r\n\r\n          <button\r\n            className=\"invite-button\"\r\n            onClick={() => setShowInviteForm(!showInviteForm)}\r\n          >\r\n            <UserPlus size={16} />\r\n            Invite User\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {showShareLink && (\r\n        <div className=\"share-link-container\">\r\n          <div className=\"share-link-header\">\r\n            <h3>Share Template</h3>\r\n            <button className=\"close-button\" onClick={() => setShowShareLink(false)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n          <p>Anyone with this link can view this template:</p>\r\n          <div className=\"share-link-input\">\r\n            <input type=\"text\" value={shareLink} readOnly />\r\n            <button onClick={copyShareLink}>\r\n              <Copy size={16} />\r\n              {linkCopied ? 'Copied!' : 'Copy'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showInviteForm && (\r\n        <div className=\"invite-form\">\r\n          <div className=\"invite-form-header\">\r\n            <h3>Invite User</h3>\r\n            <button className=\"close-button\" onClick={() => setShowInviteForm(false)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"invite-tabs\">\r\n            <button\r\n              className={`invite-tab ${inviteTab === 'email' ? 'active' : ''}`}\r\n              onClick={() => setInviteTab('email')}\r\n            >\r\n              <Mail size={16} />\r\n              Email\r\n            </button>\r\n            <button\r\n              className={`invite-tab ${inviteTab === 'connections' ? 'active' : ''}`}\r\n              onClick={() => setInviteTab('connections')}\r\n            >\r\n              <Users size={16} />\r\n              My Connections\r\n            </button>\r\n          </div>\r\n\r\n          {inviteTab === 'email' ? (\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>Email Address</label>\r\n                <div className=\"email-input\">\r\n                  <Mail size={18} className=\"email-icon\" />\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email address\"\r\n                    value={newUserEmail}\r\n                    onChange={(e) => setNewUserEmail(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Permission Level\r\n                  <button\r\n                    className=\"info-button\"\r\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\r\n                  >\r\n                    <Info size={14} />\r\n                  </button>\r\n                </label>\r\n                <select\r\n                  value={newUserPermission}\r\n                  onChange={(e) => setNewUserPermission(e.target.value as PermissionLevel)}\r\n                >\r\n                  <option value=\"viewer\">Viewer</option>\r\n                  <option value=\"editor\">Editor</option>\r\n                  <option value=\"admin\">Administrator</option>\r\n                </select>\r\n              </div>\r\n\r\n              {showPermissionDetails && (\r\n                <div className=\"permission-details\">\r\n                  <div className=\"permission-item\">\r\n                    <h4>Viewer</h4>\r\n                    <p>Can view and use the template but cannot make changes</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Editor</h4>\r\n                    <p>Can edit template content but cannot publish or manage users</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Administrator</h4>\r\n                    <p>Can edit template, manage users, and publish</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Owner</h4>\r\n                    <p>Full control including template deletion and ownership transfer</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\r\n                <button\r\n                  className=\"send-invite-button\"\r\n                  onClick={handleAddUser}\r\n                  disabled={!newUserEmail.trim()}\r\n                >\r\n                  Send Invite\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Permission Levels\r\n                  <button\r\n                    className=\"info-button\"\r\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\r\n                  >\r\n                    <Info size={14} />\r\n                  </button>\r\n                </label>\r\n                <p className=\"permission-hint\">Set permission level for each connection individually</p>\r\n              </div>\r\n\r\n              {showPermissionDetails && (\r\n                <div className=\"permission-details\">\r\n                  <div className=\"permission-item\">\r\n                    <h4>Viewer</h4>\r\n                    <p>Can view and use the template but cannot make changes</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Editor</h4>\r\n                    <p>Can edit template content but cannot publish or manage users</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Administrator</h4>\r\n                    <p>Can edit template, manage users, and publish</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Owner</h4>\r\n                    <p>Full control including template deletion and ownership transfer</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"connections-list-container\">\r\n                <h4 className=\"connections-list-title\">\r\n                  Select from your connections\r\n                  <span className=\"connections-count\">({availableConnections.length})</span>\r\n                </h4>\r\n\r\n                {availableConnections.length === 0 ? (\r\n                  <div className=\"no-connections-message\">\r\n                    <p>All your connections have already been invited to this template.</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"connections-select-list\">\r\n                    {availableConnections.map(connection => (\r\n                      <div key={connection.id} className=\"connection-select-item\">\r\n                        <div className=\"connection-info\">\r\n                          {connection.avatar ? (\r\n                            <img src={connection.avatar} alt={connection.name} className=\"connection-avatar\" />\r\n                          ) : (\r\n                            <div className=\"connection-initials\">{connection.initials}</div>\r\n                          )}\r\n                          <div className=\"connection-details\">\r\n                            <span className=\"connection-name\">{connection.name}</span>\r\n                            <span className=\"connection-email\">{connection.email}</span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"connection-actions\">\r\n                          <select\r\n                            className=\"connection-permission-select\"\r\n                            value={connectionPermissions[connection.id] || 'viewer'}\r\n                            onChange={(e) => handleConnectionPermissionChange(connection.id, e.target.value as PermissionLevel)}\r\n                          >\r\n                            <option value=\"viewer\">Viewer</option>\r\n                            <option value=\"editor\">Editor</option>\r\n                            <option value=\"admin\">Admin</option>\r\n                          </select>\r\n                          <button\r\n                            className=\"add-connection-btn\"\r\n                            onClick={() => handleAddConnection(connection, connectionPermissions[connection.id] || 'viewer')}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"users-list-container\">\r\n        <div className=\"users-list-header\">\r\n          <div className=\"user-column\">User</div>\r\n          <div className=\"permission-column\">Permission</div>\r\n          <div className=\"status-column\">Status</div>\r\n          <div className=\"actions-column\">Actions</div>\r\n        </div>\r\n\r\n        <div className=\"users-list\">\r\n          {filteredUsers.length === 0 ? (\r\n            <div className=\"no-users\">\r\n              <AlertCircle size={24} />\r\n              <p>No users found matching \"{searchTerm}\"</p>\r\n            </div>\r\n          ) : (\r\n            filteredUsers.map(user => (\r\n              <div key={user.id} className=\"user-item\">\r\n                <div className=\"user-info\">\r\n                  <div className=\"user-avatar\">\r\n                    {user.avatar ? (\r\n                      <img src={user.avatar} alt={user.name} />\r\n                    ) : (\r\n                      <div className=\"avatar-placeholder\">\r\n                        {user.name.charAt(0).toUpperCase()}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"user-details\">\r\n                    <div className=\"user-name\">{user.name}</div>\r\n                    <div className=\"user-email\">{user.email}</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"user-permission\">\r\n                  {editingUserId === user.id ? (\r\n                    <select\r\n                      value={user.permissionLevel}\r\n                      onChange={(e) => handleUpdatePermission(user.id, e.target.value as PermissionLevel)}\r\n                      className=\"permission-select\"\r\n                    >\r\n                      <option value=\"viewer\">Viewer</option>\r\n                      <option value=\"editor\">Editor</option>\r\n                      <option value=\"admin\">Administrator</option>\r\n                      <option value=\"owner\">Owner (Transfer Ownership)</option>\r\n                    </select>\r\n                  ) : (\r\n                    <div className={`permission-badge ${user.permissionLevel}`}>\r\n                      <Shield size={14} />\r\n                      <span>{getPermissionLabel(user.permissionLevel)}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"user-status\">\r\n                  <div className={`status-badge ${user.status}`}>\r\n                    {user.status === 'active' && <Check size={14} />}\r\n                    {user.status === 'pending' && <Mail size={14} />}\r\n                    {user.status === 'expired' && <AlertCircle size={14} />}\r\n                    <span>{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"user-actions\">\r\n                  {user.permissionLevel !== 'owner' && (\r\n                    <>\r\n                      {editingUserId === user.id ? (\r\n                        <button\r\n                          className=\"save-button\"\r\n                          onClick={() => setEditingUserId(null)}\r\n                        >\r\n                          <Check size={16} />\r\n                        </button>\r\n                      ) : (\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => setEditingUserId(user.id)}\r\n                        >\r\n                          <Edit2 size={16} />\r\n                        </button>\r\n                      )}\r\n                      <button\r\n                        className=\"delete-button\"\r\n                        onClick={() => handleRemoveUser(user.id)}\r\n                      >\r\n                        <Trash2 size={16} />\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                  {user.permissionLevel === 'owner' && (\r\n                    <div className=\"owner-badge\">\r\n                      <User size={14} />\r\n                      <span>Owner</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccessManager;\r\n","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\components\\ConnectionsPanel.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\aqlTables.ts",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":193,"column":6,"nodeType":"95","endLine":193,"endColumn":8,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"97","line":176,"column":6,"nodeType":"95","endLine":176,"endColumn":20,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":1436,"column":9,"nodeType":"101","messageId":"102","endLine":1436,"endColumn":26},{"ruleId":"93","severity":1,"message":"103","line":279,"column":34,"nodeType":"101","endLine":279,"endColumn":41},{"ruleId":"99","severity":1,"message":"104","line":290,"column":23,"nodeType":"101","messageId":"102","endLine":290,"endColumn":38},{"ruleId":"99","severity":1,"message":"105","line":291,"column":20,"nodeType":"101","messageId":"102","endLine":291,"endColumn":32},{"ruleId":"99","severity":1,"message":"106","line":294,"column":25,"nodeType":"101","messageId":"102","endLine":294,"endColumn":42},{"ruleId":"99","severity":1,"message":"107","line":55,"column":10,"nodeType":"101","messageId":"102","endLine":55,"endColumn":19},{"ruleId":"99","severity":1,"message":"108","line":1615,"column":10,"nodeType":"101","messageId":"102","endLine":1615,"endColumn":20},{"ruleId":"99","severity":1,"message":"109","line":1615,"column":22,"nodeType":"101","messageId":"102","endLine":1615,"endColumn":35},{"ruleId":"99","severity":1,"message":"110","line":1617,"column":10,"nodeType":"101","messageId":"102","endLine":1617,"endColumn":22},{"ruleId":"93","severity":1,"message":"111","line":1754,"column":6,"nodeType":"95","endLine":1754,"endColumn":10,"suggestions":"112"},{"ruleId":"99","severity":1,"message":"113","line":2193,"column":15,"nodeType":"101","messageId":"102","endLine":2193,"endColumn":38},{"ruleId":"99","severity":1,"message":"114","line":73,"column":7,"nodeType":"101","messageId":"102","endLine":73,"endColumn":31},{"ruleId":"93","severity":1,"message":"115","line":145,"column":6,"nodeType":"95","endLine":145,"endColumn":51,"suggestions":"116"},{"ruleId":"99","severity":1,"message":"117","line":156,"column":10,"nodeType":"101","messageId":"102","endLine":156,"endColumn":30},{"ruleId":"99","severity":1,"message":"118","line":156,"column":32,"nodeType":"101","messageId":"102","endLine":156,"endColumn":55},{"ruleId":"99","severity":1,"message":"119","line":163,"column":23,"nodeType":"101","messageId":"102","endLine":163,"endColumn":37},{"ruleId":"99","severity":1,"message":"120","line":299,"column":9,"nodeType":"101","messageId":"102","endLine":299,"endColumn":32},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'endpointsToTry' and 'loggedInUser'. Either include them or remove the dependency array.","ArrayExpression",["123"],"React Hook useEffect has a missing dependency: 'endpointsToTry'. Either include it or remove the dependency array.",["124"],"@typescript-eslint/no-unused-vars","'evaluateAqlStatus' is assigned a value but never used.","Identifier","unusedVar","The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","'featuresVisible' is assigned a value but never used.","'statsVisible' is assigned a value but never used.","'industriesVisible' is assigned a value but never used.","'getCookie' is defined but never used.","'templateId' is assigned a value but never used.","'setTemplateId' is assigned a value but never used.","'templateData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getInitialTemplate'. Either include it or remove the dependency array.",["125"],"'_exhaustiveCheck' is assigned a value but never used.","'getPermissionDescription' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'createDefaultOwner'. Either include it or remove the dependency array.",["126"],"'showConnectionsModal' is assigned a value but never used.","'setShowConnectionsModal' is assigned a value but never used.","'setConnections' is assigned a value but never used.","'handleTransferOwnership' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"127","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [endpointsToTry, loggedInUser]",{"range":"134","text":"135"},{"range":"136","text":"135"},"Update the dependencies array to be: [getInitialTemplate, id]",{"range":"137","text":"138"},"Update the dependencies array to be: [currentUser, isLoading, initialUsers.length, createDefaultOwner]",{"range":"139","text":"140"},[6008,6010],"[endpointsToTry, loggedInUser]",[5398,5412],[63144,63148],"[getInitialTemplate, id]",[3737,3782],"[currentUser, isLoading, initialUsers.length, createDefaultOwner]"]