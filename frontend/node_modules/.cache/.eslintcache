[{"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\index.tsx":"1","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\App.tsx":"2","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\routes.tsx":"3","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\Dashboard.tsx":"4","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\home.tsx":"5","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\register.tsx":"6","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\TemplateView.tsx":"7","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\login.tsx":"8","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\Template.tsx":"9","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\Inspections.tsx":"10","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\Create_template.tsx":"11","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\Inspection.tsx":"12","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\garment-template.tsx":"13","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\utils\\api.ts":"14","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\utils\\csrf.ts":"15","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\utils\\aqlHelpers.ts":"16","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\components\\SimpleLogicRules.tsx":"17","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\components\\AccessManager.tsx":"18","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\components\\ConnectionsPanel.tsx":"19","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\components\\TemplateAssignmentManager.tsx":"20","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\utils\\aqlTables.ts":"21"},{"size":332,"mtime":1748008623353,"results":"22","hashOfConfig":"23"},{"size":244,"mtime":1748008623145,"results":"24","hashOfConfig":"23"},{"size":1521,"mtime":1748008623394,"results":"25","hashOfConfig":"23"},{"size":14204,"mtime":1748008623359,"results":"26","hashOfConfig":"23"},{"size":47999,"mtime":1748008623389,"results":"27","hashOfConfig":"23"},{"size":11204,"mtime":1748008623392,"results":"28","hashOfConfig":"23"},{"size":8303,"mtime":1748008623368,"results":"29","hashOfConfig":"23"},{"size":5533,"mtime":1748008623391,"results":"30","hashOfConfig":"23"},{"size":19780,"mtime":1748008623366,"results":"31","hashOfConfig":"23"},{"size":14384,"mtime":1748008623364,"results":"32","hashOfConfig":"23"},{"size":155813,"mtime":1748063194429,"results":"33","hashOfConfig":"23"},{"size":40956,"mtime":1748008623362,"results":"34","hashOfConfig":"23"},{"size":195276,"mtime":1748017714585,"results":"35","hashOfConfig":"23"},{"size":3286,"mtime":1748008623396,"results":"36","hashOfConfig":"23"},{"size":1118,"mtime":1748008623397,"results":"37","hashOfConfig":"23"},{"size":466,"mtime":1748008623396,"results":"38","hashOfConfig":"23"},{"size":19343,"mtime":1748011087054,"results":"39","hashOfConfig":"23"},{"size":23904,"mtime":1748018238938,"results":"40","hashOfConfig":"23"},{"size":11008,"mtime":1748008623375,"results":"41","hashOfConfig":"23"},{"size":17598,"mtime":1748008623380,"results":"42","hashOfConfig":"23"},{"size":4935,"mtime":1748008623397,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1ur73qj",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\index.tsx",[],["97","98"],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\App.tsx",[],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\routes.tsx",[],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\Dashboard.tsx",["99"],"import React, { useState, useEffect } from 'react';\r\nimport '../assets/Dashboard.css';\r\nimport {\r\n  Home,\r\n  Search,\r\n  Bell,\r\n  FileText,\r\n  ClipboardCheck,\r\n  Calendar,\r\n  Play,\r\n  BookOpen,\r\n  Package,\r\n  AlertCircle,\r\n  Settings,\r\n  User,\r\n  ChevronRight,\r\n  LogOut\r\n} from 'lucide-react';\r\nimport ConnectionsPanel, { Connection } from './components/ConnectionsPanel';\r\n\r\ninterface Template {\r\n  id: number;\r\n  title: string;\r\n  lastModified?: string;\r\n  access?: string;\r\n  createdBy: string;\r\n  type?: string;\r\n  status?: string;\r\n  date?: string;\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n  const [templates, setTemplates] = useState<Template[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // Get the logged-in user from localStorage\r\n  const loggedInUser = localStorage.getItem(\"username\");\r\n\r\n  // API endpoints to try\r\n  const endpointsToTry = [\r\n    \"/api/templates/\",\r\n    \"/templates_api/\",\r\n    \"/templates/\",\r\n    \"/api/v1/templates/\",\r\n    \"/api/user/templates/\",\r\n    \"/dashboard/templates/\",\r\n    \"/api/users/templates/\",\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      setIsScrolled(window.scrollY > 20);\r\n    };\r\n\r\n    const animateOnScroll = () => {\r\n      const elements = document.querySelectorAll('.dashboard-animate-on-scroll');\r\n      elements.forEach((element) => {\r\n        const rect = element as HTMLElement;\r\n        const position = rect.getBoundingClientRect();\r\n        if (position.top < window.innerHeight * 0.9) {\r\n          rect.classList.add('dashboard-animate-in');\r\n        }\r\n      });\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    window.addEventListener('scroll', animateOnScroll);\r\n    animateOnScroll();\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n      window.removeEventListener('scroll', animateOnScroll);\r\n    };\r\n  }, []);\r\n\r\n  // Fetch templates from API\r\n  useEffect(() => {\r\n    const fetchTemplates = async () => {\r\n      setLoading(true);\r\n      setError(\"\");\r\n\r\n      for (const endpoint of endpointsToTry) {\r\n        try {\r\n          const fullUrl = `http://127.0.0.1:8000${endpoint}`;\r\n          const response = await fetch(fullUrl);\r\n\r\n          if (response.ok) {\r\n            try {\r\n              console.log(\"Logged in user:\", loggedInUser);\r\n\r\n              const data = await response.json();\r\n              console.log(\"Full response data:\", data);\r\n              console.log(\"Template creators:\", data.map((t: Template) => t.createdBy || 'Unknown'));\r\n\r\n              // Filter templates by the logged-in user\r\n              const userTemplates = data.filter((template: Template) => template.createdBy === loggedInUser);\r\n\r\n              // Add type and status for display in the dashboard\r\n              const formattedTemplates = userTemplates.map((template: Template) => ({\r\n                ...template,\r\n                type: \"Template\",\r\n                status: \"Completed\",\r\n                date: template.lastModified || new Date().toISOString().split('T')[0]\r\n              }));\r\n\r\n              // Sort templates by date (most recent first) and take only the 3 most recent\r\n              const sortedTemplates = [...formattedTemplates].sort((a, b) => {\r\n                const dateA = a.date ? new Date(a.date).getTime() : 0;\r\n                const dateB = b.date ? new Date(b.date).getTime() : 0;\r\n                return dateB - dateA;\r\n              }).slice(0, 3);\r\n\r\n              setTemplates(sortedTemplates);\r\n              setLoading(false);\r\n              return;\r\n            } catch (err) {\r\n              console.error(\"Error parsing JSON:\", err);\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Error fetching from endpoint:\", endpoint, err);\r\n        }\r\n      }\r\n\r\n      // If we couldn't fetch from any endpoint, use demo data (only 3 most recent)\r\n      setError(\"Could not connect to any templates API endpoint\");\r\n\r\n      // Demo data with 3 recent templates\r\n      const demoTemplates = [\r\n        {\r\n          id: 1,\r\n          title: \"Safety Inspection Form (Demo)\",\r\n          lastModified: \"2024-03-01\",\r\n          access: \"All users\",\r\n          createdBy: \"demoUser\",\r\n          type: \"Template\",\r\n          status: \"Completed\",\r\n          date: \"2024-03-01\"\r\n        },\r\n        {\r\n          id: 2,\r\n          title: \"Weekly Equipment Check (Demo)\",\r\n          lastModified: \"2024-02-28\",\r\n          access: \"Team managers\",\r\n          createdBy: \"demoUser\",\r\n          type: \"Template\",\r\n          status: \"In Progress\",\r\n          date: \"2024-02-28\"\r\n        },\r\n        {\r\n          id: 3,\r\n          title: \"Monthly Fire Safety Audit (Demo)\",\r\n          lastModified: \"2024-02-27\",\r\n          access: \"Safety officers\",\r\n          createdBy: \"demoUser\",\r\n          type: \"Template\",\r\n          status: \"Completed\",\r\n          date: \"2024-02-27\"\r\n        },\r\n      ];\r\n\r\n      // Sort by date (most recent first)\r\n      const sortedDemoTemplates = [...demoTemplates].sort((a, b) => {\r\n        const dateA = a.date ? new Date(a.date).getTime() : 0;\r\n        const dateB = b.date ? new Date(b.date).getTime() : 0;\r\n        return dateB - dateA;\r\n      });\r\n\r\n      setTemplates(sortedDemoTemplates);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchTemplates();\r\n  }, [loggedInUser]);\r\n\r\n  const [connections, setConnections] = useState<Connection[]>([{\r\n    id: '1', name: 'Grace Miller', email: 'grace.miller@example.com', initials: 'GM', status: 'active'\r\n  }, {\r\n    id: '2', name: 'John Martinez', email: 'john.martinez@example.com', initials: 'JM', status: 'active'\r\n  }, {\r\n    id: '3', name: 'Sarah Johnson', email: 'sarah.johnson@example.com', initials: 'SJ', status: 'active'\r\n  }, {\r\n    id: '4', name: 'Michael Brown', email: 'michael.brown@example.com', initials: 'MB', status: 'active'\r\n  }, {\r\n    id: '5', name: 'Emily Davis', email: 'emily.davis@example.com', initials: 'ED', status: 'active'\r\n  }]);\r\n\r\n  const handleAddConnection = (email: string) => {\r\n    const name = email.split('@')[0].split('.').map(part => part.charAt(0).toUpperCase() + part.slice(1)).join(' ');\r\n    const initials = name.split(' ').map(part => part.charAt(0)).join('').toUpperCase();\r\n    const newConnection: Connection = {\r\n      id: Date.now().toString(), name, email, initials, status: 'pending'\r\n    };\r\n    setConnections([...connections, newConnection]);\r\n  };\r\n\r\n  const handleRemoveConnection = (id: string) => {\r\n    setConnections(connections.filter(connection => connection.id !== id));\r\n  };\r\n\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('authToken');\r\n    window.location.href = '/login';\r\n  };\r\n\r\n  const toggleDropdown = () => setIsDropdownOpen(!isDropdownOpen);\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutsideSettings = (event: MouseEvent) => {\r\n      const target = event.target as Node;\r\n      const settingsButton = document.querySelector('.dashboard-nav-button');\r\n      const dropdownMenu = document.querySelector('.dropdown-menu');\r\n\r\n      if (\r\n        isDropdownOpen &&\r\n        settingsButton &&\r\n        dropdownMenu &&\r\n        !settingsButton.contains(target) &&\r\n        !dropdownMenu.contains(target)\r\n      ) {\r\n        setIsDropdownOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutsideSettings);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutsideSettings);\r\n    };\r\n  }, [isDropdownOpen]);\r\n\r\n  const menuItems = [\r\n    { icon: Home, label: 'Home', href: '/dashboard' },\r\n    { icon: Search, label: 'Search', href: '/search' },\r\n    { icon: Bell, label: 'Notifications', href: '/notifications' },\r\n    { icon: FileText, label: 'Templates', href: '/templates' },\r\n    { icon: ClipboardCheck, label: 'Inspections', href: '/inspections' },\r\n    { icon: Calendar, label: 'Schedule', href: '/schedule' },\r\n    { icon: Play, label: 'Actions', href: '/actions' },\r\n    { icon: BookOpen, label: 'Training', href: '/training' },\r\n    { icon: Package, label: 'Assets', href: '/assets' },\r\n    { icon: AlertCircle, label: 'Issues', href: '/issues' },\r\n  ];\r\n\r\n  const summaryCards = [\r\n    { icon: FileText, count: templates.length.toString(), label: 'Templates Created' },\r\n    { icon: ClipboardCheck, count: '18/25', label: 'Inspections', sublabel: 'Completed/Total' },\r\n    { icon: AlertCircle, count: '3', label: 'Open Issues' }\r\n  ];\r\n\r\n  // We'll use the templates fetched from the API instead of hardcoded data\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      <nav className={`dashboard-navbar ${isScrolled ? 'scrolled' : ''}`}>\r\n        <div className=\"dashboard-navbar-brand\">STREAMLINEER</div>\r\n        <div className=\"dashboard-navbar-actions\">\r\n          <button className=\"dashboard-nav-button\">\r\n            <User className=\"dashboard-nav-icon\" />\r\n          </button>\r\n          <div className=\"dropdown-container\">\r\n            <button\r\n              className=\"dashboard-nav-button\"\r\n              onClick={toggleDropdown}\r\n              style={{\r\n                position: 'relative',\r\n                backgroundColor: isDropdownOpen ? 'rgba(72, 149, 239, 0.1)' : 'transparent'\r\n              }}\r\n              title=\"Settings\"\r\n            >\r\n              <Settings className=\"dashboard-nav-icon\" />\r\n            </button>\r\n            {isDropdownOpen && (\r\n              <div className=\"dropdown-menu\">\r\n                <button\r\n                  className=\"dropdown-item logout-button\"\r\n                  onClick={handleLogout}\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '0.75rem',\r\n                    padding: '0.75rem 1.5rem',\r\n                    background: 'linear-gradient(135deg, #ff4b4b 0%, #ff6b6b 100%)',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    borderRadius: 'var(--border-radius)',\r\n                    fontSize: '0.95rem',\r\n                    fontWeight: '600',\r\n                    cursor: 'pointer',\r\n                    transition: 'var(--transition)',\r\n                    margin: '0.5rem 1rem',\r\n                    boxShadow: 'var(--shadow-sm)',\r\n                    width: 'calc(100% - 2rem)'\r\n                  }}\r\n                >\r\n                  <LogOut size={18} />\r\n                  <span>Logout</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <aside className=\"dashboard-sidebar\">\r\n        <nav className=\"dashboard-sidebar-nav\">\r\n          {menuItems.map((item, index) => (\r\n            <a key={index} href={item.href} className=\"dashboard-nav-link\">\r\n              <item.icon className=\"dashboard-nav-icon\" />\r\n              <span>{item.label}</span>\r\n            </a>\r\n          ))}\r\n        </nav>\r\n      </aside>\r\n\r\n      <main className=\"dashboard-main-content\">\r\n        <div className=\"dashboard-header-section\">\r\n          <h1 className=\"dashboard-page-title\">Dashboard Overview</h1>\r\n          <div className=\"dashboard-user-tags\">\r\n            <ConnectionsPanel\r\n              connections={connections}\r\n              onAddConnection={handleAddConnection}\r\n              onRemoveConnection={handleRemoveConnection}\r\n              maxDisplayed={3}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"dashboard-summary-cards\">\r\n          {summaryCards.map((card, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"dashboard-summary-card dashboard-animate-on-scroll\"\r\n              style={{ animationDelay: `${index * 0.15}s` }}\r\n            >\r\n              <div className=\"dashboard-card-content\">\r\n                <div className=\"dashboard-card-icon\">\r\n                  <card.icon className=\"dashboard-icon\" />\r\n                </div>\r\n                <div className=\"dashboard-card-info\">\r\n                  <h3 className=\"dashboard-card-count\">{card.count}</h3>\r\n                  <p className=\"dashboard-card-label\">{card.label}</p>\r\n                  {card.sublabel && <span className=\"dashboard-card-sublabel\">{card.sublabel}</span>}\r\n                </div>\r\n              </div>\r\n              <ChevronRight className=\"dashboard-card-arrow\" />\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <section className=\"dashboard-recent-activity dashboard-animate-on-scroll\">\r\n          <h2 className=\"dashboard-section-title\">Recent Templates</h2>\r\n\r\n          {loading && (\r\n            <div className=\"dashboard-loading\">Loading recent templates...</div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"dashboard-error-message\">\r\n              {error}\r\n              <p>Showing demo data for display purposes.</p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"dashboard-activity-list\">\r\n            {templates.length === 0 && !loading ? (\r\n              <div className=\"dashboard-no-activity\">\r\n                <p>No recent templates found. Create a template to get started.</p>\r\n              </div>\r\n            ) : (\r\n              templates.map((template) => (\r\n                <div key={template.id} className=\"dashboard-activity-item\">\r\n                  <div className=\"dashboard-activity-info\">\r\n                    <h3 className=\"dashboard-activity-title\">{template.title}</h3>\r\n                    <div className=\"dashboard-activity-meta\">\r\n                      <span className=\"dashboard-meta-type\">{template.type}</span>\r\n                      <span className=\"dashboard-meta-date\">{template.date}</span>\r\n                    </div>\r\n                  </div>\r\n                  <span className={`dashboard-status-badge ${template.status?.toLowerCase() || 'completed'}`}>\r\n                    {template.status || 'Completed'}\r\n                  </span>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\home.tsx",["100","101","102","103"],"\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useState, useEffect, useRef } from \"react\"\r\nimport {\r\n  ChevronDown,\r\n  Menu,\r\n  X,\r\n  ArrowRight,\r\n  Check,\r\n  Zap,\r\n  Shield,\r\n  BarChart3,\r\n  Clock,\r\n  FileCheck,\r\n  Smartphone,\r\n  PenTool,\r\n  Users,\r\n  Building,\r\n  Car,\r\n  Clipboard,\r\n  CheckCircle2,\r\n  AlertTriangle,\r\n  Wrench,\r\n  ArrowUpRight,\r\n  MousePointer,\r\n  ChevronRight,\r\n  Star,\r\n  Award,\r\n  Sparkles,\r\n} from \"lucide-react\"\r\nimport \"../pages/Home2.css\"\r\n\r\n// Import Streamlineer QC images\r\nimport Streamlineer_QC_1 from \"../assets/img/Streamlineer_QC_1.png\"\r\nimport Streamlineer_QC_2 from \"../assets/img/Streamlineer_QC_2.png\"\r\nimport Streamlineer_QC_3 from \"../assets/img/Streamlineer_QC_3.png\"\r\nimport Streamlineer_QC_4 from \"../assets/img/Streamlineer_QC_4.png\"\r\nimport Streamlineer_QC_5 from \"../assets/img/Streamlineer_QC_5.png\"\r\nimport DG from \"../assets/img/DG.png\"\r\nimport TM from \"../assets/img/TM.png\"\r\nimport RP from \"../assets/img/RP.png\"\r\nimport NX from \"../assets/img/NX.png\"\r\nimport HX from \"../assets/img/HX.png\"\r\nimport AZ from \"../assets/img/AZ.png\"\r\n\r\n// Custom Image component to replace Next.js Image\r\nconst Image = ({\r\n  src,\r\n  alt,\r\n  width,\r\n  height,\r\n  className,\r\n}: {\r\n  src: string\r\n  alt: string\r\n  width: number\r\n  height: number\r\n  className?: string\r\n}) => {\r\n  return (\r\n    <img\r\n      src={src || \"/placeholder.svg\"}\r\n      alt={alt}\r\n      width={width}\r\n      height={height}\r\n      className={className}\r\n      style={{ maxWidth: \"100%\", height: \"auto\" }}\r\n    />\r\n  )\r\n}\r\n\r\nconst Home2: React.FC = () => {\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\r\n  const [activeTab, setActiveTab] = useState(0)\r\n  const [activeFaq, setActiveFaq] = useState<number | null>(null)\r\n  const [currentBg, setCurrentBg] = useState(0)\r\n  const [isScrolled, setIsScrolled] = useState(false)\r\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })\r\n  const cursorRef = useRef<HTMLDivElement>(null)\r\n\r\n  // Background images for header\r\n  const bgImages = [\r\n    Streamlineer_QC_1,\r\n    Streamlineer_QC_2,\r\n    Streamlineer_QC_3,\r\n    Streamlineer_QC_4,\r\n    Streamlineer_QC_5,\r\n  ]\r\n\r\n  // Tabs for features section\r\n  const tabs = [\r\n    {\r\n      title: \"Template Builder\",\r\n      icon: <PenTool size={20} />,\r\n      contentTitle: \"Intuitive Drag-and-Drop Template Builder\",\r\n      description:\r\n        \"Create any checklist or form you need. Utilize diverse question types (text, number, multiple-choice, signature, photo, GPS), add conditional logic, scoring, mandatory fields, and instructional media.\",\r\n      image: DG,\r\n    },\r\n    {\r\n      title: \"Mobile Inspections\",\r\n      icon: <Smartphone size={20} />,\r\n      contentTitle: \"Powerful Mobile Inspection App\",\r\n      description:\r\n        \"The easy-to-use app for iOS & Android ensures seamless inspections. Works flawlessly offline, allows rich data capture (annotated photos, notes), and provides access to relevant templates anytime.\",\r\n      image: TM,\r\n    },\r\n    {\r\n      title: \"Instant Reporting\",\r\n      icon: <FileCheck size={20} />,\r\n      contentTitle: \"Automated Inspection Reporting\",\r\n      description:\r\n        \"Forget manual report writing. Generate customizable PDF or web reports instantly after each inspection. Visualize data, track completion rates, and identify trends on dashboards.\",\r\n      image: RP,\r\n    },\r\n    {\r\n      title: \"Findings & Actions\",\r\n      icon: <AlertTriangle size={20} />,\r\n      contentTitle: \"Integrated Findings & Action Tracking\",\r\n      description:\r\n        \"Flag issues or non-conformances directly within an inspection. Assign corrective actions with deadlines and track their status to ensure prompt resolution, all linked back to the original inspection.\",\r\n      image: NX,\r\n    },\r\n  ]\r\n\r\n  // Stats for metrics section\r\n  const stats = [\r\n    { value: \"90%\", label: \"Faster Template Creation & Updates\" },\r\n    { value: \"50%\", label: \"Reduction in Inspection Time\" },\r\n    { value: \"100%\", label: \"Data Consistency Across Inspections\" },\r\n    { value: \"Instant\", label: \"Access to Completed Reports\" },\r\n  ]\r\n\r\n  // Industries for use cases section\r\n  const industries = [\r\n    { icon: <Shield size={24} />, title: \"Safety Walkthroughs & Audits\" },\r\n    { icon: <CheckCircle2 size={24} />, title: \"Quality Assurance Checklists\" },\r\n    { icon: <Wrench size={24} />, title: \"Preventative Maintenance Forms\" },\r\n    { icon: <Car size={24} />, title: \"Vehicle & Equipment Inspections\" },\r\n    { icon: <Building size={24} />, title: \"Facility & Site Inspections\" },\r\n    { icon: <Clipboard size={24} />, title: \"Regulatory Compliance Audits\" },\r\n    { icon: <Users size={24} />, title: \"Training Assessments & Sign-offs\" },\r\n    { icon: <BarChart3 size={24} />, title: \"Inventory & Stock Checks\" },\r\n  ]\r\n\r\n\r\n\r\n  // FAQs\r\n  const faqs = [\r\n    {\r\n      question: \"What types of questions/fields can I add to templates?\",\r\n      answer:\r\n        \"StreamLineer supports a wide range of field types including text, number, multiple choice, checkboxes, dropdown menus, date/time pickers, photo capture with annotation, signature fields, GPS location, barcode/QR scanning, and scoring fields. You can also add instructional text, images, or videos to guide inspectors.\",\r\n    },\r\n    {\r\n      question: \"How are templates shared and updated for field users?\",\r\n      answer:\r\n        \"Templates are centrally managed in the cloud. When you publish a new template or update an existing one, it's automatically synced to all users' mobile devices the next time they connect to the internet. Version control ensures everyone is always using the latest template version.\",\r\n    },\r\n    {\r\n      question: \"Does the mobile app work without an internet connection?\",\r\n      answer:\r\n        \"Yes, the StreamLineer mobile app is designed to work completely offline. Users can download templates when connected, conduct inspections without internet access, and all data is securely stored on the device until they reconnect, at which point it automatically syncs to the cloud.\",\r\n    },\r\n    {\r\n      question: \"Can I generate different report formats from inspections?\",\r\n      answer:\r\n        \"Absolutely. Fashcognitive offers customizable PDF reports with your branding, web-based interactive reports, and raw data exports in CSV or Excel format. You can create multiple report templates for different audiences or purposes from the same inspection data.\",\r\n    },\r\n    {\r\n      question: \"How are findings or failed items handled during an inspection?\",\r\n      answer:\r\n        \"When an inspector identifies an issue during an inspection, they can flag it as a finding, add photos and notes, assign a severity level, and create an action item directly from that finding. These actions can be assigned to team members with due dates and tracked to completion.\",\r\n    },\r\n    {\r\n      question: \"Is there a limit to the number of templates or inspections?\",\r\n      answer:\r\n        \"Our Professional and Enterprise plans include unlimited templates and inspections. The Starter plan includes up to 10 templates and 100 inspections per month. All plans can be upgraded as your needs grow.\",\r\n    },\r\n  ]\r\n\r\n  // Workflow steps with enhanced content\r\n  const workflowSteps = [\r\n    {\r\n      number: 1,\r\n      icon: <PenTool size={32} />,\r\n      title: \"Build\",\r\n      description:\r\n        \"Craft intelligent inspection templates effortlessly using our powerful, user-friendly builder. Add various field types and logic.\",\r\n      color: \"#4895ef\",\r\n      highlights: [\"Drag-and-drop interface\", \"Conditional logic\", \"Multiple question types\", \"Template versioning\"],\r\n    },\r\n    {\r\n      number: 2,\r\n      icon: <Smartphone size={32} />,\r\n      title: \"Inspect\",\r\n      description:\r\n        \"Conduct thorough inspections anywhere using the intuitive mobile app – even offline. Capture rich data quickly and easily.\",\r\n      color: \"#3a7bc8\",\r\n      highlights: [\"Works offline\", \"Photo annotations\", \"GPS location tracking\", \"Digital signatures\"],\r\n    },\r\n    {\r\n      number: 3,\r\n      icon: <FileCheck size={32} />,\r\n      title: \"Report\",\r\n      description:\r\n        \"Access detailed inspection reports instantly upon completion. Analyze performance with real-time dashboards.\",\r\n      color: \"#4cc9f0\",\r\n      highlights: [\"Instant PDF generation\", \"Custom report templates\", \"Data visualization\", \"Export options\"],\r\n    },\r\n    {\r\n      number: 4,\r\n      icon: <Zap size={32} />,\r\n      title: \"Act\",\r\n      description:\r\n        \"Identify findings during inspections and assign corrective actions directly within the app for seamless follow-up.\",\r\n      color: \"#3f37c9\",\r\n      highlights: [\"Action assignment\", \"Due date tracking\", \"Notification system\", \"Completion verification\"],\r\n    },\r\n  ]\r\n\r\n  // Background image rotation effect\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentBg((prev) => (prev + 1) % bgImages.length)\r\n    }, 3000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [bgImages.length])\r\n\r\n  // Scroll effect for header\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      if (window.scrollY > 50) {\r\n        setIsScrolled(true)\r\n      } else {\r\n        setIsScrolled(false)\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"scroll\", handleScroll)\r\n    return () => window.removeEventListener(\"scroll\", handleScroll)\r\n  }, [])\r\n\r\n  // Mouse move effect\r\n  useEffect(() => {\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const { clientX, clientY } = e\r\n      setMousePosition({ x: clientX, y: clientY })\r\n\r\n      // Update custom cursor position\r\n      if (cursorRef.current) {\r\n        cursorRef.current.style.left = `${clientX}px`\r\n        cursorRef.current.style.top = `${clientY}px`\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"mousemove\", handleMouseMove)\r\n    return () => window.removeEventListener(\"mousemove\", handleMouseMove)\r\n  }, [])\r\n\r\n  // Intersection Observer for animations\r\n  const useOnScreen = (options = {}) => {\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    const [isVisible, setIsVisible] = useState(false)\r\n\r\n    useEffect(() => {\r\n      const observer = new IntersectionObserver(([entry]) => {\r\n        setIsVisible(entry.isIntersecting)\r\n      }, options)\r\n\r\n      if (ref.current) {\r\n        observer.observe(ref.current)\r\n      }\r\n\r\n      return () => {\r\n        if (ref.current) {\r\n          observer.unobserve(ref.current)\r\n        }\r\n      }\r\n    }, [ref, options])\r\n\r\n    return [ref, isVisible] as const\r\n  }\r\n\r\n  // Refs for scroll animations\r\n  const [heroRef, heroVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [workflowRef, workflowVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [featuresRef, featuresVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [statsRef, statsVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [templateRef, templateVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [mobileRef, mobileVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [industriesRef, industriesVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [ctaRef, ctaVisible] = useOnScreen({ threshold: 0.1 })\r\n\r\n  // Custom cursor state management\r\n  const [cursorVariant, setCursorVariant] = useState(\"default\")\r\n\r\n  // Function to enter button cursor state\r\n  const enterButton = () => setCursorVariant(\"button\")\r\n  // Function to enter link cursor state\r\n  const enterLink = () => setCursorVariant(\"link\")\r\n  // Function to reset cursor state\r\n  const leaveHover = () => setCursorVariant(\"default\")\r\n\r\n  // Apply 3D tilt effect to an element\r\n  const applyTiltEffect = (element: HTMLElement, mouseX: number, mouseY: number) => {\r\n    if (!element) return\r\n\r\n    const rect = element.getBoundingClientRect()\r\n    const centerX = rect.left + rect.width / 2\r\n    const centerY = rect.top + rect.height / 2\r\n\r\n    const rotateY = ((mouseX - centerX) / (window.innerWidth / 2)) * 5\r\n    const rotateX = ((centerY - mouseY) / (window.innerHeight / 2)) * 5\r\n\r\n    element.style.transform = `perspective(1000px) rotateY(${rotateY}deg) rotateX(${rotateX}deg)`\r\n  }\r\n\r\n  // Apply tilt effect to hero image\r\n  useEffect(() => {\r\n    const heroImage = document.querySelector(\".Home2-hero-image-container\") as HTMLElement\r\n    const templateImage = document.querySelector(\".Home2-template-img-container\") as HTMLElement\r\n    const mobileImage = document.querySelector(\".Home2-mobile-img-container\") as HTMLElement\r\n\r\n    if (heroImage && heroVisible) {\r\n      applyTiltEffect(heroImage, mousePosition.x, mousePosition.y)\r\n    }\r\n\r\n    if (templateImage && templateVisible) {\r\n      applyTiltEffect(templateImage, mousePosition.x, mousePosition.y)\r\n    }\r\n\r\n    if (mobileImage && mobileVisible) {\r\n      applyTiltEffect(mobileImage, mousePosition.x, mousePosition.y)\r\n    }\r\n  }, [mousePosition, heroVisible, templateVisible, mobileVisible])\r\n\r\n  // Initialize floating elements animation\r\n  useEffect(() => {\r\n    const floatingElements = document.querySelectorAll(\".Home2-floating-element\")\r\n\r\n    floatingElements.forEach((element, index) => {\r\n      const el = element as HTMLElement\r\n      const duration = 6 + index * 2\r\n      const delay = index * 0.5\r\n\r\n      // Set initial animation properties\r\n      el.style.animation = `float ${duration}s ease-in-out ${delay}s infinite alternate`\r\n    })\r\n  }, [])\r\n\r\n  // Initialize scroll animations\r\n  useEffect(() => {\r\n    const animateOnScroll = () => {\r\n      const elements = document.querySelectorAll(\".Home2-animate-on-scroll\")\r\n\r\n      elements.forEach((element) => {\r\n        const el = element as HTMLElement\r\n        const rect = el.getBoundingClientRect()\r\n\r\n        if (rect.top < window.innerHeight * 0.8) {\r\n          el.classList.add(\"Home2-animate-in\")\r\n        }\r\n      })\r\n    }\r\n\r\n    window.addEventListener(\"scroll\", animateOnScroll)\r\n    animateOnScroll() // Run once on mount\r\n\r\n    return () => window.removeEventListener(\"scroll\", animateOnScroll)\r\n  }, [])\r\n\r\n  // Initialize progress indicators for workflow steps\r\n  useEffect(() => {\r\n    if (workflowVisible) {\r\n      const progressIndicators = document.querySelectorAll(\".Home2-step-progress-indicator\")\r\n\r\n      progressIndicators.forEach((indicator, index) => {\r\n        const el = indicator as HTMLElement\r\n        setTimeout(\r\n          () => {\r\n            el.style.width = \"100%\"\r\n          },\r\n          300 + index * 200,\r\n        )\r\n      })\r\n    }\r\n  }, [workflowVisible])\r\n\r\n  // FAQ animation\r\n  const toggleFaq = (index: number) => {\r\n    // Toggle the active FAQ without hiding any questions\r\n    if (activeFaq === index) {\r\n      setActiveFaq(null)\r\n    } else {\r\n      setActiveFaq(index)\r\n    }\r\n\r\n    // Ensure all FAQ items remain visible after a short delay\r\n    setTimeout(() => {\r\n      const faqItems = document.querySelectorAll('.Home2-faq-item')\r\n      faqItems.forEach(item => {\r\n        const element = item as HTMLElement\r\n        element.style.opacity = '1'\r\n        element.style.visibility = 'visible'\r\n        element.style.display = 'block'\r\n      })\r\n\r\n      const faqQuestions = document.querySelectorAll('.Home2-faq-question')\r\n      faqQuestions.forEach(question => {\r\n        const element = question as HTMLElement\r\n        element.style.opacity = '1'\r\n        element.style.visibility = 'visible'\r\n      })\r\n    }, 50)\r\n  }\r\n\r\n  return (\r\n    <div className=\"Home2-streamlineer-container\">\r\n      {/* Custom cursor */}\r\n      <div ref={cursorRef} className={`Home2-custom-cursor ${cursorVariant === \"button\" ? \"Home2-button\" : cursorVariant === \"link\" ? \"Home2-link\" : \"\"}`}>\r\n        <MousePointer size={12} />\r\n      </div>\r\n\r\n      {/* Header with animated background */}\r\n      <header className={`Home2-header ${isScrolled ? \"Home2-scrolled\" : \"\"}`}>\r\n        <div className=\"Home2-header-content\">\r\n          <div className=\"Home2-logo\">\r\n            <span className=\"Home2-logo-text\">STREAMLINEER</span>\r\n          </div>\r\n\r\n          <button\r\n            className=\"Home2-menu-toggle\"\r\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\r\n            aria-label={isMenuOpen ? \"Close menu\" : \"Open menu\"}\r\n            onMouseEnter={enterButton}\r\n            onMouseLeave={leaveHover}\r\n          >\r\n            {isMenuOpen ? <X size={24} /> : <Menu size={24} />}\r\n          </button>\r\n\r\n          <nav className={`Home2-main-nav ${isMenuOpen ? \"Home2-open\" : \"\"}`}>\r\n            <ul className=\"Home2-nav-list\">\r\n              <li className=\"Home2-nav-item\">\r\n                <a href=\"#features\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                  Features <ChevronDown size={16} />\r\n                </a>\r\n                <div className=\"Home2-dropdown-menu\">\r\n                  <a href=\"#template-builder\" className=\"Home2-dropdown-item\">\r\n                    Template Builder\r\n                  </a>\r\n                  <a href=\"#mobile-app\" className=\"Home2-dropdown-item\">\r\n                    Mobile App\r\n                  </a>\r\n                  <a href=\"#reporting\" className=\"Home2-dropdown-item\">\r\n                    Reporting\r\n                  </a>\r\n                  <a href=\"#actions\" className=\"Home2-dropdown-item\">\r\n                    Action Tracking\r\n                  </a>\r\n                </div>\r\n              </li>\r\n              <li className=\"Home2-nav-item\">\r\n                <a href=\"#templates\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                  Templates\r\n                </a>\r\n              </li>\r\n              <li className=\"Home2-nav-item\">\r\n                <a href=\"#pricing\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                  Pricing\r\n                </a>\r\n              </li>\r\n              <li className=\"Home2-nav-item\">\r\n                <a href=\"#resources\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                  Resources <ChevronDown size={16} />\r\n                </a>\r\n                <div className=\"Home2-dropdown-menu\">\r\n                  <a href=\"#blog\" className=\"Home2-dropdown-item\">\r\n                    Blog\r\n                  </a>\r\n                  <a href=\"#guides\" className=\"Home2-dropdown-item\">\r\n                    Guides\r\n                  </a>\r\n                  <a href=\"#support\" className=\"Home2-dropdown-item\">\r\n                    Support\r\n                  </a>\r\n                </div>\r\n              </li>\r\n              <li className=\"Home2-nav-item\">\r\n                <a href=\"#contact\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                  Contact Us\r\n                </a>\r\n              </li>\r\n            </ul>\r\n\r\n            <div className=\"Home2-nav-buttons\">\r\n              <a href=\"login\" className=\"Home2-btn Home2-btn-outline\" onMouseEnter={enterButton} onMouseLeave={leaveHover}>\r\n                Log In\r\n              </a>\r\n              <a href=\"register\" className=\"Home2-btn Home2-btn-primary\" onMouseEnter={enterButton} onMouseLeave={leaveHover}>\r\n                Start Free\r\n              </a>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Hero Section */}\r\n      <section className=\"Home2-hero-section\" ref={heroRef}>\r\n        <div className=\"Home2-container\">\r\n          <div className=\"Home2-hero-flex\">\r\n            <div className={`Home2-hero-content ${heroVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n              <h1 className=\"Home2-hero-title\">\r\n                Build Smarter\r\n                <br />\r\n                Checklists<span className=\"Home2-accent-dot\">.</span>\r\n                <br />\r\n                Conduct Flawless\r\n                <br />\r\n                Inspections<span className=\"Home2-accent-dot\">.</span>\r\n              </h1>\r\n              <p className=\"Home2-hero-subtitle\">\r\n                The intuitive platform for rapidly creating powerful, dynamic inspection templates and empowering your\r\n                teams to execute thorough checks anywhere, capture critical data accurately, and generate instant\r\n                reports.\r\n              </p>\r\n              <div className=\"Home2-hero-buttons\">\r\n                <a\r\n                  href=\"register\"\r\n                  className=\"Home2-btn Home2-btn-primary Home2-btn-lg Home2-btn-hover-effect\"\r\n                  onMouseEnter={enterButton}\r\n                  onMouseLeave={leaveHover}\r\n                >\r\n                  Start Building Templates Free\r\n                </a>\r\n                <a\r\n                  href=\"#demo\"\r\n                  className=\"Home2-btn Home2-btn-outline Home2-btn-lg Home2-btn-hover-effect\"\r\n                  onMouseEnter={enterButton}\r\n                  onMouseLeave={leaveHover}\r\n                >\r\n                  See Inspection Features\r\n                </a>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={`Home2-hero-image-container ${heroVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n              <div className=\"Home2-hero-image-slider\">\r\n                {bgImages.map((img, index) => (\r\n                  <div key={index} className={`Home2-hero-slide ${currentBg === index ? \"Home2-active\" : \"\"}`}>\r\n                    <Image\r\n                      src={img || \"/placeholder.svg\"}\r\n                      alt={`StreamLineer platform ${index + 1}`}\r\n                      width={600}\r\n                      height={600}\r\n                      className=\"Home2-hero-img\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              {/* Image navigation dots */}\r\n              <div className=\"Home2-image-nav-dots\">\r\n                {bgImages.map((_, index) => (\r\n                  <button\r\n                    key={index}\r\n                    className={`Home2-nav-dot ${currentBg === index ? \"Home2-active\" : \"\"}`}\r\n                    onClick={() => setCurrentBg(index)}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Fixed wave position to not hide buttons */}\r\n        <div className=\"Home2-hero-wave-container\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\" className=\"Home2-hero-wave\">\r\n            <path\r\n              fill=\"#ffffff\"\r\n              fillOpacity=\"1\"\r\n              d=\"M0,96L48,112C96,128,192,160,288,160C384,160,480,128,576,122.7C672,117,768,139,864,149.3C960,160,1056,160,1152,138.7C1248,117,1344,75,1392,53.3L1440,32L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n            ></path>\r\n          </svg>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Enhanced Workflow section */}\r\n      <section className=\"Home2-workflow-section\" ref={workflowRef}>\r\n        <div className=\"Home2-container\">\r\n          <div className={`Home2-workflow-header Home2-animate-on-scroll ${workflowVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n            <h2 className=\"Home2-section-title\">Your Inspection Workflow, Simplified</h2>\r\n            <p className=\"Home2-section-subtitle\">\r\n              Our streamlined process makes inspections efficient from creation to action\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"Home2-workflow-steps-container\">\r\n            {workflowSteps.map((step, index) => (\r\n              <div\r\n                key={index}\r\n                className={`Home2-workflow-step-card Home2-animate-on-scroll`}\r\n                style={{\r\n                  borderTop: `4px solid ${step.color}`,\r\n                  animationDelay: `${index * 0.15}s`,\r\n                }}\r\n              >\r\n                <div className=\"Home2-step-number-container\">\r\n                  <div className=\"Home2-step-number\" style={{ backgroundColor: step.color }}>\r\n                    {step.number}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"Home2-step-icon-container\" style={{ color: step.color }}>\r\n                  {step.icon}\r\n                </div>\r\n\r\n                <h3 className=\"Home2-step-title\">{step.title}</h3>\r\n\r\n                <p className=\"Home2-step-description\">{step.description}</p>\r\n\r\n                <ul className=\"Home2-step-highlights\">\r\n                  {step.highlights.map((highlight, i) => (\r\n                    <li\r\n                      key={i}\r\n                      className=\"Home2-highlight-item Home2-animate-on-scroll\"\r\n                      style={{ animationDelay: `${0.6 + i * 0.1}s` }}\r\n                    >\r\n                      <ChevronRight size={14} style={{ color: step.color }} />\r\n                      <span>{highlight}</span>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n\r\n                <div className=\"Home2-step-progress-indicator\" style={{ backgroundColor: step.color }} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Floating elements for visual interest */}\r\n        <div className=\"Home2-floating-element Home2-element-1\">\r\n          <Sparkles size={32} />\r\n        </div>\r\n\r\n        <div className=\"Home2-floating-element Home2-element-2\">\r\n          <Star size={24} />\r\n        </div>\r\n\r\n        <div className=\"Home2-floating-element Home2-element-3\">\r\n          <Award size={28} />\r\n        </div>\r\n      </section>\r\n\r\n      {/* Problem/Solution Section */}\r\n      <section className=\"Home2-problems-section\">\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Escape Inspection Frustrations</h2>\r\n\r\n          <div className=\"Home2-problems-grid\">\r\n            {[0, 1, 2].map((index) => (\r\n              <div key={index} className=\"Home2-problem-card Home2-animate-on-scroll\" style={{ animationDelay: `${index * 0.2}s` }}>\r\n                <div className=\"Home2-problem-icon\">\r\n                  {index === 0 ? (\r\n                    <Clipboard size={32} />\r\n                  ) : index === 1 ? (\r\n                    <AlertTriangle size={32} />\r\n                  ) : (\r\n                    <Clock size={32} />\r\n                  )}\r\n                </div>\r\n                <h3 className=\"Home2-problem-title\">\r\n                  {index === 0\r\n                    ? \"Static, Inflexible Paper or PDF Checklists?\"\r\n                    : index === 1\r\n                      ? \"Inconsistent Data During Inspections?\"\r\n                      : \"Hours Spent Compiling Inspection Reports?\"}\r\n                </h3>\r\n                <p className=\"Home2-problem-text\">\r\n                  {index === 0\r\n                    ? \"Design dynamic digital templates in minutes with drag-and-drop ease. Add logic, scoring, photos, signatures, and more – update instantly across all devices.\"\r\n                    : index === 1\r\n                      ? \"Ensure standardized, accurate data capture every time with required fields, conditional logic, and uniform templates pushed directly to the mobile app.\"\r\n                      : \"Generate comprehensive, professional reports automatically the moment an inspection is completed. Share instantly with stakeholders.\"}\r\n                </p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Features Tabs Section */}\r\n      <section className=\"Home2-features-section\" id=\"features\" ref={featuresRef}>\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Powering Your Inspections: Key Features</h2>\r\n\r\n          <div className=\"Home2-features-tabs\">\r\n            <div className=\"Home2-tabs-nav\">\r\n              {tabs.map((tab, index) => (\r\n                <button\r\n                  key={index}\r\n                  className={`Home2-tab-button ${activeTab === index ? \"Home2-active\" : \"\"} Home2-animate-on-scroll`}\r\n                  onClick={() => setActiveTab(index)}\r\n                  style={{\r\n                    animationDelay: `${index * 0.1}s`,\r\n                    opacity: 1,\r\n                    visibility: 'visible'\r\n                  }}\r\n                  onMouseEnter={enterButton}\r\n                  onMouseLeave={leaveHover}\r\n                >\r\n                  <span className=\"Home2-tab-icon\">{tab.icon}</span>\r\n                  <span className=\"Home2-tab-text\">{tab.title}</span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"Home2-tabs-content\">\r\n              <div className=\"Home2-tab-panel\">\r\n                <div className=\"Home2-tab-content Home2-animate-on-scroll\">\r\n                  <h3 className=\"Home2-tab-title\">{tabs[activeTab].contentTitle}</h3>\r\n                  <p className=\"Home2-tab-description\">{tabs[activeTab].description}</p>\r\n                  <a\r\n                    href=\"#learn-more\"\r\n                    className=\"Home2-btn Home2-btn-outline Home2-btn-sm Home2-btn-hover-effect\"\r\n                    onMouseEnter={enterButton}\r\n                    onMouseLeave={leaveHover}\r\n                  >\r\n                    Learn More <ArrowRight size={16} />\r\n                  </a>\r\n                </div>\r\n                <div className=\"Home2-tab-image Home2-animate-on-scroll\">\r\n                  <Image\r\n                    src={tabs[activeTab].image || \"/placeholder.svg\"}\r\n                    alt={tabs[activeTab].title}\r\n                    width={600}\r\n                    height={400}\r\n                    className=\"Home2-feature-img\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Stats Section */}\r\n      <section className=\"Home2-stats-section\" ref={statsRef}>\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Impact of Smarter Templates & Inspections</h2>\r\n\r\n          <div className=\"Home2-stats-grid\">\r\n            {stats.map((stat, index) => (\r\n              <div key={index} className=\"Home2-stat-card Home2-animate-on-scroll\" style={{ animationDelay: `${index * 0.1}s` }}>\r\n                <div className=\"Home2-stat-value\">{stat.value}</div>\r\n                <div className=\"Home2-stat-label\">{stat.label}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Template Builder Feature */}\r\n      <section className=\"Home2-template-feature\" id=\"template-builder\" ref={templateRef}>\r\n        <div className=\"Home2-container\">\r\n          <div className=\"Home2-feature-content\">\r\n            <div className={`Home2-feature-text Home2-animate-on-scroll ${templateVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n              <h2 className=\"Home2-feature-title\">Build Intelligence Into Your Checklists</h2>\r\n              <p className=\"Home2-feature-description\">\r\n                Go beyond simple yes/no questions. Fashcognitive's template builder lets you implement sophisticated\r\n                logic. Make questions appear based on previous answers, calculate risk scores automatically, assign\r\n                weights, and guide inspectors through complex procedures.\r\n              </p>\r\n              <ul className=\"Home2-feature-list\">\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.2s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Dynamic conditional logic (if/then)</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.3s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Automated scoring and weighting</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.4s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Embed instructional text, images, or videos</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.5s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Reusable template sections and version control</span>\r\n                </li>\r\n              </ul>\r\n              <a\r\n                href=\"#template-demo\"\r\n                className=\"Home2-btn Home2-btn-primary Home2-btn-hover-effect\"\r\n                onMouseEnter={enterButton}\r\n                onMouseLeave={leaveHover}\r\n              >\r\n                See Template Builder Demo\r\n              </a>\r\n            </div>\r\n\r\n            <div\r\n              className={`Home2-feature-image Home2-template-img-container Home2-animate-on-scroll ${templateVisible ? \"Home2-animate-in\" : \"\"}`}\r\n            >\r\n              <Image\r\n                src={HX}\r\n                alt=\"Template Builder\"\r\n                width={600}\r\n                height={500}\r\n                className=\"Home2-template-img\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Mobile App Feature */}\r\n      <section className=\"Home2-mobile-feature\" id=\"mobile-app\" ref={mobileRef}>\r\n        <div className=\"Home2-container\">\r\n          <div className=\"Home2-feature-content Home2-reverse\">\r\n            <div\r\n              className={`Home2-feature-image Home2-mobile-img-container Home2-animate-on-scroll ${mobileVisible ? \"Home2-animate-in\" : \"\"}`}\r\n            >\r\n              <Image\r\n                src={AZ}\r\n                alt=\"Mobile App\"\r\n                width={600}\r\n                height={500}\r\n                className=\"Home2-mobile-img\"\r\n              />\r\n            </div>\r\n\r\n            <div className={`Home2-feature-text Home2-animate-on-scroll ${mobileVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n              <h2 className=\"Home2-feature-title\">Capture Rich, Actionable Data from the Field</h2>\r\n              <p className=\"Home2-feature-description\">\r\n                Empower your inspectors to capture more than just text. The StreamLineer mobile app allows for\r\n                attaching annotated photos, collecting signatures, recording precise GPS locations, scanning barcodes,\r\n                and adding detailed notes – all within the inspection form, even offline.\r\n              </p>\r\n              <ul className=\"Home2-feature-list\">\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.2s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>High-resolution photo capture with annotation tools</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.3s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Digital signature collection for sign-offs</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.4s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Automatic GPS stamping (optional)</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.5s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Seamless offline data storage and sync</span>\r\n                </li>\r\n              </ul>\r\n              <a\r\n                href=\"#mobile-demo\"\r\n                className=\"Home2-btn Home2-btn-primary Home2-btn-hover-effect\"\r\n                onMouseEnter={enterButton}\r\n                onMouseLeave={leaveHover}\r\n              >\r\n                See Mobile App Demo\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Industries Section */}\r\n      <section className=\"Home2-industries-section\" ref={industriesRef}>\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Inspection Templates for Every Need</h2>\r\n\r\n          <div className=\"Home2-industries-grid\">\r\n            {industries.map((industry, index) => (\r\n              <div\r\n                key={index}\r\n                className={`Home2-industry-card Home2-animate-on-scroll ${index >= 5 ? 'Home2-last-row-card' : ''}`}\r\n                style={{\r\n                  animationDelay: `${index * 0.05}s`,\r\n                  ...(index >= 5 && { gridColumn: index === 5 ? '2 / 3' : index === 6 ? '3 / 4' : '4 / 5' })\r\n                }}\r\n                onMouseEnter={enterLink}\r\n                onMouseLeave={leaveHover}\r\n              >\r\n                <div className=\"Home2-industry-icon\">{industry.icon}</div>\r\n                <h3 className=\"Home2-industry-title\">{industry.title}</h3>\r\n                <div className=\"Home2-industry-arrow\">\r\n                  <ArrowUpRight size={18} />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n\r\n\r\n      {/* FAQ Section */}\r\n      <section className=\"Home2-faq-section\">\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Your Questions About Templates & Inspections</h2>\r\n\r\n          <div className=\"Home2-faq-list\">\r\n            {faqs.map((faq, index) => (\r\n              <div\r\n                key={index}\r\n                className={`Home2-faq-item ${activeFaq === index ? \"Home2-active\" : \"\"} Home2-animate-on-scroll`}\r\n                style={{\r\n                  animationDelay: `${index * 0.1}s`,\r\n                  opacity: 1,\r\n                  visibility: 'visible',\r\n                  display: 'block'\r\n                }}\r\n              >\r\n                <button\r\n                  className=\"Home2-faq-question\"\r\n                  onClick={() => toggleFaq(index)}\r\n                  onMouseEnter={enterButton}\r\n                  onMouseLeave={leaveHover}\r\n                  style={{\r\n                    opacity: 1,\r\n                    visibility: 'visible'\r\n                  }}\r\n                >\r\n                  <span>{faq.question}</span>\r\n                  <div className={`Home2-faq-icon ${activeFaq === index ? \"Home2-rotate\" : \"\"}`}>\r\n                    <ChevronDown size={20} />\r\n                  </div>\r\n                </button>\r\n                <div className={`Home2-faq-answer ${activeFaq === index ? \"Home2-open\" : \"\"}`}>\r\n                  <p>{faq.answer}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* CTA Section */}\r\n      <section className=\"Home2-cta-section\" ref={ctaRef}>\r\n        <div className=\"Home2-container\">\r\n          <div className={`Home2-cta-content Home2-animate-on-scroll ${ctaVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n            <h2 className=\"Home2-cta-title\">Ready to Revolutionize Your Inspection Process?</h2>\r\n            <p className=\"Home2-cta-text\">\r\n              Stop wrestling with paper and clunky software. Build intelligent templates and empower your team with\r\n              efficient mobile inspections using StreamLineer.\r\n            </p>\r\n            <div className=\"Home2-cta-buttons\">\r\n              <a\r\n                href=\"register\"\r\n                className=\"Home2-btn Home2-btn-primary Home2-btn-lg Home2-btn-hover-effect\"\r\n                onMouseEnter={enterButton}\r\n                onMouseLeave={leaveHover}\r\n              >\r\n                Start Building Templates Free\r\n              </a>\r\n              <a\r\n                href=\"#request-demo\"\r\n                className=\"Home2-btn Home2-btn-outline Home2-btn-lg Home2-btn-hover-effect\"\r\n                onMouseEnter={enterButton}\r\n                onMouseLeave={leaveHover}\r\n              >\r\n                Request a Demo\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Footer */}\r\n      <footer className=\"Home2-footer\">\r\n        <div className=\"Home2-container\">\r\n          <div className=\"Home2-footer-top\">\r\n            <div className=\"Home2-footer-logo\">\r\n              <span className=\"Home2-logo-text\">STREAMLINEER</span>\r\n              <p className=\"Home2-footer-tagline\">Build Smart Checklists. Conduct Flawless Inspections.</p>\r\n            </div>\r\n\r\n            <div className=\"Home2-footer-columns\">\r\n              <div className=\"Home2-footer-column\">\r\n                <h3 className=\"Home2-footer-heading\">Product</h3>\r\n                <ul className=\"Home2-footer-links\">\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#template-builder\">Template Builder</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#mobile-app\">Mobile Inspections</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#reporting\">Reporting</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#actions\">Action Tracking</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#pricing\">Pricing</a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <div className=\"Home2-footer-column\">\r\n                <h3 className=\"Home2-footer-heading\">Resources</h3>\r\n                <ul className=\"Home2-footer-links\">\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#blog\">Blog</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#guides\">Guides</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#webinars\">Webinars</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#case-studies\">Case Studies</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#help-center\">Help Center</a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <div className=\"Home2-footer-column\">\r\n                <h3 className=\"Home2-footer-heading\">Company</h3>\r\n                <ul className=\"Home2-footer-links\">\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#about\">About Us</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#careers\">Careers</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#contact\">Contact</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#partners\">Partners</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#legal\">Legal</a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <div className=\"Home2-footer-column\">\r\n                <h3 className=\"Home2-footer-heading\">Connect</h3>\r\n                <div className=\"Home2-social-links\">\r\n                  <a href=\"#twitter\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z\"></path>\r\n                    </svg>\r\n                  </a>\r\n                  <a href=\"#linkedin\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z\"></path>\r\n                      <rect x=\"2\" y=\"9\" width=\"4\" height=\"12\"></rect>\r\n                      <circle cx=\"4\" cy=\"4\" r=\"2\"></circle>\r\n                    </svg>\r\n                  </a>\r\n                  <a href=\"#facebook\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z\"></path>\r\n                    </svg>\r\n                  </a>\r\n                  <a href=\"#instagram\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <rect x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"5\" ry=\"5\"></rect>\r\n                      <path d=\"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\"></path>\r\n                      <line x1=\"17.5\" y1=\"6.5\" x2=\"17.51\" y2=\"6.5\"></line>\r\n                    </svg>\r\n                  </a>\r\n                </div>\r\n                <div className=\"Home2-newsletter\">\r\n                  <h4 className=\"Home2-newsletter-title\">Subscribe to our newsletter</h4>\r\n                  <form className=\"Home2-newsletter-form\">\r\n                    <input type=\"email\" placeholder=\"Your email\" className=\"Home2-newsletter-input\" />\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"Home2-newsletter-button\"\r\n                      onMouseEnter={enterButton}\r\n                      onMouseLeave={leaveHover}\r\n                    >\r\n                      Subscribe\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Home2-footer-bottom\">\r\n            <p className=\"Home2-copyright\">© 2025 StreamLineer, Inc. All rights reserved.</p>\r\n            <div className=\"Home2-legal-links\">\r\n              <a href=\"#privacy\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                Privacy Policy\r\n              </a>\r\n              <a href=\"#terms\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                Terms of Service\r\n              </a>\r\n              <a href=\"#cookies\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                Cookie Policy\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home2","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\register.tsx",[],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\TemplateView.tsx",[],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\login.tsx",[],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\Template.tsx",["104"],"\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useState, useEffect, useRef } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport \"../assets/Template.css\"\r\nimport {\r\n  Plus,\r\n  Search,\r\n  FileText,\r\n  User,\r\n  X,\r\n  Home,\r\n  Bell,\r\n  ClipboardCheck,\r\n  Calendar,\r\n  Play,\r\n  BookOpen,\r\n  Package,\r\n  AlertCircle,\r\n  Settings,\r\n  ChevronDown,\r\n  LogOut,\r\n} from \"lucide-react\"\r\n\r\ninterface Template {\r\n  id: number\r\n  title: string\r\n  lastModified?: string\r\n  access?: string\r\n  createdBy: string\r\n  isShared?: boolean\r\n}\r\n\r\ninterface EndpointResult {\r\n  status?: number\r\n  ok?: boolean\r\n  parseError?: string\r\n  error?: string\r\n}\r\n\r\ninterface DebugInfo {\r\n  endpoints: { [endpoint: string]: EndpointResult }\r\n  successEndpoint?: string\r\n  responseData?: any\r\n}\r\n\r\ninterface DialogPosition {\r\n  top: number\r\n  left: number\r\n}\r\n\r\nconst TemplatePage: React.FC = () => {\r\n  const navigate = useNavigate()\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n  const startFromScratchRef = useRef<HTMLDivElement>(null)\r\n  const startFromScratchDialogRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [showStartFromScratchDialog, setShowStartFromScratchDialog] = useState(false)\r\n  const [startFromScratchDialogPosition, setStartFromScratchDialogPosition] = useState<DialogPosition>({ top: 0, left: 0 })\r\n\r\n  const menuItems = [\r\n    { icon: Home, label: \"Home\", href: \"/dashboard\" },\r\n    { icon: Search, label: \"Search\", href: \"/search\" },\r\n    { icon: Bell, label: \"Notifications\", href: \"/notifications\" },\r\n    { icon: FileText, label: \"Templates\", href: \"/templates\", active: true },\r\n    { icon: ClipboardCheck, label: \"Inspections\", href: \"/inspections\" },\r\n    { icon: Calendar, label: \"Schedule\", href: \"/schedule\" },\r\n    { icon: Play, label: \"Actions\", href: \"/actions\" },\r\n    { icon: BookOpen, label: \"Training\", href: \"/training\" },\r\n    { icon: Package, label: \"Assets\", href: \"/assets\" },\r\n    { icon: AlertCircle, label: \"Issues\", href: \"/issues\" },\r\n  ]\r\n\r\n  const [templates, setTemplates] = useState<Template[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(\"\")\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [debugInfo, setDebugInfo] = useState<DebugInfo | null>(null)\r\n  const [showCreateDropdown, setShowCreateDropdown] = useState(false)\r\n\r\n  const loggedInUser = localStorage.getItem(\"username\")\r\n\r\n  const filteredTemplates = templates.filter((template) =>\r\n    template.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n  )\r\n\r\n  const endpointsToTry = [\r\n    \"/api/users/templates-with-shared/\",\r\n    \"/api/templates/\",\r\n    \"/templates_api/\",\r\n    \"/templates/\",\r\n    \"/api/v1/templates/\",\r\n    \"/api/user/templates/\",\r\n    \"/dashboard/templates/\",\r\n    \"/api/users/templates/\",\r\n  ]\r\n\r\n  // Toggle the create template dropdown\r\n  const toggleCreateDropdown = () => {\r\n    setShowCreateDropdown(!showCreateDropdown)\r\n  }\r\n\r\n  // Calculate position and toggle the start from scratch dialog\r\n  const toggleStartFromScratchDialog = () => {\r\n    if (startFromScratchRef.current) {\r\n      const rect = startFromScratchRef.current.getBoundingClientRect()\r\n\r\n      // Position the dialog below the button\r\n      const newPosition = {\r\n        top: rect.bottom + 10, // 10px below the button\r\n        left: rect.left + (rect.width / 2) - 125 // Center the 250px wide dialog under the button\r\n      }\r\n      console.log(\"Button position:\", rect)\r\n      console.log(\"Dialog position:\", newPosition)\r\n\r\n      setStartFromScratchDialogPosition(newPosition)\r\n      setShowStartFromScratchDialog(!showStartFromScratchDialog)\r\n    } else {\r\n      console.error(\"Start from scratch button ref not available\")\r\n    }\r\n  }\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setShowCreateDropdown(false)\r\n      }\r\n\r\n      if (\r\n        showStartFromScratchDialog &&\r\n        startFromScratchDialogRef.current &&\r\n        startFromScratchRef.current &&\r\n        !startFromScratchDialogRef.current.contains(event.target as Node) &&\r\n        !startFromScratchRef.current.contains(event.target as Node)\r\n      ) {\r\n        setShowStartFromScratchDialog(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside)\r\n    }\r\n  }, [showStartFromScratchDialog])\r\n\r\n  // Update dialog position if window is resized\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      if (showStartFromScratchDialog && startFromScratchRef.current) {\r\n        const rect = startFromScratchRef.current.getBoundingClientRect()\r\n        setStartFromScratchDialogPosition({\r\n          top: rect.bottom + 10,\r\n          left: rect.left + (rect.width / 2) - 125\r\n        })\r\n      }\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize)\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize)\r\n    }\r\n  }, [showStartFromScratchDialog])\r\n\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      // Clear localStorage data\r\n      localStorage.removeItem('username');\r\n      localStorage.removeItem('user_role');\r\n\r\n      // Call the backend logout endpoint to clear the session\r\n      const response = await fetch('http://localhost:8000/api/users/logout/', {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Logout successful');\r\n      } else {\r\n        console.error('Logout failed:', response.status);\r\n      }\r\n\r\n      // Redirect to login page regardless of response\r\n      window.location.href = '/login';\r\n    } catch (error) {\r\n      console.error('Error during logout:', error);\r\n      // Still redirect to login even if there's an error\r\n      window.location.href = '/login';\r\n    }\r\n  };\r\n\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen(!isDropdownOpen);\r\n  };\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutsideSettings = (event: MouseEvent) => {\r\n      const target = event.target as Node;\r\n      const settingsButton = document.querySelector('.tp-nav-button');\r\n      const dropdownMenu = document.querySelector('.tp-dropdown-menu');\r\n\r\n      if (\r\n        isDropdownOpen &&\r\n        settingsButton &&\r\n        dropdownMenu &&\r\n        !settingsButton.contains(target) &&\r\n        !dropdownMenu.contains(target)\r\n      ) {\r\n        setIsDropdownOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutsideSettings);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutsideSettings);\r\n    };\r\n  }, [isDropdownOpen]);\r\n\r\n  useEffect(() => {\r\n    const testAllEndpoints = async () => {\r\n      setLoading(true)\r\n      setError(\"\")\r\n      const results: { [endpoint: string]: EndpointResult } = {}\r\n\r\n      for (const endpoint of endpointsToTry) {\r\n        try {\r\n          const fullUrl = `http://127.0.0.1:8000${endpoint}`\r\n          const response = await fetch(fullUrl, {\r\n            credentials: 'include' // Include cookies for authentication\r\n          })\r\n          results[endpoint] = {\r\n            status: response.status,\r\n            ok: response.ok,\r\n          }\r\n\r\n          if (response.ok) {\r\n            try {\r\n              console.log(\"Logged in user:\", loggedInUser)\r\n\r\n              const data = await response.json()\r\n              console.log(\"Full response data:\", data);\r\n\r\n              // Check if the response has the new format with owned_templates and shared_templates\r\n              if (data.owned_templates && data.shared_templates) {\r\n                console.log(\"Using new API format with owned and shared templates\");\r\n                // Combine owned and shared templates\r\n                const ownedTemplates = data.owned_templates;\r\n                const sharedTemplates = data.shared_templates.map((template: Template) => ({\r\n                  ...template,\r\n                  isShared: true // Add a flag to identify shared templates\r\n                }));\r\n\r\n                setTemplates([...ownedTemplates, ...sharedTemplates]);\r\n              } else {\r\n                // Use the old format\r\n                console.log(\"Template creators:\", data.map((t: Template) => t.createdBy || 'Unknown'));\r\n                setTemplates(data.filter((template: Template) => template.createdBy === loggedInUser));\r\n              }\r\n\r\n              setDebugInfo({ endpoints: results, successEndpoint: fullUrl, responseData: data })\r\n              setLoading(false)\r\n              return\r\n            } catch (error) {\r\n              console.error(\"Error parsing JSON:\", error);\r\n              results[endpoint].parseError = \"Could not parse JSON\"\r\n            }\r\n          }\r\n        } catch (err) {\r\n          results[endpoint] = {\r\n            error: err instanceof Error ? err.message : String(err),\r\n          }\r\n        }\r\n      }\r\n\r\n      setDebugInfo({ endpoints: results })\r\n      setError(\"Could not connect to any templates API endpoint\")\r\n      setTemplates([\r\n        { id: 1, title: \"Safety Inspection Form (Demo)\", lastModified: \"2 days ago\", access: \"All users\", createdBy: \"demoUser\" },\r\n        { id: 2, title: \"Weekly Equipment Check (Demo)\", lastModified: \"5 days ago\", access: \"Team managers\", createdBy: \"demoUser\" },\r\n        { id: 3, title: \"Monthly Fire Safety Audit (Demo)\", lastModified: \"2 weeks ago\", access: \"Safety officers\", createdBy: \"demoUser\" },\r\n      ])\r\n      setLoading(false)\r\n    }\r\n\r\n    testAllEndpoints()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"tp-app-container\">\r\n      <nav className=\"tp-navbar\">\r\n        <div className=\"tp-navbar-brand\">STREAMLINEER</div>\r\n        <div className=\"tp-navbar-actions\">\r\n          <button className=\"tp-nav-button\">\r\n            <User className=\"tp-nav-icon\" />\r\n          </button>\r\n          <div className=\"tp-dropdown-container\">\r\n            <button\r\n              className=\"tp-nav-button\"\r\n              onClick={toggleDropdown}\r\n              style={{\r\n                position: 'relative',\r\n                backgroundColor: isDropdownOpen ? 'rgba(72, 149, 239, 0.1)' : 'transparent'\r\n              }}\r\n              title=\"Settings\"\r\n            >\r\n              <Settings className=\"tp-nav-icon\" />\r\n            </button>\r\n            {isDropdownOpen && (\r\n              <div className=\"tp-dropdown-menu\">\r\n                <button\r\n                  className=\"tp-dropdown-item logout-button\"\r\n                  onClick={handleLogout}\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '0.75rem',\r\n                    padding: '0.75rem 1.5rem',\r\n                    background: 'linear-gradient(135deg, #ff4b4b 0%, #ff6b6b 100%)',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    borderRadius: 'var(--border-radius)',\r\n                    fontSize: '0.95rem',\r\n                    fontWeight: '600',\r\n                    cursor: 'pointer',\r\n                    transition: 'var(--transition)',\r\n                    margin: '0.5rem 1rem',\r\n                    boxShadow: 'var(--shadow-sm)',\r\n                    width: 'calc(100% - 2rem)'\r\n                  }}\r\n                >\r\n                  <LogOut size={18} />\r\n                  <span>Logout</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <aside className=\"dashboard-sidebar\">\r\n        <nav className=\"dashboard-sidebar-nav\">\r\n          {menuItems.map((item, i) => (\r\n            <a key={i} href={item.href} className={`dashboard-nav-link ${item.active ? \"active\" : \"\"}`}>\r\n              <item.icon size={20} /><span>{item.label}</span>\r\n            </a>\r\n          ))}\r\n        </nav>\r\n      </aside>\r\n\r\n      <div className=\"tp-template-container\">\r\n        <div className=\"tp-template-header\">\r\n          <nav className=\"tp-template-tabs\">\r\n            <button className=\"tp-tab active\">Templates</button>\r\n            <button className=\"tp-tab\">Responses</button>\r\n            <button className=\"tp-tab\">Public Library</button>\r\n            <button className=\"tp-tab\">Archive</button>\r\n          </nav>\r\n        </div>\r\n\r\n        <div className=\"tp-template-content\">\r\n          <section className=\"tp-creation-section\">\r\n            <div className=\"tp-section-header\">\r\n              <h2>Create your template from one of the options below.</h2>\r\n              <button className=\"tp-close-button\"><X size={20} /></button>\r\n            </div>\r\n\r\n            <div className=\"tp-creation-options\">\r\n              <div\r\n                className=\"tp-option-card\"\r\n                onClick={toggleStartFromScratchDialog}\r\n                style={{ cursor: 'pointer' }}\r\n                ref={startFromScratchRef}\r\n              >\r\n                <div className=\"tp-option-icon\"><Plus size={24} /></div>\r\n                <h3>Start from scratch</h3>\r\n                <p>Get started with a blank template.</p>\r\n              </div>\r\n              <div className=\"tp-option-card\">\r\n                <div className=\"tp-option-icon\"><FileText size={24} /></div>\r\n                <h3>Describe topic</h3>\r\n                <p>Enter a text prompt about your template.</p>\r\n              </div>\r\n              <div className=\"tp-option-card\">\r\n                <div className=\"tp-option-icon\"><Search size={24} /></div>\r\n                <h3>Find pre-made template</h3>\r\n                <p>Choose from over 100,000 editable templates.</p>\r\n              </div>\r\n            </div>\r\n          </section>\r\n\r\n          <section className=\"tp-templates-section\">\r\n            <div className=\"tp-templates-header\">\r\n              <h2>Templates <span className=\"tp-count\">(1 - {filteredTemplates.length} of {templates.length})</span></h2>\r\n              <div className=\"tp-create-dropdown\" ref={dropdownRef}>\r\n                <button className=\"tp-create-button\" onClick={toggleCreateDropdown}>\r\n                  <Plus size={16} />\r\n                  Create\r\n                  <ChevronDown size={16} className={`tp-dropdown-icon ${showCreateDropdown ? 'open' : ''}`} />\r\n                </button>\r\n                {showCreateDropdown && (\r\n                  <div className=\"tp-dropdown-menu\">\r\n                    <a href=\"/create_templates\" className=\"tp-dropdown-item\">\r\n                      <FileText size={16} />\r\n                      Standard Template\r\n                    </a>\r\n                    <a href=\"/garment-template\" className=\"tp-dropdown-item\">\r\n                      <FileText size={16} />\r\n                      Garment Template\r\n                    </a>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {loading && <div className=\"tp-loading\">Loading templates...</div>}\r\n            {error && (\r\n              <div className=\"tp-error-message\">\r\n                {error}<p>Showing demo data for display purposes.</p>\r\n                <details><summary>API Debug Info (Click to expand)</summary><pre>{JSON.stringify(debugInfo, null, 2)}</pre></details>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"tp-search-controls\">\r\n              <div className=\"tp-search-field\">\r\n                <Search className=\"tp-search-icon\" size={20} />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search all templates\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                />\r\n              </div>\r\n              <button className=\"tp-filter-button\"><Plus size={16} /> Add filter</button>\r\n            </div>\r\n\r\n            <div className=\"tp-templates-table\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"tp-checkbox-column\"><input type=\"checkbox\" /></th>\r\n                    <th>Template</th>\r\n                    <th>Last modified</th>\r\n                    <th>Access</th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {filteredTemplates.map((template) => (\r\n                    <tr key={template.id}>\r\n                      <td className=\"tp-checkbox-column\"><input type=\"checkbox\" /></td>\r\n                      <td>\r\n                        <div className=\"tp-template-cell\">\r\n                          <div className=\"tp-template-icon\">\r\n                            <FileText size={20} />\r\n                          </div>\r\n                          <span>\r\n                            {template.title}\r\n                            {template.isShared && (\r\n                              <span className=\"tp-shared-badge\" title=\"Shared with you\">\r\n                                (Shared)\r\n                              </span>\r\n                            )}\r\n                          </span>\r\n                        </div>\r\n                      </td>\r\n                      <td>{template.lastModified || \"Not available\"}</td>\r\n                      <td>\r\n                        <div className=\"tp-access-badge\">\r\n                          <User size={16} />\r\n                          <span>{template.access || \"No access specified\"}</span>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"tp-action-buttons\">\r\n                          <button\r\n                            className=\"tp-start-inspection\"\r\n                            onClick={() => navigate(`/inspection?templateId=${template.id}`)}\r\n                          >\r\n                            Start inspection\r\n                          </button>\r\n                          <button className=\"tp-view-button\" onClick={() => navigate(`/template/${template.id}`)}>View</button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Start from scratch dialog - rendered at the document level for better positioning */}\r\n      {showStartFromScratchDialog && (\r\n        <div\r\n          className=\"tp-start-scratch-dialog\"\r\n          ref={startFromScratchDialogRef}\r\n          style={{\r\n            position: 'fixed',\r\n            top: `${startFromScratchDialogPosition.top}px`,\r\n            left: `${startFromScratchDialogPosition.left}px`,\r\n            zIndex: 2000,\r\n            width: '250px',\r\n            background: 'white',\r\n            borderRadius: '12px',\r\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\r\n            border: '1px solid #e9ecef',\r\n            overflow: 'hidden',\r\n            animation: 'fadeInUp 0.3s forwards'\r\n          }}\r\n        >\r\n          <div style={{ padding: '8px 0' }}>\r\n            <a href=\"/create_templates\" className=\"tp-dropdown-item\" style={{ display: 'flex', alignItems: 'center', gap: '1rem', padding: '1rem 1.5rem' }}>\r\n              <FileText size={16} />\r\n              Standard Template\r\n            </a>\r\n            <a href=\"/garment-template\" className=\"tp-dropdown-item\" style={{ display: 'flex', alignItems: 'center', gap: '1rem', padding: '1rem 1.5rem' }}>\r\n              <FileText size={16} />\r\n              Garment Template\r\n            </a>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TemplatePage","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\Inspections.tsx",["105","106"],"\"use client\"\r\n\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport {\r\n  FileText,\r\n  Home,\r\n  Search,\r\n  Bell,\r\n  ClipboardCheck,\r\n  Calendar,\r\n  Play,\r\n  BookOpen,\r\n  Package,\r\n  AlertCircle,\r\n  User,\r\n  Clock,\r\n  CheckCircle,\r\n  ArrowRight,\r\n  Filter\r\n} from \"lucide-react\"\r\nimport \"../assets/Template.css\" // Reuse the Template.css styles\r\nimport \"./Inspections.css\" // Import Inspections-specific styles\r\nimport { fetchData } from \"../utils/api\" // Import the API utility\r\n\r\n// Define types\r\ninterface Inspector {\r\n  id: number\r\n  name: string\r\n  email: string\r\n}\r\n\r\ninterface Assignment {\r\n  id: number\r\n  template: number\r\n  template_title: string\r\n  inspector: number\r\n  inspector_name: string\r\n  inspector_email: string\r\n  assigned_by: number\r\n  assigned_by_name: string\r\n  assigned_by_email: string\r\n  status: string\r\n  status_display: string\r\n  assigned_at: string\r\n  started_at: string | null\r\n  completed_at: string | null\r\n  revoked_at: string | null\r\n  notes: string | null\r\n}\r\n\r\nconst Inspections: React.FC = () => {\r\n  const navigate = useNavigate()\r\n  const [assignments, setAssignments] = useState<Assignment[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [currentUser, setCurrentUser] = useState<any>(null)\r\n  const [isScrolled, setIsScrolled] = useState(false)\r\n\r\n  // Menu items for the sidebar\r\n  const menuItems = [\r\n    { icon: Home, label: \"Home\", href: \"/dashboard\" },\r\n    { icon: Search, label: \"Search\", href: \"/search\" },\r\n    { icon: Bell, label: \"Notifications\", href: \"/notifications\" },\r\n    { icon: FileText, label: \"Templates\", href: \"/templates\" },\r\n    { icon: ClipboardCheck, label: \"Inspections\", href: \"/inspections\", active: true },\r\n    { icon: Calendar, label: \"Schedule\", href: \"/schedule\" },\r\n    { icon: Play, label: \"Actions\", href: \"/actions\" },\r\n    { icon: BookOpen, label: \"Training\", href: \"/training\" },\r\n    { icon: Package, label: \"Assets\", href: \"/assets\" },\r\n    { icon: AlertCircle, label: \"Issues\", href: \"/issues\" },\r\n  ]\r\n\r\n  // Handle scroll event to add shadow to navbar when scrolled\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      setIsScrolled(window.scrollY > 0)\r\n    }\r\n    window.addEventListener(\"scroll\", handleScroll)\r\n    return () => window.removeEventListener(\"scroll\", handleScroll)\r\n  }, [])\r\n\r\n  // Fetch current user\r\n  useEffect(() => {\r\n    const fetchCurrentUser = async () => {\r\n      try {\r\n        const data = await fetchData(\"users/auth-status/\")\r\n        console.log(\"Auth status response:\", data)\r\n        setCurrentUser(data)\r\n      } catch (error) {\r\n        console.error(\"Error fetching current user:\", error)\r\n        // Set a default user for demo purposes\r\n        setCurrentUser({\r\n          id: 1,\r\n          username: \"demouser\",\r\n          email: \"demo@example.com\",\r\n          user_role: \"admin\"\r\n        })\r\n      }\r\n    }\r\n\r\n    fetchCurrentUser()\r\n  }, [])\r\n\r\n  // Fetch assignments based on user role\r\n  const [retryCount, setRetryCount] = useState(0);\r\n\r\n  const fetchAssignments = async () => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      console.log(\"Current user:\", currentUser);\r\n\r\n      // If we don't have a user yet, use a fallback\r\n      if (!currentUser) {\r\n        console.log(\"No current user, using demo data\");\r\n        // Set some demo data for testing\r\n        setAssignments([\r\n          {\r\n            id: 1,\r\n            template: 1,\r\n            template_title: \"Safety Inspection Template (Demo)\",\r\n            inspector: 2,\r\n            inspector_name: \"John Inspector\",\r\n            inspector_email: \"john@example.com\",\r\n            assigned_by: 1,\r\n            assigned_by_name: \"Admin User\",\r\n            assigned_by_email: \"admin@example.com\",\r\n            status: \"assigned\",\r\n            status_display: \"Assigned\",\r\n            assigned_at: new Date().toISOString(),\r\n            started_at: null,\r\n            completed_at: null,\r\n            revoked_at: null,\r\n            notes: \"Demo assignment - No user data available\"\r\n          }\r\n        ]);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      // For admin users, we don't show any inspections\r\n      if (currentUser?.user_role === 'admin') {\r\n        console.log(\"Admin user - showing empty inspections page\");\r\n        setAssignments([]);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Only inspectors should see assignments\r\n      const endpoint = \"users/my-assignments/\"\r\n\r\n      console.log(\"Fetching assignments from:\", endpoint);\r\n\r\n      try {\r\n        // Use our API utility with a timeout\r\n        const data = await fetchData(endpoint, {\r\n          timeout: 5000 // 5 second timeout\r\n        });\r\n\r\n        console.log(\"Assignments data:\", data);\r\n\r\n        if (Array.isArray(data) && data.length > 0) {\r\n          setAssignments(data);\r\n          setError(null);\r\n        } else {\r\n          console.log(\"No assignments found or invalid data format\");\r\n          // Set empty array if no assignments are found\r\n          setAssignments([]);\r\n          setError(null);\r\n        }\r\n      } catch (e: unknown) {\r\n        if (axios.isAxiosError(e) && e.code === 'ECONNABORTED') {\r\n          throw new Error('Request timed out. The server might be down or unreachable.');\r\n        }\r\n        throw e;\r\n      }\r\n    } catch (error: unknown) {\r\n      console.error(\"Error loading assignments:\", error);\r\n\r\n      // Provide a more informative error message\r\n      if (error instanceof Error) {\r\n        if (currentUser?.user_role === 'admin') {\r\n          // For admin users, we don't need to mention demo data\r\n          if (error.message.includes('timed out')) {\r\n            setError(\"Connection to server timed out. The backend server might be down or unreachable.\");\r\n          } else if (error.message.includes('Failed to fetch')) {\r\n            setError(\"Failed to connect to the backend server. Please ensure the server is running.\");\r\n          } else {\r\n            setError(\"Failed to load assignments.\");\r\n          }\r\n        } else {\r\n          // For non-admin users\r\n          if (error.message.includes('timed out')) {\r\n            setError(\"Connection to server timed out. The backend server might be down or unreachable. Using demo data instead.\");\r\n          } else if (error.message.includes('Failed to fetch')) {\r\n            setError(\"Failed to connect to the backend server. Please ensure the server is running. Using demo data instead.\");\r\n          } else {\r\n            setError(\"Failed to load assignments. Using demo data instead.\");\r\n          }\r\n        }\r\n      } else {\r\n        if (currentUser?.user_role === 'admin') {\r\n          setError(\"Failed to load assignments.\");\r\n        } else {\r\n          setError(\"Failed to load assignments. Using demo data instead.\");\r\n        }\r\n      }\r\n\r\n      // Set some demo data if there's an error, but only for non-admin users\r\n      if (currentUser?.user_role !== 'admin') {\r\n        setAssignments([\r\n          {\r\n            id: 1,\r\n            template: 1,\r\n            template_title: \"Safety Inspection Template (Demo)\",\r\n            inspector: 2,\r\n            inspector_name: \"John Inspector\",\r\n            inspector_email: \"john@example.com\",\r\n            assigned_by: 1,\r\n            assigned_by_name: \"Admin User\",\r\n            assigned_by_email: \"admin@example.com\",\r\n            status: \"assigned\",\r\n            status_display: \"Assigned\",\r\n            assigned_at: new Date().toISOString(),\r\n            started_at: null,\r\n            completed_at: null,\r\n            revoked_at: null,\r\n            notes: \"Demo assignment - This is sample data as the backend server is not available\"\r\n          }\r\n        ]);\r\n      } else {\r\n        // For admin users, always show empty assignments\r\n        setAssignments([]);\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  // Retry handler\r\n  const handleRetry = () => {\r\n    setRetryCount(prev => prev + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Always fetch assignments, even if currentUser is not available yet\r\n    fetchAssignments();\r\n  }, [currentUser, retryCount])\r\n\r\n  // Format date for display\r\n  const formatDate = (dateString: string | null) => {\r\n    if (!dateString) return \"N/A\"\r\n    const date = new Date(dateString)\r\n    return date.toLocaleDateString(\"en-US\", {\r\n      year: \"numeric\",\r\n      month: \"short\",\r\n      day: \"numeric\",\r\n    })\r\n  }\r\n\r\n  // Handle starting an inspection\r\n  const handleStartInspection = (assignment: Assignment) => {\r\n    navigate(`/inspection?templateId=${assignment.template}`)\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      {/* Navbar */}\r\n      <nav className={`dashboard-navbar ${isScrolled ? \"scrolled\" : \"\"}`}>\r\n        <div className=\"dashboard-navbar-brand\">STREAMLINEER</div>\r\n        <div className=\"dashboard-navbar-actions\">\r\n          <button className=\"dashboard-nav-button\">\r\n            <User size={20} />\r\n          </button>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Sidebar */}\r\n      <aside className=\"dashboard-sidebar\">\r\n        <nav className=\"dashboard-sidebar-nav\">\r\n          {menuItems.map((item, i) => (\r\n            <a key={i} href={item.href} className={`dashboard-nav-link ${item.active ? \"active\" : \"\"}`}>\r\n              <item.icon size={20} /><span>{item.label}</span>\r\n            </a>\r\n          ))}\r\n        </nav>\r\n      </aside>\r\n\r\n      <div className=\"tp-template-container\">\r\n        <div className=\"tp-template-header\">\r\n          <nav className=\"tp-template-tabs\">\r\n            <button className=\"tp-tab active\">Inspections</button>\r\n          </nav>\r\n        </div>\r\n\r\n        <div className=\"tp-template-content\">\r\n          <section className=\"tp-templates-section\">\r\n            <div className=\"tp-section-header\">\r\n              <h2>My Inspections</h2>\r\n              <div className=\"tp-section-actions\">\r\n                <button className=\"tp-filter-button\">\r\n                  <Filter size={16} />\r\n                  Filter\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            {isLoading ? (\r\n              <div className=\"tp-loading\">Loading inspections...</div>\r\n            ) : error ? (\r\n              <div className=\"tp-error-container\">\r\n                <div className=\"tp-error\">{error}</div>\r\n                <button\r\n                  className=\"retry-button\"\r\n                  onClick={handleRetry}\r\n                >\r\n                  Retry Connection\r\n                </button>\r\n              </div>\r\n            ) : assignments.length === 0 && !isLoading ? (\r\n              <div className=\"tp-empty-state\">\r\n                <ClipboardCheck size={48} />\r\n                <h3>No inspections found</h3>\r\n                <p>\r\n                  {currentUser?.user_role === 'inspector'\r\n                    ? \"You don't have any assigned inspections yet. Please contact an admin to assign templates to you.\"\r\n                    : \"As an admin, you don't complete inspections. You can assign templates to inspectors who will complete them.\"}\r\n                </p>\r\n                <button\r\n                  className=\"primary-button\"\r\n                  style={{ marginTop: '16px' }}\r\n                  onClick={() => navigate('/templates')}\r\n                >\r\n                  {currentUser?.user_role === 'inspector'\r\n                    ? \"View Available Templates\"\r\n                    : \"Assign Templates\"}\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              <div className=\"tp-templates-table\">\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Template</th>\r\n                      <th>Inspector</th>\r\n                      <th>Status</th>\r\n                      <th>Assigned Date</th>\r\n                      <th></th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {assignments.map((assignment) => (\r\n                      <tr key={assignment.id}>\r\n                        <td>\r\n                          <div className=\"tp-template-cell\">\r\n                            <div className=\"tp-template-icon\">\r\n                              <FileText size={20} />\r\n                            </div>\r\n                            <span>{assignment.template_title}</span>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div className=\"tp-access-badge\">\r\n                            <User size={16} />\r\n                            <span>{assignment.inspector_name}</span>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <div className={`tp-status-badge status-${assignment.status}`}>\r\n                            {assignment.status === 'assigned' && <Clock size={16} />}\r\n                            {assignment.status === 'in_progress' && <ArrowRight size={16} />}\r\n                            {assignment.status === 'completed' && <CheckCircle size={16} />}\r\n                            <span>{assignment.status_display || assignment.status}</span>\r\n                          </div>\r\n                        </td>\r\n                        <td>{formatDate(assignment.assigned_at)}</td>\r\n                        <td>\r\n                          <div className=\"tp-action-buttons\">\r\n                            <button\r\n                              className=\"tp-start-inspection\"\r\n                              onClick={() => handleStartInspection(assignment)}\r\n                              disabled={assignment.status === 'completed'}\r\n                            >\r\n                              {assignment.status === 'assigned' ? 'Start Inspection' :\r\n                               assignment.status === 'in_progress' ? 'Continue Inspection' :\r\n                               'View Inspection'}\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Inspections\r\n","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\Create_template.tsx",["107","108","109","110","111","112","113","114"],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\Inspection.tsx",["115","116","117","118"],"\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { ImageIcon, X, ChevronDown, AlertTriangle, ArrowLeft, CheckCircle } from \"lucide-react\"\r\nimport { fetchData, postData } from \"../utils/api\"\r\n\r\n// Types\r\ntype ResponseType =\r\n  | \"Site\"\r\n  | \"Inspection date\"\r\n  | \"Person\"\r\n  | \"Inspection location\"\r\n  | \"Text\"\r\n  | \"Number\"\r\n  | \"Checkbox\"\r\n  | \"Yes/No\"\r\n  | \"Multiple choice\"\r\n  | \"Slider\"\r\n  | \"Media\"\r\n  | \"Annotation\"\r\n  | \"Date & Time\"\r\n\r\ninterface LogicRule {\r\n  id: string\r\n  condition: string\r\n  value: string | number | string[] | [number, number] | null\r\n  trigger: string | null\r\n  message?: string\r\n}\r\n\r\ninterface Question {\r\n  id: string\r\n  text: string\r\n  responseType: ResponseType\r\n  required: boolean\r\n  flagged: boolean\r\n  options?: string[]\r\n  value?: string | string[] | boolean | number | null\r\n  logicRules?: LogicRule[]\r\n  multipleSelection?: boolean\r\n}\r\n\r\ninterface Section {\r\n  id: string\r\n  title: string\r\n  description?: string\r\n  questions: Question[]\r\n}\r\n\r\ninterface Template {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  sections: Section[]\r\n  logo?: string\r\n}\r\n\r\ninterface Inspector {\r\n  id: number\r\n  name: string\r\n  email: string\r\n}\r\n\r\n// Utility function to resize images\r\nconst resizeImage = (base64: string): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = document.createElement(\"img\")\r\n    img.crossOrigin = \"anonymous\"\r\n    img.src = base64\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\")\r\n      const MAX_WIDTH = 500\r\n      const scale = Math.min(MAX_WIDTH / img.width, 1)\r\n      canvas.width = img.width * scale\r\n      canvas.height = img.height * scale\r\n      const ctx = canvas.getContext(\"2d\")\r\n      if (ctx) {\r\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n        resolve(canvas.toDataURL(\"image/jpeg\", 0.8))\r\n      } else {\r\n        reject(new Error(\"Failed to get canvas context\"))\r\n      }\r\n    }\r\n    img.onerror = () => reject(new Error(\"Failed to load image\"))\r\n  })\r\n}\r\n\r\n// Helper function to check if a condition is met\r\nconst isConditionMet = (question: Question, rule: LogicRule): boolean => {\r\n  if (question.value === null || question.value === undefined) return false\r\n\r\n  const value = question.value\r\n  let conditionMet = false\r\n\r\n  // Convert values to appropriate types for comparison\r\n  let compareValue = value\r\n  let ruleValue = rule.value\r\n\r\n  // For number fields, ensure we're comparing numbers\r\n  if (question.responseType === \"Number\" || question.responseType === \"Slider\") {\r\n    compareValue = typeof value === \"string\" ? Number.parseFloat(value) : typeof value === \"number\" ? value : 0\r\n    ruleValue =\r\n      typeof rule.value === \"string\" ? Number.parseFloat(rule.value) : typeof rule.value === \"number\" ? rule.value : 0\r\n  }\r\n\r\n  switch (rule.condition) {\r\n    case \"is\":\r\n      conditionMet = String(compareValue) === String(ruleValue)\r\n      break\r\n    case \"is not\":\r\n      conditionMet = String(compareValue) !== String(ruleValue)\r\n      break\r\n    case \"contains\":\r\n      conditionMet =\r\n        typeof compareValue === \"string\" && typeof ruleValue === \"string\" && compareValue.includes(ruleValue)\r\n      break\r\n    case \"not contains\":\r\n      conditionMet =\r\n        typeof compareValue === \"string\" && typeof ruleValue === \"string\" && !compareValue.includes(ruleValue)\r\n      break\r\n    case \"greater than\":\r\n      conditionMet = typeof compareValue === \"number\" && typeof ruleValue === \"number\" && compareValue > ruleValue\r\n      break\r\n    case \"less than\":\r\n      conditionMet = typeof compareValue === \"number\" && typeof ruleValue === \"number\" && compareValue < ruleValue\r\n      break\r\n    case \"equal to\":\r\n      if (question.responseType === \"Number\" || question.responseType === \"Slider\") {\r\n        const numValue = Number(compareValue)\r\n        const numRuleValue = Number(ruleValue)\r\n        conditionMet = !isNaN(numValue) && !isNaN(numRuleValue) && numValue === numRuleValue\r\n      } else {\r\n        conditionMet = String(compareValue) === String(ruleValue)\r\n      }\r\n      break\r\n    case \"not equal to\":\r\n      conditionMet = compareValue != ruleValue\r\n      break\r\n    case \"greater than or equal to\":\r\n      conditionMet = typeof compareValue === \"number\" && typeof ruleValue === \"number\" && compareValue >= ruleValue\r\n      break\r\n    case \"less than or equal to\":\r\n      conditionMet = typeof compareValue === \"number\" && typeof ruleValue === \"number\" && compareValue <= ruleValue\r\n      break\r\n    default:\r\n      conditionMet = false\r\n  }\r\n\r\n  return conditionMet\r\n}\r\n\r\n// Main Component\r\nconst QuestionAnswering: React.FC = () => {\r\n  const navigate = useNavigate()\r\n  const [template, setTemplate] = useState<Template | null>(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [currentInspector, setCurrentInspector] = useState<Inspector | null>(null)\r\n\r\n  // Get template ID from URL if available\r\n  const getTemplateIdFromUrl = () => {\r\n    const urlParams = new URLSearchParams(window.location.search)\r\n    return urlParams.get('templateId')\r\n  }\r\n\r\n  // Fetch current inspector information and check assignment status\r\n  const fetchInspectorInfo = async () => {\r\n    try {\r\n      // Get current user info\r\n      const userData = await fetchData('users/current-user/');\r\n      const templateId = getTemplateIdFromUrl();\r\n      if (!templateId) return;\r\n\r\n      // Get assignment ID if available\r\n      let assignmentId: string | null = null;\r\n      try {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        assignmentId = urlParams.get('assignmentId');\r\n      } catch (e) {\r\n        console.log(\"No assignment ID in URL\");\r\n      }\r\n\r\n      // If user is an inspector, set as current inspector\r\n      if (userData.user_role === 'inspector') {\r\n        setCurrentInspector({\r\n          id: userData.id,\r\n          name: `${userData.first_name} ${userData.last_name}`.trim() || userData.username || userData.email.split('@')[0],\r\n          email: userData.email\r\n        });\r\n        console.log('Current inspector set from user data:', userData);\r\n\r\n        // Check if this template is assigned to this inspector\r\n        const assignments = await fetchData('users/my-assignments/');\r\n        let currentAssignment;\r\n\r\n        if (assignmentId) {\r\n          // If we have an assignment ID, find that specific assignment\r\n          currentAssignment = assignments.find((a: any) => a.id.toString() === assignmentId);\r\n        } else {\r\n          // Otherwise, find any assignment for this template\r\n          currentAssignment = assignments.find((a: any) => a.template.toString() === templateId);\r\n        }\r\n\r\n        if (currentAssignment) {\r\n          setAssignment(currentAssignment);\r\n          console.log('Assignment found:', currentAssignment);\r\n\r\n          // Check if assignment is completed or expired\r\n          if (currentAssignment.status === 'completed') {\r\n            setAssignmentError('This template has already been completed. It can only be answered again if reassigned by an admin.');\r\n          } else if (currentAssignment.status === 'expired') {\r\n            setAssignmentError('This assignment has expired. Please contact an admin for reassignment.');\r\n          } else if (currentAssignment.status === 'revoked') {\r\n            setAssignmentError('This assignment has been revoked. Please contact an admin for reassignment.');\r\n          }\r\n        } else {\r\n          // No assignment found for this template\r\n          setAssignmentError('You do not have an active assignment for this template. Please contact an admin for assignment.');\r\n        }\r\n      } else {\r\n        // Try to get assignment info for the template\r\n        if (!templateId) return;\r\n\r\n        const assignments = await fetchData('users/template-assignments/');\r\n        const currentAssignment = assignments.find((a: any) =>\r\n          a.template.toString() === templateId &&\r\n          (assignmentId ? a.id.toString() === assignmentId : true)\r\n        );\r\n\r\n        if (currentAssignment) {\r\n          setAssignment(currentAssignment);\r\n          setCurrentInspector({\r\n            id: currentAssignment.inspector,\r\n            name: currentAssignment.inspector_name || 'Inspector',\r\n            email: currentAssignment.inspector_email || ''\r\n          });\r\n          console.log('Current inspector set from assignment:', currentAssignment);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching inspector info:', error);\r\n      setAssignmentError('Error checking assignment status. Please try again later.');\r\n    }\r\n  };\r\n\r\n  // Fetch template data from API\r\n  useEffect(() => {\r\n    const fetchTemplate = async () => {\r\n      setIsLoading(true)\r\n      setError(null)\r\n\r\n      const templateId = getTemplateIdFromUrl()\r\n\r\n      if (templateId) {\r\n        try {\r\n          // First try to fetch with access check (for shared templates)\r\n          let data;\r\n          try {\r\n            data = await fetchData(`users/templates/${templateId}/access-check/`);\r\n          } catch (error) {\r\n            console.log('Access check failed, trying regular endpoint');\r\n            data = await fetchData(`users/templates/${templateId}/`);\r\n          }\r\n          console.log('Loaded template data:', data)\r\n\r\n          // Transform the data to match our expected format if needed\r\n          const transformedTemplate: Template = {\r\n            id: data.id.toString(),\r\n            title: data.title,\r\n            description: data.description || \"Complete all required fields in this inspection\",\r\n            logo: data.logo || \"/placeholder.svg?height=80&width=80\",\r\n            sections: data.sections.map((section: any) => ({\r\n              id: section.id.toString(),\r\n              title: section.title,\r\n              description: section.description || \"\",\r\n              questions: section.questions.map((question: any) => ({\r\n                id: question.id.toString(),\r\n                text: question.text,\r\n                responseType: mapResponseType(question.response_type),\r\n                required: question.required || false,\r\n                flagged: question.flagged || false,\r\n                options: question.options || [],\r\n                value: question.value || null,\r\n                logicRules: question.logic_rules || [],\r\n                multipleSelection: question.multiple_selection || false\r\n              }))\r\n            }))\r\n          }\r\n\r\n          setTemplate(transformedTemplate)\r\n\r\n          // After loading the template, fetch the inspector info\r\n          await fetchInspectorInfo();\r\n        } catch (error) {\r\n          console.error('Error loading template:', error)\r\n          setError('Failed to load template. Using default template.')\r\n          setTemplate(getDefaultTemplate())\r\n        }\r\n      } else {\r\n        // No template ID provided, use default template\r\n        setTemplate(getDefaultTemplate())\r\n      }\r\n\r\n      setIsLoading(false)\r\n    }\r\n\r\n    fetchTemplate()\r\n  }, [])\r\n\r\n  // Map backend response_type to frontend ResponseType\r\n  const mapResponseType = (type: string): ResponseType => {\r\n    const typeMap: {[key: string]: ResponseType} = {\r\n      'site': 'Site',\r\n      'inspection_date': 'Inspection date',\r\n      'person': 'Person',\r\n      'inspection_location': 'Inspection location',\r\n      'text': 'Text',\r\n      'number': 'Number',\r\n      'checkbox': 'Checkbox',\r\n      'yes_no': 'Yes/No',\r\n      'multiple_choice': 'Multiple choice',\r\n      'slider': 'Slider',\r\n      'media': 'Media',\r\n      'annotation': 'Annotation',\r\n      'date_time': 'Date & Time'\r\n    }\r\n\r\n    return typeMap[type.toLowerCase()] || 'Text'\r\n  }\r\n\r\n  // Default template to use if API fetch fails or no template ID is provided\r\n  const getDefaultTemplate = (): Template => ({\r\n    id: \"default-template\",\r\n    title: \"Safety Inspection Template\",\r\n    description: \"Complete all required fields in this safety inspection\",\r\n    logo: \"/placeholder.svg?height=80&width=80\",\r\n    sections: [\r\n      {\r\n        id: \"section-1\",\r\n        title: \"General Information\",\r\n        description: \"Please provide basic information about this inspection\",\r\n        questions: [\r\n          {\r\n            id: \"q1\",\r\n            text: \"Site conducted\",\r\n            responseType: \"Site\",\r\n            required: true,\r\n            flagged: false,\r\n            value: null,\r\n          },\r\n          {\r\n            id: \"q2\",\r\n            text: \"Inspection date\",\r\n            responseType: \"Inspection date\",\r\n            required: true,\r\n            flagged: false,\r\n            value: null,\r\n          },\r\n          {\r\n            id: \"q3\",\r\n            text: \"Inspector name\",\r\n            responseType: \"Person\",\r\n            required: true,\r\n            flagged: false,\r\n            value: null,\r\n          },\r\n          {\r\n            id: \"q4\",\r\n            text: \"Location\",\r\n            responseType: \"Inspection location\",\r\n            required: true,\r\n            flagged: false,\r\n            value: null,\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        id: \"section-2\",\r\n        title: \"Safety Checks\",\r\n        description: \"Complete the following safety checks\",\r\n        questions: [\r\n          {\r\n            id: \"q5\",\r\n            text: \"Are all fire exits clear and accessible?\",\r\n            responseType: \"Yes/No\",\r\n            required: true,\r\n            flagged: true,\r\n            value: null,\r\n            logicRules: [\r\n              {\r\n                id: \"rule1\",\r\n                condition: \"is\",\r\n                value: \"No\",\r\n                trigger: \"require_action\",\r\n                message: \"Action required: Clear fire exits immediately\",\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: \"q6\",\r\n            text: \"How many fire extinguishers are available?\",\r\n            responseType: \"Number\",\r\n            required: true,\r\n            flagged: false,\r\n            value: null,\r\n            logicRules: [\r\n              {\r\n                id: \"rule2\",\r\n                condition: \"less than\",\r\n                value: 2,\r\n                trigger: \"display_message\",\r\n                message: \"Warning: There should be at least 2 fire extinguishers\",\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: \"q7\",\r\n            text: \"Select all safety equipment that is available\",\r\n            responseType: \"Multiple choice\",\r\n            required: true,\r\n            flagged: false,\r\n            multipleSelection: true,\r\n            options: [\"First aid kit\", \"Fire blanket\", \"Emergency lights\", \"Safety goggles\", \"Hard hats\"],\r\n            value: null,\r\n          },\r\n          {\r\n            id: \"q8\",\r\n            text: \"Upload a photo of the emergency assembly point\",\r\n            responseType: \"Media\",\r\n            required: true,\r\n            flagged: false,\r\n            value: null,\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        id: \"section-3\",\r\n        title: \"Additional Comments\",\r\n        questions: [\r\n          {\r\n            id: \"q9\",\r\n            text: \"Any additional comments or concerns?\",\r\n            responseType: \"Text\",\r\n            required: false,\r\n            flagged: false,\r\n            value: null,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  })\r\n\r\n  const [currentSectionIndex, setCurrentSectionIndex] = useState(0)\r\n  const [answers, setAnswers] = useState<Record<string, any>>({})\r\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({})\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [isComplete, setIsComplete] = useState(false)\r\n  const [activeMessages, setActiveMessages] = useState<Record<string, string>>({})\r\n  const [assignment, setAssignment] = useState<any>(null)\r\n  const [assignmentError, setAssignmentError] = useState<string | null>(null)\r\n\r\n  // Update answers when template changes\r\n  useEffect(() => {\r\n    if (!template) return\r\n\r\n    const initialAnswers: Record<string, any> = {}\r\n    template.sections.forEach((section) => {\r\n      section.questions.forEach((question) => {\r\n        initialAnswers[question.id] = question.value\r\n      })\r\n    })\r\n    setAnswers(initialAnswers)\r\n  }, [template])\r\n\r\n  // We'll use the handleAnswerChange function defined below\r\n\r\n  // Update inspector field when currentInspector changes\r\n  useEffect(() => {\r\n    if (!template || !currentInspector) return\r\n\r\n    // Find the inspector question in the template\r\n    let inspectorQuestionId: string | null = null;\r\n\r\n    // Search through all sections and questions to find the inspector field\r\n    template.sections.forEach((section) => {\r\n      section.questions.forEach((question) => {\r\n        if (question.responseType === \"Person\" && question.text.toLowerCase().includes(\"inspector\")) {\r\n          inspectorQuestionId = question.id;\r\n        }\r\n      })\r\n    })\r\n\r\n    // If we found the inspector question and it doesn't have a value yet, set it\r\n    if (inspectorQuestionId && (!answers[inspectorQuestionId] || answers[inspectorQuestionId] === \"\")) {\r\n      // Use a direct state update to avoid circular dependencies\r\n      setAnswers(prev => ({\r\n        ...prev,\r\n        [inspectorQuestionId as string]: currentInspector.name\r\n      }));\r\n\r\n      // Also update the template\r\n      setTemplate(prev => {\r\n        if (!prev) return prev;\r\n\r\n        return {\r\n          ...prev,\r\n          sections: prev.sections.map(section => ({\r\n            ...section,\r\n            questions: section.questions.map(q =>\r\n              q.id === inspectorQuestionId ? { ...q, value: currentInspector.name } : q\r\n            )\r\n          }))\r\n        };\r\n      });\r\n\r\n      console.log('Auto-filled inspector name:', currentInspector.name);\r\n    }\r\n  }, [currentInspector, template, answers])\r\n\r\n  // Check for triggered messages when answers change\r\n  useEffect(() => {\r\n    if (!template) return\r\n\r\n    const messages: Record<string, string> = {}\r\n\r\n    template.sections.forEach((section) => {\r\n      section.questions.forEach((question) => {\r\n        if (question.logicRules && question.logicRules.length > 0) {\r\n          for (const rule of question.logicRules) {\r\n            if (rule.trigger === \"display_message\" && isConditionMet(question, rule) && rule.message) {\r\n              messages[question.id] = rule.message\r\n            }\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    setActiveMessages(messages)\r\n  }, [answers, template])\r\n\r\n  // Redirect to dashboard after 2 seconds when inspection is complete\r\n  useEffect(() => {\r\n    let redirectTimer: NodeJS.Timeout | null = null;\r\n\r\n    if (isComplete) {\r\n      redirectTimer = setTimeout(() => {\r\n        navigate('/dashboard');\r\n      }, 2000);\r\n    }\r\n\r\n    return () => {\r\n      if (redirectTimer) clearTimeout(redirectTimer);\r\n    };\r\n  }, [isComplete, navigate])\r\n\r\n  // If template is still loading or not available, show loading state\r\n  if (!template) {\r\n    return (\r\n      <div className=\"question-answering-container\">\r\n        <div className=\"section-container\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '300px' }}>\r\n          <div style={{ textAlign: 'center' }}>\r\n            <div className=\"loading-spinner\" style={{ width: '40px', height: '40px', borderWidth: '4px', margin: '0 auto 20px' }}></div>\r\n            <p>Loading inspection template...</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const currentSection = template.sections[currentSectionIndex]\r\n\r\n  const handleAnswerChange = (questionId: string, value: any) => {\r\n    setAnswers((prev) => ({\r\n      ...prev,\r\n      [questionId]: value,\r\n    }))\r\n\r\n    // Update the template with the new value\r\n    setTemplate((prev) => {\r\n      if (!prev) return prev\r\n\r\n      return {\r\n        ...prev,\r\n        sections: prev.sections.map((section) => ({\r\n          ...section,\r\n          questions: section.questions.map((q) => (q.id === questionId ? { ...q, value } : q)),\r\n        }))\r\n      }\r\n    })\r\n\r\n    // Clear validation error if value is provided\r\n    if (value !== null && value !== undefined && value !== \"\") {\r\n      setValidationErrors((prev) => {\r\n        const newErrors = { ...prev }\r\n        delete newErrors[questionId]\r\n        return newErrors\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleMediaUpload = async (questionId: string, e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.target.files\r\n    if (!files || files.length === 0) return\r\n\r\n    try {\r\n      const file = files[0]\r\n      const reader = new FileReader()\r\n\r\n      reader.onload = async (event) => {\r\n        if (event.target?.result) {\r\n          try {\r\n            // Resize image if it's an image\r\n            const resizedImage = file.type.startsWith(\"image/\")\r\n              ? await resizeImage(event.target.result as string)\r\n              : (event.target.result as string)\r\n\r\n            handleAnswerChange(questionId, resizedImage)\r\n          } catch (error) {\r\n            console.error(\"Error processing media file:\", error)\r\n          }\r\n        }\r\n      }\r\n\r\n      reader.readAsDataURL(file)\r\n    } catch (error) {\r\n      console.error(\"Error uploading media:\", error)\r\n    }\r\n  }\r\n\r\n  const validateSection = (): boolean => {\r\n    const errors: Record<string, string> = {}\r\n\r\n    currentSection.questions.forEach((question) => {\r\n      if (question.required) {\r\n        const value = answers[question.id]\r\n        if (value === null || value === undefined || value === \"\" || (Array.isArray(value) && value.length === 0)) {\r\n          errors[question.id] = \"This field is required\"\r\n        }\r\n      }\r\n    })\r\n\r\n    setValidationErrors(errors)\r\n    return Object.keys(errors).length === 0\r\n  }\r\n\r\n  const goToNextSection = () => {\r\n    if (validateSection()) {\r\n      if (template && currentSectionIndex < template.sections.length - 1) {\r\n        setCurrentSectionIndex(currentSectionIndex + 1)\r\n        window.scrollTo(0, 0)\r\n      } else {\r\n        handleSubmit()\r\n      }\r\n    }\r\n  }\r\n\r\n  const goToPreviousSection = () => {\r\n    if (currentSectionIndex > 0) {\r\n      setCurrentSectionIndex(currentSectionIndex - 1)\r\n      window.scrollTo(0, 0)\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    if (!template) return\r\n\r\n    // Check if there's an assignment error\r\n    if (assignmentError) {\r\n      alert(assignmentError);\r\n      return;\r\n    }\r\n\r\n    // Check if the assignment is valid\r\n    if (assignment && ['completed', 'expired', 'revoked'].includes(assignment.status)) {\r\n      const statusMessages = {\r\n        'completed': 'This template has already been completed. It can only be answered again if reassigned by an admin.',\r\n        'expired': 'This assignment has expired. Please contact an admin for reassignment.',\r\n        'revoked': 'This assignment has been revoked. Please contact an admin for reassignment.'\r\n      };\r\n\r\n      const message = statusMessages[assignment.status as keyof typeof statusMessages] ||\r\n                     'This assignment cannot be submitted due to its current status.';\r\n\r\n      setAssignmentError(message);\r\n      alert(message);\r\n      return;\r\n    }\r\n\r\n    // Validate all sections\r\n    let hasErrors = false\r\n    const allErrors: Record<string, string> = {}\r\n\r\n    template.sections.forEach((section) => {\r\n      section.questions.forEach((question) => {\r\n        if (question.required) {\r\n          const value = answers[question.id]\r\n          if (value === null || value === undefined || value === \"\" || (Array.isArray(value) && value.length === 0)) {\r\n            allErrors[question.id] = \"This field is required\"\r\n            hasErrors = true\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    if (hasErrors) {\r\n      setValidationErrors(allErrors)\r\n      // Find the first section with errors\r\n      for (let i = 0; i < template.sections.length; i++) {\r\n        const section = template.sections[i]\r\n        const hasError = section.questions.some((q) => allErrors[q.id])\r\n        if (hasError) {\r\n          setCurrentSectionIndex(i)\r\n          break\r\n        }\r\n      }\r\n      return\r\n    }\r\n\r\n    setIsSubmitting(true)\r\n\r\n    try {\r\n      // Get template ID from URL\r\n      const templateId = getTemplateIdFromUrl()\r\n\r\n      // Get assignment ID if available\r\n      let assignmentId: string | number | null = assignment?.id || null;\r\n      if (!assignmentId) {\r\n        try {\r\n          const urlParams = new URLSearchParams(window.location.search);\r\n          assignmentId = urlParams.get('assignmentId');\r\n        } catch (e) {\r\n          console.log(\"No assignment ID in URL\");\r\n        }\r\n      }\r\n\r\n      // Prepare data for submission\r\n      const submissionData = {\r\n        template_id: templateId,\r\n        answers: answers,\r\n        completed_by: currentInspector?.id || null,\r\n        assignment_id: assignmentId\r\n      }\r\n\r\n      console.log(\"Submitting inspection data:\", submissionData)\r\n\r\n      // Submit the inspection data to the API\r\n      const responseData = await postData('users/submit-inspection/', submissionData);\r\n      console.log(\"Inspection submitted successfully:\", responseData);\r\n\r\n      // If this was part of an assignment, update the assignment status\r\n      if (assignmentId) {\r\n        try {\r\n          const completeResponse = await postData(`users/template-assignments/${assignmentId}/complete/`, {});\r\n          console.log(\"Assignment marked as completed\", completeResponse);\r\n        } catch (e) {\r\n          console.warn(\"Error updating assignment status:\", e);\r\n        }\r\n      }\r\n\r\n      setIsComplete(true)\r\n\r\n      // Redirect to dashboard after 3 seconds\r\n      setTimeout(() => {\r\n        navigate('/dashboard');\r\n      }, 3000);\r\n\r\n    } catch (error: any) {\r\n      console.error(\"Error submitting inspection:\", error);\r\n\r\n      // Check for specific error messages\r\n      if (error.response?.data?.detail) {\r\n        if (error.response.data.detail.includes('expired')) {\r\n          setAssignmentError('This assignment has expired and cannot be submitted.');\r\n        } else if (error.response.data.detail.includes('completed')) {\r\n          setAssignmentError('This template has already been completed.');\r\n        } else {\r\n          alert(error.response.data.detail);\r\n        }\r\n      } else {\r\n        alert(\"There was an error submitting your inspection. Please try again.\");\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false)\r\n    }\r\n  }\r\n\r\n  const renderQuestionResponse = (question: Question) => {\r\n    // We don't need to use value here as it's used in renderResponseInput\r\n    const error = validationErrors[question.id]\r\n    const message = activeMessages[question.id]\r\n\r\n    return (\r\n      <div className=\"question-container\" key={question.id}>\r\n        <div className=\"question-header\">\r\n          <div className=\"question-text\">\r\n            {question.text}\r\n            {question.required && <span className=\"required-indicator\">*</span>}\r\n            {question.flagged && <span className=\"flagged-indicator\">⚑</span>}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"question-response\">\r\n          {renderResponseInput(question)}\r\n\r\n          {error && (\r\n            <div className=\"error-message\">\r\n              <AlertTriangle size={16} />\r\n              <span>{error}</span>\r\n            </div>\r\n          )}\r\n\r\n          {message && (\r\n            <div className=\"warning-message\">\r\n              <AlertTriangle size={16} />\r\n              <span>{message}</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderResponseInput = (question: Question) => {\r\n    const value = answers[question.id]\r\n\r\n    switch (question.responseType) {\r\n      case \"Text\":\r\n        return (\r\n          <textarea\r\n            className=\"text-input\"\r\n            value={value || \"\"}\r\n            onChange={(e) => handleAnswerChange(question.id, e.target.value)}\r\n            placeholder=\"Enter your answer\"\r\n          />\r\n        )\r\n\r\n      case \"Number\":\r\n        return (\r\n          <input\r\n            type=\"number\"\r\n            className=\"number-input\"\r\n            value={value || \"\"}\r\n            onChange={(e) => handleAnswerChange(question.id, Number(e.target.value))}\r\n            placeholder=\"0\"\r\n          />\r\n        )\r\n\r\n      case \"Checkbox\":\r\n        return (\r\n          <label className=\"checkbox-input\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={!!value}\r\n              onChange={(e) => handleAnswerChange(question.id, e.target.checked)}\r\n            />\r\n            <span className=\"checkbox-label\">Yes</span>\r\n          </label>\r\n        )\r\n\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"yes-no-options\">\r\n            <button\r\n              className={`option-button ${value === \"Yes\" ? \"selected\" : \"\"}`}\r\n              onClick={() => handleAnswerChange(question.id, \"Yes\")}\r\n            >\r\n              Yes\r\n            </button>\r\n            <button\r\n              className={`option-button ${value === \"No\" ? \"selected\" : \"\"}`}\r\n              onClick={() => handleAnswerChange(question.id, \"No\")}\r\n            >\r\n              No\r\n            </button>\r\n            <button\r\n              className={`option-button ${value === \"N/A\" ? \"selected\" : \"\"}`}\r\n              onClick={() => handleAnswerChange(question.id, \"N/A\")}\r\n            >\r\n              N/A\r\n            </button>\r\n          </div>\r\n        )\r\n\r\n      case \"Multiple choice\":\r\n        return (\r\n          <div className=\"multiple-choice-options\">\r\n            {question.options?.map((option, index) => (\r\n              <label key={index} className=\"choice-option\">\r\n                <input\r\n                  type={question.multipleSelection ? \"checkbox\" : \"radio\"}\r\n                  name={`question-${question.id}`}\r\n                  checked={\r\n                    question.multipleSelection ? Array.isArray(value) && value.includes(option) : value === option\r\n                  }\r\n                  onChange={() => {\r\n                    if (question.multipleSelection) {\r\n                      const currentValues = Array.isArray(value) ? [...value] : []\r\n                      if (currentValues.includes(option)) {\r\n                        handleAnswerChange(\r\n                          question.id,\r\n                          currentValues.filter((v) => v !== option),\r\n                        )\r\n                      } else {\r\n                        handleAnswerChange(question.id, [...currentValues, option])\r\n                      }\r\n                    } else {\r\n                      handleAnswerChange(question.id, option)\r\n                    }\r\n                  }}\r\n                />\r\n                <span>{option}</span>\r\n              </label>\r\n            ))}\r\n          </div>\r\n        )\r\n\r\n      case \"Slider\":\r\n        return (\r\n          <div className=\"slider-container\">\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={value || 50}\r\n              onChange={(e) => handleAnswerChange(question.id, Number(e.target.value))}\r\n              className=\"slider-input\"\r\n            />\r\n            <div className=\"slider-value\">{value || 0}</div>\r\n          </div>\r\n        )\r\n\r\n      case \"Media\":\r\n        return (\r\n          <div className=\"media-upload-container\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*,video/*\"\r\n              id={`media-${question.id}`}\r\n              onChange={(e) => handleMediaUpload(question.id, e)}\r\n              className=\"sr-only\"\r\n            />\r\n\r\n            {!value ? (\r\n              <label htmlFor={`media-${question.id}`} className=\"media-upload-button\">\r\n                <ImageIcon size={20} />\r\n                <span>Upload media</span>\r\n              </label>\r\n            ) : (\r\n              <div className=\"media-preview\">\r\n                <img src={value || \"/placeholder.svg\"} alt=\"Uploaded media\" className=\"media-image\" />\r\n                <button className=\"media-remove-button\" onClick={() => handleAnswerChange(question.id, null)}>\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n\r\n      case \"Annotation\":\r\n        return (\r\n          <div className=\"annotation-container\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              id={`annotation-${question.id}`}\r\n              onChange={(e) => handleMediaUpload(question.id, e)}\r\n              className=\"sr-only\"\r\n            />\r\n\r\n            {!value ? (\r\n              <label htmlFor={`annotation-${question.id}`} className=\"annotation-upload-button\">\r\n                <ImageIcon size={20} />\r\n                <span>Upload image to annotate</span>\r\n              </label>\r\n            ) : (\r\n              <div className=\"annotation-preview\">\r\n                <img src={value || \"/placeholder.svg\"} alt=\"Annotation\" className=\"annotation-image\" />\r\n                <button className=\"annotation-remove-button\" onClick={() => handleAnswerChange(question.id, null)}>\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n\r\n      case \"Date & Time\":\r\n      case \"Inspection date\":\r\n        return (\r\n          <div className=\"date-time-container\">\r\n            <input\r\n              type=\"datetime-local\"\r\n              value={value || \"\"}\r\n              onChange={(e) => handleAnswerChange(question.id, e.target.value)}\r\n              className=\"date-time-input\"\r\n            />\r\n          </div>\r\n        )\r\n\r\n      case \"Site\":\r\n        const siteOptions = [\"Main Site\", \"Secondary Site\", \"Remote Location\", \"Headquarters\"]\r\n        return (\r\n          <div className=\"dropdown-container\">\r\n            <select\r\n              value={value || \"\"}\r\n              onChange={(e) => handleAnswerChange(question.id, e.target.value)}\r\n              className=\"dropdown-input\"\r\n            >\r\n              <option value=\"\" disabled>\r\n                Select site\r\n              </option>\r\n              {siteOptions.map((option) => (\r\n                <option key={option} value={option}>\r\n                  {option}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <ChevronDown className=\"dropdown-icon\" />\r\n          </div>\r\n        )\r\n\r\n      case \"Person\":\r\n        // If this is the inspector field and we have current inspector info, use it\r\n        if (question.text.toLowerCase().includes(\"inspector\")) {\r\n          // Create options array with current inspector if available\r\n          const inspectorOptions = currentInspector\r\n            ? [currentInspector.name]\r\n            : [\"No assigned inspector\"];\r\n\r\n          // If we have the current inspector and no value is set, set it automatically\r\n          if (currentInspector && !value) {\r\n            // Use setTimeout to avoid state update during render\r\n            setTimeout(() => {\r\n              handleAnswerChange(question.id, currentInspector.name);\r\n            }, 0);\r\n          }\r\n\r\n          return (\r\n            <div className=\"dropdown-container\">\r\n              <select\r\n                value={value || \"\"}\r\n                onChange={(e) => handleAnswerChange(question.id, e.target.value)}\r\n                className=\"dropdown-input\"\r\n              >\r\n                <option value=\"\" disabled>\r\n                  Select inspector\r\n                </option>\r\n                {inspectorOptions.map((option) => (\r\n                  <option key={option} value={option}>\r\n                    {option} {option === currentInspector?.name ? \"(Current Inspector)\" : \"\"}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <ChevronDown className=\"dropdown-icon\" />\r\n            </div>\r\n          );\r\n        } else {\r\n          // For other person fields, use default options\r\n          const personOptions = [\"John Doe\", \"Jane Smith\", \"Alex Johnson\", \"Sam Wilson\"]\r\n          return (\r\n            <div className=\"dropdown-container\">\r\n              <select\r\n                value={value || \"\"}\r\n                onChange={(e) => handleAnswerChange(question.id, e.target.value)}\r\n                className=\"dropdown-input\"\r\n              >\r\n                <option value=\"\" disabled>\r\n                  Select person\r\n                </option>\r\n                {personOptions.map((option) => (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <ChevronDown className=\"dropdown-icon\" />\r\n            </div>\r\n          );\r\n        }\r\n\r\n      case \"Inspection location\":\r\n        const locationOptions = [\"Main Building\", \"Warehouse\", \"Office\", \"Factory Floor\", \"Parking Lot\"]\r\n        return (\r\n          <div className=\"dropdown-container\">\r\n            <select\r\n              value={value || \"\"}\r\n              onChange={(e) => handleAnswerChange(question.id, e.target.value)}\r\n              className=\"dropdown-input\"\r\n            >\r\n              <option value=\"\" disabled>\r\n                Select location\r\n              </option>\r\n              {locationOptions.map((option) => (\r\n                <option key={option} value={option}>\r\n                  {option}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <ChevronDown className=\"dropdown-icon\" />\r\n          </div>\r\n        )\r\n\r\n      default:\r\n        return <div>Unsupported response type</div>\r\n    }\r\n  }\r\n\r\n\r\n\r\n  if (isComplete) {\r\n    return (\r\n      <div className=\"question-answering-container\">\r\n        <div className=\"completion-screen\">\r\n          <div className=\"completion-icon\">\r\n            <CheckCircle size={64} />\r\n          </div>\r\n          <h2>Inspection Complete!</h2>\r\n          <p>Thank you for completing this inspection. Your responses have been submitted successfully.</p>\r\n          <p>Redirecting to dashboard...</p>\r\n          <button\r\n            className=\"primary-button\"\r\n            onClick={() => navigate('/dashboard')}\r\n          >\r\n            Go to Dashboard\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Show assignment error if there is one\r\n  if (assignmentError) {\r\n    return (\r\n      <div className=\"question-answering-container\">\r\n        <div className=\"error-screen\">\r\n          <div className=\"error-icon\">\r\n            <AlertTriangle size={64} />\r\n          </div>\r\n          <h2>Assignment Error</h2>\r\n          <p>{assignmentError}</p>\r\n          <button\r\n            className=\"primary-button\"\r\n            onClick={() => navigate('/dashboard')}\r\n          >\r\n            Go to Dashboard\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"question-answering-container\">\r\n      <div className=\"template-header\">\r\n        <div className=\"template-logo-container\">\r\n          {template.logo && (\r\n            <img src={template.logo || \"/placeholder.svg\"} alt=\"Template logo\" className=\"template-logo\" />\r\n          )}\r\n        </div>\r\n        <div className=\"template-info\">\r\n          <h1 className=\"template-title\">{template.title}</h1>\r\n          <p className=\"template-description\">{template.description}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"progress-indicator\">\r\n        <div className=\"progress-bar\">\r\n          <div\r\n            className=\"progress-fill\"\r\n            style={{ width: `${((currentSectionIndex + 1) / template.sections.length) * 100}%` }}\r\n          ></div>\r\n        </div>\r\n        <div className=\"progress-text\">\r\n          Section {currentSectionIndex + 1} of {template.sections.length}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"section-container\">\r\n        <h2 className=\"section-title\">{currentSection.title}</h2>\r\n        {currentSection.description && <p className=\"section-description\">{currentSection.description}</p>}\r\n\r\n        <div className=\"questions-list\">\r\n          {currentSection.questions.map((question) => renderQuestionResponse(question))}\r\n        </div>\r\n\r\n        <div className=\"navigation-buttons\">\r\n          {currentSectionIndex > 0 && (\r\n            <button className=\"secondary-button\" onClick={goToPreviousSection}>\r\n              <ArrowLeft size={16} />\r\n              Previous\r\n            </button>\r\n          )}\r\n\r\n          <button className=\"primary-button\" onClick={goToNextSection} disabled={isSubmitting}>\r\n            {isSubmitting ? (\r\n              <span className=\"loading-spinner\"></span>\r\n            ) : currentSectionIndex < template.sections.length - 1 ? (\r\n              \"Next\"\r\n            ) : (\r\n              \"Submit\"\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionAnswering\r\n","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\garment-template.tsx",["119","120","121"],"\r\n\"use client\"\r\n\r\nimport React, { useState, useRef, useEffect } from \"react\"\r\nimport { useNavigate, useParams } from \"react-router-dom\"\r\nimport { ChevronDown, ChevronUp, Edit, Plus, Calendar, User, MapPin, X, Check, ImageIcon, Trash2, Move, Clock, ArrowLeft, ArrowRight, CheckCircle, Settings, Ruler, Box, List, Shirt, FileText, Printer, Hash, CircleDot, Equal, ListFilter, Bell, MessageSquare, AlertTriangle, Upload, ClipboardCheck } from 'lucide-react'\r\nimport \"./garment-template.css\"\r\nimport \"./print-styles.css\"\r\nimport AccessManager from \"./components/AccessManager\"\r\nimport TemplateAssignmentManager from \"./components/TemplateAssignmentManager\"\r\nimport { getAqlCodeLetter, getSamplePlan } from \"../utils/aqlHelpers\"\r\nimport { InspectionLevel as AqlInspectionLevel } from \"../utils/aqlTables\";\r\n\r\n// Types\r\ntype ResponseType =\r\n  | \"Site\"\r\n  | \"Inspection date\"\r\n  | \"Person\"\r\n  | \"Inspection location\"\r\n  | \"Text\"\r\n  | \"Number\"\r\n  | \"Checkbox\"\r\n  | \"Yes/No\"\r\n  | \"Multiple choice\"\r\n  | \"Slider\"\r\n  | \"Media\"\r\n  | \"Annotation\"\r\n  | \"Date & Time\"\r\n\r\n// Kept for future implementation of conditional logic\r\n// Commented out to avoid unused variable warning\r\n/*\r\ntype LogicOperator =\r\n  | \"equals\"\r\n  | \"notEquals\"\r\n  | \"greaterThan\"\r\n  | \"lessThan\"\r\n  | \"greaterThanOrEqual\"\r\n  | \"lessThanOrEqual\"\r\n  | \"between\"\r\n  | \"isOneOf\"\r\n  | \"isNotOneOf\"\r\n  | \"contains\"\r\n  | \"notContains\"\r\n  | \"startsWith\"\r\n  | \"endsWith\"\r\n  | \"matches\"\r\n*/\r\n\r\ntype TriggerAction = \"require_action\" | \"require_evidence\" | \"notify\" | \"ask_questions\" | \"display_message\"\r\n\r\ntype LogicCondition =\r\n  | \"is\"\r\n  | \"is not\"\r\n  | \"contains\"\r\n  | \"not contains\"\r\n  | \"starts with\"\r\n  | \"ends with\"\r\n  | \"matches (regex)\"\r\n  | \"less than\"\r\n  | \"less than or equal to\"\r\n  | \"equal to\"\r\n  | \"not equal to\"\r\n  | \"greater than or equal to\"\r\n  | \"greater than\"\r\n  | \"between\"\r\n  | \"not between\"\r\n  | \"is one of\"\r\n  | \"is not one of\"\r\n\r\ninterface LogicRule {\r\n  id: string\r\n  condition: LogicCondition\r\n  value: string | number | string[] | [number, number] | null\r\n  trigger: TriggerAction | null\r\n  triggerConfig?: any\r\n  message?: string\r\n  subQuestion?: {\r\n    text: string\r\n    responseType: ResponseType\r\n    options?: string[]\r\n  }\r\n}\r\n\r\ninterface Question {\r\n  id: string\r\n  text: string\r\n  responseType: ResponseType\r\n  required: boolean\r\n  flagged: boolean\r\n  options?: string[]\r\n  value?: string | string[] | boolean | number | null\r\n  logicRules?: LogicRule[]\r\n  multipleSelection?: boolean\r\n}\r\n\r\n// Garment-specific types\r\ntype AQLLevel = \"1.5\" | \"2.5\" | \"4.0\" | \"6.5\"\r\ntype InspectionLevel = \"I\" | \"II\" | \"III\"\r\ntype SamplingPlan = \"Single\" | \"Double\" | \"Multiple\"\r\ntype Severity = \"Normal\" | \"Tightened\" | \"Reduced\"\r\n\r\ninterface GarmentDetailsContent {\r\n  aqlSettings: {\r\n    aqlLevel: AQLLevel\r\n    inspectionLevel: InspectionLevel\r\n    samplingPlan: SamplingPlan\r\n    severity: Severity\r\n  }\r\n  sizes: string[]\r\n  colors: string[]\r\n  includeCartonOffered: boolean\r\n  includeCartonInspected: boolean\r\n  defaultDefects: string[]\r\n}\r\n\r\ninterface StandardSectionContent {\r\n  description?: string\r\n  questions: Question[]\r\n}\r\n\r\ntype SectionType = \"standard\" | \"garmentDetails\"\r\n\r\ninterface AppSection {\r\n  id: string\r\n  type: SectionType\r\n  title: string\r\n  isCollapsed: boolean\r\n  content: StandardSectionContent | GarmentDetailsContent\r\n}\r\n\r\ninterface Template {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  logo?: string\r\n  sections: AppSection[]\r\n  lastSaved?: Date\r\n  lastPublished?: Date\r\n  startDate?: string\r\n  dueDate?: string\r\n}\r\n\r\ninterface ReportData {\r\n  quantities: {\r\n    [color: string]: {\r\n      [size: string]: QuantityData\r\n    }\r\n  }\r\n  cartonOffered: string\r\n  cartonInspected: string\r\n  cartonToInspect: string\r\n  defects: {\r\n    type: string\r\n    remarks: string\r\n    critical: number | string\r\n    major: number | string\r\n    minor: number | string\r\n    images?: string[]\r\n  }[]\r\n  aqlSettings: {\r\n    aqlLevel: AQLLevel\r\n    inspectionLevel: InspectionLevel\r\n    samplingPlan: SamplingPlan\r\n    severity: Severity\r\n    status: \"PASS\" | \"FAIL\"\r\n  }\r\n  editingAql: boolean\r\n  newSize: string\r\n  newColor: string\r\n  questionAnswers: {\r\n    [questionId: string]: string | string[] | boolean | number | null\r\n  }\r\n  // Track active triggers for each question\r\n  activeTriggers?: {\r\n    [questionId: string]: { rule: LogicRule; question: Question; section: AppSection }[]\r\n  }\r\n  // Track evidence for questions that require it\r\n  questionEvidence?: {\r\n    [questionId: string]: string[]\r\n  }\r\n  // Track action responses for questions that require actions\r\n  actionResponses?: {\r\n    [questionId: string]: {\r\n      [ruleId: string]: string\r\n    }\r\n  }\r\n  // Track subquestion answers\r\n  subQuestionAnswers?: {\r\n    [questionId: string]: {\r\n      [ruleId: string]: string\r\n    }\r\n  }\r\n}\r\n\r\n// Update the type for quantities in ReportData\r\ninterface QuantityData {\r\n  [key: string]: string; // This allows indexing with strings\r\n  orderQty: string;\r\n  offeredQty: string;\r\n}\r\n\r\n// Type for defect fields\r\ninterface DefectData {\r\n  type: string;\r\n  remarks: string;\r\n  critical: number | string;\r\n  major: number | string;\r\n  minor: number | string;\r\n  images?: string[];\r\n  [key: string]: any; // Add index signature\r\n}\r\n\r\n// Constants\r\nconst AQL_LEVELS: AQLLevel[] = [\"1.5\", \"2.5\", \"4.0\", \"6.5\"]\r\nconst INSPECTION_LEVELS: InspectionLevel[] = [\"I\", \"II\", \"III\"]\r\nconst SAMPLING_PLANS: SamplingPlan[] = [\"Single\", \"Double\", \"Multiple\"]\r\nconst SEVERITIES: Severity[] = [\"Normal\", \"Tightened\", \"Reduced\"]\r\nconst DEFAULT_SIZES = [\"S\", \"M\", \"L\", \"XL\", \"XXL\"]\r\nconst DEFAULT_COLORS = [\"BLUE\", \"RED\", \"BLACK\"]\r\nconst DEFAULT_DEFECTS = [\"Stitching\", \"Fabric\", \"Color\", \"Measurement\", \"Packing\"]\r\n\r\n// Utility Functions\r\nconst generateId = () => Math.random().toString(36).substring(2, 9)\r\n// Used for logic rules implementation\r\nconst generateRuleId = () => `rule_${Math.random().toString(36).substring(2, 9)}`\r\n\r\nconst getDefaultQuestion = (responseType: ResponseType = \"Text\"): Question => ({\r\n  id: generateId(),\r\n  text: \"Type question\",\r\n  responseType,\r\n  required: false,\r\n  flagged: false,\r\n  multipleSelection: false,\r\n  options:\r\n    responseType === \"Multiple choice\" || responseType === \"Yes/No\" ? [\"Option 1\", \"Option 2\", \"Option 3\"] : undefined,\r\n  value: null,\r\n  logicRules: [],\r\n})\r\n\r\nconst getDefaultStandardSection = (title = \"Untitled Page\"): AppSection => ({\r\n  id: generateId(),\r\n  type: \"standard\",\r\n  title,\r\n  isCollapsed: false,\r\n  content: {\r\n    questions: [],\r\n  },\r\n})\r\n\r\nconst getDefaultGarmentDetailsSection = (): AppSection => ({\r\n  id: generateId(),\r\n  type: \"garmentDetails\",\r\n  title: \"Garment Inspection Details\",\r\n  isCollapsed: false,\r\n  content: {\r\n    aqlSettings: {\r\n      aqlLevel: \"2.5\",\r\n      inspectionLevel: \"II\",\r\n      samplingPlan: \"Single\",\r\n      severity: \"Normal\",\r\n    },\r\n    sizes: [...DEFAULT_SIZES],\r\n    colors: [...DEFAULT_COLORS],\r\n    includeCartonOffered: true,\r\n    includeCartonInspected: true,\r\n    defaultDefects: [...DEFAULT_DEFECTS],\r\n  },\r\n})\r\n\r\nconst getInitialTemplate = (): Template => {\r\n  const titlePageSection: AppSection = {\r\n    id: generateId(),\r\n    type: \"standard\",\r\n    title: \"Title Page\",\r\n    isCollapsed: false,\r\n    content: {\r\n      description: \"The Title Page is the first page of your garment inspection report.\",\r\n      questions: [\r\n        {\r\n          id: generateId(),\r\n          text: \"Report No\",\r\n          responseType: \"Text\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Factory Name\",\r\n          responseType: \"Text\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Style No\",\r\n          responseType: \"Text\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Site conducted\",\r\n          responseType: \"Site\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Prepared by\",\r\n          responseType: \"Person\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Location\",\r\n          responseType: \"Inspection location\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n      ],\r\n    },\r\n  }\r\n\r\n  const garmentDetailsSection = getDefaultGarmentDetailsSection()\r\n\r\n  return {\r\n    id: generateId(),\r\n    title: \"Untitled Garment Template\",\r\n    description: \"Add a description for this garment inspection template\",\r\n    sections: [titlePageSection, garmentDetailsSection],\r\n    lastSaved: new Date(),\r\n    lastPublished: new Date(),\r\n    logo: undefined,\r\n  }\r\n}\r\n\r\nconst resizeImage = (base64: string): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = document.createElement(\"img\")\r\n    img.crossOrigin = \"anonymous\"\r\n    img.src = base64\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\")\r\n      const MAX_WIDTH = 500\r\n      const scale = Math.min(MAX_WIDTH / img.width, 1)\r\n      canvas.width = img.width * scale\r\n      canvas.height = img.height * scale\r\n      const ctx = canvas.getContext(\"2d\")\r\n      if (ctx) {\r\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n        resolve(canvas.toDataURL(\"image/jpeg\", 0.8))\r\n      } else {\r\n        reject(new Error(\"Failed to get canvas context\"))\r\n      }\r\n    }\r\n    img.onerror = () => reject(new Error(\"Failed to load image\"))\r\n  })\r\n}\r\n\r\n// Type guard function to check if content is GarmentDetailsContent\r\nfunction isGarmentDetailsContent(content: StandardSectionContent | GarmentDetailsContent): content is GarmentDetailsContent {\r\n  return 'aqlSettings' in content && 'sizes' in content && 'colors' in content;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst renderQuestionResponse = (\r\n  question: Question,\r\n  sectionId: string,\r\n  updateQuestion: (sectionId: string, questionId: string, updates: Partial<Question>) => void\r\n) => {\r\n  switch (question.responseType) {\r\n    case \"Text\":\r\n      return (\r\n        <div className=\"response-field text-field\">\r\n          <div className=\"text-input\">Text answer</div>\r\n        </div>\r\n      );\r\n    case \"Number\":\r\n      return (\r\n        <div className=\"response-field number-field\">\r\n          <input\r\n            type=\"number\"\r\n            className=\"number-input\"\r\n            value={(question.value as number) || \"\"}\r\n            onChange={(e) => updateQuestion(sectionId, question.id, { value: Number(e.target.value) })}\r\n            placeholder=\"0\"\r\n          />\r\n        </div>\r\n      );\r\n    case \"Checkbox\":\r\n      return (\r\n        <div className=\"response-field checkbox-field\">\r\n          <div className=\"checkbox-input\">\r\n            <div className=\"checkbox\"></div>\r\n          </div>\r\n        </div>\r\n      );\r\n    case \"Yes/No\":\r\n      return (\r\n        <div className=\"response-field yes-no-field\">\r\n          <div className=\"yes-no-options\">\r\n            <button className=\"yes-option\">Yes</button>\r\n            <button className=\"no-option\">No</button>\r\n            <button className=\"na-option\">N/A</button>\r\n          </div>\r\n        </div>\r\n      );\r\n    case \"Multiple choice\":\r\n      return (\r\n        <div className=\"response-field multiple-choice-field\">\r\n          <div className=\"multiple-choice-options\">\r\n            {(question.options || []).map((option, idx) => (\r\n              <div key={idx} className=\"choice-option-container\">\r\n                <input\r\n                  type=\"text\"\r\n                  className={`choice-option-input choice-${idx % 4}`}\r\n                  value={option}\r\n                  onChange={(e) => {\r\n                    const updatedOptions = [...(question.options || [])];\r\n                    updatedOptions[idx] = e.target.value;\r\n                    updateQuestion(sectionId, question.id, { options: updatedOptions });\r\n                  }}\r\n                  placeholder={`Option ${idx + 1}`}\r\n                />\r\n                <button\r\n                  className=\"remove-option-button\"\r\n                  onClick={() => {\r\n                    const updatedOptions = [...(question.options || [])];\r\n                    updatedOptions.splice(idx, 1);\r\n                    updateQuestion(sectionId, question.id, { options: updatedOptions });\r\n                  }}\r\n                >\r\n                  <X size={14} />\r\n                </button>\r\n              </div>\r\n            ))}\r\n            <button\r\n              className=\"add-option-button\"\r\n              onClick={() => {\r\n                const updatedOptions = [...(question.options || []), `Option ${(question.options || []).length + 1}`];\r\n                updateQuestion(sectionId, question.id, { options: updatedOptions });\r\n              }}\r\n            >\r\n              <Plus size={14} />\r\n              <span>Add Option</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    case \"Slider\":\r\n      return (\r\n        <div className=\"response-field slider-field\">\r\n          <div className=\"slider-container\">\r\n            <div className=\"slider-track\">\r\n              <div className=\"slider-thumb\"></div>\r\n            </div>\r\n            <div className=\"slider-labels\">\r\n              <span>0</span>\r\n              <span>50</span>\r\n              <span>100</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    case \"Media\":\r\n      return (\r\n        <div className=\"response-field media-field\">\r\n          <input\r\n            type=\"file\"\r\n            accept=\"image/*,video/*\"\r\n            multiple\r\n            onChange={async (e) => {\r\n              const files = e.target.files;\r\n              if (!files || files.length === 0) return;\r\n\r\n              // Convert files to base64 and store them\r\n              const mediaFiles: string[] = [];\r\n\r\n              for (let i = 0; i < files.length; i++) {\r\n                const file = files[i];\r\n                const reader = new FileReader();\r\n\r\n                reader.onload = async (event) => {\r\n                  const result = event.target?.result as string;\r\n                  if (result) {\r\n                    try {\r\n                      // Resize image if it's an image\r\n                      const resizedImage = file.type.startsWith('image/')\r\n                        ? await resizeImage(result)\r\n                        : result;\r\n\r\n                      mediaFiles.push(resizedImage);\r\n\r\n                      // Update the question with the new media files\r\n                      if (mediaFiles.length === files.length) {\r\n                        updateQuestion(sectionId, question.id, {\r\n                          value: mediaFiles\r\n                        });\r\n                      }\r\n                    } catch (error) {\r\n                      console.error(\"Error processing media file:\", error);\r\n                    }\r\n                  }\r\n                };\r\n\r\n                reader.readAsDataURL(file);\r\n              }\r\n            }}\r\n            className=\"media-file-input\"\r\n            id={`media-upload-${question.id}`}\r\n          />\r\n          <label htmlFor={`media-upload-${question.id}`} className=\"media-upload\">\r\n            <ImageIcon size={20} />\r\n            <span>Upload media</span>\r\n          </label>\r\n\r\n          {/* Display uploaded media previews */}\r\n          {Array.isArray(question.value) && question.value.length > 0 && (\r\n            <div className=\"media-previews\">\r\n              {question.value.map((media, index) => (\r\n                <div key={index} className=\"media-preview-item\">\r\n                  {media.startsWith('data:image') ? (\r\n                    <img src={media || \"/placeholder.svg\"} alt={`Uploaded media ${index + 1}`} />\r\n                  ) : (\r\n                    <div className=\"video-preview\">\r\n                      <FileText size={24} />\r\n                      <span>Media file {index + 1}</span>\r\n                    </div>\r\n                  )}\r\n                  <button\r\n                    className=\"remove-media-button\"\r\n                    onClick={() => {\r\n                      const updatedMedia = [...question.value as string[]];\r\n                      updatedMedia.splice(index, 1);\r\n                      updateQuestion(sectionId, question.id, { value: updatedMedia });\r\n                    }}\r\n                  >\r\n                    <X size={16} />\r\n                  </button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    case \"Annotation\":\r\n      return (\r\n        <div className=\"response-field annotation-field\">\r\n          <div className=\"signature-container\">\r\n            <div className=\"signature-canvas-wrapper\">\r\n              {question.value && typeof question.value === 'string' && question.value.startsWith('data:image/png') ? (\r\n                <div className=\"signature-preview\">\r\n                  <img src={question.value} alt=\"Signature\" className=\"signature-image\" />\r\n                </div>\r\n              ) : (\r\n                <div className=\"annotation-placeholder-box\">\r\n                  Click to sign in the report page\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    case \"Date & Time\":\r\n    case \"Inspection date\":\r\n      return (\r\n        <div className=\"response-field date-time-field\">\r\n          <div className=\"date-time-input\">\r\n            <Calendar size={16} />\r\n            <span>{new Date().toLocaleDateString()}</span>\r\n          </div>\r\n        </div>\r\n      );\r\n    case \"Site\":\r\n    case \"Person\":\r\n      return (\r\n        <div className=\"response-field dropdown-input\">\r\n          <div className=\"dropdown-input\">\r\n            <span>Select {question.responseType.toLowerCase()}</span>\r\n            <ChevronDown size={16} />\r\n          </div>\r\n        </div>\r\n      );\r\n    case \"Inspection location\":\r\n      return (\r\n        <div className=\"response-field location-field\">\r\n          <div className=\"location-input-wrapper\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"text-input\"\r\n              value={(question.value as string) || \"\"}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { value: e.target.value })}\r\n              placeholder=\"Enter city, area, or address\"\r\n            />\r\n            <button\r\n              className=\"location-button\"\r\n              title=\"Get current location\"\r\n              onClick={() => {\r\n                if (navigator.geolocation) {\r\n                  navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                      // Get coordinates\r\n                      const coords = `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`;\r\n\r\n                      // Try to get address from coordinates using reverse geocoding\r\n                      fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${position.coords.latitude}&lon=${position.coords.longitude}`)\r\n                        .then(response => response.json())\r\n                        .then(data => {\r\n                          let locationText = '';\r\n                          if (data && data.address) {\r\n                            const address = data.address;\r\n                            // Create a readable address from components\r\n                            const components = [];\r\n                            if (address.city || address.town || address.village) {\r\n                              components.push(address.city || address.town || address.village);\r\n                            }\r\n                            if (address.state || address.county) {\r\n                              components.push(address.state || address.county);\r\n                            }\r\n                            if (address.country) {\r\n                              components.push(address.country);\r\n                            }\r\n                            locationText = components.join(', ');\r\n                          }\r\n\r\n                          // If we couldn't get a readable address, use coordinates\r\n                          if (!locationText) {\r\n                            locationText = coords;\r\n                          }\r\n\r\n                          updateQuestion(sectionId, question.id, { value: locationText });\r\n                        })\r\n                        .catch(error => {\r\n                          console.error(\"Error getting location name:\", error);\r\n                          // Fallback to coordinates if geocoding fails\r\n                          updateQuestion(sectionId, question.id, { value: coords });\r\n                        });\r\n                    },\r\n                    (error) => {\r\n                      alert(\"Error getting location: \" + error.message);\r\n                    }\r\n                  );\r\n                } else {\r\n                  alert(\"Geolocation is not supported by this browser.\");\r\n                }\r\n              }}\r\n            >\r\n              <MapPin size={14} />\r\n            </button>\r\n          </div>\r\n          {question.value && (\r\n            <div className=\"location-display\">\r\n              <MapPin size={12} />\r\n              <span>{question.value}</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    default:\r\n      return <div className=\"response-field\">Unsupported response type</div>;\r\n  }\r\n};\r\n\r\n// Define supported types for logic\r\nconst LOGIC_SUPPORTED_TYPES: ResponseType[] = [\"Text\", \"Number\", \"Checkbox\", \"Yes/No\", \"Multiple choice\", \"Slider\"];\r\n\r\n// Helper function to get condition icon\r\nconst getConditionIcon = (condition: LogicCondition) => {\r\n  switch (condition) {\r\n    case \"is\":\r\n      return <Equal className=\"condition-icon\" />\r\n    case \"is not\":\r\n      return <X className=\"condition-icon\" />\r\n    case \"contains\":\r\n      return <CircleDot className=\"condition-icon\" />\r\n    case \"not contains\":\r\n      return <X className=\"condition-icon\" />\r\n    case \"starts with\":\r\n      return <ArrowRight className=\"condition-icon\" />\r\n    case \"ends with\":\r\n      return <ArrowLeft className=\"condition-icon\" />\r\n    case \"matches (regex)\":\r\n      return <Hash className=\"condition-icon\" />\r\n    case \"less than\":\r\n      return <ArrowLeft className=\"condition-icon\" />\r\n    case \"less than or equal to\":\r\n      return <ArrowLeft className=\"condition-icon\" />\r\n    case \"equal to\":\r\n      return <Equal className=\"condition-icon\" />\r\n    case \"not equal to\":\r\n      return <X className=\"condition-icon\" />\r\n    case \"greater than or equal to\":\r\n      return <ArrowRight className=\"condition-icon\" />\r\n    case \"greater than\":\r\n      return <ArrowRight className=\"condition-icon\" />\r\n    case \"between\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"not between\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"is one of\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"is not one of\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    default:\r\n      return <Equal className=\"condition-icon\" />\r\n  }\r\n}\r\n\r\n// Utility type guard\r\nconst isStringArray = (value: unknown): value is string[] =>\r\n  Array.isArray(value) && value.every((v: unknown) => typeof v === \"string\")\r\n\r\n// Helper function to check if a trigger should be shown based on the question's logic rules\r\nconst shouldShowTrigger = (question: Question, triggerType: TriggerAction): boolean => {\r\n  if (!question.logicRules || question.logicRules.length === 0) return false\r\n  if (question.value === null || question.value === undefined) return false\r\n\r\n  for (const rule of question.logicRules) {\r\n    // Skip rules that don't match the trigger type\r\n    if (rule.trigger !== triggerType) continue\r\n\r\n    // Skip rules with null values (except for \"is\" and \"is not\" conditions)\r\n    if (rule.value === null && rule.condition !== \"is\" && rule.condition !== \"is not\") continue\r\n\r\n    // Evaluate the condition based on the current value\r\n    const value = question.value\r\n    let conditionMet = false\r\n\r\n    try {\r\n      switch (rule.condition) {\r\n        case \"is\":\r\n          conditionMet = String(value) === String(rule.value)\r\n          break\r\n        case \"is not\":\r\n          conditionMet = String(value) !== String(rule.value)\r\n          break\r\n        case \"contains\":\r\n          conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.includes(rule.value)\r\n          break\r\n        case \"not contains\":\r\n          conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && !value.includes(rule.value)\r\n          break\r\n        case \"starts with\":\r\n          conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.startsWith(rule.value)\r\n          break\r\n        case \"ends with\":\r\n          conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.endsWith(rule.value)\r\n          break\r\n        case \"greater than\":\r\n          conditionMet = Number(value) > Number(rule.value)\r\n          break\r\n        case \"less than\":\r\n          conditionMet = Number(value) < Number(rule.value)\r\n          break\r\n        case \"equal to\":\r\n          conditionMet = Number(value) === Number(rule.value)\r\n          break\r\n        case \"not equal to\":\r\n          conditionMet = Number(value) !== Number(rule.value)\r\n          break\r\n        case \"greater than or equal to\":\r\n          conditionMet = Number(value) >= Number(rule.value)\r\n          break\r\n        case \"less than or equal to\":\r\n          conditionMet = Number(value) <= Number(rule.value)\r\n          break\r\n        case \"between\":\r\n          conditionMet =\r\n            Array.isArray(rule.value) &&\r\n            rule.value.length === 2 &&\r\n            Number(value) >= Number(rule.value[0]) &&\r\n            Number(value) <= Number(rule.value[1])\r\n          break\r\n        case \"is one of\":\r\n          conditionMet = isStringArray(rule.value) && rule.value.includes(String(value))\r\n          break\r\n        case \"is not one of\":\r\n          conditionMet = isStringArray(rule.value) && !rule.value.includes(String(value))\r\n          break\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error evaluating condition:\", error);\r\n      continue; // Skip this rule if there's an error\r\n    }\r\n\r\n    if (conditionMet) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n// Enhanced Logic Components\r\nconst EnhancedLogicConditionSelector: React.FC<{\r\n  questionType: ResponseType\r\n  selectedCondition: LogicCondition\r\n  onConditionChange: (condition: LogicCondition) => void\r\n  className?: string\r\n}> = ({ questionType, selectedCondition, onConditionChange, className = \"\" }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [availableConditions, setAvailableConditions] = useState<LogicCondition[]>([])\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n\r\n  useEffect(() => {\r\n    const conditions: LogicCondition[] = (() => {\r\n      switch (questionType) {\r\n        case \"Text\":\r\n          return [\"is\", \"is not\", \"contains\", \"not contains\", \"starts with\", \"ends with\", \"matches (regex)\"]\r\n        case \"Number\":\r\n        case \"Slider\":\r\n          return [\r\n            \"less than\",\r\n            \"less than or equal to\",\r\n            \"equal to\",\r\n            \"not equal to\",\r\n            \"greater than or equal to\",\r\n            \"greater than\",\r\n            \"between\",\r\n            \"not between\",\r\n          ]\r\n        case \"Checkbox\":\r\n        case \"Yes/No\":\r\n          return [\"is\", \"is not\"]\r\n        case \"Multiple choice\":\r\n          return [\"is\", \"is not\", \"is one of\", \"is not one of\"]\r\n        case \"Media\":\r\n        case \"Annotation\":\r\n          return [\"is\", \"is not\"]\r\n        case \"Date & Time\":\r\n          return [\"is\", \"is not\", \"less than\", \"greater than\", \"between\"]\r\n        case \"Site\":\r\n        case \"Person\":\r\n        case \"Inspection location\":\r\n          return [\"is\", \"is not\", \"is one of\", \"is not one of\"]\r\n        default:\r\n          return [\"is\", \"is not\"]\r\n      }\r\n    })()\r\n\r\n    setAvailableConditions(conditions)\r\n    if (!conditions.includes(selectedCondition) && conditions.length > 0) {\r\n      onConditionChange(conditions[0])\r\n    }\r\n  }, [questionType, selectedCondition, onConditionChange])\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n  }, [])\r\n\r\n  return (\r\n    <div className={`enhanced-logic-condition-selector ${className}`} ref={dropdownRef}>\r\n      <div className=\"selected-condition\" onClick={() => setIsOpen(!isOpen)}>\r\n        {getConditionIcon(selectedCondition)}\r\n        <span className=\"condition-text\">{selectedCondition}</span>\r\n        <ChevronDown className={`dropdown-arrow ${isOpen ? \"rotate\" : \"\"}`} />\r\n      </div>\r\n      {isOpen && (\r\n        <div className=\"enhanced-condition-dropdown\">\r\n          {availableConditions.map((condition) => (\r\n            <div\r\n              key={condition}\r\n              className={`enhanced-condition-option ${selectedCondition === condition ? \"selected\" : \"\"}`}\r\n              onClick={() => {\r\n                onConditionChange(condition)\r\n                setIsOpen(false)\r\n              }}\r\n            >\r\n              {getConditionIcon(condition)}\r\n              <span>{condition}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicValueInput: React.FC<{\r\n  questionType: ResponseType\r\n  condition: LogicCondition\r\n  value: string | number | string[] | [number, number] | null\r\n  onChange: (value: string | number | string[] | [number, number]) => void\r\n  options?: string[]\r\n  className?: string\r\n}> = ({ questionType, condition, value, onChange, options = [], className = \"\" }) => {\r\n  const [rangeStart, setRangeStart] = useState(\"\")\r\n  const [rangeEnd, setRangeEnd] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(value) && value.length === 2 && [\"between\", \"not between\"].includes(condition)) {\r\n      setRangeStart(String(value[0] || \"\"))\r\n      setRangeEnd(String(value[1] || \"\"))\r\n    }\r\n  }, [value, condition])\r\n\r\n  const handleRangeChange = () => {\r\n    if (rangeStart && rangeEnd) {\r\n      if (questionType === \"Number\") {\r\n        onChange([Number(rangeStart), Number(rangeEnd)] as [number, number])\r\n      } else {\r\n        onChange([rangeStart, rangeEnd] as [string, string])\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleOptionToggle = (option: string) => {\r\n    const currentValues = isStringArray(value) ? value : []\r\n    const newValues = currentValues.includes(option)\r\n      ? currentValues.filter((v) => v !== option)\r\n      : [...currentValues, option]\r\n    onChange(newValues)\r\n  }\r\n\r\n  if ([\"between\", \"not between\"].includes(condition)) {\r\n    return (\r\n      <div className={`enhanced-logic-range-input ${className}`}>\r\n        <input\r\n          type={questionType === \"Number\" ? \"number\" : \"text\"}\r\n          placeholder=\"Min\"\r\n          value={rangeStart}\r\n          onChange={(e) => {\r\n            setRangeStart(e.target.value)\r\n            if (rangeEnd) handleRangeChange()\r\n          }}\r\n          className=\"range-input-min\"\r\n        />\r\n        <span className=\"range-separator\">and</span>\r\n        <input\r\n          type={questionType === \"Number\" ? \"number\" : \"text\"}\r\n          placeholder=\"Max\"\r\n          value={rangeEnd}\r\n          onChange={(e) => {\r\n            setRangeEnd(e.target.value)\r\n            if (rangeStart) handleRangeChange()\r\n          }}\r\n          className=\"range-input-max\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if ([\"is one of\", \"is not one of\"].includes(condition) && options.length > 0) {\r\n    const currentValues = isStringArray(value) ? value : []\r\n    return (\r\n      <div className={`enhanced-logic-multi-select ${className}`}>\r\n        {options.map((option) => (\r\n          <label key={option} className=\"enhanced-multi-select-option\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"sr-only\"\r\n              checked={currentValues.includes(option)}\r\n              onChange={() => handleOptionToggle(option)}\r\n            />\r\n            <span className={currentValues.includes(option) ? \"selected\" : \"\"}>{option}</span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (questionType === \"Yes/No\") {\r\n    return (\r\n      <div className={`enhanced-logic-yes-no-select ${className}`}>\r\n        {[\"Yes\", \"No\", \"N/A\"].map((opt) => (\r\n          <label key={opt} className=\"enhanced-yes-no-option\">\r\n            <input\r\n              type=\"radio\"\r\n              className=\"sr-only\"\r\n              checked={value === opt}\r\n              onChange={() => onChange(opt)}\r\n              name=\"yes-no-value\"\r\n            />\r\n            <span className={value === opt ? \"selected\" : \"\"}>{opt}</span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (questionType === \"Number\") {\r\n    return (\r\n      <input\r\n        type=\"number\"\r\n        value={(value as number) ?? \"\"}\r\n        onChange={(e) => onChange(Number(e.target.value))}\r\n        placeholder=\"Enter value\"\r\n        className={`enhanced-logic-number-input ${className}`}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={(value as string) ?? \"\"}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      placeholder=\"Enter value\"\r\n      className={`enhanced-logic-text-input ${className}`}\r\n    />\r\n  )\r\n}\r\n\r\nconst EnhancedLogicTriggerSelector: React.FC<{\r\n  selectedTrigger: TriggerAction | null\r\n  onTriggerSelect: (trigger: TriggerAction | null) => void\r\n  onConfigChange?: (config: any) => void\r\n  className?: string\r\n}> = ({ selectedTrigger, onTriggerSelect, onConfigChange = () => {}, className = \"\" }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n\r\n  const triggers: { value: TriggerAction; label: string; icon: React.ReactNode; description: string }[] = [\r\n    {\r\n      value: \"require_action\",\r\n      label: \"Require action\",\r\n      icon: <FileText className=\"trigger-icon\" />,\r\n      description: \"Require the user to take an action\",\r\n    },\r\n    {\r\n      value: \"require_evidence\",\r\n      label: \"Require evidence\",\r\n      icon: <ImageIcon className=\"trigger-icon\" />,\r\n      description: \"Require the user to upload evidence\",\r\n    },\r\n    {\r\n      value: \"notify\",\r\n      label: \"Notify\",\r\n      icon: <Bell className=\"trigger-icon\" />,\r\n      description: \"Send a notification\",\r\n    },\r\n    {\r\n      value: \"ask_questions\",\r\n      label: \"Ask questions\",\r\n      icon: <MessageSquare className=\"trigger-icon\" />,\r\n      description: \"Ask follow-up questions\",\r\n    },\r\n    {\r\n      value: \"display_message\",\r\n      label: \"Display message\",\r\n      icon: <AlertTriangle className=\"trigger-icon\" />,\r\n      description: \"Show a message to the user\",\r\n    },\r\n  ]\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n  }, [])\r\n\r\n  const selectedTriggerInfo = selectedTrigger ? triggers.find((t) => t.value === selectedTrigger) : null\r\n\r\n  return (\r\n    <div className={`enhanced-logic-trigger-selector ${className}`} ref={dropdownRef}>\r\n      {!selectedTrigger ? (\r\n        <button className=\"enhanced-trigger-button\" onClick={() => setIsOpen(!isOpen)}>\r\n          <Plus className=\"trigger-plus-icon\" />\r\n          <span>Add trigger</span>\r\n        </button>\r\n      ) : (\r\n        <div className=\"enhanced-selected-trigger\">\r\n          {selectedTriggerInfo?.icon}\r\n          <span>{selectedTriggerInfo?.label}</span>\r\n          <button\r\n            className=\"enhanced-clear-trigger\"\r\n            onClick={(e) => {\r\n              e.stopPropagation()\r\n              // Use setTimeout to prevent the buffering/spark effect\r\n              setTimeout(() => {\r\n                onTriggerSelect(null)\r\n              }, 10)\r\n            }}\r\n          >\r\n            <X className=\"clear-icon\" />\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {isOpen && !selectedTrigger && (\r\n        <div className=\"enhanced-trigger-dropdown\">\r\n          {triggers.map((trigger) => (\r\n            <div\r\n              key={trigger.value}\r\n              className=\"enhanced-trigger-option\"\r\n              onClick={() => {\r\n                onTriggerSelect(trigger.value)\r\n                setIsOpen(false)\r\n              }}\r\n            >\r\n              <div className=\"enhanced-trigger-icon-container\">{trigger.icon}</div>\r\n              <div className=\"enhanced-trigger-details\">\r\n                <div className=\"enhanced-trigger-label\">{trigger.label}</div>\r\n                <div className=\"enhanced-trigger-description\">{trigger.description}</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicTriggerConfig: React.FC<{\r\n  trigger: TriggerAction\r\n  config: any\r\n  onConfigChange: (config: any) => void\r\n}> = ({ trigger, config, onConfigChange }) => {\r\n  const [message, setMessage] = useState(config?.message || \"\")\r\n  const [questionText, setQuestionText] = useState(config?.subQuestion?.text || \"\")\r\n  const [responseType, setResponseType] = useState<ResponseType>(config?.subQuestion?.responseType || \"Text\")\r\n  const [options, setOptions] = useState<string[]>(config?.subQuestion?.options || [\"Option 1\", \"Option 2\", \"Option 3\"])\r\n  const [newOption, setNewOption] = useState<string>(\"\")\r\n\r\n  useEffect(() => {\r\n    if (trigger === \"display_message\") {\r\n      onConfigChange({ ...config, message })\r\n    } else if (trigger === \"ask_questions\") {\r\n      onConfigChange({\r\n        ...config,\r\n        subQuestion: {\r\n          text: questionText,\r\n          responseType,\r\n          options: responseType === \"Multiple choice\" ? options : undefined\r\n        },\r\n      })\r\n    }\r\n  }, [trigger, message, questionText, responseType, options, config, onConfigChange])\r\n\r\n  const addOption = () => {\r\n    if (newOption.trim() === \"\") return;\r\n    setOptions([...options, newOption.trim()]);\r\n    setNewOption(\"\");\r\n  };\r\n\r\n  const removeOption = (index: number) => {\r\n    const newOptions = [...options];\r\n    newOptions.splice(index, 1);\r\n    setOptions(newOptions);\r\n  };\r\n\r\n  const updateOption = (index: number, value: string) => {\r\n    const newOptions = [...options];\r\n    newOptions[index] = value;\r\n    setOptions(newOptions);\r\n  };\r\n\r\n  if (trigger === \"display_message\") {\r\n    return (\r\n      <div className=\"enhanced-trigger-config\">\r\n        <label className=\"enhanced-trigger-config-label\">Message to display:</label>\r\n        <textarea\r\n          className=\"enhanced-logic-text-input\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Enter message to display to the user\"\r\n          rows={3}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (trigger === \"ask_questions\") {\r\n    return (\r\n      <div className=\"enhanced-trigger-config\">\r\n        <label className=\"enhanced-trigger-config-label\">Follow-up question:</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"enhanced-logic-text-input\"\r\n          value={questionText}\r\n          onChange={(e) => setQuestionText(e.target.value)}\r\n          placeholder=\"Enter follow-up question\"\r\n        />\r\n        <label className=\"enhanced-trigger-config-label mt-2\">Response type:</label>\r\n        <select\r\n          className=\"enhanced-logic-text-input\"\r\n          value={responseType}\r\n          onChange={(e) => setResponseType(e.target.value as ResponseType)}\r\n        >\r\n          <option value=\"Text\">Text</option>\r\n          <option value=\"Number\">Number</option>\r\n          <option value=\"Yes/No\">Yes/No</option>\r\n          <option value=\"Multiple choice\">Multiple choice</option>\r\n        </select>\r\n\r\n        {responseType === \"Multiple choice\" && (\r\n          <div className=\"enhanced-options-container mt-2\">\r\n            <label className=\"enhanced-trigger-config-label\">Options:</label>\r\n            {options.map((option, index) => (\r\n              <div key={index} className=\"enhanced-option-item\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"enhanced-logic-text-input\"\r\n                  value={option}\r\n                  onChange={(e) => updateOption(index, e.target.value)}\r\n                  placeholder={`Option ${index + 1}`}\r\n                />\r\n                <button\r\n                  className=\"enhanced-remove-option-button\"\r\n                  onClick={() => removeOption(index)}\r\n                  type=\"button\"\r\n                >\r\n                  <X size={14} />\r\n                </button>\r\n              </div>\r\n            ))}\r\n            <div className=\"enhanced-add-option-row\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"enhanced-logic-text-input\"\r\n                value={newOption}\r\n                onChange={(e) => setNewOption(e.target.value)}\r\n                placeholder=\"New option\"\r\n              />\r\n              <button\r\n                className=\"enhanced-add-option-button\"\r\n                onClick={addOption}\r\n                type=\"button\"\r\n              >\r\n                <Plus size={14} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nconst EnhancedLogicRuleBuilder: React.FC<{\r\n  questionType: ResponseType\r\n  rule: LogicRule\r\n  options?: string[]\r\n  onRuleChange: (rule: LogicRule) => void\r\n  onRuleDelete: () => void\r\n  questions?: Array<{ id: string; text: string }>\r\n  className?: string\r\n}> = ({ questionType, rule, options = [], onRuleChange, onRuleDelete, questions = [], className = \"\" }) => {\r\n  const [localRule, setLocalRule] = useState<LogicRule>(rule)\r\n  const [showConfig, setShowConfig] = useState(false)\r\n\r\n  // Use questions parameter for future implementation of cross-question logic\r\n\r\n  useEffect(() => {\r\n    onRuleChange(localRule)\r\n  }, [localRule, onRuleChange])\r\n\r\n  useEffect(() => {\r\n    setLocalRule(rule)\r\n  }, [rule])\r\n\r\n  return (\r\n    <div className={`enhanced-logic-rule-builder ${className}`}>\r\n      <div className=\"enhanced-logic-rule-content\">\r\n        <div className=\"enhanced-logic-condition-row\">\r\n          <span className=\"enhanced-if-label\">If answer</span>\r\n          <EnhancedLogicConditionSelector\r\n            questionType={questionType}\r\n            selectedCondition={localRule.condition}\r\n            onConditionChange={(condition) => setLocalRule({ ...localRule, condition })}\r\n          />\r\n          <EnhancedLogicValueInput\r\n            questionType={questionType}\r\n            condition={localRule.condition}\r\n            value={localRule.value}\r\n            onChange={(value) => setLocalRule({ ...localRule, value })}\r\n            options={options}\r\n          />\r\n        </div>\r\n        <div className=\"enhanced-logic-trigger-row\">\r\n          <span className=\"enhanced-then-label\">then</span>\r\n          <EnhancedLogicTriggerSelector\r\n            selectedTrigger={localRule.trigger}\r\n            onTriggerSelect={(trigger) => {\r\n              // If removing a trigger, hide config panel first to prevent flickering\r\n              if (!trigger) {\r\n                setShowConfig(false)\r\n                // Small delay before updating the rule state to prevent UI flicker\r\n                setTimeout(() => {\r\n                  setLocalRule({\r\n                    ...localRule,\r\n                    trigger: null,\r\n                    triggerConfig: undefined,\r\n                    message: undefined,\r\n                    subQuestion: undefined,\r\n                  })\r\n                }, 10)\r\n              } else {\r\n                // For adding a trigger, update state immediately\r\n                setLocalRule({\r\n                  ...localRule,\r\n                  trigger,\r\n                  triggerConfig: trigger ? {} : undefined,\r\n                  message: trigger === \"display_message\" ? localRule.message || \"\" : undefined,\r\n                  subQuestion:\r\n                    trigger === \"ask_questions\" ? localRule.subQuestion || { text: \"\", responseType: \"Text\" } : undefined,\r\n                })\r\n                // Always show config when a trigger is selected\r\n                setShowConfig(true)\r\n              }\r\n            }}\r\n            onConfigChange={(config) => setLocalRule({ ...localRule, triggerConfig: config })}\r\n          />\r\n\r\n        </div>\r\n        <div className={`enhanced-logic-config-panel ${showConfig && localRule.trigger ? \"\" : \"hidden\"}`}>\r\n          {localRule.trigger && (\r\n            <div className=\"enhanced-logic-config-row\">\r\n              <EnhancedLogicTriggerConfig\r\n                trigger={localRule.trigger}\r\n                config={{\r\n                  message: localRule.message,\r\n                  subQuestion: localRule.subQuestion,\r\n                }}\r\n                onConfigChange={(config) => {\r\n                  setLocalRule({\r\n                    ...localRule,\r\n                    message: config.message,\r\n                    subQuestion: config.subQuestion,\r\n                  })\r\n                }}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <button className=\"enhanced-delete-rule-button\" onClick={onRuleDelete} aria-label=\"Delete rule\">\r\n        <Trash2 className=\"delete-icon\" />\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicRulesContainer: React.FC<{\r\n  questionType: ResponseType\r\n  rules: LogicRule[]\r\n  options?: string[]\r\n  onRulesChange: (rules: LogicRule[]) => void\r\n  questions?: Array<{ id: string; text: string }>\r\n  onClose: () => void\r\n  className?: string\r\n}> = ({ questionType, rules, options = [], onRulesChange, questions = [], onClose, className = \"\" }) => {\r\n  const addNewRule = () => {\r\n    const defaultCondition: LogicCondition = questionType === \"Number\" ? \"equal to\" : \"is\"\r\n    const newRule: LogicRule = {\r\n      id: generateRuleId(),\r\n      condition: defaultCondition,\r\n      value: null,\r\n      trigger: null,\r\n    }\r\n    onRulesChange([...rules, newRule])\r\n  }\r\n\r\n  const updateRule = (index: number, updatedRule: LogicRule) => {\r\n    const newRules = [...rules]\r\n    newRules[index] = updatedRule\r\n    onRulesChange(newRules)\r\n  }\r\n\r\n  const deleteRule = (index: number) => {\r\n    const newRules = [...rules]\r\n    newRules.splice(index, 1)\r\n    onRulesChange(newRules)\r\n  }\r\n\r\n  return (\r\n    <div className={`enhanced-logic-rules-container ${className}`}>\r\n      <div className=\"enhanced-logic-header\">\r\n        <h3>Logic Rules</h3>\r\n        <button className=\"enhanced-close-button\" onClick={onClose} aria-label=\"Close\">\r\n          <X className=\"close-icon\" />\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"enhanced-logic-rules-list\">\r\n        {rules.length === 0 ? (\r\n          <div className=\"enhanced-empty-rules\">\r\n            <p>No rules added yet. Add your first rule below.</p>\r\n          </div>\r\n        ) : (\r\n          rules.map((rule, index) => (\r\n            <EnhancedLogicRuleBuilder\r\n              key={rule.id}\r\n              questionType={questionType}\r\n              rule={rule}\r\n              options={options}\r\n              onRuleChange={(updatedRule) => updateRule(index, updatedRule)}\r\n              onRuleDelete={() => deleteRule(index)}\r\n              questions={questions}\r\n              className=\"enhanced-logic-rule-item\"\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"enhanced-logic-rules-actions\">\r\n        <button className=\"enhanced-add-rule-button\" onClick={addNewRule}>\r\n          <Plus className=\"add-icon\" />\r\n          <span>Add rule</span>\r\n        </button>\r\n        <button className=\"enhanced-done-button\" onClick={onClose}>\r\n          Done\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedAddLogicButton: React.FC<{\r\n  hasRules: boolean\r\n  onClick: () => void\r\n  className?: string\r\n}> = ({ hasRules, onClick, className = \"\" }) => {\r\n  return (\r\n    <button className={`enhanced-add-logic-button ${hasRules ? \"has-rules\" : \"\"} ${className}`} onClick={onClick}>\r\n      <span>{hasRules ? \"Edit logic\" : \"Add logic\"}</span>\r\n      {hasRules && <span className=\"rules-badge\">!</span>}\r\n    </button>\r\n  )\r\n}\r\n\r\n// Main Component\r\nconst Garment_Template: React.FC = () => {\r\n  const navigate = useNavigate()\r\n  const { id } = useParams<{ id: string }>()\r\n  const [template, setTemplate] = useState<Template>(getInitialTemplate())\r\n  const [isLoading, setIsLoading] = useState<boolean>(!!id)\r\n  const [activeTab, setActiveTab] = useState<number>(0)\r\n  const [activeSectionId, setActiveSectionId] = useState<string | null>(template.sections[0]?.id || null)\r\n  const [activeQuestionId, setActiveQuestionId] = useState<string | null>(null)\r\n  const [draggedItem, setDraggedItem] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\r\n  const [dropTarget, setDropTarget] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\r\n  const [showResponseTypeMenu, setShowResponseTypeMenu] = useState<string | null>(null)\r\n  const [showMobilePreview, setShowMobilePreview] = useState<boolean>(true)\r\n  const [showLogicPanel, setShowLogicPanel] = useState<string | null>(null)\r\n  const [newSize, setNewSize] = useState<string>(\"\")\r\n  const [newColor, setNewColor] = useState<string>(\"\")\r\n  const [newDefect, setNewDefect] = useState<string>(\"\")\r\n  const [defectImages, setDefectImages] = useState<{ [defectIndex: number]: string[] }>({})\r\n  const [startDate, setStartDate] = useState<string>(\"\")\r\n  const [dueDate, setDueDate] = useState<string>(\"\")\r\n  const [dateErrors, setDateErrors] = useState<{\r\n    startDate?: string;\r\n    dueDate?: string;\r\n  }>({})\r\n  const [isExporting, setIsExporting] = useState<boolean>(false)\r\n\r\n  // Load existing template if in edit mode\r\n  useEffect(() => {\r\n    console.log(\"Garment_Template: Component mounted, id param:\", id);\r\n\r\n    if (id) {\r\n      console.log(\"Garment_Template: Attempting to load template with ID:\", id);\r\n      setIsLoading(true)\r\n      fetch(`http://127.0.0.1:8000/api/users/templates/${id}/`)\r\n        .then(response => {\r\n          console.log(\"Garment_Template: API response status:\", response.status);\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to load template. Status: ${response.status}`)\r\n          }\r\n          return response.json()\r\n        })\r\n        .then(data => {\r\n          console.log('Garment_Template: Loaded template data:', data)\r\n          console.log('Garment_Template: Template type:', data.template_type)\r\n\r\n          try {\r\n            // Make sure the template is a garment template\r\n            if (data.template_type === 'garment') {\r\n              console.log('Garment_Template: Setting template data for garment template')\r\n\r\n              // Ensure the template has the required structure\r\n              const processedTemplate = {\r\n                ...data,\r\n                sections: data.sections || [],\r\n                title: data.title || \"Untitled Garment Template\",\r\n                description: data.description || \"Add a description for this garment inspection template\",\r\n                logo: data.logo || undefined\r\n              };\r\n\r\n              // Ensure each section has the required structure\r\n              processedTemplate.sections = processedTemplate.sections.map((section: any) => {\r\n                if (!section.id) section.id = generateId();\r\n                if (!section.title) section.title = \"Untitled Section\";\r\n                if (!section.type) section.type = \"standard\";\r\n\r\n                // Ensure garmentDetails sections have the required content\r\n                if (section.type === \"garmentDetails\") {\r\n                  if (!section.content) section.content = {};\r\n                  if (!section.content.aqlSettings) section.content.aqlSettings = {\r\n                    aqlLevel: \"2.5\",\r\n                    inspectionLevel: \"II\",\r\n                    samplingPlan: \"Single\",\r\n                    severity: \"Normal\"\r\n                  };\r\n                  if (!section.content.sizes) section.content.sizes = [...DEFAULT_SIZES];\r\n                  if (!section.content.colors) section.content.colors = [...DEFAULT_COLORS];\r\n                  if (!section.content.defaultDefects) section.content.defaultDefects = [...DEFAULT_DEFECTS];\r\n                  section.content.includeCartonOffered = section.content.includeCartonOffered !== false;\r\n                  section.content.includeCartonInspected = section.content.includeCartonInspected !== false;\r\n                }\r\n\r\n                // Ensure standard sections have the required content\r\n                if (section.type === \"standard\") {\r\n                  if (!section.content) section.content = {};\r\n                  if (!section.content.questions) section.content.questions = [];\r\n                }\r\n\r\n                return {\r\n                  ...section,\r\n                  isCollapsed: section.isCollapsed || false\r\n                };\r\n              });\r\n\r\n              // If no garmentDetails section exists, add one\r\n              if (!processedTemplate.sections.some((s: any) => s.type === \"garmentDetails\")) {\r\n                processedTemplate.sections.push(getDefaultGarmentDetailsSection());\r\n              }\r\n\r\n              // If no standard section exists, add a title page\r\n              if (!processedTemplate.sections.some((s: any) => s.type === \"standard\")) {\r\n                const titlePageSection = {\r\n                  id: generateId(),\r\n                  type: \"standard\" as SectionType,\r\n                  title: \"Title Page\",\r\n                  isCollapsed: false,\r\n                  content: {\r\n                    description: \"The Title Page is the first page of your garment inspection report.\",\r\n                    questions: [\r\n                      {\r\n                        id: generateId(),\r\n                        text: \"Report No\",\r\n                        responseType: \"Text\" as ResponseType,\r\n                        required: true,\r\n                        flagged: false,\r\n                        value: null,\r\n                        logicRules: [],\r\n                      }\r\n                    ]\r\n                  }\r\n                };\r\n                processedTemplate.sections.unshift(titlePageSection);\r\n              }\r\n\r\n              console.log('Garment_Template: Processed template:', processedTemplate);\r\n              setTemplate(processedTemplate);\r\n              setActiveSectionId(processedTemplate.sections[0]?.id || null);\r\n\r\n              // Initialize reportData based on the loaded template\r\n              const garmentSection = processedTemplate.sections.find((s: any) => s.type === \"garmentDetails\");\r\n              if (garmentSection) {\r\n                console.log('Garment_Template: Initializing reportData with loaded template data');\r\n\r\n                // Initialize defects from the template\r\n                const initialDefects = garmentSection.content?.defaultDefects?.map((defect: string) => ({\r\n                  type: defect,\r\n                  remarks: \"\",\r\n                  critical: 0,\r\n                  major: 0,\r\n                  minor: 0,\r\n                })) || [];\r\n\r\n                // Initialize AQL settings from the template\r\n                const aqlSettings = garmentSection.content?.aqlSettings || {\r\n                  aqlLevel: \"2.5\",\r\n                  inspectionLevel: \"II\",\r\n                  samplingPlan: \"Single\",\r\n                  severity: \"Normal\"\r\n                };\r\n\r\n                setReportData({\r\n                  quantities: {},\r\n                  cartonOffered: \"30\",\r\n                  cartonInspected: \"5\",\r\n                  cartonToInspect: \"5\",\r\n                  defects: initialDefects,\r\n                  aqlSettings: {\r\n                    ...aqlSettings,\r\n                    status: \"PASS\"\r\n                  },\r\n                  editingAql: false,\r\n                  newSize: \"\",\r\n                  newColor: \"\",\r\n                  questionAnswers: {}\r\n                });\r\n              }\r\n            } else {\r\n              console.error('Garment_Template: Attempted to load a non-garment template in garment editor')\r\n              alert('This is not a garment template. Redirecting to standard template editor.')\r\n              navigate(`/templates/edit/${id}`)\r\n            }\r\n          } catch (error) {\r\n            console.error('Garment_Template: Error processing template data:', error);\r\n            // Log more details about the template data\r\n            console.error('Garment_Template: Template data that caused the error:', JSON.stringify(data, null, 2));\r\n\r\n            // Fall back to default template\r\n            const defaultTemplate = getInitialTemplate();\r\n            console.log('Garment_Template: Using default template:', defaultTemplate);\r\n\r\n            setTemplate(defaultTemplate);\r\n            setActiveSectionId(defaultTemplate.sections[0]?.id || null);\r\n\r\n            alert('Error processing template data. Using default template. Check console for details.');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Garment_Template: Error loading template:', error)\r\n          alert('Failed to load template. Using default template.')\r\n        })\r\n        .finally(() => {\r\n          console.log('Garment_Template: Finished loading attempt, setting isLoading to false')\r\n          setIsLoading(false)\r\n        })\r\n    } else {\r\n      console.log(\"Garment_Template: No ID provided, using default template\")\r\n    }\r\n  }, [id, navigate])\r\n\r\n  const questionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\r\n  const sectionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\r\n  const reportRef = useRef<HTMLDivElement>(null)\r\n\r\n  // Template Management\r\n  const updateTemplate = (updates: Partial<Template>) => setTemplate((prev) => ({ ...prev, ...updates }))\r\n\r\n  const fetchCSRFToken = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/api/users/get-csrf-token/\", {\r\n        method: \"GET\",\r\n        credentials: \"include\",\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch CSRF token\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.csrfToken;\r\n    } catch (error) {\r\n      console.error(\"Error fetching CSRF token:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      // Get CSRF token\r\n      const csrfToken = await fetchCSRFToken();\r\n\r\n      // Create FormData object\r\n      const formData = new FormData();\r\n\r\n      // Add title and description\r\n      formData.append(\"title\", template.title);\r\n      formData.append(\"description\", template.description);\r\n\r\n      // Add template_type to ensure it's saved as a garment template\r\n      formData.append(\"template_type\", \"garment\");\r\n\r\n      // Add logo if exists\r\n      if (template.logo) {\r\n        if (typeof template.logo === \"string\" && template.logo.startsWith(\"data:\")) {\r\n          const response = await fetch(template.logo);\r\n          const blob = await response.blob();\r\n          formData.append(\"logo\", blob, \"logo.png\");\r\n        }\r\n      }\r\n\r\n      // Prepare sections data\r\n      const sectionsData = template.sections.map(section => {\r\n        if (section.type === \"garmentDetails\" && isGarmentDetailsContent(section.content)) {\r\n          return {\r\n            id: section.id,\r\n            title: section.title,\r\n            type: section.type,\r\n            isCollapsed: section.isCollapsed,\r\n            content: {\r\n              aqlSettings: section.content.aqlSettings,\r\n              sizes: section.content.sizes,\r\n              colors: section.content.colors,\r\n              includeCartonOffered: section.content.includeCartonOffered,\r\n              includeCartonInspected: section.content.includeCartonInspected,\r\n              defaultDefects: section.content.defaultDefects\r\n            }\r\n          };\r\n        } else {\r\n          return {\r\n            id: section.id,\r\n            title: section.title,\r\n            type: section.type,\r\n            isCollapsed: section.isCollapsed,\r\n            content: section.content\r\n          };\r\n        }\r\n      });\r\n\r\n      // Add sections data\r\n      formData.append(\"sections\", JSON.stringify(sectionsData));\r\n\r\n      // Determine if this is a new template or an edit\r\n      const isNew = !id;\r\n\r\n      // Set the appropriate URL and method based on whether we're creating or updating\r\n      const url = isNew\r\n        ? \"http://localhost:8000/api/users/garment-template/\"\r\n        : `http://localhost:8000/api/users/templates/${id}/`;\r\n\r\n      const method = isNew ? \"POST\" : \"PATCH\";\r\n\r\n      // Make API request\r\n      const response = await fetch(url, {\r\n        method: method,\r\n        headers: {\r\n          \"X-CSRFToken\": csrfToken,\r\n        },\r\n        body: formData,\r\n        credentials: \"include\",\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || \"Failed to save template\");\r\n      }\r\n\r\n      // Get the response data\r\n      let responseData;\r\n      try {\r\n        responseData = await response.json();\r\n      } catch (error) {\r\n        console.warn(\"Could not parse response as JSON:\", error);\r\n        responseData = {};\r\n      }\r\n\r\n      // Update local state with the database ID if available\r\n      if (responseData && responseData.id) {\r\n        updateTemplate({\r\n          id: responseData.id.toString(),\r\n          lastSaved: new Date()\r\n        });\r\n        console.log(\"Template saved with ID:\", responseData.id);\r\n      } else {\r\n        updateTemplate({ lastSaved: new Date() });\r\n      }\r\n\r\n      alert(\"Template saved successfully!\");\r\n      console.log(\"Template saved successfully:\", template);\r\n    } catch (error: any) {\r\n      console.error(\"Error saving template:\", error);\r\n      alert(`Failed to save template: ${error.message || \"Unknown error\"}`);\r\n    }\r\n  }\r\n\r\n  const handleBack = () => {\r\n    if (window.confirm(\"Do you want to save before leaving?\")) {\r\n      handleSave()\r\n      // Use direct navigation for more reliability\r\n      window.location.href = \"/templates\"\r\n    } else {\r\n      window.location.href = \"/templates\"\r\n    }\r\n  }\r\n\r\n  const handleLogoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0]\r\n    if (file && file.size <= 5 * 1024 * 1024 && file.type.match(/^image\\//)) {\r\n      const reader = new FileReader()\r\n      reader.onload = async (event) => {\r\n        const result = event.target?.result as string\r\n        if (result) {\r\n          const resizedImage = await resizeImage(result)\r\n          updateTemplate({ logo: resizedImage })\r\n        }\r\n      }\r\n      reader.readAsDataURL(file)\r\n    }\r\n  }\r\n\r\n  // Report data state - moved to top level\r\n  const [reportData, setReportData] = useState<ReportData>(() => {\r\n    const initialDefects =\r\n      (() => {\r\n        const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n        if (garmentSection && isGarmentDetailsContent(garmentSection.content)) {\r\n          return garmentSection.content.defaultDefects.map((defect: string) => ({\r\n          type: defect,\r\n          remarks: \"\",\r\n          critical: 0,\r\n          major: 0,\r\n          minor: 0,\r\n          }));\r\n        }\r\n        return [];\r\n      })()\r\n\r\n    const initialAqlLevel = (() => {\r\n      const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n      if (garmentSection && isGarmentDetailsContent(garmentSection.content)) {\r\n        return garmentSection.content.aqlSettings.aqlLevel;\r\n      }\r\n      return \"2.5\"; // default value\r\n    })();\r\n    const initialInspectionLevel = (() => {\r\n      const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n      if (garmentSection && isGarmentDetailsContent(garmentSection.content)) {\r\n        return garmentSection.content.aqlSettings.inspectionLevel;\r\n      }\r\n      return \"II\"; // default value\r\n    })();\r\n    const initialSamplingPlan = (() => {\r\n      const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n      if (garmentSection && isGarmentDetailsContent(garmentSection.content)) {\r\n        return garmentSection.content.aqlSettings.samplingPlan;\r\n      }\r\n      return \"Single\"; // default value\r\n    })();\r\n    const initialSeverity = (() => {\r\n      const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n      if (garmentSection && isGarmentDetailsContent(garmentSection.content)) {\r\n        return garmentSection.content.aqlSettings.severity;\r\n      }\r\n      return \"Normal\"; // default value\r\n    })();\r\n\r\n    return {\r\n      quantities: {},\r\n      cartonOffered: \"30\",\r\n      cartonInspected: \"5\",\r\n      cartonToInspect: \"5\",\r\n      defects: initialDefects,\r\n      aqlSettings: {\r\n        aqlLevel: initialAqlLevel,\r\n        inspectionLevel: initialInspectionLevel,\r\n        samplingPlan: initialSamplingPlan,\r\n        severity: initialSeverity,\r\n        status: \"PASS\",\r\n      },\r\n      editingAql: false,\r\n      newSize: \"\",\r\n      newColor: \"\",\r\n      questionAnswers: {},\r\n      activeTriggers: {},\r\n      questionEvidence: {},\r\n      actionResponses: {},\r\n      subQuestionAnswers: {}\r\n    }\r\n  })\r\n\r\n\r\n\r\n  // Section Management\r\n  const addStandardSection = () => {\r\n    const newSection = getDefaultStandardSection()\r\n    setTemplate((prev) => ({ ...prev, sections: [...prev.sections, newSection] }))\r\n    setActiveSectionId(newSection.id)\r\n    setTimeout(() => sectionRefs.current[newSection.id]?.scrollIntoView({ behavior: \"smooth\", block: \"start\" }), 100)\r\n  }\r\n\r\n  const updateSection = (sectionId: string, updates: Partial<AppSection>) => {\r\n    setTemplate((prev) => ({\r\n      ...prev,\r\n      sections: prev.sections.map((s) => (s.id === sectionId ? { ...s, ...updates } : s)),\r\n    }))\r\n  }\r\n\r\n  const deleteSection = (sectionId: string) => {\r\n    // Don't allow deleting the Title Page or the only Garment Details section\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section) return\r\n\r\n    if (section.type === \"garmentDetails\") {\r\n      if (\r\n        window.confirm(\r\n          \"Are you sure you want to delete the Garment details section? This will remove all garment-specific configuration.\",\r\n        )\r\n      ) {\r\n        setTemplate((prev) => ({ ...prev, sections: prev.sections.filter((s) => s.id !== sectionId) }))\r\n      }\r\n      return\r\n    }\r\n\r\n    if (section.title === \"Title Page\" && section === template.sections[0]) {\r\n      alert(\"The Title Page cannot be deleted.\")\r\n      return\r\n    }\r\n\r\n    setTemplate((prev) => ({ ...prev, sections: prev.sections.filter((s) => s.id !== sectionId) }))\r\n  }\r\n\r\n  const toggleSectionCollapse = (sectionId: string) => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (section) {\r\n      updateSection(sectionId, { isCollapsed: !section.isCollapsed })\r\n    }\r\n  }\r\n\r\n  // Question Management\r\n  const addQuestion = (sectionId: string, responseType: ResponseType = \"Text\") => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"standard\") return\r\n\r\n    const newQuestion = getDefaultQuestion(responseType)\r\n    const updatedContent = {\r\n      ...(section.content as StandardSectionContent),\r\n      questions: [...(section.content as StandardSectionContent).questions, newQuestion],\r\n    }\r\n\r\n    updateSection(sectionId, { content: updatedContent })\r\n    setActiveQuestionId(newQuestion.id)\r\n  }\r\n\r\n  const updateQuestion = (sectionId: string, questionId: string, updates: Partial<Question>) => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"standard\") return\r\n\r\n    const updatedQuestions = (section.content as StandardSectionContent).questions.map((q) =>\r\n      q.id === questionId ? { ...q, ...updates } : q,\r\n    )\r\n\r\n    const updatedContent = {\r\n      ...(section.content as StandardSectionContent),\r\n      questions: updatedQuestions,\r\n    }\r\n\r\n    updateSection(sectionId, { content: updatedContent })\r\n  }\r\n\r\n  const deleteQuestion = (sectionId: string, questionId: string) => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"standard\") return\r\n\r\n    const updatedQuestions = (section.content as StandardSectionContent).questions.filter((q) => q.id !== questionId)\r\n\r\n    const updatedContent = {\r\n      ...(section.content as StandardSectionContent),\r\n      questions: updatedQuestions,\r\n    }\r\n\r\n    updateSection(sectionId, { content: updatedContent })\r\n  }\r\n\r\n  const changeQuestionResponseType = (sectionId: string, questionId: string, responseType: ResponseType) => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"standard\") return\r\n\r\n    const question = (section.content as StandardSectionContent).questions.find((q) => q.id === questionId)\r\n    if (!question) return\r\n\r\n    // Only keep logic rules if changing to a supported type\r\n    const keepLogicRules = LOGIC_SUPPORTED_TYPES.includes(responseType) ? question.logicRules || [] : []\r\n\r\n    updateQuestion(sectionId, questionId, {\r\n      responseType,\r\n      options:\r\n        responseType === \"Multiple choice\" || responseType === \"Yes/No\"\r\n          ? [\"Option 1\", \"Option 2\", \"Option 3\"]\r\n          : undefined,\r\n      value: null,\r\n      logicRules: keepLogicRules,\r\n    })\r\n    setShowResponseTypeMenu(null)\r\n  }\r\n\r\n  // Garment Details Management\r\n  const updateGarmentDetails = (sectionId: string, updates: Partial<GarmentDetailsContent>) => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"garmentDetails\") return\r\n\r\n    const updatedContent = {\r\n      ...(section.content as GarmentDetailsContent),\r\n      ...updates,\r\n    }\r\n\r\n    updateSection(sectionId, { content: updatedContent })\r\n  }\r\n\r\n  const addSize = (sectionId: string) => {\r\n    if (!newSize.trim()) return\r\n\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"garmentDetails\") return\r\n\r\n    const garmentContent = section.content as GarmentDetailsContent\r\n    if (garmentContent.sizes.includes(newSize.trim())) {\r\n      alert(\"This size already exists\")\r\n      return\r\n    }\r\n\r\n    const updatedSizes = [...garmentContent.sizes, newSize.trim()]\r\n    updateGarmentDetails(sectionId, { sizes: updatedSizes })\r\n    setNewSize(\"\")\r\n  }\r\n\r\n  const removeSize = (sectionId: string, size: string) => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"garmentDetails\") return\r\n\r\n    const garmentContent = section.content as GarmentDetailsContent\r\n    const updatedSizes = garmentContent.sizes.filter((s) => s !== size)\r\n    updateGarmentDetails(sectionId, { sizes: updatedSizes })\r\n  }\r\n\r\n  const addColor = (sectionId: string) => {\r\n    if (!newColor.trim()) return\r\n\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"garmentDetails\") return\r\n\r\n    const garmentContent = section.content as GarmentDetailsContent\r\n    if (garmentContent.colors.includes(newColor.trim())) {\r\n      alert(\"This color already exists\")\r\n      return\r\n    }\r\n\r\n    const updatedColors = [...garmentContent.colors, newColor.trim()]\r\n    updateGarmentDetails(sectionId, { colors: updatedColors })\r\n    setNewColor(\"\")\r\n  }\r\n\r\n  const removeColor = (sectionId: string, color: string) => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"garmentDetails\") return\r\n\r\n    const garmentContent = section.content as GarmentDetailsContent\r\n    const updatedColors = garmentContent.colors.filter((c) => c !== color)\r\n    updateGarmentDetails(sectionId, { colors: updatedColors })\r\n  }\r\n\r\n  const addDefect = (sectionId: string) => {\r\n    if (!newDefect.trim()) return\r\n\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"garmentDetails\") return\r\n\r\n    const garmentContent = section.content as GarmentDetailsContent\r\n    if (garmentContent.defaultDefects.includes(newDefect.trim())) {\r\n      alert(\"This defect type already exists\")\r\n      return\r\n    }\r\n\r\n    const updatedDefects = [...garmentContent.defaultDefects, newDefect.trim()]\r\n    updateGarmentDetails(sectionId, { defaultDefects: updatedDefects })\r\n    setNewDefect(\"\")\r\n  }\r\n\r\n  const removeDefect = (sectionId: string, defect: string) => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"garmentDetails\") return\r\n\r\n    const garmentContent = section.content as GarmentDetailsContent\r\n    const updatedDefects = garmentContent.defaultDefects.filter((d) => d !== defect)\r\n    updateGarmentDetails(sectionId, { defaultDefects: updatedDefects })\r\n  }\r\n\r\n  const updateAQLSettings = (sectionId: string, field: keyof GarmentDetailsContent[\"aqlSettings\"], value: string) => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"garmentDetails\") return\r\n\r\n    const garmentContent = section.content as GarmentDetailsContent\r\n    const updatedAQLSettings = {\r\n      ...garmentContent.aqlSettings,\r\n      [field]: value,\r\n    }\r\n\r\n    updateGarmentDetails(sectionId, { aqlSettings: updatedAQLSettings })\r\n  }\r\n\r\n  const toggleCartonSetting = (sectionId: string, field: \"includeCartonOffered\" | \"includeCartonInspected\") => {\r\n    const section = template.sections.find((s) => s.id === sectionId)\r\n    if (!section || section.type !== \"garmentDetails\") return\r\n\r\n    const garmentContent = section.content as GarmentDetailsContent\r\n    updateGarmentDetails(sectionId, { [field]: !garmentContent[field] })\r\n  }\r\n\r\n  // Drag and Drop\r\n  const handleDragStart = (type: \"question\" | \"section\", id: string) => {\r\n    // Don't allow dragging the Title Page or Garment Details section\r\n    if (type === \"section\") {\r\n      const section = template.sections.find((s) => s.id === id)\r\n      if (section?.title === \"Title Page\" || section?.type === \"garmentDetails\") {\r\n        return\r\n      }\r\n    }\r\n\r\n    setDraggedItem({ type, id })\r\n  }\r\n\r\n  const handleDragOver = (type: \"question\" | \"section\", id: string, e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    if (!draggedItem) return\r\n\r\n    // Don't allow dropping before Title Page or Garment Details\r\n    if (type === \"section\" && draggedItem.type === \"section\") {\r\n      const targetSection = template.sections.find((s) => s.id === id)\r\n      if (targetSection?.title === \"Title Page\" || targetSection?.type === \"garmentDetails\") {\r\n        return\r\n      }\r\n\r\n      const draggedSection = template.sections.find((s) => s.id === draggedItem.id)\r\n      if (draggedSection?.title === \"Title Page\" || draggedSection?.type === \"garmentDetails\") {\r\n        return\r\n      }\r\n    }\r\n\r\n    if (draggedItem.id !== id) {\r\n      setDropTarget({ type, id })\r\n    }\r\n  }\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    if (!draggedItem || !dropTarget) return\r\n\r\n    if (draggedItem.type === \"section\" && dropTarget.type === \"section\") {\r\n      const sections = [...template.sections]\r\n      const draggedIndex = sections.findIndex((s) => s.id === draggedItem.id)\r\n      const dropIndex = sections.findIndex((s) => s.id === dropTarget.id)\r\n\r\n      // Don't allow reordering Title Page or Garment Details\r\n      if (\r\n        sections[draggedIndex].title === \"Title Page\" ||\r\n        sections[draggedIndex].type === \"garmentDetails\" ||\r\n        sections[dropIndex].title === \"Title Page\" ||\r\n        sections[dropIndex].type === \"garmentDetails\"\r\n      ) {\r\n        setDraggedItem(null)\r\n        setDropTarget(null)\r\n        return\r\n      }\r\n\r\n      const [removed] = sections.splice(draggedIndex, 1)\r\n      sections.splice(dropIndex, 0, removed)\r\n      setTemplate((prev) => ({ ...prev, sections }))\r\n    } else if (draggedItem.type === \"question\" && dropTarget.type === \"question\") {\r\n      const draggedSectionIndex = template.sections.findIndex(\r\n        (s) =>\r\n          s.type === \"standard\" && (s.content as StandardSectionContent).questions.some((q) => q.id === draggedItem.id),\r\n      )\r\n\r\n      const dropSectionIndex = template.sections.findIndex(\r\n        (s) =>\r\n          s.type === \"standard\" && (s.content as StandardSectionContent).questions.some((q) => q.id === dropTarget.id),\r\n      )\r\n\r\n      if (draggedSectionIndex === -1 || dropSectionIndex === -1) {\r\n        setDraggedItem(null)\r\n        setDropTarget(null)\r\n        return\r\n      }\r\n\r\n      const draggedSection = template.sections[draggedSectionIndex]\r\n      const dropSection = template.sections[dropSectionIndex]\r\n\r\n      if (draggedSection.type !== \"standard\" || dropSection.type !== \"standard\") {\r\n        setDraggedItem(null)\r\n        setDropTarget(null)\r\n        return\r\n      }\r\n\r\n      const newSections = [...template.sections]\r\n\r\n      const draggedQuestionIndex = (draggedSection.content as StandardSectionContent).questions.findIndex(\r\n        (q) => q.id === draggedItem.id,\r\n      )\r\n\r\n      const dropQuestionIndex = (dropSection.content as StandardSectionContent).questions.findIndex(\r\n        (q) => q.id === dropTarget.id,\r\n      )\r\n\r\n      const [removedQuestion] = (newSections[draggedSectionIndex].content as StandardSectionContent).questions.splice(\r\n        draggedQuestionIndex,\r\n        1,\r\n      )\r\n      ;(newSections[dropSectionIndex].content as StandardSectionContent).questions.splice(\r\n        dropQuestionIndex,\r\n        0,\r\n        removedQuestion,\r\n      )\r\n\r\n      setTemplate((prev) => ({ ...prev, sections: newSections }))\r\n    }\r\n\r\n    setDraggedItem(null)\r\n    setDropTarget(null)\r\n  }\r\n\r\n  // Report functions\r\n  const handleQuantityChange = (color: string, size: string, field: string, value: string) => {\r\n    setReportData((prev) => {\r\n      const newQuantities = { ...prev.quantities }\r\n      if (!newQuantities[color]) newQuantities[color] = {}\r\n      if (!newQuantities[color][size]) newQuantities[color][size] = { orderQty: \"\", offeredQty: \"\" }\r\n      newQuantities[color][size][field] = value\r\n      return { ...prev, quantities: newQuantities }\r\n    });\r\n\r\n    // If we're changing offered quantity, recalculate AQL status\r\n    if (field === \"offeredQty\") {\r\n      setTimeout(() => updateAqlStatus(), 0);\r\n    }\r\n  }\r\n\r\n  const calculateRowTotal = (color: string, field: string) => {\r\n    const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n    const sizes: string[] = garmentSection && isGarmentDetailsContent(garmentSection.content)\r\n      ? garmentSection.content.sizes\r\n      : [];\r\n    let total = 0;\r\n    sizes.forEach((size: string) => {\r\n      const qty = reportData.quantities[color]?.[size]?.[field];\r\n      total += qty ? Number.parseInt(qty, 10) : 0;\r\n    });\r\n    return total;\r\n  };\r\n\r\n  const calculateColumnTotal = (size: string, field: string) => {\r\n    const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n    const colors: string[] = garmentSection && isGarmentDetailsContent(garmentSection.content)\r\n      ? garmentSection.content.colors\r\n      : [];\r\n    let total = 0;\r\n    colors.forEach((color: string) => {\r\n      const qty = reportData.quantities[color]?.[size]?.[field];\r\n      total += qty ? Number.parseInt(qty, 10) : 0;\r\n    });\r\n    return total;\r\n  };\r\n\r\n  const calculateGrandTotal = (field: string) => {\r\n    const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n    const colors: string[] = garmentSection && isGarmentDetailsContent(garmentSection.content)\r\n      ? garmentSection.content.colors\r\n      : [];\r\n    let total = 0;\r\n    colors.forEach((color: string) => {\r\n      total += calculateRowTotal(color, field);\r\n    });\r\n    return total;\r\n  };\r\n\r\n  const calculateAqlStatus = () => {\r\n    // Get the total offered quantity\r\n    const totalOfferedQty = calculateGrandTotal(\"offeredQty\");\r\n\r\n    // Get the AQL settings\r\n    const { aqlLevel, inspectionLevel } = reportData.aqlSettings;\r\n\r\n    // Get the code letter based on lot size and inspection level\r\n    const codeLetter = getAqlCodeLetter(totalOfferedQty, inspectionLevel as AqlInspectionLevel);\r\n\r\n    if (!codeLetter) {\r\n      console.error(\"Could not determine AQL code letter for lot size:\", totalOfferedQty);\r\n      return \"FAIL\";\r\n    }\r\n\r\n    // Get the sample plan based on code letter and AQL level\r\n    const samplePlan = getSamplePlan(codeLetter, aqlLevel);\r\n\r\n    if (!samplePlan) {\r\n      console.error(\"Could not determine sample plan for code letter:\", codeLetter, \"and AQL level:\", aqlLevel);\r\n      return \"FAIL\";\r\n    }\r\n\r\n    // Calculate total defects\r\n    let totalCritical = 0;\r\n    let totalMajor = 0;\r\n    let totalMinor = 0;\r\n\r\n    reportData.defects.forEach(defect => {\r\n      totalCritical += Number(defect.critical) || 0;\r\n      totalMajor += Number(defect.major) || 0;\r\n      totalMinor += Number(defect.minor) || 0;\r\n    });\r\n\r\n    // Check if the defects exceed the acceptance criteria\r\n    const { accept } = samplePlan;\r\n\r\n    // Critical defects are an automatic fail\r\n    if (totalCritical > 0) {\r\n      return \"FAIL\";\r\n    }\r\n\r\n    // Check major defects against acceptance criteria\r\n    if (totalMajor > accept) {\r\n      return \"FAIL\";\r\n    }\r\n\r\n    // Minor defects are typically allowed at a higher rate, but still check\r\n    if (totalMinor > accept * 2) {\r\n      return \"FAIL\";\r\n    }\r\n\r\n    return \"PASS\";\r\n  };\r\n\r\n  const addReportDefect = () => {\r\n    setReportData((prev) => ({\r\n      ...prev,\r\n      defects: [...prev.defects, { type: \"\", remarks: \"\", critical: 0, major: 0, minor: 0 }],\r\n    }))\r\n  }\r\n\r\n  const updateAqlStatus = () => {\r\n    const status = calculateAqlStatus();\r\n    setReportData(prev => ({\r\n      ...prev,\r\n      aqlSettings: {\r\n        ...prev.aqlSettings,\r\n        status\r\n      }\r\n    }));\r\n  }\r\n\r\n  const updateDefect = (index: number, field: string, value: string | number) => {\r\n    setReportData((prev) => {\r\n      const newDefects = [...prev.defects]\r\n      newDefects[index] = { ...newDefects[index], [field]: value }\r\n      return { ...prev, defects: newDefects }\r\n    });\r\n\r\n    // Recalculate AQL status when defects are updated\r\n    setTimeout(() => updateAqlStatus(), 0);\r\n  }\r\n\r\n  const handleDefectImageUpload = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.target.files\r\n    if (!files || files.length === 0) return\r\n\r\n    const newImages: string[] = []\r\n    let loadedCount = 0\r\n\r\n    Array.from(files).forEach((file) => {\r\n      if (file.type.match(/^image\\//)) {\r\n        const reader = new FileReader()\r\n        reader.onload = (event) => {\r\n          const result = event.target?.result as string\r\n          if (result) {\r\n            newImages.push(result)\r\n            loadedCount++\r\n\r\n            if (loadedCount === files.length) {\r\n              setDefectImages((prev) => {\r\n                const currentImages = prev[index] || []\r\n                return {\r\n                  ...prev,\r\n                  [index]: [...currentImages, ...newImages],\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n        reader.readAsDataURL(file)\r\n      }\r\n    })\r\n  }\r\n\r\n  const removeDefectImage = (defectIndex: number, imageIndex: number) => {\r\n    setDefectImages((prev) => {\r\n      const newImages = { ...prev }\r\n      if (newImages[defectIndex]) {\r\n        newImages[defectIndex] = newImages[defectIndex].filter((_, idx) => idx !== imageIndex)\r\n      }\r\n      return newImages\r\n    })\r\n  }\r\n\r\n\r\n\r\n  const calculateTotalDefects = (field: string) => {\r\n    return reportData.defects.reduce((total, defect) => {\r\n      // Use type assertion to let TypeScript know we can index this\r\n      const defectItem = defect as DefectData;\r\n      const value = Number.parseInt(defectItem[field]?.toString() || \"0\", 10);\r\n      return total + (isNaN(value) ? 0 : value);\r\n    }, 0);\r\n  };\r\n\r\n  const addReportSize = () => {\r\n    if (!reportData.newSize.trim()) return;\r\n\r\n    const section = template.sections.find((s) => s.type === \"garmentDetails\");\r\n    if (!section || !isGarmentDetailsContent(section.content)) return;\r\n\r\n    const updatedSizes = [...section.content.sizes, reportData.newSize.trim()];\r\n    updateGarmentDetails(section.id, { sizes: updatedSizes });\r\n    setReportData((prev) => ({ ...prev, newSize: \"\" }));\r\n  };\r\n\r\n  const addReportColor = () => {\r\n    if (!reportData.newColor.trim()) return;\r\n\r\n    const section = template.sections.find((s) => s.type === \"garmentDetails\");\r\n    if (!section || !isGarmentDetailsContent(section.content)) return;\r\n\r\n    const updatedColors = [...section.content.colors, reportData.newColor.trim()];\r\n    updateGarmentDetails(section.id, { colors: updatedColors });\r\n    setReportData((prev) => ({ ...prev, newColor: \"\" }));\r\n  };\r\n\r\n  const toggleAqlEditing = () => {\r\n    setReportData((prev) => ({ ...prev, editingAql: !prev.editingAql }))\r\n  }\r\n\r\n  const updateAqlResult = (field: string, value: string) => {\r\n    setReportData((prev) => ({\r\n      ...prev,\r\n      aqlSettings: { ...prev.aqlSettings, [field]: value },\r\n    }))\r\n  }\r\n\r\n  // Helper function to evaluate logic conditions\r\n  const evaluateLogicCondition = (\r\n    condition: LogicCondition,\r\n    conditionValue: any,\r\n    answerValue: any,\r\n    questionType: ResponseType\r\n  ): boolean => {\r\n    // Handle different question types and conditions\r\n    switch (questionType) {\r\n      case \"Number\":\r\n        const numAnswer = Number(answerValue);\r\n        const numCondition = Number(conditionValue);\r\n\r\n        switch (condition) {\r\n          case \"equal to\": return numAnswer === numCondition;\r\n          case \"not equal to\": return numAnswer !== numCondition;\r\n          case \"greater than\": return numAnswer > numCondition;\r\n          case \"less than\": return numAnswer < numCondition;\r\n          case \"greater than or equal to\": return numAnswer >= numCondition;\r\n          case \"less than or equal to\": return numAnswer <= numCondition;\r\n          case \"between\":\r\n            if (Array.isArray(conditionValue) && conditionValue.length === 2) {\r\n              return numAnswer >= Number(conditionValue[0]) && numAnswer <= Number(conditionValue[1]);\r\n            }\r\n            return false;\r\n          default: return false;\r\n        }\r\n\r\n      case \"Text\":\r\n      case \"Site\":\r\n      case \"Person\":\r\n      case \"Inspection location\":\r\n        const strAnswer = String(answerValue || \"\");\r\n        const strCondition = String(conditionValue || \"\");\r\n\r\n        switch (condition) {\r\n          case \"is\": return strAnswer === strCondition;\r\n          case \"is not\": return strAnswer !== strCondition;\r\n          case \"contains\": return strAnswer.includes(strCondition);\r\n          case \"not contains\": return !strAnswer.includes(strCondition);\r\n          case \"starts with\": return strAnswer.startsWith(strCondition);\r\n          case \"ends with\": return strAnswer.endsWith(strCondition);\r\n          default: return false;\r\n        }\r\n\r\n      case \"Yes/No\":\r\n      case \"Checkbox\":\r\n        switch (condition) {\r\n          case \"is\": return answerValue === conditionValue;\r\n          case \"is not\": return answerValue !== conditionValue;\r\n          default: return false;\r\n        }\r\n\r\n      case \"Multiple choice\":\r\n        switch (condition) {\r\n          case \"is\": return answerValue === conditionValue;\r\n          case \"is not\": return answerValue !== conditionValue;\r\n          case \"is one of\":\r\n            if (Array.isArray(conditionValue)) {\r\n              return conditionValue.includes(answerValue);\r\n            }\r\n            return false;\r\n          case \"is not one of\":\r\n            if (Array.isArray(conditionValue)) {\r\n              return !conditionValue.includes(answerValue);\r\n            }\r\n            return false;\r\n          default: return false;\r\n        }\r\n\r\n      case \"Slider\":\r\n        const sliderAnswer = Number(answerValue);\r\n        const sliderCondition = Number(conditionValue);\r\n\r\n        switch (condition) {\r\n          case \"equal to\": return sliderAnswer === sliderCondition;\r\n          case \"not equal to\": return sliderAnswer !== sliderCondition;\r\n          case \"greater than\": return sliderAnswer > sliderCondition;\r\n          case \"less than\": return sliderAnswer < sliderCondition;\r\n          case \"greater than or equal to\": return sliderAnswer >= sliderCondition;\r\n          case \"less than or equal to\": return sliderAnswer <= sliderCondition;\r\n          case \"between\":\r\n            if (Array.isArray(conditionValue) && conditionValue.length === 2) {\r\n              return sliderAnswer >= Number(conditionValue[0]) && sliderAnswer <= Number(conditionValue[1]);\r\n            }\r\n            return false;\r\n          default: return false;\r\n        }\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  // Function to check logic rules and update active triggers\r\n  const checkLogicRules = (questionId: string, value: string | string[] | boolean | number | null) => {\r\n    // Find the question in the template\r\n    let foundQuestion: Question | null = null;\r\n    let foundSection: AppSection | null = null;\r\n\r\n    for (const section of template.sections) {\r\n      if (section.type === \"standard\") {\r\n        const question = (section.content as StandardSectionContent).questions.find(q => q.id === questionId);\r\n        if (question) {\r\n          foundQuestion = question;\r\n          foundSection = section;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!foundQuestion || !foundSection) return;\r\n\r\n    // Check if the question has logic rules\r\n    const logicRules = foundQuestion.logicRules || [];\r\n    if (logicRules.length === 0) return;\r\n\r\n    // Evaluate each rule\r\n    const activeTriggers: { rule: LogicRule; question: Question; section: AppSection }[] = [];\r\n\r\n    for (const rule of logicRules) {\r\n      if (!rule.condition || rule.value === undefined || rule.value === null || !rule.trigger) continue;\r\n\r\n      const conditionMet = evaluateLogicCondition(\r\n        rule.condition,\r\n        rule.value,\r\n        value,\r\n        foundQuestion.responseType\r\n      );\r\n\r\n      if (conditionMet) {\r\n        activeTriggers.push({ rule, question: foundQuestion, section: foundSection });\r\n      }\r\n    }\r\n\r\n    // Update the active triggers in the report data\r\n    setReportData(prev => ({\r\n      ...prev,\r\n      activeTriggers: {\r\n        ...prev.activeTriggers || {},\r\n        [questionId]: activeTriggers\r\n      }\r\n    }));\r\n  };\r\n\r\n  const updateQuestionAnswer = (questionId: string, value: string | string[] | boolean | number | null) => {\r\n    setReportData((prev) => ({\r\n      ...prev,\r\n      questionAnswers: { ...prev.questionAnswers, [questionId]: value },\r\n    }));\r\n\r\n    // Check logic rules after updating the answer\r\n    checkLogicRules(questionId, value);\r\n  }\r\n\r\n\r\n\r\n  // Print function using browser's native print capability\r\n  const printReport = () => {\r\n    try {\r\n      setIsExporting(true)\r\n      console.log(\"Starting print process...\")\r\n\r\n      // Validate template and report data\r\n      if (!template || !reportData) {\r\n        throw new Error(\"Template or report data is missing\")\r\n      }\r\n\r\n      // Ensure we have at least some sample data for testing that matches the image format\r\n      if (Object.keys(reportData.quantities).length === 0) {\r\n        setReportData(prev => ({\r\n          ...prev,\r\n          quantities: {\r\n            \"BLUE\": {\r\n              \"S\": { orderQty: \"5\", offeredQty: \"44\" },\r\n              \"M\": { orderQty: \"4\", offeredQty: \"4\" },\r\n              \"L\": { orderQty: \"4\", offeredQty: \"4\" },\r\n              \"XL\": { orderQty: \"4\", offeredQty: \"544\" },\r\n              \"XXL\": { orderQty: \"4\", offeredQty: \"44\" }\r\n            },\r\n            \"RED\": {\r\n              \"S\": { orderQty: \"5\", offeredQty: \"4\" },\r\n              \"M\": { orderQty: \"54\", offeredQty: \"44\" },\r\n              \"L\": { orderQty: \"5\", offeredQty: \"44\" },\r\n              \"XL\": { orderQty: \"55\", offeredQty: \"3\" },\r\n              \"XXL\": { orderQty: \"5\", offeredQty: \"22\" }\r\n            },\r\n            \"BLACK\": {\r\n              \"S\": { orderQty: \"5\", offeredQty: \"55\" },\r\n              \"M\": { orderQty: \"11\", offeredQty: \"2\" },\r\n              \"L\": { orderQty: \"3\", offeredQty: \"5\" },\r\n              \"XL\": { orderQty: \"3\", offeredQty: \"55\" },\r\n              \"XXL\": { orderQty: \"44\", offeredQty: \"54\" }\r\n            }\r\n          }\r\n        }));\r\n      }\r\n\r\n      if (reportData.defects.length === 0) {\r\n        setReportData(prev => ({\r\n          ...prev,\r\n          defects: [\r\n            { type: \"Stitching\", remarks: \"Loose threads\", critical: \"1\", major: \"2\", minor: \"3\" },\r\n            { type: \"Fabric\", remarks: \"Color variation\", critical: \"0\", major: \"3\", minor: \"2\" },\r\n            { type: \"Buttons\", remarks: \"Missing buttons\", critical: \"2\", major: \"1\", minor: \"0\" }\r\n          ]\r\n        }));\r\n      }\r\n\r\n      // Set default values for carton information if not provided\r\n      if (!reportData.cartonOffered) {\r\n        setReportData(prev => ({ ...prev, cartonOffered: \"50\" }));\r\n      }\r\n\r\n      if (!reportData.cartonToInspect) {\r\n        setReportData(prev => ({ ...prev, cartonToInspect: \"10\" }));\r\n      }\r\n\r\n      if (!reportData.cartonInspected) {\r\n        setReportData(prev => ({ ...prev, cartonInspected: \"10\" }));\r\n      }\r\n\r\n      // Use setTimeout to ensure state updates have been applied\r\n      setTimeout(() => {\r\n        // Store the current body classes and document title\r\n        const originalBodyClasses = document.body.className;\r\n        const originalTitle = document.title;\r\n\r\n        // Set a custom title for the printed document using the template title if available\r\n        document.title = template.title ? `${template.title} - Inspection Report` : \"Garment Inspection Report\";\r\n\r\n        // Add a print-specific class to the body\r\n        document.body.classList.add('printing');\r\n\r\n        // Add current date for the footer\r\n        document.documentElement.setAttribute('data-print-date', new Date().toLocaleDateString());\r\n\r\n        // Print the document\r\n        window.print();\r\n\r\n        // Restore the original body classes and title\r\n        document.body.className = originalBodyClasses;\r\n        document.title = originalTitle;\r\n\r\n        // Remove the date attribute\r\n        document.documentElement.removeAttribute('data-print-date');\r\n\r\n        console.log(\"Print process completed\");\r\n        setIsExporting(false);\r\n      }, 300);\r\n    } catch (error) {\r\n      console.error(\"Error during print process:\", error);\r\n      alert(\"Failed to print. Please try again. Error: \" + (error instanceof Error ? error.message : \"Unknown error\"));\r\n      setIsExporting(false);\r\n    }\r\n  }\r\n\r\n  // Rendering Helpers\r\n  const renderResponseTypeIcon = (type: ResponseType) => {\r\n    switch (type) {\r\n      case \"Site\":\r\n        return <MapPin size={18} className=\"response-type-icon\" />\r\n      case \"Inspection date\":\r\n        return <Calendar size={18} className=\"response-type-icon\" />\r\n      case \"Person\":\r\n        return <User size={18} className=\"response-type-icon\" />\r\n      case \"Inspection location\":\r\n        return <MapPin size={18} className=\"response-type-icon\" />\r\n      case \"Text\":\r\n        return <div className=\"response-type-icon text-icon\">Aa</div>\r\n      case \"Number\":\r\n        return <div className=\"response-type-icon number-icon\">123</div>\r\n      case \"Checkbox\":\r\n        return (\r\n          <div className=\"response-type-icon checkbox-icon\">\r\n            <Check size={14} />\r\n          </div>\r\n        )\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"response-type-icon yes-no-icon\">\r\n            <span className=\"yes\">Y</span>/<span className=\"no\">N</span>\r\n          </div>\r\n        )\r\n      case \"Multiple choice\":\r\n        return <div className=\"response-type-icon multiple-choice-icon\">☰</div>\r\n      case \"Slider\":\r\n        return <div className=\"response-type-icon slider-icon\">⟷</div>\r\n      case \"Media\":\r\n        return <ImageIcon size={18} className=\"response-type-icon\" />\r\n      case \"Annotation\":\r\n        return <Edit size={18} className=\"response-type-icon\" />\r\n      case \"Date & Time\":\r\n        return <Clock size={18} className=\"response-type-icon\" />\r\n      default:\r\n        return <div className=\"response-type-icon\"></div>\r\n    }\r\n  }\r\n\r\n  const renderResponseTypeMenu = (sectionId: string, questionId: string) => {\r\n    if (showResponseTypeMenu !== questionId) return null\r\n    const responseTypes: ResponseType[] = [\r\n      \"Text\",\r\n      \"Number\",\r\n      \"Checkbox\",\r\n      \"Yes/No\",\r\n      \"Multiple choice\",\r\n      \"Slider\",\r\n      \"Media\",\r\n      \"Annotation\",\r\n      \"Date & Time\",\r\n      \"Site\",\r\n      \"Inspection date\",\r\n      \"Person\",\r\n      \"Inspection location\",\r\n    ]\r\n\r\n    return (\r\n      <div className=\"response-type-menu\">\r\n        <div className=\"response-type-menu-header\">\r\n          <h3>Select response type</h3>\r\n          <button className=\"close-button\" onClick={() => setShowResponseTypeMenu(null)}>\r\n            <X size={18} />\r\n          </button>\r\n        </div>\r\n        <div className=\"response-type-options\">\r\n          {responseTypes.map((type) => (\r\n            <button\r\n              key={type}\r\n              className=\"response-type-option\"\r\n              onClick={() => changeQuestionResponseType(sectionId, questionId, type)}\r\n            >\r\n              {renderResponseTypeIcon(type)}\r\n              <span>{type}</span>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderQuestion = (question: Question, sectionId: string, index: number) => {\r\n    const isActive = activeQuestionId === question.id\r\n    const isDragging = draggedItem?.type === \"question\" && draggedItem.id === question.id\r\n    const isDropTarget = dropTarget?.type === \"question\" && dropTarget.id === question.id\r\n\r\n    // Check if any triggers should be shown\r\n    const hasRequireEvidence = shouldShowTrigger(question, \"require_evidence\")\r\n    const hasRequireAction = shouldShowTrigger(question, \"require_action\")\r\n    const hasDisplayMessage = shouldShowTrigger(question, \"display_message\")\r\n    const hasAskQuestions = shouldShowTrigger(question, \"ask_questions\")\r\n    const hasNotify = shouldShowTrigger(question, \"notify\")\r\n\r\n    // Determine if any triggers are active\r\n    const hasActiveTriggers = hasRequireEvidence || hasRequireAction || hasDisplayMessage || hasAskQuestions || hasNotify\r\n\r\n    return (\r\n      <div\r\n        key={question.id}\r\n        ref={(el) => {\r\n          questionRefs.current[question.id] = el\r\n        }}\r\n        className={`question-item ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"} ${hasActiveTriggers ? \"has-active-triggers\" : \"\"}`}\r\n        onClick={() => setActiveQuestionId(question.id)}\r\n        draggable\r\n        onDragStart={() => handleDragStart(\"question\", question.id)}\r\n        onDragOver={(e) => handleDragOver(\"question\", question.id, e)}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div className=\"question-header\">\r\n          <div className=\"question-drag-handle\">\r\n            <Move size={16} />\r\n          </div>\r\n          <div className=\"question-number\">{index + 1}</div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"question-text\"\r\n            value={question.text}\r\n            onChange={(e) => updateQuestion(sectionId, question.id, { text: e.target.value })}\r\n            placeholder=\"Type question\"\r\n          />\r\n          {(shouldShowTrigger(question, \"require_evidence\") ||\r\n            shouldShowTrigger(question, \"require_action\") ||\r\n            shouldShowTrigger(question, \"display_message\") ||\r\n            shouldShowTrigger(question, \"ask_questions\") ||\r\n            shouldShowTrigger(question, \"notify\")) && (\r\n            <div className=\"active-trigger-indicator\" title=\"This question has active logic triggers\">\r\n              <AlertTriangle size={16} color=\"#f59e0b\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"question-body\">\r\n          <div className=\"response-type-selector\">\r\n            <div\r\n              className=\"selected-response-type\"\r\n              onClick={(e) => {\r\n                e.stopPropagation()\r\n                setShowResponseTypeMenu(showResponseTypeMenu === question.id ? null : question.id)\r\n              }}\r\n            >\r\n              {renderResponseTypeIcon(question.responseType)}\r\n              <span>{question.responseType}</span>\r\n              <ChevronDown size={16} />\r\n            </div>\r\n            {renderResponseTypeMenu(sectionId, question.id)}\r\n          </div>\r\n          {renderQuestionResponse(question, sectionId, updateQuestion)}\r\n        </div>\r\n        <div className=\"question-footer\">\r\n          {LOGIC_SUPPORTED_TYPES.includes(question.responseType) && (\r\n            <EnhancedAddLogicButton\r\n              hasRules={question.logicRules?.length ? true : false}\r\n              onClick={() => {\r\n                // Only show logic panel for supported types\r\n                setShowLogicPanel(showLogicPanel === question.id ? null : question.id);\r\n              }}\r\n            />\r\n          )}\r\n          <label className=\"required-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={question.required}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { required: e.target.checked })}\r\n            />\r\n            <span>Required</span>\r\n          </label>\r\n          <label className=\"required-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={question.flagged}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { flagged: e.target.checked })}\r\n            />\r\n            <span>Flag</span>\r\n          </label>\r\n          <button className=\"delete-question\" onClick={() => deleteQuestion(sectionId, question.id)}>\r\n            <Trash2 size={16} />\r\n          </button>\r\n          {showLogicPanel === question.id &&\r\n            LOGIC_SUPPORTED_TYPES.includes(question.responseType) && (\r\n            <EnhancedLogicRulesContainer\r\n              questionType={question.responseType}\r\n              rules={question.logicRules || []}\r\n              options={question.options || []}\r\n              onRulesChange={(rules) => updateQuestion(sectionId, question.id, { logicRules: rules })}\r\n              questions={template.sections.flatMap((s) =>\r\n                s.type === \"standard\" ?\r\n                  (s.content as StandardSectionContent).questions.map((q) => ({ id: q.id, text: q.text })) :\r\n                  []\r\n              )}\r\n              onClose={() => setShowLogicPanel(null)}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderGarmentDetailsSection = (section: AppSection) => {\r\n    if (section.type !== \"garmentDetails\") return null\r\n\r\n    const garmentContent = section.content as GarmentDetailsContent\r\n\r\n    return (\r\n      <div className=\"garment-details-content\">\r\n        <fieldset className=\"garment-fieldset aql-settings\">\r\n          <legend className=\"garment-legend\">\r\n            <Settings size={18} />\r\n            <span>AQL Settings</span>\r\n          </legend>\r\n          <div className=\"aql-grid\">\r\n            <div className=\"aql-select-group\">\r\n              <label htmlFor=\"aql-level\">AQL Level</label>\r\n              <select\r\n                id=\"aql-level\"\r\n                className=\"garment-select\"\r\n                value={garmentContent.aqlSettings.aqlLevel}\r\n                onChange={(e) => updateAQLSettings(section.id, \"aqlLevel\", e.target.value as AQLLevel)}\r\n              >\r\n                {AQL_LEVELS.map((level) => (\r\n                  <option key={level} value={level}>\r\n                    {level}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"aql-select-group\">\r\n              <label htmlFor=\"inspection-level\">Inspection Level</label>\r\n              <select\r\n                id=\"inspection-level\"\r\n                className=\"garment-select\"\r\n                value={garmentContent.aqlSettings.inspectionLevel}\r\n                onChange={(e) => updateAQLSettings(section.id, \"inspectionLevel\", e.target.value as InspectionLevel)}\r\n              >\r\n                {INSPECTION_LEVELS.map((level) => (\r\n                  <option key={level} value={level}>\r\n                    {level}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"aql-select-group\">\r\n              <label htmlFor=\"sampling-plan\">Sampling Plan</label>\r\n              <select\r\n                id=\"sampling-plan\"\r\n                className=\"garment-select\"\r\n                value={garmentContent.aqlSettings.samplingPlan}\r\n                onChange={(e) => updateAQLSettings(section.id, \"samplingPlan\", e.target.value as SamplingPlan)}\r\n              >\r\n                {SAMPLING_PLANS.map((plan) => (\r\n                  <option key={plan} value={plan}>\r\n                    {plan}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"aql-select-group\">\r\n              <label htmlFor=\"severity\">Severity</label>\r\n              <select\r\n                id=\"severity\"\r\n                className=\"garment-select\"\r\n                value={garmentContent.aqlSettings.severity}\r\n                onChange={(e) => updateAQLSettings(section.id, \"severity\", e.target.value as Severity)}\r\n              >\r\n                {SEVERITIES.map((severity) => (\r\n                  <option key={severity} value={severity}>\r\n                    {severity}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset className=\"garment-fieldset quantity-grid\">\r\n          <legend className=\"garment-legend\">\r\n            <Ruler size={18} />\r\n            <span>Quantity Grid Configuration</span>\r\n          </legend>\r\n\r\n          <div className=\"garment-config-group\">\r\n            <label className=\"garment-label\">Sizes</label>\r\n            <ul className=\"garment-item-list\">\r\n              {garmentContent.sizes.map((size) => (\r\n                <li key={size} className=\"garment-item\">\r\n                  <span>{size}</span>\r\n                  <div className=\"garment-item-actions\">\r\n                    <button\r\n                      className=\"garment-item-edit\"\r\n                      onClick={() => {\r\n                        const newSize = prompt(\"Edit size\", size)\r\n                        if (newSize && newSize !== size) {\r\n                          const updatedSizes = garmentContent.sizes.map((s) => (s === size ? newSize : s))\r\n                          updateGarmentDetails(section.id, { sizes: updatedSizes })\r\n                        }\r\n                      }}\r\n                      aria-label={`Edit size ${size}`}\r\n                    >\r\n                      <Edit size={14} />\r\n                    </button>\r\n                    <button\r\n                      className=\"garment-item-remove\"\r\n                      onClick={() => removeSize(section.id, size)}\r\n                      aria-label={`Remove size ${size}`}\r\n                    >\r\n                      <X size={14} />\r\n                    </button>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"garment-add-item\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"garment-input\"\r\n                placeholder=\"New Size\"\r\n                value={newSize}\r\n                onChange={(e) => setNewSize(e.target.value)}\r\n                onKeyDown={(e) => e.key === \"Enter\" && addSize(section.id)}\r\n              />\r\n              <button className=\"garment-add-button\" onClick={() => addSize(section.id)}>\r\n                Add\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"garment-config-group\">\r\n            <label className=\"garment-label\">Colors</label>\r\n            <ul className=\"garment-item-list\">\r\n              {garmentContent.colors.map((color) => (\r\n                <li key={color} className=\"garment-item\">\r\n                  <span>{color}</span>\r\n                  <div className=\"garment-item-actions\">\r\n                    <button\r\n                      className=\"garment-item-edit\"\r\n                      onClick={() => {\r\n                        const newColor = prompt(\"Edit color\", color)\r\n                        if (newColor && newColor !== color) {\r\n                          const updatedColors = garmentContent.colors.map((c) => (c === color ? newColor : c))\r\n                          updateGarmentDetails(section.id, { colors: updatedColors })\r\n                        }\r\n                      }}\r\n                      aria-label={`Edit color ${color}`}\r\n                    >\r\n                      <Edit size={14} />\r\n                    </button>\r\n                    <button\r\n                      className=\"garment-item-remove\"\r\n                      onClick={() => removeColor(section.id, color)}\r\n                      aria-label={`Remove color ${color}`}\r\n                    >\r\n                      <X size={14} />\r\n                    </button>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"garment-add-item\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"garment-input\"\r\n                placeholder=\"New Color\"\r\n                value={newColor}\r\n                onChange={(e) => setNewColor(e.target.value)}\r\n                onKeyDown={(e) => e.key === \"Enter\" && addColor(section.id)}\r\n              />\r\n              <button className=\"garment-add-button\" onClick={() => addColor(section.id)}>\r\n                Add\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset className=\"garment-fieldset carton-counts\">\r\n          <legend className=\"garment-legend\">\r\n            <Box size={18} />\r\n            <span>Carton Counts</span>\r\n          </legend>\r\n\r\n          <div className=\"garment-checkbox-group\">\r\n            <label className=\"garment-checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={garmentContent.includeCartonOffered}\r\n                onChange={() => toggleCartonSetting(section.id, \"includeCartonOffered\")}\r\n              />\r\n              <span>Include 'No. of Cartons Offered' field</span>\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"garment-checkbox-group\">\r\n            <label className=\"garment-checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={garmentContent.includeCartonInspected}\r\n                onChange={() => toggleCartonSetting(section.id, \"includeCartonInspected\")}\r\n              />\r\n              <span>Include 'No. of Cartons Inspected' field</span>\r\n            </label>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset className=\"garment-fieldset default-defects\">\r\n          <legend className=\"garment-legend\">\r\n            <List size={18} />\r\n            <span>Default Defect Types</span>\r\n          </legend>\r\n\r\n          <div className=\"garment-config-group\">\r\n            <label className=\"garment-label\">Initial Defect List</label>\r\n            <ul className=\"garment-item-list\">\r\n              {garmentContent.defaultDefects.map((defect) => (\r\n                <li key={defect} className=\"garment-item\">\r\n                  <span>{defect}</span>\r\n                  <button\r\n                    className=\"garment-item-remove\"\r\n                    onClick={() => removeDefect(section.id, defect)}\r\n                    aria-label={`Remove defect ${defect}`}\r\n                  >\r\n                    <X size={14} />\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <div className=\"garment-add-item\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"garment-input\"\r\n                placeholder=\"New Defect Type\"\r\n                value={newDefect}\r\n                onChange={(e) => setNewDefect(e.target.value)}\r\n                onKeyDown={(e) => e.key === \"Enter\" && addDefect(section.id)}\r\n              />\r\n              <button className=\"garment-add-button\" onClick={() => addDefect(section.id)}>\r\n                Add\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderStandardSection = (section: AppSection) => {\r\n    if (section.type !== \"standard\") return null\r\n\r\n    const standardContent = section.content as StandardSectionContent\r\n\r\n    return (\r\n      <>\r\n        {standardContent.description && <div className=\"section-description\">{standardContent.description}</div>}\r\n        <div className=\"questions-container\">\r\n          <div className=\"questions-header\">\r\n            <div className=\"question-label\">Question</div>\r\n            <div className=\"response-type-label\">Type of response</div>\r\n            <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\r\n              <Plus size={16} />\r\n            </button>\r\n          </div>\r\n          {standardContent.questions.map((question, idx) => renderQuestion(question, section.id, idx))}\r\n          <div className=\"question-actions\">\r\n            <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\r\n              <Plus size={16} /> Add Question\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const renderSection = (section: AppSection, index: number) => {\r\n    const isActive = activeSectionId === section.id\r\n    const isDragging = draggedItem?.type === \"section\" && draggedItem.id === section.id\r\n    const isDropTarget = dropTarget?.type === \"section\" && dropTarget.id === section.id\r\n    const isTitlePage = index === 0 && section.title === \"Title Page\"\r\n    const isGarmentDetails = section.type === \"garmentDetails\"\r\n    const isDraggable = !isTitlePage && !isGarmentDetails\r\n\r\n    return (\r\n      <div\r\n        key={section.id}\r\n        ref={(el) => {\r\n          sectionRefs.current[section.id] = el\r\n        }}\r\n        className={`section-container ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"} ${isGarmentDetails ? \"garment-details-section\" : \"\"}`}\r\n        onClick={() => setActiveSectionId(section.id)}\r\n        draggable={isDraggable}\r\n        onDragStart={() => isDraggable && handleDragStart(\"section\", section.id)}\r\n        onDragOver={(e) => handleDragOver(\"section\", section.id, e)}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div className=\"section-header\">\r\n          <button\r\n            className=\"collapse-button\"\r\n            onClick={(e) => {\r\n              e.stopPropagation()\r\n              toggleSectionCollapse(section.id)\r\n            }}\r\n          >\r\n            {section.isCollapsed ? <ChevronUp size={18} /> : <ChevronDown size={18} />}\r\n          </button>\r\n          <div className=\"section-title-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"section-title\"\r\n              value={section.title}\r\n              onChange={(e) => updateSection(section.id, { title: e.target.value })}\r\n              readOnly={isGarmentDetails}\r\n            />\r\n            {(isTitlePage || !isGarmentDetails) && (\r\n              <button\r\n                className=\"edit-section-title\"\r\n                onClick={() => {\r\n                  const newTitle = prompt(\"Edit section title\", section.title);\r\n                  if (newTitle && newTitle.trim() !== \"\") {\r\n                    updateSection(section.id, { title: newTitle.trim() });\r\n                  }\r\n                }}\r\n              >\r\n                <Edit size={16} />\r\n              </button>\r\n            )}\r\n            {isGarmentDetails && (\r\n              <div className=\"section-icon\">\r\n                <Shirt size={16} />\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"section-actions\">\r\n            <button\r\n              className=\"delete-section-button\"\r\n              onClick={(e) => {\r\n                e.stopPropagation()\r\n                deleteSection(section.id)\r\n              }}\r\n              disabled={isTitlePage}\r\n            >\r\n              <Trash2 size={16} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {!section.isCollapsed && (\r\n          <>\r\n            {section.type === \"standard\" && renderStandardSection(section)}\r\n            {section.type === \"garmentDetails\" && renderGarmentDetailsSection(section)}\r\n          </>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderReportQuestionResponse = (\r\n    question: Question,\r\n    reportData: ReportData,\r\n    updateQuestionAnswer: (questionId: string, value: string | string[] | boolean | number | null) => void\r\n  ) => {\r\n    const value =\r\n      reportData.questionAnswers[question.id] !== undefined ? reportData.questionAnswers[question.id] : question.value;\r\n\r\n    switch (question.responseType) {\r\n      case \"Text\":\r\n      case \"Site\":\r\n      case \"Person\":\r\n      case \"Inspection location\":\r\n        return (\r\n          <div className=\"report-response-field compact-field\">\r\n            {question.responseType === \"Inspection location\" ? (\r\n              <div className=\"location-field-report\">\r\n                <div className=\"location-input-wrapper\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"report-text-input\"\r\n                    value={(value as string) || \"\"}\r\n                    onChange={(e) => updateQuestionAnswer(question.id, e.target.value)}\r\n                    placeholder=\"Enter city, area, or address\"\r\n                  />\r\n                  <button\r\n                    onClick={() => {\r\n                      if (navigator.geolocation) {\r\n                        navigator.geolocation.getCurrentPosition(\r\n                          (position) => {\r\n                            // Get coordinates\r\n                            const coords = `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`;\r\n\r\n                            // Try to get address from coordinates using reverse geocoding\r\n                            fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${position.coords.latitude}&lon=${position.coords.longitude}`)\r\n                              .then(response => response.json())\r\n                              .then(data => {\r\n                                let locationText = '';\r\n                                if (data && data.address) {\r\n                                  const address = data.address;\r\n                                  // Create a readable address from components\r\n                                  const components = [];\r\n                                  if (address.city || address.town || address.village) {\r\n                                    components.push(address.city || address.town || address.village);\r\n                                  }\r\n                                  if (address.state || address.county) {\r\n                                    components.push(address.state || address.county);\r\n                                  }\r\n                                  if (address.country) {\r\n                                    components.push(address.country);\r\n                                  }\r\n                                  locationText = components.join(', ');\r\n                                }\r\n\r\n                                // If we couldn't get a readable address, use coordinates\r\n                                if (!locationText) {\r\n                                  locationText = coords;\r\n                                }\r\n\r\n                                updateQuestionAnswer(question.id, locationText);\r\n                              })\r\n                              .catch(error => {\r\n                                console.error(\"Error getting location name:\", error);\r\n                                // Fallback to coordinates if geocoding fails\r\n                                updateQuestionAnswer(question.id, coords);\r\n                              });\r\n                          },\r\n                          (error) => {\r\n                            alert(\"Error getting location: \" + error.message);\r\n                          }\r\n                        );\r\n                      } else {\r\n                        alert(\"Geolocation is not supported by this browser.\");\r\n                      }\r\n                    }}\r\n                    className=\"report-location-button\"\r\n                    title=\"Get current location\"\r\n                  >\r\n                    <MapPin size={14} />\r\n                  </button>\r\n                </div>\r\n                {value && (\r\n                  <div className=\"location-display\">\r\n                    <MapPin size={12} />\r\n                    <span>{value}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <input\r\n                type=\"text\"\r\n                className=\"report-text-input\"\r\n                value={(value as string) || \"\"}\r\n                onChange={(e) => updateQuestionAnswer(question.id, e.target.value)}\r\n                placeholder={`Enter ${question.responseType.toLowerCase()}`}\r\n              />\r\n            )}\r\n          </div>\r\n        );\r\n      case \"Number\":\r\n        return (\r\n          <div className=\"report-response-field\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"report-number-input\"\r\n              value={(value as number) || \"\"}\r\n              onChange={(e) => updateQuestionAnswer(question.id, Number(e.target.value))}\r\n              placeholder=\"0\"\r\n            />\r\n          </div>\r\n        );\r\n      case \"Checkbox\":\r\n        return (\r\n          <div className=\"report-response-field\">\r\n            <label className=\"report-checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={!!value}\r\n                onChange={(e) => updateQuestionAnswer(question.id, e.target.checked)}\r\n              />\r\n              <span>Yes</span>\r\n            </label>\r\n          </div>\r\n        );\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"report-response-field\">\r\n            <div className=\"report-yes-no-options\">\r\n              <label className=\"report-radio-label\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name={`yesno-${question.id}`}\r\n                  value=\"Yes\"\r\n                  checked={value === \"Yes\"}\r\n                  onChange={() => updateQuestionAnswer(question.id, \"Yes\")}\r\n                />\r\n                <span>Yes</span>\r\n              </label>\r\n              <label className=\"report-radio-label\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name={`yesno-${question.id}`}\r\n                  value=\"No\"\r\n                  checked={value === \"No\"}\r\n                  onChange={() => updateQuestionAnswer(question.id, \"No\")}\r\n                />\r\n                <span>No</span>\r\n              </label>\r\n              <label className=\"report-radio-label\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name={`yesno-${question.id}`}\r\n                  value=\"N/A\"\r\n                  checked={value === \"N/A\"}\r\n                  onChange={() => updateQuestionAnswer(question.id, \"N/A\")}\r\n                />\r\n                <span>N/A</span>\r\n              </label>\r\n            </div>\r\n          </div>\r\n        );\r\n      case \"Multiple choice\":\r\n        return (\r\n          <div className=\"report-response-field\">\r\n            <select\r\n              className=\"report-select\"\r\n              value={(value as string) || \"\"}\r\n              onChange={(e) => updateQuestionAnswer(question.id, e.target.value)}\r\n            >\r\n              <option value=\"\">Select an option</option>\r\n              {(question.options || []).map((option, idx) => (\r\n                <option key={idx} value={option}>\r\n                  {option}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        );\r\n      case \"Slider\":\r\n        return (\r\n          <div className=\"report-response-field\">\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={(value as number) || 0}\r\n              onChange={(e) => updateQuestionAnswer(question.id, Number(e.target.value))}\r\n              className=\"report-slider\"\r\n            />\r\n            <span className=\"report-slider-value\">{value || 0}</span>\r\n          </div>\r\n        );\r\n      case \"Media\":\r\n        return (\r\n          <div className=\"report-response-field\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*,video/*\"\r\n              multiple\r\n              onChange={async (e) => {\r\n                const files = e.target.files;\r\n                if (!files || files.length === 0) return;\r\n\r\n                // Convert files to base64 and store them\r\n                const mediaFiles: string[] = [];\r\n\r\n                for (let i = 0; i < files.length; i++) {\r\n                  const file = files[i];\r\n                  const reader = new FileReader();\r\n\r\n                  reader.onload = async (event) => {\r\n                    const result = event.target?.result as string;\r\n                    if (result) {\r\n                      try {\r\n                        // Resize image if it's an image\r\n                        const resizedImage = file.type.startsWith('image/')\r\n                          ? await resizeImage(result)\r\n                          : result;\r\n\r\n                        mediaFiles.push(resizedImage);\r\n\r\n                        // Update the question with the new media files\r\n                        if (mediaFiles.length === files.length) {\r\n                          const currentValue = value as string[] || [];\r\n                          updateQuestionAnswer(question.id, [...currentValue, ...mediaFiles]);\r\n                        }\r\n                      } catch (error) {\r\n                        console.error(\"Error processing media file:\", error);\r\n                      }\r\n                    }\r\n                  };\r\n\r\n                  reader.readAsDataURL(file);\r\n                }\r\n              }}\r\n              className=\"report-media-file-input\"\r\n              id={`report-media-upload-${question.id}`}\r\n            />\r\n            <label htmlFor={`report-media-upload-${question.id}`} className=\"report-media-upload\">\r\n              <ImageIcon size={20} />\r\n              <span>Upload media</span>\r\n            </label>\r\n\r\n            {/* Display uploaded media previews */}\r\n            {Array.isArray(value) && value.length > 0 && (\r\n              <div className=\"report-media-previews\">\r\n                {(value as string[]).map((media, index) => (\r\n                  <div key={index} className=\"report-media-preview-item\">\r\n                    {media.startsWith('data:image') ? (\r\n                      <img src={media || \"/placeholder.svg\"} alt={`Uploaded media ${index + 1}`} />\r\n                    ) : (\r\n                      <div className=\"report-video-preview\">\r\n                        <FileText size={24} />\r\n                        <span>Media file {index + 1}</span>\r\n                      </div>\r\n                    )}\r\n                    <button\r\n                      className=\"report-remove-media-button\"\r\n                      onClick={() => {\r\n                        const updatedMedia = [...value as string[]];\r\n                        updatedMedia.splice(index, 1);\r\n                        updateQuestionAnswer(question.id, updatedMedia);\r\n                      }}\r\n                    >\r\n                      <X size={12} />\r\n                    </button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      case \"Annotation\":\r\n        return (\r\n          <div className=\"report-response-field\">\r\n            <div className=\"report-signature-container\">\r\n              <div className=\"signature-canvas-wrapper\">\r\n                <canvas\r\n                  ref={(canvas) => {\r\n                    if (!canvas) return;\r\n\r\n                    // Store canvas in a ref to avoid recreating it\r\n                    if ((canvas as any).__initialized) return;\r\n                    (canvas as any).__initialized = true;\r\n\r\n                    const ctx = canvas.getContext('2d');\r\n                    if (!ctx) return;\r\n\r\n                    // Set canvas dimensions\r\n                    canvas.width = canvas.offsetWidth;\r\n                    canvas.height = canvas.offsetHeight;\r\n\r\n                    // Set canvas styles\r\n                    ctx.lineWidth = 2;\r\n                    ctx.lineCap = 'round';\r\n                    ctx.lineJoin = 'round';\r\n                    ctx.strokeStyle = '#000000';\r\n\r\n                    // Clear canvas\r\n                    ctx.fillStyle = '#ffffff';\r\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n                    // If there's already a saved signature, draw it\r\n                    if (value && typeof value === 'string' && value.startsWith('data:image/png')) {\r\n                      const img = new Image();\r\n                      img.onload = () => {\r\n                        ctx.drawImage(img, 0, 0);\r\n                      };\r\n                      img.src = value;\r\n                    }\r\n\r\n                    // Set up drawing variables\r\n                    let isDrawing = false;\r\n                    let lastX = 0;\r\n                    let lastY = 0;\r\n\r\n                    // Store canvas and context in local variables that are definitely not null\r\n                    const canvasElement = canvas;\r\n                    const context = ctx;\r\n\r\n                    // Define drawing functions\r\n                    function startDrawing(e: MouseEvent | TouchEvent) {\r\n                      isDrawing = true;\r\n\r\n                      const rect = canvasElement.getBoundingClientRect();\r\n                      let clientX, clientY;\r\n\r\n                      if (e instanceof TouchEvent) {\r\n                        clientX = e.touches[0].clientX;\r\n                        clientY = e.touches[0].clientY;\r\n                      } else {\r\n                        clientX = e.clientX;\r\n                        clientY = e.clientY;\r\n                      }\r\n\r\n                      lastX = clientX - rect.left;\r\n                      lastY = clientY - rect.top;\r\n                    }\r\n\r\n                    function draw(e: MouseEvent | TouchEvent) {\r\n                      if (!isDrawing) return;\r\n\r\n                      const rect = canvasElement.getBoundingClientRect();\r\n                      let clientX, clientY;\r\n\r\n                      if (e instanceof TouchEvent) {\r\n                        clientX = e.touches[0].clientX;\r\n                        clientY = e.touches[0].clientY;\r\n                        e.preventDefault(); // Prevent scrolling on touch devices\r\n                      } else {\r\n                        clientX = e.clientX;\r\n                        clientY = e.clientY;\r\n                      }\r\n\r\n                      const x = clientX - rect.left;\r\n                      const y = clientY - rect.top;\r\n\r\n                      context.beginPath();\r\n                      context.moveTo(lastX, lastY);\r\n                      context.lineTo(x, y);\r\n                      context.stroke();\r\n\r\n                      lastX = x;\r\n                      lastY = y;\r\n                    }\r\n\r\n                    function endDrawing() {\r\n                      if (isDrawing) {\r\n                        // Only save the signature when the drawing is complete\r\n                        const signatureImage = canvasElement.toDataURL('image/png');\r\n                        updateQuestionAnswer(question.id, signatureImage);\r\n                        isDrawing = false;\r\n                      }\r\n                    }\r\n\r\n                    // Add event listeners\r\n                    canvasElement.addEventListener('mousedown', startDrawing);\r\n                    canvasElement.addEventListener('mousemove', draw);\r\n                    canvasElement.addEventListener('mouseup', endDrawing);\r\n                    canvasElement.addEventListener('mouseleave', endDrawing);\r\n                    canvasElement.addEventListener('touchstart', startDrawing);\r\n                    canvasElement.addEventListener('touchmove', draw);\r\n                    canvasElement.addEventListener('touchend', endDrawing);\r\n                  }}\r\n                  className=\"report-signature-canvas\"\r\n                  width={300}\r\n                  height={150}\r\n                />\r\n                <div className=\"report-signature-controls\">\r\n                  <button\r\n                    className=\"report-clear-signature-button\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n\r\n                      // Find the canvas element\r\n                      const canvasElement = e.currentTarget.closest('.signature-canvas-wrapper')?.querySelector('canvas') as HTMLCanvasElement;\r\n                      if (!canvasElement) return;\r\n\r\n                      const ctx = canvasElement.getContext('2d');\r\n                      if (!ctx) return;\r\n\r\n                      // Clear the canvas\r\n                      ctx.fillStyle = '#ffffff';\r\n                      ctx.fillRect(0, 0, canvasElement.width, canvasElement.height);\r\n\r\n                      // Clear the saved value\r\n                      updateQuestionAnswer(question.id, null);\r\n                    }}\r\n                    type=\"button\"\r\n                  >\r\n                    Clear Signature\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      case \"Date & Time\":\r\n      case \"Inspection date\":\r\n        return (\r\n          <div className=\"report-response-field\">\r\n            <input\r\n              type=\"date\"\r\n              className=\"report-date-input\"\r\n              value={(value as string) || new Date().toISOString().split(\"T\")[0]}\r\n              onChange={(e) => updateQuestionAnswer(question.id, e.target.value)}\r\n            />\r\n          </div>\r\n        );\r\n      default:\r\n        return <div className=\"report-response-field\">Unsupported response type</div>;\r\n    }\r\n  };\r\n\r\n  // Component to render active triggers for a question\r\n  const renderActiveTriggers = (questionId: string) => {\r\n    if (!reportData.activeTriggers || !reportData.activeTriggers[questionId]) {\r\n      return null;\r\n    }\r\n\r\n    const activeTriggers = reportData.activeTriggers[questionId];\r\n\r\n    return (\r\n      <div className=\"report-question-triggers\">\r\n        {activeTriggers.map((triggerData, index) => {\r\n          const { rule } = triggerData;\r\n\r\n          switch (rule.trigger) {\r\n            case \"require_evidence\":\r\n              return (\r\n                <div key={index} className=\"report-trigger report-evidence-trigger\">\r\n                  <div className=\"report-trigger-header\">\r\n                    <AlertTriangle size={16} className=\"report-trigger-icon\" />\r\n                    <span className=\"report-trigger-text\">Evidence required</span>\r\n                  </div>\r\n                  <div className=\"report-evidence-upload\">\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      multiple\r\n                      onChange={async (e) => {\r\n                        const files = e.target.files;\r\n                        if (!files || files.length === 0) return;\r\n\r\n                        // Convert files to base64 and store them\r\n                        const evidenceFiles: string[] = [];\r\n\r\n                        for (let i = 0; i < files.length; i++) {\r\n                          const file = files[i];\r\n                          const reader = new FileReader();\r\n\r\n                          reader.onload = async (event) => {\r\n                            const result = event.target?.result as string;\r\n                            if (result) {\r\n                              try {\r\n                                // Resize image\r\n                                const resizedImage = await resizeImage(result);\r\n                                evidenceFiles.push(resizedImage);\r\n\r\n                                // Update the evidence when all files are processed\r\n                                if (evidenceFiles.length === files.length) {\r\n                                  setReportData(prev => ({\r\n                                    ...prev,\r\n                                    questionEvidence: {\r\n                                      ...prev.questionEvidence || {},\r\n                                      [questionId]: [\r\n                                        ...(prev.questionEvidence?.[questionId] || []),\r\n                                        ...evidenceFiles\r\n                                      ]\r\n                                    }\r\n                                  }));\r\n                                }\r\n                              } catch (error) {\r\n                                console.error(\"Error processing evidence file:\", error);\r\n                              }\r\n                            }\r\n                          };\r\n\r\n                          reader.readAsDataURL(file);\r\n                        }\r\n                      }}\r\n                      id={`evidence-upload-${questionId}`}\r\n                      className=\"evidence-file-input\"\r\n                    />\r\n                    <label htmlFor={`evidence-upload-${questionId}`} className=\"evidence-upload-button\">\r\n                      <Upload size={16} />\r\n                      <span>Upload evidence</span>\r\n                    </label>\r\n                  </div>\r\n\r\n                  {/* Display uploaded evidence */}\r\n                  {reportData.questionEvidence && reportData.questionEvidence[questionId] && (\r\n                    <div className=\"report-evidence-previews\">\r\n                      {reportData.questionEvidence[questionId].map((evidence, idx) => (\r\n                        <div key={idx} className=\"report-evidence-preview\">\r\n                          <img src={evidence} alt={`Evidence ${idx + 1}`} />\r\n                          <button\r\n                            className=\"remove-evidence-button\"\r\n                            onClick={() => {\r\n                              setReportData(prev => {\r\n                                const updatedEvidence = [...(prev.questionEvidence?.[questionId] || [])];\r\n                                updatedEvidence.splice(idx, 1);\r\n\r\n                                return {\r\n                                  ...prev,\r\n                                  questionEvidence: {\r\n                                    ...prev.questionEvidence || {},\r\n                                    [questionId]: updatedEvidence\r\n                                  }\r\n                                };\r\n                              });\r\n                            }}\r\n                          >\r\n                            <X size={14} />\r\n                          </button>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n\r\n            case \"display_message\":\r\n              return (\r\n                <div key={index} className=\"report-trigger report-message-trigger\">\r\n                  <div className=\"report-trigger-header\">\r\n                    <MessageSquare size={16} className=\"report-trigger-icon\" />\r\n                    <span className=\"report-trigger-text\">Message</span>\r\n                  </div>\r\n                  <div className=\"report-trigger-message\">\r\n                    {rule.message || \"Please review this answer carefully.\"}\r\n                  </div>\r\n                </div>\r\n              );\r\n\r\n            case \"notify\":\r\n              return (\r\n                <div key={index} className=\"report-trigger report-notify-trigger\">\r\n                  <div className=\"report-trigger-header\">\r\n                    <Bell size={16} className=\"report-trigger-icon\" />\r\n                    <span className=\"report-trigger-text\">Notification</span>\r\n                  </div>\r\n                  <div className=\"report-trigger-message\">\r\n                    {rule.message || \"This answer requires attention.\"}\r\n                  </div>\r\n                </div>\r\n              );\r\n\r\n            case \"require_action\":\r\n              return (\r\n                <div key={index} className=\"report-trigger report-action-trigger\">\r\n                  <div className=\"report-trigger-header\">\r\n                    <AlertTriangle size={16} className=\"report-trigger-icon\" />\r\n                    <span className=\"report-trigger-text\">Action required</span>\r\n                  </div>\r\n                  <div className=\"report-action-input\">\r\n                    <textarea\r\n                      placeholder=\"Describe the action taken...\"\r\n                      className=\"report-action-textarea\"\r\n                      onChange={(e) => {\r\n                        // Store action text in report data\r\n                        setReportData(prev => ({\r\n                          ...prev,\r\n                          actionResponses: {\r\n                            ...prev.actionResponses || {},\r\n                            [questionId]: {\r\n                              ...prev.actionResponses?.[questionId] || {},\r\n                              [rule.id]: e.target.value\r\n                            }\r\n                          }\r\n                        }));\r\n                      }}\r\n                      value={reportData.actionResponses?.[questionId]?.[rule.id] || \"\"}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              );\r\n\r\n            case \"ask_questions\":\r\n              return (\r\n                <div key={index} className=\"report-trigger report-subquestion-trigger\">\r\n                  <div className=\"report-trigger-header\">\r\n                    <MessageSquare size={16} className=\"report-trigger-icon\" />\r\n                    <span className=\"report-trigger-text\">Additional question</span>\r\n                  </div>\r\n                  {rule.subQuestion && (\r\n                    <div className=\"report-subquestion\">\r\n                      <div className=\"report-subquestion-text\">{rule.subQuestion.text}</div>\r\n\r\n                      {/* Render different input types based on the subQuestion responseType */}\r\n                      {rule.subQuestion.responseType === \"Text\" && (\r\n                        <input\r\n                          type=\"text\"\r\n                          className=\"report-subquestion-input\"\r\n                          placeholder=\"Enter your answer\"\r\n                          onChange={(e) => {\r\n                            setReportData(prev => ({\r\n                              ...prev,\r\n                              subQuestionAnswers: {\r\n                                ...prev.subQuestionAnswers || {},\r\n                                [questionId]: {\r\n                                  ...prev.subQuestionAnswers?.[questionId] || {},\r\n                                  [rule.id]: e.target.value\r\n                                }\r\n                              }\r\n                            }));\r\n                          }}\r\n                          value={reportData.subQuestionAnswers?.[questionId]?.[rule.id] || \"\"}\r\n                        />\r\n                      )}\r\n\r\n                      {rule.subQuestion.responseType === \"Number\" && (\r\n                        <input\r\n                          type=\"number\"\r\n                          className=\"report-subquestion-input\"\r\n                          placeholder=\"0\"\r\n                          onChange={(e) => {\r\n                            setReportData(prev => ({\r\n                              ...prev,\r\n                              subQuestionAnswers: {\r\n                                ...prev.subQuestionAnswers || {},\r\n                                [questionId]: {\r\n                                  ...prev.subQuestionAnswers?.[questionId] || {},\r\n                                  [rule.id]: e.target.value\r\n                                }\r\n                              }\r\n                            }));\r\n                          }}\r\n                          value={reportData.subQuestionAnswers?.[questionId]?.[rule.id] || \"\"}\r\n                        />\r\n                      )}\r\n\r\n                      {rule.subQuestion.responseType === \"Yes/No\" && (\r\n                        <div className=\"report-subquestion-yes-no\">\r\n                          <label className=\"report-radio-label\">\r\n                            <input\r\n                              type=\"radio\"\r\n                              name={`subquestion-yesno-${questionId}-${rule.id}`}\r\n                              value=\"Yes\"\r\n                              checked={reportData.subQuestionAnswers?.[questionId]?.[rule.id] === \"Yes\"}\r\n                              onChange={() => {\r\n                                setReportData(prev => ({\r\n                                  ...prev,\r\n                                  subQuestionAnswers: {\r\n                                    ...prev.subQuestionAnswers || {},\r\n                                    [questionId]: {\r\n                                      ...prev.subQuestionAnswers?.[questionId] || {},\r\n                                      [rule.id]: \"Yes\"\r\n                                    }\r\n                                  }\r\n                                }));\r\n                              }}\r\n                            />\r\n                            <span>Yes</span>\r\n                          </label>\r\n                          <label className=\"report-radio-label\">\r\n                            <input\r\n                              type=\"radio\"\r\n                              name={`subquestion-yesno-${questionId}-${rule.id}`}\r\n                              value=\"No\"\r\n                              checked={reportData.subQuestionAnswers?.[questionId]?.[rule.id] === \"No\"}\r\n                              onChange={() => {\r\n                                setReportData(prev => ({\r\n                                  ...prev,\r\n                                  subQuestionAnswers: {\r\n                                    ...prev.subQuestionAnswers || {},\r\n                                    [questionId]: {\r\n                                      ...prev.subQuestionAnswers?.[questionId] || {},\r\n                                      [rule.id]: \"No\"\r\n                                    }\r\n                                  }\r\n                                }));\r\n                              }}\r\n                            />\r\n                            <span>No</span>\r\n                          </label>\r\n                          <label className=\"report-radio-label\">\r\n                            <input\r\n                              type=\"radio\"\r\n                              name={`subquestion-yesno-${questionId}-${rule.id}`}\r\n                              value=\"N/A\"\r\n                              checked={reportData.subQuestionAnswers?.[questionId]?.[rule.id] === \"N/A\"}\r\n                              onChange={() => {\r\n                                setReportData(prev => ({\r\n                                  ...prev,\r\n                                  subQuestionAnswers: {\r\n                                    ...prev.subQuestionAnswers || {},\r\n                                    [questionId]: {\r\n                                      ...prev.subQuestionAnswers?.[questionId] || {},\r\n                                      [rule.id]: \"N/A\"\r\n                                    }\r\n                                  }\r\n                                }));\r\n                              }}\r\n                            />\r\n                            <span>N/A</span>\r\n                          </label>\r\n                        </div>\r\n                      )}\r\n\r\n                      {rule.subQuestion.responseType === \"Multiple choice\" && (\r\n                        <select\r\n                          className=\"report-subquestion-select\"\r\n                          value={reportData.subQuestionAnswers?.[questionId]?.[rule.id] || \"\"}\r\n                          onChange={(e) => {\r\n                            setReportData(prev => ({\r\n                              ...prev,\r\n                              subQuestionAnswers: {\r\n                                ...prev.subQuestionAnswers || {},\r\n                                [questionId]: {\r\n                                  ...prev.subQuestionAnswers?.[questionId] || {},\r\n                                  [rule.id]: e.target.value\r\n                                }\r\n                              }\r\n                            }));\r\n                          }}\r\n                        >\r\n                          <option value=\"\">Select an option</option>\r\n                          {rule.subQuestion.options ?\r\n                            rule.subQuestion.options.map((option, idx) => (\r\n                              <option key={idx} value={option}>{option}</option>\r\n                            )) :\r\n                            [\r\n                              <option key=\"1\" value=\"Option 1\">Option 1</option>,\r\n                              <option key=\"2\" value=\"Option 2\">Option 2</option>,\r\n                              <option key=\"3\" value=\"Option 3\">Option 3</option>\r\n                            ]\r\n                          }\r\n                        </select>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n\r\n            default:\r\n              return null;\r\n          }\r\n        })}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderReportQuestion = (question: Question, questionIndex: number) => (\r\n    <div key={question.id} className=\"report-question-item compact-question\">\r\n      <div className=\"report-question-header\">\r\n        <span className=\"report-question-number\">{questionIndex + 1}.</span>\r\n        <span className=\"report-question-text\">{question.text}</span>\r\n        {question.required && <span className=\"report-required-badge\">Required</span>}\r\n      </div>\r\n      {renderReportQuestionResponse(question, reportData, updateQuestionAnswer)}\r\n      {renderActiveTriggers(question.id)}\r\n    </div>\r\n  )\r\n\r\n  const renderReportTab = () => {\r\n    return (\r\n      <div className=\"report-preview-container\">\r\n        <div className=\"report-actions\">\r\n          <h2>Garment Inspection Report</h2>\r\n          <div className=\"report-action-buttons\">\r\n            <button className=\"export-pdf-button\" onClick={printReport} disabled={isExporting}>\r\n              <Printer size={18} />\r\n              <span>{isExporting ? \"Preparing...\" : \"Print Report\"}</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"report-preview\" ref={reportRef}>\r\n          <div className=\"report-header-preview\">\r\n            <div className=\"report-header-content\">\r\n              <div className=\"report-logo\">\r\n                {template.logo ? (\r\n                  <img src={template.logo} alt=\"Company logo\" />\r\n                ) : (\r\n                  <div className=\"logo-placeholder\">M.I.S</div>\r\n                )}\r\n              </div>\r\n              <div className=\"report-title-info\">\r\n                <h3>GARMENT INSPECTION REPORT</h3>\r\n                <p>{template.description || \"THIS DOCUMENT IS NON-NEGOTIABLE\"}</p>\r\n              </div>\r\n              <div className=\"report-header-spacer\"></div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Questions Section */}\r\n          {template.sections\r\n            .filter((section) => section.type === \"standard\")\r\n            .map((section) => (\r\n              <div key={section.id} className=\"report-section-preview\">\r\n                <h4>{section.title}</h4>\r\n                <div className=\"report-questions\">\r\n                  {(section.content as StandardSectionContent).questions.map((question, questionIndex) =>\r\n                    renderReportQuestion(question, questionIndex),\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n          <div className=\"report-section-preview\">\r\n            <h4>Garment Details</h4>\r\n\r\n            {template.sections.some((s) => s.type === \"garmentDetails\") ? (\r\n              <div className=\"garment-grid-preview\">\r\n                <div className=\"grid-actions\">\r\n                  <div className=\"grid-action-item\">\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Add Size\"\r\n                      value={reportData.newSize}\r\n                      onChange={(e) => setReportData((prev) => ({ ...prev, newSize: e.target.value }))}\r\n                      className=\"grid-action-input\"\r\n                    />\r\n                    <button className=\"grid-action-button\" onClick={addReportSize}>\r\n                      Add Size\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"grid-action-item\">\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Add Color\"\r\n                      value={reportData.newColor}\r\n                      onChange={(e) => setReportData((prev) => ({ ...prev, newColor: e.target.value }))}\r\n                      className=\"grid-action-input\"\r\n                    />\r\n                    <button className=\"grid-action-button\" onClick={addReportColor}>\r\n                      Add Color\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <table className=\"garment-table-preview\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>\r\n                        Color\r\n                        <div className=\"table-header-actions\">\r\n                          <button className=\"table-edit-button\" title=\"Edit Colors\">\r\n                            <Edit size={12} />\r\n                          </button>\r\n                        </div>\r\n                      </th>\r\n                      {(() => {\r\n                        const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n                        if (!garmentSection || !isGarmentDetailsContent(garmentSection.content)) return null;\r\n\r\n                        return garmentSection.content.sizes.map((size: string) => (\r\n                          <React.Fragment key={size}>\r\n                            <th colSpan={2} className=\"size-header\">\r\n                              {size}\r\n                              <div className=\"table-header-actions\">\r\n                                <button\r\n                                  className=\"table-delete-button\"\r\n                                  title={`Remove ${size}`}\r\n                                  onClick={() => {\r\n                                    if (window.confirm(`Are you sure you want to remove size \"${size}\"?`)) {\r\n                                      const section = template.sections.find((s) => s.type === \"garmentDetails\");\r\n                                      if (section && isGarmentDetailsContent(section.content)) {\r\n                                        const updatedSizes = section.content.sizes.filter(s => s !== size);\r\n                                        updateGarmentDetails(section.id, { sizes: updatedSizes });\r\n                                      }\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  <X size={12} />\r\n                                </button>\r\n                              </div>\r\n                            </th>\r\n                          </React.Fragment>\r\n                        ));\r\n                      })()}\r\n                      <th colSpan={2} className=\"size-header\">Total</th>\r\n                    </tr>\r\n                    <tr>\r\n                      <th></th>\r\n                      {(() => {\r\n                        const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n                        if (!garmentSection || !isGarmentDetailsContent(garmentSection.content)) return null;\r\n\r\n                        return garmentSection.content.sizes.map((size: string) => (\r\n                          <React.Fragment key={size}>\r\n                            <th className=\"qty-header\">Order Qty</th>\r\n                            <th className=\"qty-header\">Offered Qty</th>\r\n                          </React.Fragment>\r\n                        ));\r\n                      })()}\r\n                      <th className=\"qty-header\">Order Qty</th>\r\n                      <th className=\"qty-header\">Offered Qty</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {(() => {  // Outer IIFE for iterating over garment details section if it exists\r\n                      const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n\r\n                      // Perform the type guard check\r\n                      if (!garmentSection || !isGarmentDetailsContent(garmentSection.content)) {\r\n                        // If no garment section or its content isn't GarmentDetailsContent,\r\n                        // render nothing or a placeholder row.\r\n                        return null;\r\n                        // Example placeholder:\r\n                        // return <tr><td colSpan={/* calculate appropriate colSpan */}>Garment details not available.</td></tr>;\r\n                      }\r\n\r\n                      // **Crucial Change:** Assign the narrowed content to a new constant.\r\n                      // TypeScript will now know 'confirmedGarmentContent' is definitely 'GarmentDetailsContent'.\r\n                      const confirmedGarmentContent = garmentSection.content;\r\n\r\n                      // Now map over colors using the confirmed content\r\n                      return confirmedGarmentContent.colors.map((color: string) => (\r\n                        <tr key={color}>\r\n                          <td className=\"color-column\">\r\n                            <div className=\"color-cell\">\r\n                              <span>{color}</span>\r\n                              <button\r\n                                title={`Remove ${color}`}\r\n                                onClick={() => {\r\n                                  if (window.confirm(`Are you sure you want to remove color \"${color}\"?`)) {\r\n                                    const section = template.sections.find((s) => s.type === \"garmentDetails\");\r\n                                    if (section && isGarmentDetailsContent(section.content)) {\r\n                                      const updatedColors = section.content.colors.filter(c => c !== color);\r\n                                      updateGarmentDetails(section.id, { colors: updatedColors });\r\n                                    }\r\n                                  }\r\n                                }}\r\n                              >\r\n                                <X size={12} />\r\n                              </button>\r\n                            </div>\r\n                          </td>\r\n                          {(() => {\r\n                            // Inner IIFE for sizes. Use the 'confirmedGarmentContent' here as well.\r\n                            return confirmedGarmentContent.sizes.map((size: string) => ( // THIS IS THE TARGET LINE (around 1845)\r\n                              <React.Fragment key={size}>\r\n                                <td>\r\n                                  <input\r\n                                    type=\"number\"\r\n                                    className=\"qty-input\"\r\n                                    value={reportData.quantities[color]?.[size]?.orderQty || \"\"}\r\n                                    onChange={(e) => handleQuantityChange(color, size, \"orderQty\", e.target.value)}\r\n                                    placeholder=\"0\"\r\n                                  />\r\n                                </td>\r\n                                <td>\r\n                                  <input\r\n                                    type=\"number\"\r\n                                    className=\"qty-input\"\r\n                                    value={reportData.quantities[color]?.[size]?.offeredQty || \"\"}\r\n                                    onChange={(e) => handleQuantityChange(color, size, \"offeredQty\", e.target.value)}\r\n                                    placeholder=\"0\"\r\n                                  />\r\n                                </td>\r\n                              </React.Fragment>\r\n                            ));\r\n                          })()}\r\n                          <td className=\"total-cell\">{calculateRowTotal(color, \"orderQty\")}</td>\r\n                          <td className=\"total-cell\">{calculateRowTotal(color, \"offeredQty\")}</td>\r\n                        </tr>\r\n                      ));\r\n                    })()}\r\n                    <tr className=\"total-row\">\r\n                      <td className=\"color-column\">Total</td>\r\n                      {(() => {\r\n                        const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n                        if (!garmentSection || !isGarmentDetailsContent(garmentSection.content)) return null;\r\n\r\n                        return garmentSection.content.sizes.map((size: string) => (\r\n                          <React.Fragment key={size}>\r\n                            <td className=\"total-cell\">{calculateColumnTotal(size, \"orderQty\")}</td>\r\n                            <td className=\"total-cell\">{calculateColumnTotal(size, \"offeredQty\")}</td>\r\n                          </React.Fragment>\r\n                        ));\r\n                      })()}\r\n                      <td className=\"total-cell\">{calculateGrandTotal(\"orderQty\")}</td>\r\n                      <td className=\"total-cell\">{calculateGrandTotal(\"offeredQty\")}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n\r\n                {(() => {\r\n                  const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n                  if (garmentSection && isGarmentDetailsContent(garmentSection.content) && garmentSection.content.includeCartonOffered) {\r\n                    return (\r\n                  <div className=\"carton-info\">\r\n                    <label>No of Carton Offered:</label>\r\n                    <input\r\n                      type=\"number\"\r\n                      className=\"carton-input\"\r\n                      value={reportData.cartonOffered}\r\n                      onChange={(e) => setReportData((prev) => ({ ...prev, cartonOffered: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                    );\r\n                  }\r\n                  return null;\r\n                })()}\r\n\r\n                <div className=\"carton-info\">\r\n                  <label>No of Carton to Inspect:</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"carton-input\"\r\n                    value={reportData.cartonToInspect}\r\n                    onChange={(e) => setReportData((prev) => ({ ...prev, cartonToInspect: e.target.value }))}\r\n                  />\r\n                </div>\r\n\r\n                {(() => {\r\n                  const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n                  if (garmentSection && isGarmentDetailsContent(garmentSection.content) && garmentSection.content.includeCartonInspected) {\r\n                    return (\r\n                  <div className=\"carton-info\">\r\n                    <label>No of Carton Inspected:</label>\r\n                    <input\r\n                      type=\"number\"\r\n                      className=\"carton-input\"\r\n                      value={reportData.cartonInspected}\r\n                      onChange={(e) => setReportData((prev) => ({ ...prev, cartonInspected: e.target.value }))}\r\n                    />\r\n                  </div>\r\n                    );\r\n                  }\r\n                  return null;\r\n                })()}\r\n              </div>\r\n            ) : (\r\n              <p>No garment details configured</p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"report-section-preview\">\r\n            <h4>Defect Log</h4>\r\n\r\n            {template.sections.some((s) => s.type === \"garmentDetails\") ? (\r\n              <div className=\"defect-log-preview\">\r\n                <table className=\"defect-table-preview\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Defect Type</th>\r\n                      <th>Remarks</th>\r\n                      <th>Critical</th>\r\n                      <th>Major</th>\r\n                      <th>Minor</th>\r\n                      <th>Total</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {reportData.defects.map((defect, index) => (\r\n                      <tr key={index}>\r\n                        <td>\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"defect-input\"\r\n                            value={defect.type}\r\n                            onChange={(e) => updateDefect(index, \"type\", e.target.value)}\r\n                            placeholder=\"Enter defect type\"\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"defect-input\"\r\n                            value={defect.remarks}\r\n                            onChange={(e) => updateDefect(index, \"remarks\", e.target.value)}\r\n                            placeholder=\"Enter remarks\"\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"defect-input\"\r\n                            value={defect.critical || 0}\r\n                            onChange={(e) => updateDefect(index, \"critical\", e.target.value)}\r\n                            placeholder=\"0\"\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"defect-input\"\r\n                            value={defect.major}\r\n                            onChange={(e) => updateDefect(index, \"major\", e.target.value)}\r\n                            placeholder=\"0\"\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <input\r\n                            type=\"number\"\r\n                            className=\"defect-input\"\r\n                            value={defect.minor}\r\n                            onChange={(e) => updateDefect(index, \"minor\", e.target.value)}\r\n                            placeholder=\"0\"\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          {Number.parseInt(defect.critical?.toString() || \"0\", 10) +\r\n                            Number.parseInt(defect.major?.toString() || \"0\", 10) +\r\n                            Number.parseInt(defect.minor?.toString() || \"0\", 10)}\r\n                        </td>\r\n                        <td className=\"defect-actions\">\r\n                          <label className=\"image-upload-label\">\r\n                            <input\r\n                              type=\"file\"\r\n                              accept=\"image/*\"\r\n                              multiple\r\n                              onChange={(e) => handleDefectImageUpload(index, e)}\r\n                              className=\"sr-only\"\r\n                            />\r\n                            <ImageIcon size={16} className=\"action-icon\" />\r\n                          </label>\r\n                          <button\r\n                            className=\"defect-action-button\"\r\n                            onClick={() => {\r\n                              const newDefects = [...reportData.defects]\r\n                              newDefects.splice(index, 1)\r\n                              setReportData((prev) => ({ ...prev, defects: newDefects }))\r\n                              setDefectImages((prev) => {\r\n                                const newImages = { ...prev }\r\n                                delete newImages[index]\r\n                                return newImages\r\n                              })\r\n                            }}\r\n                          >\r\n                            <Trash2 size={16} className=\"action-icon\" />\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                    <tr className=\"total-row\">\r\n                      <td colSpan={2}>Total</td>\r\n                      <td>{calculateTotalDefects(\"critical\")}</td>\r\n                      <td>{calculateTotalDefects(\"major\")}</td>\r\n                      <td>{calculateTotalDefects(\"minor\")}</td>\r\n                      <td>\r\n                        {calculateTotalDefects(\"critical\") +\r\n                          calculateTotalDefects(\"major\") +\r\n                          calculateTotalDefects(\"minor\")}\r\n                      </td>\r\n                      <td></td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n\r\n                <div className=\"add-defect-container\">\r\n                  <button className=\"add-defect-button\" onClick={addReportDefect}>\r\n                    <Plus size={16} /> Add Defect\r\n                  </button>\r\n                </div>\r\n\r\n                <div className=\"photograph-section\">\r\n                  <h5>Photographs</h5>\r\n                  <div className=\"defect-images-grid\">\r\n                    {Object.entries(defectImages).map(([defectIndex, images]) => {\r\n                      const index = Number.parseInt(defectIndex, 10)\r\n                      const defect = reportData.defects[index]\r\n                      if (!defect || !images.length) return null\r\n\r\n                      return images.map((image, imageIndex) => (\r\n                        <div key={`${defectIndex}-${imageIndex}`} className=\"defect-image-card\">\r\n                          <div className=\"defect-image-header\">\r\n                            <span className=\"defect-image-type\">{defect.type}</span>\r\n                            <button\r\n                              className=\"remove-image-button\"\r\n                              onClick={() => removeDefectImage(index, imageIndex)}\r\n                            >\r\n                              <X size={14} />\r\n                            </button>\r\n                          </div>\r\n                          <div className=\"defect-image-container\">\r\n                            <img\r\n                              src={image || \"/placeholder.svg\"}\r\n                              alt={`Defect: ${defect.type}`}\r\n                              className=\"defect-image\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"defect-image-remarks\">{defect.remarks}</div>\r\n                        </div>\r\n                      ))\r\n                    })}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"aql-result-preview\">\r\n                  <div className=\"aql-header\">\r\n                    <h5>AQL Result</h5>\r\n                    <button className=\"edit-aql-button\" onClick={toggleAqlEditing}>\r\n                      <Edit size={16} />\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"aql-info\">\r\n                    {reportData.editingAql ? (\r\n                      <>\r\n                        <div className=\"aql-edit-field\">\r\n                          <label>AQL Level:</label>\r\n                          <select\r\n                            value={reportData.aqlSettings.aqlLevel}\r\n                            onChange={(e) => updateAqlResult(\"aqlLevel\", e.target.value)}\r\n                            className=\"aql-edit-input\"\r\n                          >\r\n                            {AQL_LEVELS.map((level) => (\r\n                              <option key={level} value={level}>\r\n                                {level}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n                        </div>\r\n                        <div className=\"aql-edit-field\">\r\n                          <label>Inspection Level:</label>\r\n                          <select\r\n                            value={reportData.aqlSettings.inspectionLevel}\r\n                            onChange={(e) => updateAqlResult(\"inspectionLevel\", e.target.value)}\r\n                            className=\"aql-edit-input\"\r\n                          >\r\n                            {INSPECTION_LEVELS.map((level) => (\r\n                              <option key={level} value={level}>\r\n                                {level}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n                        </div>\r\n                        <div className=\"aql-edit-field\">\r\n                          <label>Sampling Plan:</label>\r\n                          <select\r\n                            value={reportData.aqlSettings.samplingPlan}\r\n                            onChange={(e) => updateAqlResult(\"samplingPlan\", e.target.value)}\r\n                            className=\"aql-edit-input\"\r\n                          >\r\n                            {SAMPLING_PLANS.map((plan) => (\r\n                              <option key={plan} value={plan}>\r\n                                {plan}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n                        </div>\r\n                        <div className=\"aql-edit-field\">\r\n                          <label>Severity:</label>\r\n                          <select\r\n                            value={reportData.aqlSettings.severity}\r\n                            onChange={(e) => updateAqlResult(\"severity\", e.target.value)}\r\n                            className=\"aql-edit-input\"\r\n                          >\r\n                            {SEVERITIES.map((severity) => (\r\n                              <option key={severity} value={severity}>\r\n                                {severity}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n                        </div>\r\n                        <div className=\"aql-edit-field\">\r\n                          <label>Status:</label>\r\n                          <select\r\n                            value={reportData.aqlSettings.status}\r\n                            onChange={(e) => updateAqlResult(\"status\", e.target.value)}\r\n                            className=\"aql-edit-input\"\r\n                          >\r\n                            <option value=\"PASS\">PASS</option>\r\n                            <option value=\"FAIL\">FAIL</option>\r\n                          </select>\r\n                        </div>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <p>\r\n                          <strong>AQL Level:</strong> {reportData.aqlSettings.aqlLevel}\r\n                        </p>\r\n                        <p>\r\n                          <strong>Inspection Level:</strong> {reportData.aqlSettings.inspectionLevel}\r\n                        </p>\r\n                        <p>\r\n                          <strong>Sampling Plan:</strong> {reportData.aqlSettings.samplingPlan}\r\n                        </p>\r\n                        <p>\r\n                          <strong>Severity:</strong> {reportData.aqlSettings.severity}\r\n                        </p>\r\n                        <p className={`aql-status ${reportData.aqlSettings.status.toLowerCase()}`}>\r\n                          <strong>Status:</strong> {reportData.aqlSettings.status}\r\n                        </p>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <p>No defect types configured</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Initialize dates for the inspection session\r\n  useEffect(() => {\r\n    if (!startDate) {\r\n      const today = new Date();\r\n      setStartDate(today.toISOString().split('T')[0]);\r\n\r\n      // Set due date to 30 days from today by default\r\n      const thirtyDaysLater = new Date();\r\n      thirtyDaysLater.setDate(today.getDate() + 30);\r\n      setDueDate(thirtyDaysLater.toISOString().split('T')[0]);\r\n    }\r\n  }, [startDate, setStartDate, setDueDate]);\r\n\r\n  const renderAccessTab = () => {\r\n    // Get today's date in YYYY-MM-DD format for min attribute\r\n    const today = new Date().toISOString().split('T')[0];\r\n\r\n    const validateDates = () => {\r\n      const errors: {startDate?: string; dueDate?: string} = {};\r\n      const currentDate = new Date();\r\n      currentDate.setHours(0, 0, 0, 0);\r\n\r\n      const selectedStartDate = new Date(startDate);\r\n      const selectedDueDate = new Date(dueDate);\r\n\r\n      // Check if start date is in the past\r\n      if (selectedStartDate < currentDate) {\r\n        errors.startDate = \"Start date cannot be in the past\";\r\n      }\r\n\r\n      // Check if due date is before start date\r\n      if (selectedDueDate < selectedStartDate) {\r\n        errors.dueDate = \"Due date must be after start date\";\r\n      }\r\n\r\n      setDateErrors(errors);\r\n      return Object.keys(errors).length === 0;\r\n    };\r\n\r\n    const handleStartDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const newStartDate = e.target.value;\r\n      setStartDate(newStartDate);\r\n\r\n      // Clear any existing errors for start date\r\n      setDateErrors(prev => ({...prev, startDate: undefined}));\r\n\r\n      // Ensure due date is not before start date\r\n      const startDateObj = new Date(newStartDate);\r\n      const dueDateObj = new Date(dueDate);\r\n\r\n      if (dueDateObj < startDateObj) {\r\n        // Set due date to start date if it's before the new start date\r\n        setDueDate(newStartDate);\r\n        // Clear any existing errors for due date\r\n        setDateErrors(prev => ({...prev, dueDate: undefined}));\r\n      }\r\n    };\r\n\r\n    const handleDueDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const newDueDate = e.target.value;\r\n      setDueDate(newDueDate);\r\n\r\n      // Clear any existing errors for due date\r\n      setDateErrors(prev => ({...prev, dueDate: undefined}));\r\n\r\n      // Validate that due date is not before start date\r\n      const startDateObj = new Date(startDate);\r\n      const dueDateObj = new Date(newDueDate);\r\n\r\n      if (dueDateObj < startDateObj) {\r\n        setDateErrors(prev => ({\r\n          ...prev,\r\n          dueDate: \"Due date must be after start date\"\r\n        }));\r\n      }\r\n    };\r\n\r\n    const handlePublish = () => {\r\n      // Validate dates before publishing\r\n      if (validateDates()) {\r\n        // Save the template with session dates\r\n        updateTemplate({\r\n          ...template,\r\n          startDate: startDate,\r\n          dueDate: dueDate,\r\n          lastSaved: new Date()\r\n        });\r\n\r\n        alert('Template published successfully!');\r\n        window.location.href = '/dashboard';\r\n      } else {\r\n        // Show error message if validation fails\r\n        alert('Please correct the errors before publishing.');\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className=\"garment-template-access-container\">\r\n        <div className=\"garment-template-access-header\">\r\n          <h1 className=\"garment-template-access-title\">Template Access & Settings</h1>\r\n          <p className=\"garment-template-access-description\">Configure access permissions and inspection timeframe for this template.</p>\r\n        </div>\r\n\r\n        <div className=\"garment-template-access-content\">\r\n          <div className=\"garment-template-access-tab\">\r\n            <div className=\"garment-template-session-section\">\r\n              <h2>\r\n                <Calendar size={22} className=\"garment-template-section-icon\" />\r\n                Inspection Timeframe\r\n              </h2>\r\n              <p>Set the start and due dates for inspections using this template. These dates will determine when inspectors can access and complete their work.</p>\r\n\r\n              <div className=\"garment-template-date-fields\">\r\n                <div className=\"garment-template-date-field\">\r\n                  <label htmlFor=\"start-date\">Start Date <span className=\"garment-template-required-indicator\">*</span></label>\r\n                  <div className=\"garment-template-date-input-container\">\r\n                    <Calendar size={16} className=\"garment-template-date-icon\" />\r\n                    <input\r\n                      type=\"date\"\r\n                      id=\"start-date\"\r\n                      value={startDate}\r\n                      onChange={handleStartDateChange}\r\n                      min={today} // Prevent selecting dates before today\r\n                      className={`garment-template-date-input ${dateErrors.startDate ? 'garment-template-date-input-error' : ''}`}\r\n                    />\r\n                  </div>\r\n                  {dateErrors.startDate && (\r\n                    <div className=\"garment-template-date-error-message\">{dateErrors.startDate}</div>\r\n                  )}\r\n                  <div className=\"garment-template-date-helper-text\">Earliest date inspections can begin</div>\r\n                </div>\r\n\r\n                <div className=\"garment-template-date-field\">\r\n                  <label htmlFor=\"due-date\">Due Date <span className=\"garment-template-required-indicator\">*</span></label>\r\n                  <div className=\"garment-template-date-input-container\">\r\n                    <Calendar size={16} className=\"garment-template-date-icon\" />\r\n                    <input\r\n                      type=\"date\"\r\n                      id=\"due-date\"\r\n                      value={dueDate}\r\n                      onChange={handleDueDateChange}\r\n                      min={startDate} // Prevent selecting a due date before start date\r\n                      className={`garment-template-date-input ${dateErrors.dueDate ? 'garment-template-date-input-error' : ''}`}\r\n                    />\r\n                  </div>\r\n                  {dateErrors.dueDate && (\r\n                    <div className=\"garment-template-date-error-message\">{dateErrors.dueDate}</div>\r\n                  )}\r\n                  <div className=\"garment-template-date-helper-text\">Deadline for completing inspections</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"garment-template-access-tab\">\r\n            <div className=\"garment-template-permissions-section\">\r\n              <h2>\r\n                <User size={22} className=\"garment-template-section-icon\" />\r\n                User Permissions\r\n              </h2>\r\n              <p>Manage who can access, edit, and use this template. Add team members and set appropriate permission levels.</p>\r\n\r\n              <AccessManager\r\n                templateId={template.id}\r\n                templateTitle={template.title || \"Untitled Template\"}\r\n                initialUsers={[]}\r\n                onUpdatePermissions={(users) => {\r\n                  console.log(\"Updated permissions:\", users);\r\n                  // Here you would update the template with the new permissions\r\n                  // setTemplate({ ...template, permissions: users });\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"garment-template-access-footer\">\r\n          <div className=\"garment-template-publish-container\">\r\n            <button\r\n              className=\"garment-template-publish-button\"\r\n              onClick={handlePublish}\r\n            >\r\n              <CheckCircle size={20} />\r\n              <span>Publish Template</span>\r\n            </button>\r\n            <p className=\"garment-template-publish-note\">\r\n              Publishing will make this template available to all users with access permissions. Once published, inspectors can begin using this template according to the timeframe you've set.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Main Render\r\n  return (\r\n    <div className=\"garment-template-builder-page\">\r\n      <div className=\"top-navigation\">\r\n        <div className=\"nav-left\">\r\n          <div className=\"company-name\">STREAMLINEER</div>\r\n          <button className=\"back-button\" onClick={handleBack}>\r\n            <ArrowLeft size={16} />\r\n            <span>back</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"nav-center\">\r\n          <div className=\"nav-tabs\">\r\n            <button className={`nav-tab ${activeTab === 0 ? \"active\" : \"\"}`} onClick={() => setActiveTab(0)}>\r\n              1. Build\r\n            </button>\r\n            <button className={`nav-tab ${activeTab === 1 ? \"active\" : \"\"}`} onClick={() => setActiveTab(1)}>\r\n              2. Report\r\n            </button>\r\n            <button className={`nav-tab ${activeTab === 2 ? \"active\" : \"\"}`} onClick={() => setActiveTab(2)}>\r\n              3. Access\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"nav-right\">\r\n          {activeTab === 0 && (\r\n            <button className=\"nav-next-button\" onClick={() => setActiveTab(1)}>\r\n              Next: Report\r\n              <ArrowRight size={16} />\r\n            </button>\r\n          )}\r\n          {activeTab === 1 && (\r\n            <button className=\"nav-next-button\" onClick={() => setActiveTab(2)}>\r\n              Next: Access\r\n              <ArrowRight size={16} />\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"builder-content\">\r\n        {activeTab === 0 && (\r\n          <div className=\"template-builder-container\">\r\n            <div className={`template-content ${showMobilePreview ? 'with-preview' : ''}`}>\r\n              <div className=\"template-header\">\r\n                <div className=\"template-logo\">\r\n                  {template.logo ? (\r\n                    <img\r\n                      src={template.logo || \"/placeholder.svg\"}\r\n                      alt=\"Template logo\"\r\n                      className=\"logo-image\"\r\n                      onClick={() => document.getElementById(\"logo-upload\")?.click()}\r\n                    />\r\n                  ) : (\r\n                    <div className=\"logo-placeholder\" onClick={() => document.getElementById(\"logo-upload\")?.click()}>\r\n                      <Plus size={24} />\r\n                    </div>\r\n                  )}\r\n                  <input\r\n                    id=\"logo-upload\"\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    className=\"sr-only\"\r\n                    onChange={handleLogoUpload}\r\n                  />\r\n                </div>\r\n                <div className=\"template-info\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"template-title\"\r\n                    value={template.title}\r\n                    onChange={(e) => updateTemplate({ title: e.target.value })}\r\n                    placeholder=\"Untitled garment template\"\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"template-description\"\r\n                    value={template.description}\r\n                    onChange={(e) => updateTemplate({ description: e.target.value })}\r\n                    placeholder=\"Add a description for this garment inspection template\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"sections-container\">\r\n                {template.sections.map((section, idx) => renderSection(section, idx))}\r\n              </div>\r\n              <div className=\"add-section-container\">\r\n                <button className=\"add-section-button\" onClick={addStandardSection}>\r\n                  <Plus size={16} /> Add Standard Page\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            {showMobilePreview ? (\r\n              <div className=\"mobile-preview-container\">\r\n                <div className=\"mobile-preview\">\r\n                  <div className=\"mobile-preview-header\">\r\n                    <button className=\"mobile-preview-close\" onClick={() => setShowMobilePreview(false)}>\r\n                      <X size={16} />\r\n                      <span>Hide Preview</span>\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"mobile-device-container\">\r\n                    <div className=\"mobile-device\">\r\n                      <div className=\"mobile-device-notch\"></div>\r\n                      <div className=\"mobile-status-bar\">\r\n                        <div className=\"mobile-time\">\r\n                          {new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\r\n                        </div>\r\n                        <div className=\"mobile-status-icons\">\r\n                          <div className=\"mobile-signal\"></div>\r\n                          <div className=\"mobile-wifi\"></div>\r\n                          <div className=\"mobile-battery\"></div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"mobile-content\">\r\n                        {template.logo && (\r\n                          <div className=\"mobile-header-content\">\r\n                            <div className=\"mobile-logo\">\r\n                              <img\r\n                                src={template.logo || \"/placeholder.svg\"}\r\n                                alt=\"Template logo\"\r\n                                className=\"mobile-logo-image\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"mobile-template-title\">{template.title}</div>\r\n                          </div>\r\n                        )}\r\n\r\n                        <div className=\"mobile-preview-message\">\r\n                          <Shirt size={32} className=\"mobile-preview-icon\" />\r\n                          <h3>Garment Inspection Template</h3>\r\n                          <p>This is a preview of your garment inspection template.</p>\r\n                          <p>The template includes:</p>\r\n                          <ul>\r\n                            <li>{template.sections.filter((s) => s.type === \"standard\").length} standard sections</li>\r\n                            <li>\r\n                              {template.sections.some((s) => s.type === \"garmentDetails\")\r\n                                ? \"Garment Details section\"\r\n                                : \"No Garment Details section\"}\r\n                            </li>\r\n                            <li>\r\n                              {(() => {\r\n                                const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n                                return (garmentSection && isGarmentDetailsContent(garmentSection.content))\r\n                                  ? garmentSection.content.sizes.length\r\n                                  : 0;\r\n                              })()}{\" \"}\r\n                              sizes configured\r\n                            </li>\r\n                            <li>\r\n                              {(() => {\r\n                                const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\r\n                                return (garmentSection && isGarmentDetailsContent(garmentSection.content))\r\n                                  ? garmentSection.content.colors.length\r\n                                  : 0;\r\n                              })()}{\" \"}\r\n                              colors configured\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"mobile-preview-collapsed\">\r\n                <button className=\"show-mobile-preview-button\" onClick={() => setShowMobilePreview(true)}>\r\n                  <div className=\"mobile-icon\">\r\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                      <rect x=\"5\" y=\"2\" width=\"14\" height=\"20\" rx=\"2\" stroke=\"currentColor\" strokeWidth=\"2\" />\r\n                      <line x1=\"5\" y1=\"18\" x2=\"19\" y2=\"18\" stroke=\"currentColor\" strokeWidth=\"2\" />\r\n                      <line x1=\"9\" y1=\"21\" x2=\"15\" y2=\"21\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" />\r\n                    </svg>\r\n                  </div>\r\n                  <span>Show Preview</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 1 && renderReportTab()}\r\n        {activeTab === 2 && renderAccessTab()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Garment_Template\r\n","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\utils\\api.ts",[],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\utils\\csrf.ts",[],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\utils\\aqlHelpers.ts",[],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\components\\SimpleLogicRules.tsx",["122","123","124"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport { X, Plus, CornerDownRight, Equal, CircleEqual, CircleSlash, FileText, Bell, MessageSquare, Upload } from 'lucide-react';\r\nimport '../../pages/LogicRules.css';\r\n\r\ntype ResponseType =\r\n  | \"Site\"\r\n  | \"Inspection date\"\r\n  | \"Person\"\r\n  | \"Inspection location\"\r\n  | \"Text\"\r\n  | \"Number\"\r\n  | \"Checkbox\"\r\n  | \"Yes/No\"\r\n  | \"Multiple choice\"\r\n  | \"Slider\"\r\n  | \"Media\"\r\n  | \"Annotation\"\r\n  | \"Date & Time\";\r\n\r\ntype LogicCondition =\r\n  | \"is\"\r\n  | \"is not\"\r\n  | \"contains\"\r\n  | \"not contains\"\r\n  | \"starts with\"\r\n  | \"ends with\"\r\n  | \"matches (regex)\"\r\n  | \"less than\"\r\n  | \"less than or equal to\"\r\n  | \"equal to\"\r\n  | \"not equal to\"\r\n  | \"greater than or equal to\"\r\n  | \"greater than\"\r\n  | \"between\"\r\n  | \"not between\"\r\n  | \"is one of\"\r\n  | \"is not one of\";\r\n\r\ntype TriggerAction = \"require_action\" | \"require_evidence\" | \"notify\" | \"ask_questions\" | \"display_message\";\r\n\r\ninterface LogicRule {\r\n  id: string;\r\n  condition: LogicCondition;\r\n  value: string | number | string[] | [number, number] | null;\r\n  trigger: TriggerAction | null;\r\n  message?: string;\r\n  subQuestion?: {\r\n    text: string;\r\n    responseType: ResponseType;\r\n  };\r\n}\r\n\r\ninterface SimpleLogicRulesProps {\r\n  onClose: () => void;\r\n  rules: LogicRule[];\r\n  onRulesChange: (rules: LogicRule[]) => void;\r\n  buttonPosition?: { top: number; left: number; width: number; height: number };\r\n  questionType?: ResponseType; // Add question type to customize logic conditions\r\n}\r\n\r\nconst SimpleLogicRules: React.FC<SimpleLogicRulesProps> = ({ onClose, rules, onRulesChange, buttonPosition, questionType = \"Text\" }) => {\r\n  const [activeTriggerIndex, setActiveTriggerIndex] = useState<number | null>(null);\r\n  const triggerMenuRef = useRef<HTMLDivElement>(null);\r\n\r\n  // We don't need a separate backdrop for the trigger menu anymore\r\n  // since it will be positioned relative to the main dialog\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      // Close the trigger menu if clicking outside of it\r\n      if (\r\n        activeTriggerIndex !== null &&\r\n        triggerMenuRef.current &&\r\n        !triggerMenuRef.current.contains(event.target as Node)\r\n      ) {\r\n        // Check if the click was on the trigger button itself\r\n        const triggerButton = triggerButtonRefs.current[activeTriggerIndex];\r\n        if (!triggerButton || !triggerButton.contains(event.target as Node)) {\r\n          setActiveTriggerIndex(null);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Handle window resize to reposition the menu if needed\r\n    const handleResize = () => {\r\n      if (activeTriggerIndex !== null) {\r\n        const buttonElement = triggerButtonRefs.current[activeTriggerIndex];\r\n        if (buttonElement) {\r\n          // Get the button's position and dimensions relative to the viewport\r\n          const buttonRect = buttonElement.getBoundingClientRect();\r\n\r\n          // Get the parent dialog for reference\r\n          const parentDialog = buttonElement.closest('.Logic-Rules');\r\n          const parentRect = parentDialog ? parentDialog.getBoundingClientRect() : null;\r\n\r\n          // Calculate the available space to the right and below\r\n          const availableSpaceRight = window.innerWidth - buttonRect.right;\r\n          const availableSpaceBelow = window.innerHeight - buttonRect.bottom;\r\n\r\n          // Position the menu outside the main dialog\r\n          // By default, position it to the right of the main dialog\r\n          let left = parentRect ? parentRect.right + 10 : buttonRect.right + 10; // 10px offset from the dialog\r\n          let top = buttonRect.top; // Align with the button vertically\r\n\r\n          // If there's not enough space to the right of the dialog, position it below the button\r\n          if (availableSpaceRight < 330) { // 330 = menu width (320) + offset (10)\r\n            left = Math.max(10, buttonRect.left);\r\n            top = buttonRect.bottom - 40; // Position it higher by using -40 instead of -20\r\n          }\r\n\r\n          // If there's not enough space below, position it above the button\r\n          if (top + 300 > window.innerHeight && buttonRect.top > 300) {\r\n            top = Math.max(10, buttonRect.top - 300);\r\n          }\r\n\r\n          // Make sure the menu doesn't go off the screen\r\n          left = Math.min(left, window.innerWidth - 330);\r\n\r\n          setTriggerMenuPosition({ top, left });\r\n        }\r\n      }\r\n    };\r\n\r\n    // Handle scroll to reposition the menu\r\n    const handleScroll = () => {\r\n      // Reuse the same logic as handleResize\r\n      handleResize();\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    window.addEventListener('resize', handleResize);\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n      window.removeEventListener('resize', handleResize);\r\n      window.removeEventListener('scroll', handleScroll);\r\n      // Clean up refs when component unmounts\r\n      triggerButtonRefs.current = [];\r\n    };\r\n  }, [activeTriggerIndex]);\r\n\r\n  // Get available conditions based on question type\r\n  const getAvailableConditions = (type: ResponseType): LogicCondition[] => {\r\n    switch (type) {\r\n      case \"Text\":\r\n        return [\"is\", \"is not\", \"contains\", \"not contains\", \"starts with\", \"ends with\", \"matches (regex)\"];\r\n      case \"Number\":\r\n      case \"Slider\":\r\n        return [\r\n          \"less than\",\r\n          \"less than or equal to\",\r\n          \"equal to\",\r\n          \"not equal to\",\r\n          \"greater than or equal to\",\r\n          \"greater than\",\r\n          \"between\",\r\n          \"not between\",\r\n        ];\r\n      case \"Checkbox\":\r\n      case \"Yes/No\":\r\n        return [\"is\", \"is not\"];\r\n      case \"Multiple choice\":\r\n        return [\"is\", \"is not\", \"is one of\", \"is not one of\"];\r\n      default:\r\n        return [\"is\", \"is not\"];\r\n    }\r\n  };\r\n\r\n  const handleAddRule = () => {\r\n    // Set default condition based on question type\r\n    const defaultCondition: LogicCondition =\r\n      questionType === \"Number\" || questionType === \"Slider\" ? \"equal to\" : \"is\";\r\n\r\n    const newRule: LogicRule = {\r\n      id: `rule_${Math.random().toString(36).substring(2, 9)}`,\r\n      condition: defaultCondition,\r\n      value: null,\r\n      trigger: null\r\n    };\r\n    onRulesChange([...rules, newRule]);\r\n  };\r\n\r\n  const handleDeleteRule = (index: number) => {\r\n    const newRules = [...rules];\r\n    newRules.splice(index, 1);\r\n    onRulesChange(newRules);\r\n  };\r\n\r\n  const handleConditionChange = (index: number, condition: LogicCondition) => {\r\n    const newRules = [...rules];\r\n    newRules[index].condition = condition;\r\n    onRulesChange(newRules);\r\n  };\r\n\r\n  const handleValueChange = (index: number, value: string) => {\r\n    const newRules = [...rules];\r\n    newRules[index].value = value;\r\n    onRulesChange(newRules);\r\n  };\r\n\r\n  const handleAddTrigger = (index: number | null) => {\r\n    // If the index is already active, toggle it off\r\n    if (activeTriggerIndex === index) {\r\n      setActiveTriggerIndex(null);\r\n    } else {\r\n      setActiveTriggerIndex(index);\r\n    }\r\n  };\r\n\r\n  const handleSelectTrigger = (index: number, trigger: TriggerAction) => {\r\n    const newRules = [...rules];\r\n    newRules[index].trigger = trigger;\r\n    onRulesChange(newRules);\r\n    setActiveTriggerIndex(null);\r\n  };\r\n\r\n  // Store the position of the trigger button for positioning the menu\r\n  const [triggerMenuPosition, setTriggerMenuPosition] = useState<{top: number, left: number} | null>(null);\r\n  const triggerButtonRefs = useRef<(HTMLButtonElement | null)[]>([]);\r\n\r\n  // Function to close the trigger menu\r\n  const closeTriggerMenu = () => {\r\n    setActiveTriggerIndex(null);\r\n    setTriggerMenuPosition(null);\r\n  };\r\n\r\n  // Function to handle the trigger button click\r\n  const handleTriggerButtonClick = (index: number, event: React.MouseEvent<HTMLButtonElement>) => {\r\n    // Prevent event propagation to avoid closing the menu immediately\r\n    event.stopPropagation();\r\n\r\n    // Get the button element that was clicked\r\n    const buttonElement = triggerButtonRefs.current[index];\r\n\r\n    if (buttonElement) {\r\n      // Get the button's position and dimensions relative to the viewport\r\n      const buttonRect = buttonElement.getBoundingClientRect();\r\n\r\n      // Get the parent dialog for reference\r\n      const parentDialog = buttonElement.closest('.Logic-Rules');\r\n      const parentRect = parentDialog ? parentDialog.getBoundingClientRect() : null;\r\n\r\n      // Calculate the available space to the right and below\r\n      const availableSpaceRight = window.innerWidth - buttonRect.right;\r\n      const availableSpaceBelow = window.innerHeight - buttonRect.bottom;\r\n\r\n      // Position the menu outside the main dialog\r\n      // By default, position it to the right of the main dialog\r\n      let left = parentRect ? parentRect.right + 10 : buttonRect.right + 10; // 10px offset from the dialog\r\n      let top = buttonRect.top; // Align with the button vertically\r\n\r\n      // If there's not enough space to the right of the dialog, position it below the button\r\n      if (availableSpaceRight < 510) { // 510 = menu width (500) + offset (10)\r\n        left = Math.max(10, buttonRect.left);\r\n        top = buttonRect.bottom - 40; // Position it higher by using -40 instead of -20\r\n      }\r\n\r\n      // If there's not enough space below, position it above the button\r\n      if (top + 300 > window.innerHeight && buttonRect.top > 300) {\r\n        top = Math.max(10, buttonRect.top - 300);\r\n      }\r\n\r\n      // Make sure the menu doesn't go off the screen\r\n      left = Math.min(left, window.innerWidth - 510);\r\n\r\n      setTriggerMenuPosition({ top, left });\r\n    }\r\n\r\n    // Set the active trigger index\r\n    handleAddTrigger(index);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"Logic-Rules-backdrop\"\r\n        onClick={onClose}\r\n      />\r\n      <div\r\n        className=\"Logic-Rules\"\r\n        style={{\r\n          position: 'absolute',\r\n          top: buttonPosition ? `${buttonPosition.top - 20}px` : '50%', /* Subtract 20px to move it higher */\r\n          left: buttonPosition ? `${buttonPosition.left}px` : '50%',\r\n          transform: buttonPosition ? 'none' : 'translate(-50%, -50%)',\r\n          maxHeight: '80vh',\r\n          zIndex: 1100\r\n        }}\r\n      >\r\n        <div className=\"Logic-Rules-header\">\r\n          <div className=\"Logic-Rules-title\">Logic Rules</div>\r\n          <button className=\"Logic-Rules-close\" onClick={onClose}>\r\n            <X size={18} />\r\n          </button>\r\n        </div>\r\n        <div className=\"Logic-Rules-content\">\r\n          {rules.length === 0 ? (\r\n            <div className=\"Logic-Rules-empty\">\r\n              <p>No rules added yet. Add your first rule below.</p>\r\n            </div>\r\n          ) : (\r\n            rules.map((rule, index) => (\r\n              <div key={rule.id}>\r\n                <div className=\"Logic-Rules-if\">If answer</div>\r\n                <div className=\"Logic-Rules-condition\">\r\n                  <div className=\"Logic-Rules-condition-operator\">\r\n                    {rule.condition === \"is\" ? <CircleEqual size={18} /> :\r\n                     rule.condition === \"is not\" ? <CircleSlash size={18} /> :\r\n                     <Equal size={18} />}\r\n                  </div>\r\n                  <select\r\n                    className=\"Logic-Rules-condition-dropdown\"\r\n                    value={rule.condition}\r\n                    onChange={(e) => handleConditionChange(index, e.target.value as LogicCondition)}\r\n                  >\r\n                    {getAvailableConditions(questionType).map(condition => (\r\n                      <option key={condition} value={condition}>{condition}</option>\r\n                    ))}\r\n                  </select>\r\n                  {/* Render different input types based on question type */}\r\n                  {questionType === \"Number\" || questionType === \"Slider\" ? (\r\n                    <input\r\n                      type=\"number\"\r\n                      className=\"Logic-Rules-input\"\r\n                      placeholder=\"Enter value\"\r\n                      value={rule.value as number || ''}\r\n                      onChange={(e) => handleValueChange(index, e.target.value)}\r\n                    />\r\n                  ) : questionType === \"Yes/No\" ? (\r\n                    <select\r\n                      className=\"Logic-Rules-input\"\r\n                      value={rule.value as string || ''}\r\n                      onChange={(e) => handleValueChange(index, e.target.value)}\r\n                    >\r\n                      <option value=\"\">Select value</option>\r\n                      <option value=\"Yes\">Yes</option>\r\n                      <option value=\"No\">No</option>\r\n                      <option value=\"N/A\">N/A</option>\r\n                    </select>\r\n                  ) : questionType === \"Checkbox\" ? (\r\n                    <select\r\n                      className=\"Logic-Rules-input\"\r\n                      value={rule.value as string || ''}\r\n                      onChange={(e) => handleValueChange(index, e.target.value)}\r\n                    >\r\n                      <option value=\"\">Select value</option>\r\n                      <option value=\"true\">Checked</option>\r\n                      <option value=\"false\">Unchecked</option>\r\n                    </select>\r\n                  ) : (\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"Logic-Rules-input\"\r\n                      placeholder=\"Enter value\"\r\n                      value={rule.value as string || ''}\r\n                      onChange={(e) => handleValueChange(index, e.target.value)}\r\n                    />\r\n                  )}\r\n                  <button className=\"Logic-Rules-delete\" onClick={() => handleDeleteRule(index)}>\r\n                    <X size={16} />\r\n                  </button>\r\n                </div>\r\n                <div className=\"Logic-Rules-then\">then</div>\r\n                <div className=\"Logic-Rules-trigger\">\r\n                  {rule.trigger ? (\r\n                    <div className=\"Logic-Rules-selected-trigger\">\r\n                      {rule.trigger === \"require_action\" && \"Require action\"}\r\n                      {rule.trigger === \"require_evidence\" && \"Require evidence\"}\r\n                      {rule.trigger === \"notify\" && \"Notify\"}\r\n                      {rule.trigger === \"ask_questions\" && \"Ask questions\"}\r\n                      {rule.trigger === \"display_message\" && \"Display message\"}\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"trigger-container\" style={{ position: 'relative' }}>\r\n                      <button\r\n                        className=\"Logic-Rules-add-trigger\"\r\n                        onClick={(e) => handleTriggerButtonClick(index, e)}\r\n                        ref={(el) => { triggerButtonRefs.current[index] = el; }}\r\n                      >\r\n                        <Plus size={16} /> Add trigger\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {activeTriggerIndex === index && (\r\n                  <div\r\n                    className=\"Logic-Rules-trigger-menu-external\"\r\n                    ref={triggerMenuRef}\r\n                    style={{\r\n                      top: `${triggerMenuPosition?.top || 0}px`,\r\n                      left: `${triggerMenuPosition?.left || 0}px`,\r\n                      zIndex: 1300\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className=\"Logic-Rules-trigger-option\"\r\n                      onClick={() => handleSelectTrigger(index, \"require_action\")}\r\n                    >\r\n                      <FileText size={16} className=\"trigger-icon\" />\r\n                      <div className=\"trigger-option-content\">\r\n                        <div className=\"trigger-option-title\">Require action</div>\r\n                        <div className=\"trigger-option-description\">Require the user to take an action</div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div\r\n                      className=\"Logic-Rules-trigger-option\"\r\n                      onClick={() => handleSelectTrigger(index, \"require_evidence\")}\r\n                    >\r\n                      <Upload size={16} className=\"trigger-icon\" />\r\n                      <div className=\"trigger-option-content\">\r\n                        <div className=\"trigger-option-title\">Require evidence</div>\r\n                        <div className=\"trigger-option-description\">Require the user to upload evidence</div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div\r\n                      className=\"Logic-Rules-trigger-option\"\r\n                      onClick={() => handleSelectTrigger(index, \"notify\")}\r\n                    >\r\n                      <Bell size={16} className=\"trigger-icon\" />\r\n                      <div className=\"trigger-option-content\">\r\n                        <div className=\"trigger-option-title\">Notify</div>\r\n                        <div className=\"trigger-option-description\">Send a notification</div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div\r\n                      className=\"Logic-Rules-trigger-option\"\r\n                      onClick={() => handleSelectTrigger(index, \"ask_questions\")}\r\n                    >\r\n                      <MessageSquare size={16} className=\"trigger-icon\" />\r\n                      <div className=\"trigger-option-content\">\r\n                        <div className=\"trigger-option-title\">Ask questions</div>\r\n                        <div className=\"trigger-option-description\">Ask follow-up questions</div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div\r\n                      className=\"Logic-Rules-trigger-option\"\r\n                      onClick={() => handleSelectTrigger(index, \"display_message\")}\r\n                    >\r\n                      <MessageSquare size={16} className=\"trigger-icon\" />\r\n                      <div className=\"trigger-option-content\">\r\n                        <div className=\"trigger-option-title\">Display message</div>\r\n                        <div className=\"trigger-option-description\">Show a message to the user</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n        <div className=\"Logic-Rules-actions\">\r\n          <button className=\"Logic-Rules-add-rule\" onClick={handleAddRule}>\r\n            <Plus size={16} /> Add rule\r\n          </button>\r\n          <button className=\"Logic-Rules-done\" onClick={onClose}>\r\n            Done\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const EditLogicButton: React.FC<{\r\n  hasRules: boolean;\r\n  onClick: () => void;\r\n}> = ({ hasRules, onClick }) => {\r\n  return (\r\n    <button\r\n      className={`edit-logic-button ${hasRules ? 'has-rules' : ''}`}\r\n      onClick={onClick}\r\n    >\r\n      <CornerDownRight size={16} className=\"logic-icon\" />\r\n      <span>{hasRules ? 'Edit logic' : 'Add logic'}</span>\r\n      {hasRules && <span className=\"rules-badge\">!</span>}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SimpleLogicRules;\r\n",["125","126"],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\components\\AccessManager.tsx",["127","128","129","130","131","132"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  User,\r\n  UserPlus,\r\n  Mail,\r\n  Shield,\r\n  Check,\r\n  X,\r\n  Edit2,\r\n  Trash2,\r\n  Search,\r\n  AlertCircle,\r\n  Info,\r\n  Copy,\r\n  ExternalLink,\r\n  Users\r\n} from 'lucide-react';\r\nimport './AccessManager.css';\r\n\r\n// Define permission types\r\nexport type PermissionLevel = 'owner' | 'admin' | 'editor' | 'viewer';\r\n\r\nexport interface UserPermission {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  permissionLevel: PermissionLevel;\r\n  status: 'active' | 'pending' | 'expired';\r\n  lastAccessed?: Date;\r\n}\r\n\r\nexport interface Connection {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  initials: string;\r\n  status: 'active' | 'pending' | 'declined';\r\n}\r\n\r\ninterface CurrentUser {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\ninterface AccessManagerProps {\r\n  templateId: string;\r\n  templateTitle: string;\r\n  initialUsers?: UserPermission[];\r\n  onUpdatePermissions?: (users: UserPermission[]) => void;\r\n}\r\n\r\nconst generateId = () => Math.random().toString(36).substring(2, 9);\r\n\r\nconst getPermissionLabel = (level: PermissionLevel): string => {\r\n  switch (level) {\r\n    case 'owner':\r\n      return 'Owner';\r\n    case 'admin':\r\n      return 'Administrator';\r\n    case 'editor':\r\n      return 'Editor';\r\n    case 'viewer':\r\n      return 'Viewer';\r\n    default:\r\n      return 'Unknown';\r\n  }\r\n};\r\n\r\nconst getPermissionDescription = (level: PermissionLevel): string => {\r\n  switch (level) {\r\n    case 'owner':\r\n      return 'Full control including template deletion and ownership transfer';\r\n    case 'admin':\r\n      return 'Can edit template, manage users, and publish';\r\n    case 'editor':\r\n      return 'Can edit template content but cannot publish or manage users';\r\n    case 'viewer':\r\n      return 'Can only view and use the template';\r\n    default:\r\n      return '';\r\n  }\r\n};\r\n\r\nconst AccessManager: React.FC<AccessManagerProps> = ({\r\n  templateId,\r\n  templateTitle,\r\n  initialUsers = [],\r\n  onUpdatePermissions\r\n}) => {\r\n  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Fetch current user data\r\n  useEffect(() => {\r\n    const fetchCurrentUser = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/users/auth-status/', {\r\n          withCredentials: true\r\n        });\r\n        setCurrentUser(response.data.user);\r\n      } catch (error) {\r\n        console.error('Failed to fetch current user:', error);\r\n        // If we can't get the user from API, try to get from localStorage\r\n        const email = localStorage.getItem('username');\r\n        if (email) {\r\n          setCurrentUser({\r\n            id: 0,\r\n            username: email.split('@')[0],\r\n            email: email\r\n          });\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCurrentUser();\r\n  }, []);\r\n\r\n  // Create default owner based on current user\r\n  const createDefaultOwner = (): UserPermission => {\r\n    return {\r\n      id: generateId(),\r\n      name: currentUser ? (currentUser.username || currentUser.email.split('@')[0]) : 'You',\r\n      email: currentUser ? currentUser.email : 'current.user@example.com',\r\n      permissionLevel: 'owner',\r\n      status: 'active',\r\n      lastAccessed: new Date()\r\n    };\r\n  };\r\n\r\n  const [users, setUsers] = useState<UserPermission[]>(\r\n    initialUsers.length > 0 ? initialUsers : [createDefaultOwner()]\r\n  );\r\n\r\n  // Update default owner when current user is loaded\r\n  useEffect(() => {\r\n    if (!isLoading && currentUser && initialUsers.length === 0) {\r\n      setUsers([createDefaultOwner()]);\r\n    }\r\n  }, [currentUser, isLoading, initialUsers.length]);\r\n\r\n  const [showInviteForm, setShowInviteForm] = useState(false);\r\n  const [newUserEmail, setNewUserEmail] = useState('');\r\n  const [newUserPermission, setNewUserPermission] = useState<PermissionLevel>('viewer');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [editingUserId, setEditingUserId] = useState<string | null>(null);\r\n  const [showShareLink, setShowShareLink] = useState(false);\r\n  const [shareLink, setShareLink] = useState('');\r\n  const [linkCopied, setLinkCopied] = useState(false);\r\n  const [showPermissionDetails, setShowPermissionDetails] = useState(false);\r\n  const [showConnectionsModal, setShowConnectionsModal] = useState(false);\r\n  const [inviteTab, setInviteTab] = useState<'email' | 'connections'>('email');\r\n\r\n  // Sample connections data for demonstration\r\n  // Map to store individual permission levels for each connection\r\n  const [connectionPermissions, setConnectionPermissions] = useState<Record<string, PermissionLevel>>({});\r\n\r\n  const [connections, setConnections] = useState<Connection[]>([\r\n    {\r\n      id: '1',\r\n      name: 'Grace Miller',\r\n      email: 'grace.miller@example.com',\r\n      initials: 'GM',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'John Martinez',\r\n      email: 'john.martinez@example.com',\r\n      initials: 'JM',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Sarah Johnson',\r\n      email: 'sarah.johnson@example.com',\r\n      initials: 'SJ',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '4',\r\n      name: 'Michael Brown',\r\n      email: 'michael.brown@example.com',\r\n      initials: 'MB',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '5',\r\n      name: 'Emily Davis',\r\n      email: 'emily.davis@example.com',\r\n      initials: 'ED',\r\n      status: 'active'\r\n    }\r\n  ]);\r\n\r\n  // Generate a share link\r\n  useEffect(() => {\r\n    setShareLink(`https://fashcognitive.com/templates/share/${templateId}?token=${generateId()}`);\r\n  }, [templateId]);\r\n\r\n  // Update parent component when users change\r\n  useEffect(() => {\r\n    if (onUpdatePermissions) {\r\n      onUpdatePermissions(users);\r\n    }\r\n  }, [users, onUpdatePermissions]);\r\n\r\n  const handleAddUser = () => {\r\n    if (!newUserEmail.trim()) return;\r\n\r\n    // Check if user already exists\r\n    if (users.some(user => user.email.toLowerCase() === newUserEmail.toLowerCase())) {\r\n      alert('This user has already been invited.');\r\n      return;\r\n    }\r\n\r\n    const newUser: UserPermission = {\r\n      id: generateId(),\r\n      name: newUserEmail.split('@')[0], // Extract name from email\r\n      email: newUserEmail,\r\n      permissionLevel: newUserPermission,\r\n      status: 'pending'\r\n    };\r\n\r\n    setUsers([...users, newUser]);\r\n    setNewUserEmail('');\r\n    setNewUserPermission('viewer');\r\n    setShowInviteForm(false);\r\n  };\r\n\r\n  const handleAddConnection = (connection: Connection, permissionLevel: PermissionLevel) => {\r\n    // Check if connection already exists as a user\r\n    if (users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())) {\r\n      alert('This user has already been invited.');\r\n      return;\r\n    }\r\n\r\n    const newUser: UserPermission = {\r\n      id: generateId(),\r\n      name: connection.name,\r\n      email: connection.email,\r\n      avatar: connection.avatar,\r\n      permissionLevel: permissionLevel,\r\n      status: 'pending'\r\n    };\r\n\r\n    setUsers([...users, newUser]);\r\n    setShowInviteForm(false);\r\n  };\r\n\r\n  // Initialize connection permissions with default values\r\n  useEffect(() => {\r\n    const newPermissions: Record<string, PermissionLevel> = {};\r\n    connections.forEach(connection => {\r\n      if (!connectionPermissions[connection.id]) {\r\n        newPermissions[connection.id] = 'viewer';\r\n      }\r\n    });\r\n\r\n    if (Object.keys(newPermissions).length > 0) {\r\n      setConnectionPermissions(prev => ({ ...prev, ...newPermissions }));\r\n    }\r\n  }, [connections, connectionPermissions]);\r\n\r\n  const handleConnectionPermissionChange = (connectionId: string, permissionLevel: PermissionLevel) => {\r\n    setConnectionPermissions(prev => ({\r\n      ...prev,\r\n      [connectionId]: permissionLevel\r\n    }));\r\n  };\r\n\r\n  // Filter connections that are not already users\r\n  const availableConnections = connections.filter(\r\n    connection => !users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())\r\n  );\r\n\r\n  const handleUpdatePermission = (userId: string, permissionLevel: PermissionLevel) => {\r\n    setUsers(users.map(user =>\r\n      user.id === userId ? { ...user, permissionLevel } : user\r\n    ));\r\n    setEditingUserId(null);\r\n  };\r\n\r\n  const handleRemoveUser = (userId: string) => {\r\n    // Don't allow removing the owner\r\n    if (users.find(user => user.id === userId)?.permissionLevel === 'owner') {\r\n      alert('You cannot remove the owner of the template.');\r\n      return;\r\n    }\r\n\r\n    setUsers(users.filter(user => user.id !== userId));\r\n  };\r\n\r\n  const handleTransferOwnership = (userId: string) => {\r\n    // Find current owner and new owner\r\n    const currentOwner = users.find(user => user.permissionLevel === 'owner');\r\n    const newOwner = users.find(user => user.id === userId);\r\n\r\n    if (!currentOwner || !newOwner) return;\r\n\r\n    // Swap permissions\r\n    setUsers(users.map(user => {\r\n      if (user.id === currentOwner.id) {\r\n        return { ...user, permissionLevel: 'admin' };\r\n      }\r\n      if (user.id === userId) {\r\n        return { ...user, permissionLevel: 'owner' };\r\n      }\r\n      return user;\r\n    }));\r\n\r\n    setEditingUserId(null);\r\n  };\r\n\r\n  const copyShareLink = () => {\r\n    navigator.clipboard.writeText(shareLink);\r\n    setLinkCopied(true);\r\n    setTimeout(() => setLinkCopied(false), 2000);\r\n  };\r\n\r\n  // Filter users based on search term\r\n  const filteredUsers = users.filter(user =>\r\n    user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"access-manager\">\r\n      <div className=\"access-header\">\r\n        <h2>Manage Access</h2>\r\n        <p>Control who can view and edit \"{templateTitle}\"</p>\r\n      </div>\r\n\r\n      {isLoading && (\r\n        <div style={{ textAlign: 'center', padding: '20px' }}>\r\n          <p>Loading user information...</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"access-actions\">\r\n        <div className=\"search-container\">\r\n          <Search size={18} className=\"search-icon\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search users...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"search-input\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"action-buttons\">\r\n          <button\r\n            className=\"share-link-button\"\r\n            onClick={() => setShowShareLink(!showShareLink)}\r\n          >\r\n            <ExternalLink size={16} />\r\n            Share Link\r\n          </button>\r\n\r\n          <button\r\n            className=\"invite-button\"\r\n            onClick={() => setShowInviteForm(!showInviteForm)}\r\n          >\r\n            <UserPlus size={16} />\r\n            Invite User\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {showShareLink && (\r\n        <div className=\"share-link-container\">\r\n          <div className=\"share-link-header\">\r\n            <h3>Share Template</h3>\r\n            <button className=\"close-button\" onClick={() => setShowShareLink(false)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n          <p>Anyone with this link can view this template:</p>\r\n          <div className=\"share-link-input\">\r\n            <input type=\"text\" value={shareLink} readOnly />\r\n            <button onClick={copyShareLink}>\r\n              <Copy size={16} />\r\n              {linkCopied ? 'Copied!' : 'Copy'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showInviteForm && (\r\n        <div className=\"invite-form\">\r\n          <div className=\"invite-form-header\">\r\n            <h3>Invite User</h3>\r\n            <button className=\"close-button\" onClick={() => setShowInviteForm(false)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"invite-tabs\">\r\n            <button\r\n              className={`invite-tab ${inviteTab === 'email' ? 'active' : ''}`}\r\n              onClick={() => setInviteTab('email')}\r\n            >\r\n              <Mail size={16} />\r\n              Email\r\n            </button>\r\n            <button\r\n              className={`invite-tab ${inviteTab === 'connections' ? 'active' : ''}`}\r\n              onClick={() => setInviteTab('connections')}\r\n            >\r\n              <Users size={16} />\r\n              My Connections\r\n            </button>\r\n          </div>\r\n\r\n          {inviteTab === 'email' ? (\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>Email Address</label>\r\n                <div className=\"email-input\">\r\n                  <Mail size={18} className=\"email-icon\" />\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email address\"\r\n                    value={newUserEmail}\r\n                    onChange={(e) => setNewUserEmail(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Permission Level\r\n                  <button\r\n                    className=\"info-button\"\r\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\r\n                  >\r\n                    <Info size={14} />\r\n                  </button>\r\n                </label>\r\n                <select\r\n                  value={newUserPermission}\r\n                  onChange={(e) => setNewUserPermission(e.target.value as PermissionLevel)}\r\n                >\r\n                  <option value=\"viewer\">Viewer</option>\r\n                  <option value=\"editor\">Editor</option>\r\n                  <option value=\"admin\">Administrator</option>\r\n                </select>\r\n              </div>\r\n\r\n              {showPermissionDetails && (\r\n                <div className=\"permission-details\">\r\n                  <div className=\"permission-item\">\r\n                    <h4>Viewer</h4>\r\n                    <p>Can view and use the template but cannot make changes</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Editor</h4>\r\n                    <p>Can edit template content but cannot publish or manage users</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Administrator</h4>\r\n                    <p>Can edit template, manage users, and publish</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Owner</h4>\r\n                    <p>Full control including template deletion and ownership transfer</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\r\n                <button\r\n                  className=\"send-invite-button\"\r\n                  onClick={handleAddUser}\r\n                  disabled={!newUserEmail.trim()}\r\n                >\r\n                  Send Invite\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Permission Levels\r\n                  <button\r\n                    className=\"info-button\"\r\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\r\n                  >\r\n                    <Info size={14} />\r\n                  </button>\r\n                </label>\r\n                <p className=\"permission-hint\">Set permission level for each connection individually</p>\r\n              </div>\r\n\r\n              {showPermissionDetails && (\r\n                <div className=\"permission-details\">\r\n                  <div className=\"permission-item\">\r\n                    <h4>Viewer</h4>\r\n                    <p>Can view and use the template but cannot make changes</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Editor</h4>\r\n                    <p>Can edit template content but cannot publish or manage users</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Administrator</h4>\r\n                    <p>Can edit template, manage users, and publish</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Owner</h4>\r\n                    <p>Full control including template deletion and ownership transfer</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"connections-list-container\">\r\n                <h4 className=\"connections-list-title\">\r\n                  Select from your connections\r\n                  <span className=\"connections-count\">({availableConnections.length})</span>\r\n                </h4>\r\n\r\n                {availableConnections.length === 0 ? (\r\n                  <div className=\"no-connections-message\">\r\n                    <p>All your connections have already been invited to this template.</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"connections-select-list\">\r\n                    {availableConnections.map(connection => (\r\n                      <div key={connection.id} className=\"connection-select-item\">\r\n                        <div className=\"connection-info\">\r\n                          {connection.avatar ? (\r\n                            <img src={connection.avatar} alt={connection.name} className=\"connection-avatar\" />\r\n                          ) : (\r\n                            <div className=\"connection-initials\">{connection.initials}</div>\r\n                          )}\r\n                          <div className=\"connection-details\">\r\n                            <span className=\"connection-name\">{connection.name}</span>\r\n                            <span className=\"connection-email\">{connection.email}</span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"connection-actions\">\r\n                          <select\r\n                            className=\"connection-permission-select\"\r\n                            value={connectionPermissions[connection.id] || 'viewer'}\r\n                            onChange={(e) => handleConnectionPermissionChange(connection.id, e.target.value as PermissionLevel)}\r\n                          >\r\n                            <option value=\"viewer\">Viewer</option>\r\n                            <option value=\"editor\">Editor</option>\r\n                            <option value=\"admin\">Admin</option>\r\n                          </select>\r\n                          <button\r\n                            className=\"add-connection-btn\"\r\n                            onClick={() => handleAddConnection(connection, connectionPermissions[connection.id] || 'viewer')}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"users-list-container\">\r\n        <div className=\"users-list-header\">\r\n          <div className=\"user-column\">User</div>\r\n          <div className=\"permission-column\">Permission</div>\r\n          <div className=\"status-column\">Status</div>\r\n          <div className=\"actions-column\">Actions</div>\r\n        </div>\r\n\r\n        <div className=\"users-list\">\r\n          {filteredUsers.length === 0 ? (\r\n            <div className=\"no-users\">\r\n              <AlertCircle size={24} />\r\n              <p>No users found matching \"{searchTerm}\"</p>\r\n            </div>\r\n          ) : (\r\n            filteredUsers.map(user => (\r\n              <div key={user.id} className=\"user-item\">\r\n                <div className=\"user-info\">\r\n                  <div className=\"user-avatar\">\r\n                    {user.avatar ? (\r\n                      <img src={user.avatar} alt={user.name} />\r\n                    ) : (\r\n                      <div className=\"avatar-placeholder\">\r\n                        {user.name.charAt(0).toUpperCase()}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"user-details\">\r\n                    <div className=\"user-name\">{user.name}</div>\r\n                    <div className=\"user-email\">{user.email}</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"user-permission\">\r\n                  {editingUserId === user.id ? (\r\n                    <select\r\n                      value={user.permissionLevel}\r\n                      onChange={(e) => handleUpdatePermission(user.id, e.target.value as PermissionLevel)}\r\n                      className=\"permission-select\"\r\n                    >\r\n                      <option value=\"viewer\">Viewer</option>\r\n                      <option value=\"editor\">Editor</option>\r\n                      <option value=\"admin\">Administrator</option>\r\n                      <option value=\"owner\">Owner (Transfer Ownership)</option>\r\n                    </select>\r\n                  ) : (\r\n                    <div className={`permission-badge ${user.permissionLevel}`}>\r\n                      <Shield size={14} />\r\n                      <span>{getPermissionLabel(user.permissionLevel)}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"user-status\">\r\n                  <div className={`status-badge ${user.status}`}>\r\n                    {user.status === 'active' && <Check size={14} />}\r\n                    {user.status === 'pending' && <Mail size={14} />}\r\n                    {user.status === 'expired' && <AlertCircle size={14} />}\r\n                    <span>{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"user-actions\">\r\n                  {user.permissionLevel !== 'owner' && (\r\n                    <>\r\n                      {editingUserId === user.id ? (\r\n                        <button\r\n                          className=\"save-button\"\r\n                          onClick={() => setEditingUserId(null)}\r\n                        >\r\n                          <Check size={16} />\r\n                        </button>\r\n                      ) : (\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => setEditingUserId(user.id)}\r\n                        >\r\n                          <Edit2 size={16} />\r\n                        </button>\r\n                      )}\r\n                      <button\r\n                        className=\"delete-button\"\r\n                        onClick={() => handleRemoveUser(user.id)}\r\n                      >\r\n                        <Trash2 size={16} />\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                  {user.permissionLevel === 'owner' && (\r\n                    <div className=\"owner-badge\">\r\n                      <User size={14} />\r\n                      <span>Owner</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccessManager;\r\n","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\components\\ConnectionsPanel.tsx",[],"D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\pages\\components\\TemplateAssignmentManager.tsx",["133","134","135","136","137"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  User,\r\n  UserPlus,\r\n  Mail,\r\n  Shield,\r\n  Check,\r\n  X,\r\n  Edit2,\r\n  Trash2,\r\n  Search,\r\n  AlertCircle,\r\n  Info,\r\n  Users,\r\n  ClipboardCheck\r\n} from 'lucide-react';\r\nimport './AccessManager.css'; // Reuse the base styles\r\nimport './TemplateAssignmentManager.css'; // Add specific styles\r\nimport { fetchCSRFToken } from '../../utils/csrf';\r\n\r\n// Define assignment status types\r\nexport type AssignmentStatus = 'assigned' | 'in_progress' | 'completed' | 'revoked' | 'expired';\r\n\r\nexport interface TemplateAssignment {\r\n  id?: number;\r\n  template: number;\r\n  template_title?: string;\r\n  inspector: number;\r\n  inspector_email?: string;\r\n  inspector_name?: string;\r\n  assigned_by?: number;\r\n  assigned_by_email?: string;\r\n  assigned_by_name?: string;\r\n  status: AssignmentStatus;\r\n  status_display?: string;\r\n  assigned_at?: string;\r\n  started_at?: string;\r\n  completed_at?: string;\r\n  revoked_at?: string;\r\n  expired_at?: string;\r\n  due_date?: string;\r\n  notes?: string;\r\n}\r\n\r\ninterface Inspector {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  initials?: string;\r\n}\r\n\r\ninterface CurrentUser {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n  user_role: string;\r\n}\r\n\r\ninterface TemplateAssignmentManagerProps {\r\n  templateId: string | number;\r\n  templateTitle: string;\r\n  onAssignmentUpdated?: () => void;\r\n}\r\n\r\nconst TemplateAssignmentManager: React.FC<TemplateAssignmentManagerProps> = ({\r\n  templateId,\r\n  templateTitle,\r\n  onAssignmentUpdated\r\n}) => {\r\n  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [assignments, setAssignments] = useState<TemplateAssignment[]>([]);\r\n  const [inspectors, setInspectors] = useState<Inspector[]>([]);\r\n  const [showAssignForm, setShowAssignForm] = useState(false);\r\n  const [selectedInspector, setSelectedInspector] = useState<number | null>(null);\r\n  const [assignmentNotes, setAssignmentNotes] = useState('');\r\n  const [dueDate, setDueDate] = useState<string>('');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fetch current user data\r\n  useEffect(() => {\r\n    const fetchCurrentUser = async () => {\r\n      try {\r\n        console.log('Fetching current user data...');\r\n        const response = await axios.get('http://localhost:8000/api/users/auth-status/', {\r\n          withCredentials: true\r\n        });\r\n        console.log('Current user data:', response.data);\r\n\r\n        if (response.data.user) {\r\n          setCurrentUser(response.data.user);\r\n          console.log('User role from API:', response.data.user.user_role);\r\n\r\n          // Store user role in localStorage for persistence\r\n          localStorage.setItem('user_role', response.data.user.user_role);\r\n        } else {\r\n          throw new Error('User data not found in response');\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch current user:', error);\r\n        // If we can't get the user from API, try to get from localStorage\r\n        const email = localStorage.getItem('username');\r\n        const storedRole = localStorage.getItem('user_role');\r\n\r\n        if (email) {\r\n          setCurrentUser({\r\n            id: 0,\r\n            username: email.split('@')[0],\r\n            email: email,\r\n            user_role: storedRole || 'regular' // Use stored role or default to regular\r\n          });\r\n          console.log('Using localStorage user role:', storedRole || 'regular');\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCurrentUser();\r\n  }, []);\r\n\r\n  // Fetch template assignments\r\n  useEffect(() => {\r\n    const fetchAssignments = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/users/template-assignments/', {\r\n          withCredentials: true\r\n        });\r\n\r\n        // Filter assignments for this template\r\n        const templateAssignments = response.data.filter(\r\n          (assignment: TemplateAssignment) => assignment.template.toString() === templateId.toString()\r\n        );\r\n\r\n        setAssignments(templateAssignments);\r\n      } catch (error) {\r\n        console.error('Failed to fetch template assignments:', error);\r\n        setError('Failed to load template assignments. Please try again later.');\r\n      }\r\n    };\r\n\r\n    if (!isLoading && currentUser) {\r\n      fetchAssignments();\r\n    }\r\n  }, [isLoading, currentUser, templateId]);\r\n\r\n  // Fetch inspectors\r\n  useEffect(() => {\r\n    const fetchInspectors = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/users/inspectors/', {\r\n          withCredentials: true\r\n        });\r\n\r\n        // Transform the data to match our Inspector interface\r\n        const inspectorsList = response.data.map((user: any) => ({\r\n          id: user.id,\r\n          name: `${user.first_name} ${user.last_name}`.trim() || user.username || user.email.split('@')[0],\r\n          email: user.email,\r\n          initials: `${user.first_name?.[0] || ''}${user.last_name?.[0] || ''}`.toUpperCase() || user.email[0].toUpperCase()\r\n        }));\r\n\r\n        setInspectors(inspectorsList);\r\n      } catch (error) {\r\n        console.error('Failed to fetch inspectors:', error);\r\n\r\n        // If the API endpoint doesn't exist, create some dummy data for testing\r\n        setInspectors([\r\n          {\r\n            id: 4,\r\n            name: 'Inspector User',\r\n            email: 'sloganand11@gmail.com',\r\n            initials: 'IU'\r\n          }\r\n        ]);\r\n      }\r\n    };\r\n\r\n    if (!isLoading && currentUser) {\r\n      fetchInspectors();\r\n    }\r\n  }, [isLoading, currentUser]);\r\n\r\n  // Create a new assignment\r\n  const handleCreateAssignment = async () => {\r\n    if (!selectedInspector) {\r\n      setError('Please select an inspector');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // First check if the current user is an admin\r\n      if (currentUser?.user_role !== 'admin') {\r\n        setError('Only admin users can assign templates to inspectors.');\r\n        return;\r\n      }\r\n\r\n      // Get a fresh CSRF token\r\n      const csrfToken = await fetchCSRFToken();\r\n      console.log('CSRF Token for assignment creation:', csrfToken);\r\n\r\n      const assignmentData = {\r\n        template: templateId,\r\n        inspector: selectedInspector,\r\n        notes: assignmentNotes,\r\n        due_date: dueDate || null\r\n      };\r\n\r\n      // Make the request with the CSRF token\r\n      const response = await axios.post(\r\n        'http://localhost:8000/api/users/template-assignments/',\r\n        assignmentData,\r\n        {\r\n          withCredentials: true,\r\n          headers: {\r\n            'X-CSRFToken': csrfToken,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      console.log('Assignment created successfully:', response.data);\r\n\r\n      // Add the new assignment to the list\r\n      setAssignments([...assignments, response.data]);\r\n\r\n      // Reset form\r\n      setSelectedInspector(null);\r\n      setAssignmentNotes('');\r\n      setDueDate('');\r\n      setShowAssignForm(false);\r\n      setError(null);\r\n\r\n      // Notify parent component\r\n      if (onAssignmentUpdated) {\r\n        onAssignmentUpdated();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Failed to create assignment:', error);\r\n      if (error.response?.status === 403) {\r\n        setError('You do not have permission to assign templates. Only admin users can assign templates.');\r\n      } else {\r\n        setError(error.response?.data?.detail || 'Failed to create assignment. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Revoke an assignment\r\n  const handleRevokeAssignment = async (assignmentId: number) => {\r\n    try {\r\n      // First check if the current user is an admin\r\n      if (currentUser?.user_role !== 'admin') {\r\n        setError('Only admin users can revoke template assignments.');\r\n        return;\r\n      }\r\n\r\n      // Get a fresh CSRF token\r\n      const csrfToken = await fetchCSRFToken();\r\n      console.log('CSRF Token for assignment revocation:', csrfToken);\r\n\r\n      await axios.post(\r\n        `http://localhost:8000/api/users/template-assignments/${assignmentId}/revoke/`,\r\n        {},\r\n        {\r\n          withCredentials: true,\r\n          headers: {\r\n            'X-CSRFToken': csrfToken,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      console.log('Assignment revoked successfully');\r\n\r\n      // Update the assignment status in the list\r\n      setAssignments(assignments.map(assignment =>\r\n        assignment.id === assignmentId\r\n          ? { ...assignment, status: 'revoked' }\r\n          : assignment\r\n      ));\r\n\r\n      // Notify parent component\r\n      if (onAssignmentUpdated) {\r\n        onAssignmentUpdated();\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Failed to revoke assignment:', error);\r\n      if (error.response?.status === 403) {\r\n        setError('You do not have permission to revoke assignments. Only admin users can revoke assignments.');\r\n      } else {\r\n        setError(error.response?.data?.detail || 'Failed to revoke assignment. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Filter inspectors based on search term\r\n  const filteredInspectors = inspectors.filter(inspector =>\r\n    inspector.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    inspector.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  // Filter out inspectors who already have active assignments\r\n  const availableInspectors = filteredInspectors.filter(inspector =>\r\n    !assignments.some(assignment =>\r\n      assignment.inspector === inspector.id &&\r\n      ['assigned', 'in_progress'].includes(assignment.status)\r\n    )\r\n  );\r\n\r\n  // Get status display text\r\n  const getStatusDisplay = (status: AssignmentStatus): string => {\r\n    switch (status) {\r\n      case 'assigned': return 'Assigned';\r\n      case 'in_progress': return 'In Progress';\r\n      case 'completed': return 'Completed';\r\n      case 'revoked': return 'Revoked';\r\n      case 'expired': return 'Expired';\r\n      default: return status;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"access-manager\">\r\n      <div style={{ width: '100%', maxWidth: '1000px' }}>\r\n        <div className=\"access-header\">\r\n          <h2>Template Assignments</h2>\r\n          <p>Assign \"{templateTitle}\" to inspectors</p>\r\n        </div>\r\n\r\n        {isLoading && (\r\n          <div style={{ textAlign: 'center', padding: '20px' }}>\r\n            <p>Loading assignment information...</p>\r\n          </div>\r\n        )}\r\n\r\n        {!isLoading && currentUser?.user_role !== 'admin' && (\r\n          <div className=\"info-message\">\r\n            <Info size={16} />\r\n            <span>Only admin users can assign templates to inspectors. Contact an admin if you need to assign this template.</span>\r\n          </div>\r\n        )}\r\n\r\n        {error && (\r\n          <div className=\"error-message\">\r\n            <AlertCircle size={16} />\r\n            <span>{error}</span>\r\n            <button onClick={() => setError(null)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"access-actions\">\r\n          <div className=\"search-container\">\r\n            <Search size={18} className=\"search-icon\" />\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search inspectors...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"search-input\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"action-buttons\">\r\n            <button\r\n              className=\"invite-button\"\r\n              onClick={() => setShowAssignForm(!showAssignForm)}\r\n              disabled={currentUser?.user_role !== 'admin'}\r\n            >\r\n              <UserPlus size={16} />\r\n              Assign Template\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {showAssignForm && (\r\n          <div className=\"invite-form\">\r\n            <div className=\"invite-form-header\">\r\n              <h3>Assign Template to Inspector</h3>\r\n              <button className=\"close-button\" onClick={() => setShowAssignForm(false)}>\r\n                <X size={16} />\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>Select Inspector</label>\r\n                <select\r\n                  value={selectedInspector || ''}\r\n                  onChange={(e) => setSelectedInspector(Number(e.target.value))}\r\n                  className=\"inspector-select\"\r\n                >\r\n                  <option value=\"\">-- Select an Inspector --</option>\r\n                  {availableInspectors.map(inspector => (\r\n                    <option key={inspector.id} value={inspector.id}>\r\n                      {inspector.name} ({inspector.email})\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n                {availableInspectors.length === 0 && (\r\n                  <p className=\"no-inspectors-message\">\r\n                    No available inspectors found. All inspectors may already be assigned to this template.\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Due Date (Optional)</label>\r\n                <input\r\n                  type=\"datetime-local\"\r\n                  value={dueDate}\r\n                  onChange={(e) => setDueDate(e.target.value)}\r\n                  className=\"date-input\"\r\n                />\r\n                <small>If set, the assignment will expire after this date</small>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Notes (Optional)</label>\r\n                <textarea\r\n                  value={assignmentNotes}\r\n                  onChange={(e) => setAssignmentNotes(e.target.value)}\r\n                  placeholder=\"Add any notes about this assignment\"\r\n                  rows={3}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowAssignForm(false)}>Cancel</button>\r\n                <button\r\n                  className=\"send-invite-button\"\r\n                  onClick={handleCreateAssignment}\r\n                  disabled={!selectedInspector}\r\n                >\r\n                  Assign Template\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"users-list-container\">\r\n          <div className=\"users-list-header\">\r\n            <div className=\"user-column\">Inspector</div>\r\n            <div className=\"permission-column\">Status</div>\r\n            <div className=\"status-column\">Assigned Date</div>\r\n            <div className=\"actions-column\">Actions</div>\r\n          </div>\r\n\r\n          <div className=\"users-list\">\r\n            {assignments.length === 0 ? (\r\n              <div className=\"no-users\">\r\n                <ClipboardCheck size={24} />\r\n                <p>No assignments found for this template</p>\r\n              </div>\r\n            ) : (\r\n              assignments.map(assignment => (\r\n                <div key={assignment.id} className=\"user-item\">\r\n                  <div className=\"user-info\">\r\n                    <div className=\"user-avatar\">\r\n                      <div className=\"avatar-placeholder\">\r\n                        {assignment.inspector_name?.[0]?.toUpperCase() || 'I'}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"user-details\">\r\n                      <div className=\"user-name\">{assignment.inspector_name || 'Inspector'}</div>\r\n                      <div className=\"user-email\">{assignment.inspector_email}</div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"user-permission\">\r\n                    <div className={`status-badge ${assignment.status}`}>\r\n                      {assignment.status === 'assigned' && <Check size={14} />}\r\n                      {assignment.status === 'in_progress' && <ClipboardCheck size={14} />}\r\n                      {assignment.status === 'completed' && <Check size={14} />}\r\n                      {assignment.status === 'revoked' && <X size={14} />}\r\n                      {assignment.status === 'expired' && <AlertCircle size={14} />}\r\n                      <span>{assignment.status_display || getStatusDisplay(assignment.status)}</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"user-status\">\r\n                    <span>{new Date(assignment.assigned_at || '').toLocaleDateString()}</span>\r\n                  </div>\r\n\r\n                  <div className=\"user-actions\">\r\n                    {['assigned', 'in_progress'].includes(assignment.status) && currentUser?.user_role === 'admin' && (\r\n                      <button\r\n                        className=\"delete-button\"\r\n                        onClick={() => assignment.id && handleRevokeAssignment(assignment.id)}\r\n                        title=\"Revoke Assignment\"\r\n                      >\r\n                        <Trash2 size={16} />\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemplateAssignmentManager;\r\n","D:\\Intern\\fash\\fashcognitive-intern\\frontend\\src\\utils\\aqlTables.ts",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":176,"column":6,"nodeType":"144","endLine":176,"endColumn":20,"suggestions":"145"},{"ruleId":"142","severity":1,"message":"146","line":279,"column":34,"nodeType":"147","endLine":279,"endColumn":41},{"ruleId":"148","severity":1,"message":"149","line":290,"column":23,"nodeType":"147","messageId":"150","endLine":290,"endColumn":38},{"ruleId":"148","severity":1,"message":"151","line":291,"column":20,"nodeType":"147","messageId":"150","endLine":291,"endColumn":32},{"ruleId":"148","severity":1,"message":"152","line":294,"column":25,"nodeType":"147","messageId":"150","endLine":294,"endColumn":42},{"ruleId":"142","severity":1,"message":"153","line":293,"column":6,"nodeType":"144","endLine":293,"endColumn":8,"suggestions":"154"},{"ruleId":"148","severity":1,"message":"155","line":28,"column":11,"nodeType":"147","messageId":"150","endLine":28,"endColumn":20},{"ruleId":"142","severity":1,"message":"156","line":251,"column":6,"nodeType":"144","endLine":251,"endColumn":31,"suggestions":"157"},{"ruleId":"148","severity":1,"message":"158","line":5,"column":39,"nodeType":"147","messageId":"150","endLine":5,"endColumn":50},{"ruleId":"148","severity":1,"message":"159","line":37,"column":3,"nodeType":"147","messageId":"150","endLine":37,"endColumn":18},{"ruleId":"148","severity":1,"message":"160","line":192,"column":10,"nodeType":"147","messageId":"150","endLine":192,"endColumn":19},{"ruleId":"148","severity":1,"message":"161","line":2010,"column":10,"nodeType":"147","messageId":"150","endLine":2010,"endColumn":20},{"ruleId":"148","severity":1,"message":"162","line":2010,"column":22,"nodeType":"147","messageId":"150","endLine":2010,"endColumn":35},{"ruleId":"148","severity":1,"message":"163","line":2011,"column":10,"nodeType":"147","messageId":"150","endLine":2011,"endColumn":22},{"ruleId":"148","severity":1,"message":"164","line":2036,"column":10,"nodeType":"147","messageId":"150","endLine":2036,"endColumn":28},{"ruleId":"148","severity":1,"message":"165","line":2037,"column":10,"nodeType":"147","messageId":"150","endLine":2037,"endColumn":24},{"ruleId":"166","severity":1,"message":"167","line":139,"column":35,"nodeType":"168","messageId":"169","endLine":139,"endColumn":37},{"ruleId":"148","severity":1,"message":"170","line":158,"column":10,"nodeType":"147","messageId":"150","endLine":158,"endColumn":19},{"ruleId":"148","severity":1,"message":"171","line":159,"column":10,"nodeType":"147","messageId":"150","endLine":159,"endColumn":15},{"ruleId":"142","severity":1,"message":"172","line":310,"column":6,"nodeType":"144","endLine":310,"endColumn":8,"suggestions":"173"},{"ruleId":"148","severity":1,"message":"174","line":6,"column":282,"nodeType":"147","messageId":"150","endLine":6,"endColumn":296},{"ruleId":"148","severity":1,"message":"175","line":10,"column":8,"nodeType":"147","messageId":"150","endLine":10,"endColumn":33},{"ruleId":"148","severity":1,"message":"170","line":1462,"column":10,"nodeType":"147","messageId":"150","endLine":1462,"endColumn":19},{"ruleId":"148","severity":1,"message":"176","line":98,"column":17,"nodeType":"147","messageId":"150","endLine":98,"endColumn":36},{"ruleId":"148","severity":1,"message":"177","line":223,"column":9,"nodeType":"147","messageId":"150","endLine":223,"endColumn":25},{"ruleId":"148","severity":1,"message":"176","line":246,"column":13,"nodeType":"147","messageId":"150","endLine":246,"endColumn":32},{"ruleId":"138","replacedBy":"178"},{"ruleId":"140","replacedBy":"179"},{"ruleId":"148","severity":1,"message":"180","line":73,"column":7,"nodeType":"147","messageId":"150","endLine":73,"endColumn":31},{"ruleId":"142","severity":1,"message":"181","line":145,"column":6,"nodeType":"144","endLine":145,"endColumn":51,"suggestions":"182"},{"ruleId":"148","severity":1,"message":"183","line":156,"column":10,"nodeType":"147","messageId":"150","endLine":156,"endColumn":30},{"ruleId":"148","severity":1,"message":"184","line":156,"column":32,"nodeType":"147","messageId":"150","endLine":156,"endColumn":55},{"ruleId":"148","severity":1,"message":"185","line":163,"column":23,"nodeType":"147","messageId":"150","endLine":163,"endColumn":37},{"ruleId":"148","severity":1,"message":"186","line":299,"column":9,"nodeType":"147","messageId":"150","endLine":299,"endColumn":32},{"ruleId":"148","severity":1,"message":"187","line":4,"column":3,"nodeType":"147","messageId":"150","endLine":4,"endColumn":7},{"ruleId":"148","severity":1,"message":"188","line":6,"column":3,"nodeType":"147","messageId":"150","endLine":6,"endColumn":7},{"ruleId":"148","severity":1,"message":"189","line":7,"column":3,"nodeType":"147","messageId":"150","endLine":7,"endColumn":9},{"ruleId":"148","severity":1,"message":"190","line":10,"column":3,"nodeType":"147","messageId":"150","endLine":10,"endColumn":8},{"ruleId":"148","severity":1,"message":"191","line":15,"column":3,"nodeType":"147","messageId":"150","endLine":15,"endColumn":8},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'endpointsToTry'. Either include it or remove the dependency array.","ArrayExpression",["194"],"The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","@typescript-eslint/no-unused-vars","'featuresVisible' is assigned a value but never used.","unusedVar","'statsVisible' is assigned a value but never used.","'industriesVisible' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'endpointsToTry' and 'loggedInUser'. Either include them or remove the dependency array.",["195"],"'Inspector' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchAssignments'. Either include it or remove the dependency array.",["196"],"'useCallback' is defined but never used.","'CornerDownRight' is defined but never used.","'getCookie' is defined but never used.","'templateId' is assigned a value but never used.","'setTemplateId' is assigned a value but never used.","'templateData' is assigned a value but never used.","'showSignatureModal' is assigned a value but never used.","'activeQuestion' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchInspectorInfo'. Either include it or remove the dependency array.",["197"],"'ClipboardCheck' is defined but never used.","'TemplateAssignmentManager' is defined but never used.","'availableSpaceBelow' is assigned a value but never used.","'closeTriggerMenu' is assigned a value but never used.",["192"],["193"],"'getPermissionDescription' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'createDefaultOwner'. Either include it or remove the dependency array.",["198"],"'showConnectionsModal' is assigned a value but never used.","'setShowConnectionsModal' is assigned a value but never used.","'setConnections' is assigned a value but never used.","'handleTransferOwnership' is assigned a value but never used.","'User' is defined but never used.","'Mail' is defined but never used.","'Shield' is defined but never used.","'Edit2' is defined but never used.","'Users' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"199","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [endpointsToTry, loggedInUser]",{"range":"208","text":"209"},{"range":"210","text":"209"},"Update the dependencies array to be: [currentUser, fetchAssignments, retryCount]",{"range":"211","text":"212"},"Update the dependencies array to be: [fetchInspectorInfo]",{"range":"213","text":"214"},"Update the dependencies array to be: [currentUser, isLoading, initialUsers.length, createDefaultOwner]",{"range":"215","text":"216"},[5398,5412],"[endpointsToTry, loggedInUser]",[9806,9808],[8224,8249],"[currentUser, fetchAssignments, retryCount]",[11168,11170],"[fetchInspectorInfo]",[3737,3782],"[currentUser, isLoading, initialUsers.length, createDefaultOwner]"]