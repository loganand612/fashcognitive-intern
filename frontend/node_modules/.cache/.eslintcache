[{"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/index.tsx":"1","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/App.tsx":"2","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/routes.tsx":"3","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Template.tsx":"4","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/register.tsx":"5","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/login.tsx":"6","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/TemplateView.tsx":"7","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Dashboard.tsx":"8","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/home.tsx":"9","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Inspection.tsx":"10","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Create_template.tsx":"11","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/garment-template.tsx":"12","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/api.ts":"13","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/csrf.ts":"14","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/aqlHelpers.ts":"15","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/ConnectionsPanel.tsx":"16","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/TemplateAssignmentManager.tsx":"17","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/AccessManager.tsx":"18","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/aqlTables.ts":"19","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Schedule.tsx":"20","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/ScheduleInspectionModal.tsx":"21"},{"size":392,"mtime":1748709066494,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1748666045564,"results":"24","hashOfConfig":"23"},{"size":1475,"mtime":1748666045570,"results":"25","hashOfConfig":"23"},{"size":23225,"mtime":1748666045567,"results":"26","hashOfConfig":"23"},{"size":10943,"mtime":1747625064015,"results":"27","hashOfConfig":"23"},{"size":5413,"mtime":1748360740519,"results":"28","hashOfConfig":"23"},{"size":11775,"mtime":1748666045568,"results":"29","hashOfConfig":"23"},{"size":19275,"mtime":1748666045566,"results":"30","hashOfConfig":"23"},{"size":46846,"mtime":1747236110995,"results":"31","hashOfConfig":"23"},{"size":139471,"mtime":1748753694270,"results":"32","hashOfConfig":"23"},{"size":168798,"mtime":1748753694270,"results":"33","hashOfConfig":"23"},{"size":196675,"mtime":1748753694272,"results":"34","hashOfConfig":"23"},{"size":3173,"mtime":1748360740519,"results":"35","hashOfConfig":"23"},{"size":1054,"mtime":1748360740520,"results":"36","hashOfConfig":"23"},{"size":455,"mtime":1746971474719,"results":"37","hashOfConfig":"23"},{"size":12245,"mtime":1748753694271,"results":"38","hashOfConfig":"23"},{"size":18973,"mtime":1748666045569,"results":"39","hashOfConfig":"23"},{"size":23220,"mtime":1748145110150,"results":"40","hashOfConfig":"23"},{"size":4800,"mtime":1747120548070,"results":"41","hashOfConfig":"23"},{"size":39115,"mtime":1748666045567,"results":"42","hashOfConfig":"23"},{"size":16067,"mtime":1748666045568,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"143jhuv",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/index.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/App.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/routes.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Template.tsx",["93","94","95"],"\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect, useRef } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport \"../assets/Template.css\"\nimport {\n  Plus,\n  Search,\n  FileText,\n  User,\n  Eye,\n  MoreHorizontal,\n  X,\n  Home,\n  Bell,\n  Calendar,\n  ClipboardCheck,\n  Play,\n  BookOpen,\n  Package,\n  AlertCircle,\n  Settings,\n  ChevronDown,\n  LogOut,\n} from \"lucide-react\"\n\ninterface Template {\n  id: number\n  title: string\n  lastModified?: string\n  access?: string\n  createdBy: string\n  isShared?: boolean\n}\n\ninterface EndpointResult {\n  status?: number\n  ok?: boolean\n  parseError?: string\n  error?: string\n}\n\ninterface DebugInfo {\n  endpoints: { [endpoint: string]: EndpointResult }\n  successEndpoint?: string\n  responseData?: any\n}\n\ninterface DialogPosition {\n  top: number\n  left: number\n}\n\nconst TemplatePage: React.FC = () => {\n  const navigate = useNavigate()\n  const dropdownRef = useRef<HTMLDivElement>(null)\n  const startFromScratchRef = useRef<HTMLDivElement>(null)\n  const startFromScratchDialogRef = useRef<HTMLDivElement>(null)\n\n  const [showStartFromScratchDialog, setShowStartFromScratchDialog] = useState(false)\n  const [startFromScratchDialogPosition, setStartFromScratchDialogPosition] = useState<DialogPosition>({ top: 0, left: 0 })\n\n  const menuItems = [\n    { icon: Home, label: \"Home\", href: \"/dashboard\" },\n    { icon: Search, label: \"Search\", href: \"/search\" },\n    { icon: Bell, label: \"Notifications\", href: \"/notifications\" },\n    { icon: FileText, label: \"Templates\", href: \"/templates\", active: true },\n    { icon: Calendar, label: \"Schedule\", href: \"/schedule\" },\n    { icon: ClipboardCheck, label: \"Inspections\", href: \"/inspection\" },\n    { icon: Play, label: \"Actions\", href: \"/actions\" },\n    { icon: BookOpen, label: \"Training\", href: \"/training\" },\n    { icon: Package, label: \"Assets\", href: \"/assets\" },\n    { icon: AlertCircle, label: \"Issues\", href: \"/issues\" },\n  ]\n\n  const [templates, setTemplates] = useState<Template[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [debugInfo, setDebugInfo] = useState<DebugInfo | null>(null)\n  const [showCreateDropdown, setShowCreateDropdown] = useState(false)\n  const [currentUser, setCurrentUser] = useState<any>(null)\n\n  const loggedInUser = localStorage.getItem(\"username\")\n\n  const filteredTemplates = templates.filter((template) =>\n    template.title.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  const endpointsToTry = [\n    \"/api/users/templates-with-shared/\",\n    \"/api/templates/\",\n    \"/templates_api/\",\n    \"/templates/\",\n    \"/api/v1/templates/\",\n    \"/api/user/templates/\",\n    \"/dashboard/templates/\",\n    \"/api/users/templates/\",\n  ]\n\n  // Toggle the create template dropdown\n  const toggleCreateDropdown = () => {\n    setShowCreateDropdown(!showCreateDropdown)\n  }\n\n  // Calculate position and toggle the start from scratch dialog\n  const toggleStartFromScratchDialog = () => {\n    if (startFromScratchRef.current) {\n      const rect = startFromScratchRef.current.getBoundingClientRect()\n\n      // Position the dialog below the button\n      const newPosition = {\n        top: rect.bottom + 10, // 10px below the button\n        left: rect.left + (rect.width / 2) - 125 // Center the 250px wide dialog under the button\n      }\n      console.log(\"Button position:\", rect)\n      console.log(\"Dialog position:\", newPosition)\n\n      setStartFromScratchDialogPosition(newPosition)\n      setShowStartFromScratchDialog(!showStartFromScratchDialog)\n    } else {\n      console.error(\"Start from scratch button ref not available\")\n    }\n  }\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setShowCreateDropdown(false)\n      }\n\n      if (\n        showStartFromScratchDialog &&\n        startFromScratchDialogRef.current &&\n        startFromScratchRef.current &&\n        !startFromScratchDialogRef.current.contains(event.target as Node) &&\n        !startFromScratchRef.current.contains(event.target as Node)\n      ) {\n        setShowStartFromScratchDialog(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside)\n    }\n  }, [showStartFromScratchDialog])\n\n  // Update dialog position if window is resized\n  useEffect(() => {\n    const handleResize = () => {\n      if (showStartFromScratchDialog && startFromScratchRef.current) {\n        const rect = startFromScratchRef.current.getBoundingClientRect()\n        setStartFromScratchDialogPosition({\n          top: rect.bottom + 10,\n          left: rect.left + (rect.width / 2) - 125\n        })\n      }\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [showStartFromScratchDialog])\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const handleLogout = async () => {\n    try {\n      // Clear localStorage data\n      localStorage.removeItem('username');\n      localStorage.removeItem('user_role');\n\n      // Call the backend logout endpoint to clear the session\n      const response = await fetch('http://localhost:8000/api/users/logout/', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        console.log('Logout successful');\n      } else {\n        console.error('Logout failed:', response.status);\n      }\n\n      // Redirect to login page regardless of response\n      window.location.href = '/login';\n    } catch (error) {\n      console.error('Error during logout:', error);\n      // Still redirect to login even if there's an error\n      window.location.href = '/login';\n    }\n  };\n\n  const toggleDropdown = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n  };\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutsideSettings = (event: MouseEvent) => {\n      const target = event.target as Node;\n      const settingsButton = document.querySelector('.tp-nav-button');\n      const dropdownMenu = document.querySelector('.tp-dropdown-menu');\n\n      if (\n        isDropdownOpen &&\n        settingsButton &&\n        dropdownMenu &&\n        !settingsButton.contains(target) &&\n        !dropdownMenu.contains(target)\n      ) {\n        setIsDropdownOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutsideSettings);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutsideSettings);\n    };\n  }, [isDropdownOpen]);\n\n  // Fetch current user\n  useEffect(() => {\n    const fetchCurrentUser = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/users/auth-status/', {\n          credentials: 'include'\n        });\n        if (response.ok) {\n          const userData = await response.json();\n          // Extract user data from the response\n          if (userData.authenticated && userData.user) {\n            setCurrentUser(userData.user);\n            console.log(\"Current user set:\", userData.user);\n            console.log(\"User role:\", userData.user.user_role);\n          } else {\n            console.warn(\"User not authenticated or user data missing\");\n            setCurrentUser(null);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching current user:', error);\n        // Set a default user for demo purposes\n        setCurrentUser({\n          id: 1,\n          username: \"demouser\",\n          email: \"demo@example.com\",\n          user_role: \"admin\"\n        });\n      }\n    };\n\n    fetchCurrentUser();\n  }, []);\n\n  useEffect(() => {\n    const testAllEndpoints = async () => {\n      setLoading(true)\n      setError(\"\")\n\n      // If user is not loaded yet, wait\n      if (!currentUser) {\n        setLoading(false)\n        return\n      }\n\n      // For inspectors, show only assigned templates (redirect to dashboard)\n      if (currentUser.user_role === 'inspector') {\n        setError(\"Inspectors can only view assigned templates on the Dashboard and Schedule pages.\")\n        setTemplates([])\n        setLoading(false)\n        return\n      }\n\n      const results: { [endpoint: string]: EndpointResult } = {}\n\n      for (const endpoint of endpointsToTry) {\n        try {\n          const fullUrl = `http://localhost:8000${endpoint}`\n          const response = await fetch(fullUrl, {\n            credentials: 'include' // Include cookies for authentication\n          })\n          results[endpoint] = {\n            status: response.status,\n            ok: response.ok,\n          }\n\n          if (response.ok) {\n            try {\n              console.log(\"Logged in user:\", loggedInUser)\n\n              const data = await response.json()\n              console.log(\"Full response data:\", data);\n\n              // Check if the response has the new format with owned_templates and shared_templates\n              if (data.owned_templates && data.shared_templates) {\n                console.log(\"Using new API format with owned and shared templates\");\n                // Combine owned and shared templates\n                const ownedTemplates = data.owned_templates;\n                const sharedTemplates = data.shared_templates.map((template: Template) => ({\n                  ...template,\n                  isShared: true // Add a flag to identify shared templates\n                }));\n\n                setTemplates([...ownedTemplates, ...sharedTemplates]);\n              } else {\n                // Use the old format\n                console.log(\"Template creators:\", data.map((t: Template) => t.createdBy || 'Unknown'));\n                setTemplates(data.filter((template: Template) => template.createdBy === loggedInUser));\n              }\n\n              setDebugInfo({ endpoints: results, successEndpoint: fullUrl, responseData: data })\n              setLoading(false)\n              return\n            } catch (error) {\n              console.error(\"Error parsing JSON:\", error);\n              results[endpoint].parseError = \"Could not parse JSON\"\n            }\n          }\n        } catch (err) {\n          results[endpoint] = {\n            error: err instanceof Error ? err.message : String(err),\n          }\n        }\n      }\n\n      setDebugInfo({ endpoints: results })\n      setError(\"Could not connect to any templates API endpoint\")\n      setTemplates([\n        { id: 1, title: \"Safety Inspection Form (Demo)\", lastModified: \"2 days ago\", access: \"All users\", createdBy: \"demoUser\" },\n        { id: 2, title: \"Weekly Equipment Check (Demo)\", lastModified: \"5 days ago\", access: \"Team managers\", createdBy: \"demoUser\" },\n        { id: 3, title: \"Monthly Fire Safety Audit (Demo)\", lastModified: \"2 weeks ago\", access: \"Safety officers\", createdBy: \"demoUser\" },\n      ])\n      setLoading(false)\n    }\n\n    testAllEndpoints()\n  }, [currentUser])\n\n  return (\n    <div className=\"tp-app-container\">\n      <nav className=\"tp-navbar\">\n        <div className=\"tp-navbar-brand\">STREAMLINEER</div>\n        <div className=\"tp-navbar-actions\">\n          <button className=\"tp-nav-button\">\n            <User className=\"tp-nav-icon\" />\n          </button>\n          <div className=\"tp-dropdown-container\">\n            <button\n              className=\"tp-nav-button\"\n              onClick={toggleDropdown}\n              style={{\n                position: 'relative',\n                backgroundColor: isDropdownOpen ? 'rgba(72, 149, 239, 0.1)' : 'transparent'\n              }}\n              title=\"Settings\"\n            >\n              <Settings className=\"tp-nav-icon\" />\n            </button>\n            {isDropdownOpen && (\n              <div className=\"tp-dropdown-menu\">\n                <button\n                  className=\"tp-dropdown-item logout-button\"\n                  onClick={handleLogout}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '0.75rem',\n                    padding: '0.75rem 1.5rem',\n                    background: 'linear-gradient(135deg, #ff4b4b 0%, #ff6b6b 100%)',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: 'var(--border-radius)',\n                    fontSize: '0.95rem',\n                    fontWeight: '600',\n                    cursor: 'pointer',\n                    transition: 'var(--transition)',\n                    margin: '0.5rem 1rem',\n                    boxShadow: 'var(--shadow-sm)',\n                    width: 'calc(100% - 2rem)'\n                  }}\n                >\n                  <LogOut size={18} />\n                  <span>Logout</span>\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </nav>\n\n      <aside className=\"dashboard-sidebar\">\n        <nav className=\"dashboard-sidebar-nav\">\n          {menuItems.map((item, i) => {\n            // Make Inspections link inactive for inspector users\n            const isInspectionsLink = item.label === 'Inspections';\n            const isInspectorUser = currentUser?.user_role === 'inspector';\n            const shouldDisableLink = isInspectionsLink && isInspectorUser;\n\n            return shouldDisableLink ? (\n              <span key={i} className={`dashboard-nav-link dashboard-nav-link-disabled ${item.active ? \"active\" : \"\"}`}>\n                <item.icon size={20} /><span>{item.label}</span>\n              </span>\n            ) : (\n              <a key={i} href={item.href} className={`dashboard-nav-link ${item.active ? \"active\" : \"\"}`}>\n                <item.icon size={20} /><span>{item.label}</span>\n              </a>\n            );\n          })}\n        </nav>\n      </aside>\n\n      <div className=\"tp-template-container\">\n        <div className=\"tp-template-header\">\n          <nav className=\"tp-template-tabs\">\n            <button className=\"tp-tab active\">Templates</button>\n            <button className=\"tp-tab\">Responses</button>\n            <button className=\"tp-tab\">Public Library</button>\n            <button className=\"tp-tab\">Archive</button>\n          </nav>\n        </div>\n\n        <div className=\"tp-template-content\">\n          <section className=\"tp-creation-section\">\n            <div className=\"tp-section-header\">\n              <h2>Create your template from one of the options below.</h2>\n              <button className=\"tp-close-button\"><X size={20} /></button>\n            </div>\n\n            <div className=\"tp-creation-options\">\n              <div\n                className=\"tp-option-card\"\n                onClick={toggleStartFromScratchDialog}\n                style={{ cursor: 'pointer' }}\n                ref={startFromScratchRef}\n              >\n                <div className=\"tp-option-icon\"><Plus size={24} /></div>\n                <h3>Start from scratch</h3>\n                <p>Get started with a blank template.</p>\n              </div>\n              <div className=\"tp-option-card\">\n                <div className=\"tp-option-icon\"><FileText size={24} /></div>\n                <h3>Describe topic</h3>\n                <p>Enter a text prompt about your template.</p>\n              </div>\n              <div className=\"tp-option-card\">\n                <div className=\"tp-option-icon\"><Search size={24} /></div>\n                <h3>Find pre-made template</h3>\n                <p>Choose from over 100,000 editable templates.</p>\n              </div>\n            </div>\n          </section>\n\n          <section className=\"tp-templates-section\">\n            <div className=\"tp-templates-header\">\n              <h2>Templates <span className=\"tp-count\">(1 - {filteredTemplates.length} of {templates.length})</span></h2>\n\n              {/* Test button to switch user role - FOR TESTING ONLY */}\n              <button\n                onClick={() => {\n                  const newRole = currentUser?.user_role === 'inspector' ? 'admin' : 'inspector';\n                  setCurrentUser({...currentUser, user_role: newRole});\n                }}\n                style={{\n                  padding: '0.5rem 1rem',\n                  marginRight: '1rem',\n                  backgroundColor: currentUser?.user_role === 'inspector' ? '#ef4444' : '#10b981',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '0.5rem',\n                  cursor: 'pointer',\n                  fontSize: '0.875rem'\n                }}\n              >\n                Test as {currentUser?.user_role === 'inspector' ? 'Admin' : 'Inspector'}\n              </button>\n\n              {currentUser?.user_role !== 'inspector' && (\n                <div className=\"tp-create-dropdown\" ref={dropdownRef}>\n                  <button className=\"tp-create-button\" onClick={toggleCreateDropdown}>\n                    <Plus size={16} />\n                    Create\n                    <ChevronDown size={16} className={`tp-dropdown-icon ${showCreateDropdown ? 'open' : ''}`} />\n                  </button>\n                  {showCreateDropdown && (\n                    <div className=\"tp-dropdown-menu\">\n                      <a href=\"/create_templates\" className=\"tp-dropdown-item\">\n                        <FileText size={16} />\n                        Standard Template\n                      </a>\n                      <a href=\"/garment-template\" className=\"tp-dropdown-item\">\n                        <FileText size={16} />\n                        Garment Template\n                      </a>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {loading && <div className=\"tp-loading\">Loading templates...</div>}\n            {error && (\n              <div className=\"tp-error-message\">\n                {error}\n                {currentUser?.user_role === 'inspector' ? (\n                  <div style={{ marginTop: '1rem' }}>\n                    <p>Please visit the following pages to view your assigned templates:</p>\n                    <div style={{ display: 'flex', gap: '1rem', marginTop: '0.5rem' }}>\n                      <a href=\"/dashboard\" className=\"tp-create-button\" style={{ textDecoration: 'none' }}>\n                        Go to Dashboard\n                      </a>\n                      <a href=\"/schedule\" className=\"tp-create-button\" style={{ textDecoration: 'none' }}>\n                        Go to Schedule\n                      </a>\n                    </div>\n                  </div>\n                ) : (\n                  <>\n                    <p>Showing demo data for display purposes.</p>\n                    <details><summary>API Debug Info (Click to expand)</summary><pre>{JSON.stringify(debugInfo, null, 2)}</pre></details>\n                  </>\n                )}\n              </div>\n            )}\n\n            <div className=\"tp-search-controls\">\n              <div className=\"tp-search-field\">\n                <Search className=\"tp-search-icon\" size={20} />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search all templates\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <button className=\"tp-filter-button\"><Plus size={16} /> Add filter</button>\n            </div>\n\n            <div className=\"tp-templates-table\">\n              <table>\n                <thead>\n                  <tr>\n                    <th className=\"tp-checkbox-column\"><input type=\"checkbox\" /></th>\n                    <th>Template</th>\n                    <th>Last modified</th>\n                    <th>Access</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredTemplates.map((template) => (\n                    <tr key={template.id}>\n                      <td className=\"tp-checkbox-column\"><input type=\"checkbox\" /></td>\n                      <td>\n                        <div className=\"tp-template-cell\">\n                          <div className=\"tp-template-icon\">\n                            <FileText size={20} />\n                          </div>\n                          <span>\n                            {template.title}\n                            {template.isShared && (\n                              <span className=\"tp-shared-badge\" title=\"Shared with you\">\n                                (Shared)\n                              </span>\n                            )}\n                          </span>\n                        </div>\n                      </td>\n                      <td>{template.lastModified || \"Not available\"}</td>\n                      <td>\n                        <div className=\"tp-access-badge\">\n                          <User size={16} />\n                          <span>{template.access || \"No access specified\"}</span>\n                        </div>\n                      </td>\n                      <td>\n\n                        <div className=\"tp-action-buttons\">\n                          <button\n                            className=\"tp-start-inspection\"\n                            onClick={() => navigate(`/inspection?templateId=${template.id}`)}\n                          >\n                            Start inspection\n                          </button>\n                          <button className=\"tp-view-button\" onClick={() => navigate(`/template/${template.id}`)}>View</button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </section>\n        </div>\n      </div>\n\n      {/* Start from scratch dialog - rendered at the document level for better positioning */}\n      {showStartFromScratchDialog && currentUser?.user_role !== 'inspector' && (\n        <div\n          className=\"tp-start-scratch-dialog\"\n          ref={startFromScratchDialogRef}\n          style={{\n            position: 'fixed',\n            top: `${startFromScratchDialogPosition.top}px`,\n            left: `${startFromScratchDialogPosition.left}px`,\n            zIndex: 2000,\n            width: '250px',\n            background: 'white',\n            borderRadius: '12px',\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\n            border: '1px solid #e9ecef',\n            overflow: 'hidden',\n            animation: 'fadeInUp 0.3s forwards'\n          }}\n        >\n          <div style={{ padding: '8px 0' }}>\n            <a href=\"/create_templates\" className=\"tp-dropdown-item\" style={{ display: 'flex', alignItems: 'center', gap: '1rem', padding: '1rem 1.5rem' }}>\n              <FileText size={16} />\n              Standard Template\n            </a>\n            <a href=\"/garment-template\" className=\"tp-dropdown-item\" style={{ display: 'flex', alignItems: 'center', gap: '1rem', padding: '1rem 1.5rem' }}>\n              <FileText size={16} />\n              Garment Template\n            </a>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default TemplatePage","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/register.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/login.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/TemplateView.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Dashboard.tsx",["96"],"import React, { useState, useEffect } from 'react';\nimport '../assets/Dashboard.css';\nimport {\n  Home,\n  Search,\n  Bell,\n  FileText,\n  ClipboardCheck,\n  Calendar,\n  Play,\n  BookOpen,\n  Package,\n  AlertCircle,\n  Settings,\n  User,\n  ChevronRight,\n  LogOut\n} from 'lucide-react';\nimport ConnectionsPanel, { Connection } from './components/ConnectionsPanel';\nimport { fetchData } from '../utils/api';\n\ninterface Template {\n  id: number;\n  title: string;\n  lastModified?: string;\n  access?: string;\n  createdBy: string;\n  type?: string;\n  status?: string;\n  date?: string;\n}\n\ninterface Assignment {\n  id: number;\n  template: number;\n  template_title: string;\n  inspector: number;\n  inspector_name: string;\n  inspector_email: string;\n  assigned_by: number;\n  assigned_by_name: string;\n  assigned_by_email: string;\n  status: string;\n  status_display: string;\n  assigned_at: string;\n  started_at: string | null;\n  completed_at: string | null;\n  revoked_at: string | null;\n  due_date: string | null;\n  notes: string | null;\n}\n\nconst Dashboard: React.FC = () => {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [currentUser, setCurrentUser] = useState<any>(null);\n\n  // Get the logged-in user from localStorage\n  const loggedInUser = localStorage.getItem(\"username\");\n\n  // API endpoints to try (relative to the base URL in api.ts)\n  const endpointsToTry = [\n    \"users/dashboard/templates/\",\n    \"users/templates/\",\n    \"templates/\",\n  ];\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n\n    const animateOnScroll = () => {\n      const elements = document.querySelectorAll('.dashboard-animate-on-scroll');\n      elements.forEach((element) => {\n        const rect = element as HTMLElement;\n        const position = rect.getBoundingClientRect();\n        if (position.top < window.innerHeight * 0.9) {\n          rect.classList.add('dashboard-animate-in');\n        }\n      });\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    window.addEventListener('scroll', animateOnScroll);\n    animateOnScroll();\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      window.removeEventListener('scroll', animateOnScroll);\n    };\n  }, []);\n\n  // Check authentication status first\n  const checkAuthStatus = async (retryCount = 0): Promise<boolean> => {\n    try {\n      // Add a small delay to ensure session is fully established\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      const authData = await fetchData('users/auth-status/');\n      console.log('Auth status:', authData);\n\n      // If not authenticated and we haven't retried yet, try once more\n      if (!authData.authenticated && retryCount === 0) {\n        console.log('Auth check failed, retrying once...');\n        await new Promise(resolve => setTimeout(resolve, 500));\n        return checkAuthStatus(1);\n      }\n\n      return authData.authenticated === true;\n    } catch (error) {\n      console.error('Auth check error:', error);\n\n      // If there's an error and we haven't retried yet, try once more\n      if (retryCount === 0) {\n        console.log('Auth check error, retrying once...');\n        await new Promise(resolve => setTimeout(resolve, 500));\n        return checkAuthStatus(1);\n      }\n\n      return false;\n    }\n  };\n\n  // Fetch current user\n  useEffect(() => {\n    const fetchCurrentUser = async () => {\n      try {\n        const data = await fetchData(\"users/auth-status/\");\n        console.log(\"Auth status response:\", data);\n\n        // Extract user data from the response\n        if (data.authenticated && data.user) {\n          setCurrentUser(data.user);\n          console.log(\"Current user set:\", data.user);\n          console.log(\"User role:\", data.user.user_role);\n        } else {\n          console.warn(\"User not authenticated or user data missing\");\n          setCurrentUser(null);\n        }\n      } catch (error) {\n        console.error(\"Error fetching current user:\", error);\n        // Set a default user for demo purposes\n        setCurrentUser({\n          id: 1,\n          username: \"demouser\",\n          email: \"demo@example.com\",\n          user_role: \"admin\"\n        });\n      }\n    };\n\n    fetchCurrentUser();\n  }, []);\n\n  // Fetch templates from API\n  useEffect(() => {\n    const fetchTemplates = async () => {\n      setLoading(true);\n      setError(\"\");\n\n      // Check if user is authenticated first\n      const isAuthenticated = await checkAuthStatus();\n      if (!isAuthenticated) {\n        setError(\"User not authenticated. Please log in.\");\n        setLoading(false);\n        return;\n      }\n\n      // If we don't have current user info yet, wait\n      if (!currentUser) {\n        setLoading(false);\n        return;\n      }\n\n      // For inspectors, fetch assigned templates\n      if (currentUser.user_role === 'inspector') {\n        try {\n          console.log(\"Fetching assigned templates for inspector:\", currentUser.email);\n          const assignments = await fetchData(\"users/my-assignments/\");\n          console.log(\"Assignments data:\", assignments);\n\n          if (Array.isArray(assignments) && assignments.length > 0) {\n            // Convert assignments to template format for display\n            const formattedTemplates = assignments.map((assignment: Assignment) => ({\n              id: assignment.template,\n              title: assignment.template_title,\n              lastModified: assignment.assigned_at,\n              access: \"Assigned\",\n              createdBy: assignment.assigned_by_name,\n              type: \"Assigned Template\",\n              status: assignment.status_display || assignment.status,\n              date: assignment.assigned_at\n            }));\n\n            // Sort by assignment date (most recent first) and take only the 3 most recent\n            const sortedTemplates = [...formattedTemplates].sort((a, b) => {\n              const dateA = a.date ? new Date(a.date).getTime() : 0;\n              const dateB = b.date ? new Date(b.date).getTime() : 0;\n              return dateB - dateA;\n            }).slice(0, 3);\n\n            console.log(\"Formatted templates for inspector:\", sortedTemplates);\n            setTemplates(sortedTemplates);\n          } else {\n            console.log(\"No assignments found for inspector\");\n            setTemplates([]);\n          }\n          setLoading(false);\n          return;\n        } catch (err) {\n          console.error(\"Error fetching assigned templates:\", err);\n          setError(\"Failed to fetch assigned templates. Please try again.\");\n          setLoading(false);\n          return;\n        }\n      } else {\n        // For admin users, fetch created templates\n        for (const endpoint of endpointsToTry) {\n          try {\n            console.log(`Trying endpoint: ${endpoint}`);\n\n            const data = await fetchData(endpoint);\n            console.log(\"Logged in user:\", loggedInUser);\n            console.log(\"Full response data:\", data);\n            console.log(\"Template creators:\", data.map((t: Template) => t.createdBy || 'Unknown'));\n\n            // Filter templates by the logged-in user\n            const userTemplates = data.filter((template: Template) => template.createdBy === loggedInUser);\n\n            // Add type and status for display in the dashboard\n            const formattedTemplates = userTemplates.map((template: Template) => ({\n              ...template,\n              type: \"Template\",\n              status: \"Completed\",\n              date: template.lastModified || new Date().toISOString().split('T')[0]\n            }));\n\n            // Sort templates by date (most recent first) and take only the 3 most recent\n            const sortedTemplates = [...formattedTemplates].sort((a, b) => {\n              const dateA = a.date ? new Date(a.date).getTime() : 0;\n              const dateB = b.date ? new Date(b.date).getTime() : 0;\n              return dateB - dateA;\n            }).slice(0, 3);\n\n            setTemplates(sortedTemplates);\n            setLoading(false);\n            return;\n\n          } catch (err) {\n            console.error(\"Error fetching from endpoint:\", endpoint, err);\n          }\n        }\n      }\n\n      // If we couldn't fetch from any endpoint, use demo data (only 3 most recent)\n      setError(\"Could not connect to any templates API endpoint\");\n\n      // Demo data with 3 recent templates\n      const demoTemplates = [\n        {\n          id: 1,\n          title: \"Safety Inspection Form (Demo)\",\n          lastModified: \"2024-03-01\",\n          access: \"All users\",\n          createdBy: \"demoUser\",\n          type: \"Template\",\n          status: \"Completed\",\n          date: \"2024-03-01\"\n        },\n        {\n          id: 2,\n          title: \"Weekly Equipment Check (Demo)\",\n          lastModified: \"2024-02-28\",\n          access: \"Team managers\",\n          createdBy: \"demoUser\",\n          type: \"Template\",\n          status: \"In Progress\",\n          date: \"2024-02-28\"\n        },\n        {\n          id: 3,\n          title: \"Monthly Fire Safety Audit (Demo)\",\n          lastModified: \"2024-02-27\",\n          access: \"Safety officers\",\n          createdBy: \"demoUser\",\n          type: \"Template\",\n          status: \"Completed\",\n          date: \"2024-02-27\"\n        },\n      ];\n\n      // Sort by date (most recent first)\n      const sortedDemoTemplates = [...demoTemplates].sort((a, b) => {\n        const dateA = a.date ? new Date(a.date).getTime() : 0;\n        const dateB = b.date ? new Date(b.date).getTime() : 0;\n        return dateB - dateA;\n      });\n\n      setTemplates(sortedDemoTemplates);\n      setLoading(false);\n    };\n\n    fetchTemplates();\n  }, [loggedInUser, currentUser]);\n\n  const [connections, setConnections] = useState<Connection[]>([{\n    id: '1', name: 'Grace Miller', email: 'grace.miller@example.com', initials: 'GM', status: 'active'\n  }, {\n    id: '2', name: 'John Martinez', email: 'john.martinez@example.com', initials: 'JM', status: 'active'\n  }, {\n    id: '3', name: 'Sarah Johnson', email: 'sarah.johnson@example.com', initials: 'SJ', status: 'active'\n  }, {\n    id: '4', name: 'Michael Brown', email: 'michael.brown@example.com', initials: 'MB', status: 'active'\n  }, {\n    id: '5', name: 'Emily Davis', email: 'emily.davis@example.com', initials: 'ED', status: 'active'\n  }]);\n\n  const handleAddConnection = (email: string) => {\n    const name = email.split('@')[0].split('.').map(part => part.charAt(0).toUpperCase() + part.slice(1)).join(' ');\n    const initials = name.split(' ').map(part => part.charAt(0)).join('').toUpperCase();\n    const newConnection: Connection = {\n      id: Date.now().toString(), name, email, initials, status: 'pending'\n    };\n    setConnections([...connections, newConnection]);\n  };\n\n  const handleRemoveConnection = (id: string) => {\n    setConnections(connections.filter(connection => connection.id !== id));\n  };\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const handleLogout = () => {\n    localStorage.removeItem('authToken');\n    window.location.href = '/login';\n  };\n\n  const toggleDropdown = () => setIsDropdownOpen(!isDropdownOpen);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutsideSettings = (event: MouseEvent) => {\n      const target = event.target as Node;\n      const settingsButton = document.querySelector('.dashboard-nav-button');\n      const dropdownMenu = document.querySelector('.dropdown-menu');\n\n      if (\n        isDropdownOpen &&\n        settingsButton &&\n        dropdownMenu &&\n        !settingsButton.contains(target) &&\n        !dropdownMenu.contains(target)\n      ) {\n        setIsDropdownOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutsideSettings);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutsideSettings);\n    };\n  }, [isDropdownOpen]);\n\n  const menuItems = [\n    { icon: Home, label: 'Home', href: '/dashboard' },\n    { icon: Search, label: 'Search', href: '/search' },\n    { icon: Bell, label: 'Notifications', href: '/notifications' },\n    { icon: FileText, label: 'Templates', href: '/templates' },\n    { icon: Calendar, label: 'Schedule', href: '/schedule' },\n    { icon: ClipboardCheck, label: 'Inspections', href: '/inspection' },\n    { icon: Play, label: 'Actions', href: '/actions' },\n    { icon: BookOpen, label: 'Training', href: '/training' },\n    { icon: Package, label: 'Assets', href: '/assets' },\n    { icon: AlertCircle, label: 'Issues', href: '/issues' },\n  ];\n\n  const summaryCards = [\n    { icon: FileText, count: templates.length.toString(), label: 'Templates Created' },\n    { icon: ClipboardCheck, count: '18/25', label: 'Inspections', sublabel: 'Completed/Total' },\n    { icon: AlertCircle, count: '3', label: 'Open Issues' }\n  ];\n\n  // We'll use the templates fetched from the API instead of hardcoded data\n\n  return (\n    <div className=\"dashboard-container\">\n      <nav className={`dashboard-navbar ${isScrolled ? 'scrolled' : ''}`}>\n        <div className=\"dashboard-navbar-brand\">STREAMLINEER</div>\n        <div className=\"dashboard-navbar-actions\">\n          <button className=\"dashboard-nav-button\">\n            <User className=\"dashboard-nav-icon\" />\n          </button>\n          <div className=\"dropdown-container\">\n            <button\n              className=\"dashboard-nav-button\"\n              onClick={toggleDropdown}\n              style={{\n                position: 'relative',\n                backgroundColor: isDropdownOpen ? 'rgba(72, 149, 239, 0.1)' : 'transparent'\n              }}\n              title=\"Settings\"\n            >\n              <Settings className=\"dashboard-nav-icon\" />\n            </button>\n            {isDropdownOpen && (\n              <div className=\"dropdown-menu\">\n                <button\n                  className=\"dropdown-item logout-button\"\n                  onClick={handleLogout}\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '0.75rem',\n                    padding: '0.75rem 1.5rem',\n                    background: 'linear-gradient(135deg, #ff4b4b 0%, #ff6b6b 100%)',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: 'var(--border-radius)',\n                    fontSize: '0.95rem',\n                    fontWeight: '600',\n                    cursor: 'pointer',\n                    transition: 'var(--transition)',\n                    margin: '0.5rem 1rem',\n                    boxShadow: 'var(--shadow-sm)',\n                    width: 'calc(100% - 2rem)'\n                  }}\n                >\n                  <LogOut size={18} />\n                  <span>Logout</span>\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </nav>\n\n      <aside className=\"dashboard-sidebar\">\n        <nav className=\"dashboard-sidebar-nav\">\n          {menuItems.map((item, index) => {\n            // Make Inspections link inactive for inspector users\n            const isInspectionsLink = item.label === 'Inspections';\n            const isInspectorUser = currentUser?.user_role === 'inspector';\n            const shouldDisableLink = isInspectionsLink && isInspectorUser;\n\n            return shouldDisableLink ? (\n              <span key={index} className=\"dashboard-nav-link dashboard-nav-link-disabled\">\n                <item.icon className=\"dashboard-nav-icon\" />\n                <span>{item.label}</span>\n              </span>\n            ) : (\n              <a key={index} href={item.href} className=\"dashboard-nav-link\">\n                <item.icon className=\"dashboard-nav-icon\" />\n                <span>{item.label}</span>\n              </a>\n            );\n          })}\n        </nav>\n      </aside>\n\n      <main className=\"dashboard-main-content\">\n        <div className=\"dashboard-header-section\">\n          <h1 className=\"dashboard-page-title\">Dashboard Overview</h1>\n          <div className=\"dashboard-user-tags\">\n            <ConnectionsPanel\n              connections={connections}\n              onAddConnection={handleAddConnection}\n              onRemoveConnection={handleRemoveConnection}\n              maxDisplayed={3}\n            />\n          </div>\n        </div>\n\n        <div className=\"dashboard-summary-cards\">\n          {summaryCards.map((card, index) => (\n            <div\n              key={index}\n              className=\"dashboard-summary-card dashboard-animate-on-scroll\"\n              style={{ animationDelay: `${index * 0.15}s` }}\n            >\n              <div className=\"dashboard-card-content\">\n                <div className=\"dashboard-card-icon\">\n                  <card.icon className=\"dashboard-icon\" />\n                </div>\n                <div className=\"dashboard-card-info\">\n                  <h3 className=\"dashboard-card-count\">{card.count}</h3>\n                  <p className=\"dashboard-card-label\">{card.label}</p>\n                  {card.sublabel && <span className=\"dashboard-card-sublabel\">{card.sublabel}</span>}\n                </div>\n              </div>\n              <ChevronRight className=\"dashboard-card-arrow\" />\n            </div>\n          ))}\n        </div>\n\n        <section className=\"dashboard-recent-activity dashboard-animate-on-scroll\">\n          <h2 className=\"dashboard-section-title\">\n            {currentUser?.user_role === 'inspector' ? 'Recent Assigned Templates' : 'Recent Templates'}\n          </h2>\n\n          {loading && (\n            <div className=\"dashboard-loading\">Loading recent templates...</div>\n          )}\n\n          {error && (\n            <div className=\"dashboard-error-message\">\n              {error}\n              <p>Showing demo data for display purposes.</p>\n            </div>\n          )}\n\n          <div className=\"dashboard-activity-list\">\n            {templates.length === 0 && !loading ? (\n              <div className=\"dashboard-no-activity\">\n                <p>\n                  {currentUser?.user_role === 'inspector'\n                    ? 'No assigned templates found. Contact your administrator to get templates assigned to you.'\n                    : 'No recent templates found. Create a template to get started.'\n                  }\n                </p>\n              </div>\n            ) : (\n              templates.map((template) => (\n                <div key={template.id} className=\"dashboard-activity-item\">\n                  <div className=\"dashboard-activity-info\">\n                    <h3 className=\"dashboard-activity-title\">{template.title}</h3>\n                    <div className=\"dashboard-activity-meta\">\n                      <span className=\"dashboard-meta-type\">{template.type}</span>\n                      <span className=\"dashboard-meta-date\">{template.date}</span>\n                    </div>\n                  </div>\n                  <span className={`dashboard-status-badge ${template.status?.toLowerCase() || 'completed'}`}>\n                    {template.status || 'Completed'}\n                  </span>\n                </div>\n              ))\n            )}\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/home.tsx",["97","98","99","100"],"\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect, useRef } from \"react\"\nimport {\n  ChevronDown,\n  Menu,\n  X,\n  ArrowRight,\n  Check,\n  Zap,\n  Shield,\n  BarChart3,\n  Clock,\n  FileCheck,\n  Smartphone,\n  PenTool,\n  Users,\n  Building,\n  Car,\n  Clipboard,\n  CheckCircle2,\n  AlertTriangle,\n  Wrench,\n  ArrowUpRight,\n  MousePointer,\n  ChevronRight,\n  Star,\n  Award,\n  Sparkles,\n} from \"lucide-react\"\nimport \"../pages/Home2.css\"\n\n// Import Streamlineer QC images\nimport Streamlineer_QC_1 from \"../assets/img/Streamlineer_QC_1.png\"\nimport Streamlineer_QC_2 from \"../assets/img/Streamlineer_QC_2.png\"\nimport Streamlineer_QC_3 from \"../assets/img/Streamlineer_QC_3.png\"\nimport Streamlineer_QC_4 from \"../assets/img/Streamlineer_QC_4.png\"\nimport Streamlineer_QC_5 from \"../assets/img/Streamlineer_QC_5.png\"\nimport DG from \"../assets/img/DG.png\"\nimport TM from \"../assets/img/TM.png\"\nimport RP from \"../assets/img/RP.png\"\nimport NX from \"../assets/img/NX.png\"\nimport HX from \"../assets/img/HX.png\"\nimport AZ from \"../assets/img/AZ.png\"\n\n// Custom Image component to replace Next.js Image\nconst Image = ({\n  src,\n  alt,\n  width,\n  height,\n  className,\n}: {\n  src: string\n  alt: string\n  width: number\n  height: number\n  className?: string\n}) => {\n  return (\n    <img\n      src={src || \"/placeholder.svg\"}\n      alt={alt}\n      width={width}\n      height={height}\n      className={className}\n      style={{ maxWidth: \"100%\", height: \"auto\" }}\n    />\n  )\n}\n\nconst Home2: React.FC = () => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\n  const [activeTab, setActiveTab] = useState(0)\n  const [activeFaq, setActiveFaq] = useState<number | null>(null)\n  const [currentBg, setCurrentBg] = useState(0)\n  const [isScrolled, setIsScrolled] = useState(false)\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })\n  const cursorRef = useRef<HTMLDivElement>(null)\n\n  // Background images for header\n  const bgImages = [\n    Streamlineer_QC_1,\n    Streamlineer_QC_2,\n    Streamlineer_QC_3,\n    Streamlineer_QC_4,\n    Streamlineer_QC_5,\n  ]\n\n  // Tabs for features section\n  const tabs = [\n    {\n      title: \"Template Builder\",\n      icon: <PenTool size={20} />,\n      contentTitle: \"Intuitive Drag-and-Drop Template Builder\",\n      description:\n        \"Create any checklist or form you need. Utilize diverse question types (text, number, multiple-choice, signature, photo, GPS), add conditional logic, scoring, mandatory fields, and instructional media.\",\n      image: DG,\n    },\n    {\n      title: \"Mobile Inspections\",\n      icon: <Smartphone size={20} />,\n      contentTitle: \"Powerful Mobile Inspection App\",\n      description:\n        \"The easy-to-use app for iOS & Android ensures seamless inspections. Works flawlessly offline, allows rich data capture (annotated photos, notes), and provides access to relevant templates anytime.\",\n      image: TM,\n    },\n    {\n      title: \"Instant Reporting\",\n      icon: <FileCheck size={20} />,\n      contentTitle: \"Automated Inspection Reporting\",\n      description:\n        \"Forget manual report writing. Generate customizable PDF or web reports instantly after each inspection. Visualize data, track completion rates, and identify trends on dashboards.\",\n      image: RP,\n    },\n    {\n      title: \"Findings & Actions\",\n      icon: <AlertTriangle size={20} />,\n      contentTitle: \"Integrated Findings & Action Tracking\",\n      description:\n        \"Flag issues or non-conformances directly within an inspection. Assign corrective actions with deadlines and track their status to ensure prompt resolution, all linked back to the original inspection.\",\n      image: NX,\n    },\n  ]\n\n  // Stats for metrics section\n  const stats = [\n    { value: \"90%\", label: \"Faster Template Creation & Updates\" },\n    { value: \"50%\", label: \"Reduction in Inspection Time\" },\n    { value: \"100%\", label: \"Data Consistency Across Inspections\" },\n    { value: \"Instant\", label: \"Access to Completed Reports\" },\n  ]\n\n  // Industries for use cases section\n  const industries = [\n    { icon: <Shield size={24} />, title: \"Safety Walkthroughs & Audits\" },\n    { icon: <CheckCircle2 size={24} />, title: \"Quality Assurance Checklists\" },\n    { icon: <Wrench size={24} />, title: \"Preventative Maintenance Forms\" },\n    { icon: <Car size={24} />, title: \"Vehicle & Equipment Inspections\" },\n    { icon: <Building size={24} />, title: \"Facility & Site Inspections\" },\n    { icon: <Clipboard size={24} />, title: \"Regulatory Compliance Audits\" },\n    { icon: <Users size={24} />, title: \"Training Assessments & Sign-offs\" },\n    { icon: <BarChart3 size={24} />, title: \"Inventory & Stock Checks\" },\n  ]\n\n\n\n  // FAQs\n  const faqs = [\n    {\n      question: \"What types of questions/fields can I add to templates?\",\n      answer:\n        \"StreamLineer supports a wide range of field types including text, number, multiple choice, checkboxes, dropdown menus, date/time pickers, photo capture with annotation, signature fields, GPS location, barcode/QR scanning, and scoring fields. You can also add instructional text, images, or videos to guide inspectors.\",\n    },\n    {\n      question: \"How are templates shared and updated for field users?\",\n      answer:\n        \"Templates are centrally managed in the cloud. When you publish a new template or update an existing one, it's automatically synced to all users' mobile devices the next time they connect to the internet. Version control ensures everyone is always using the latest template version.\",\n    },\n    {\n      question: \"Does the mobile app work without an internet connection?\",\n      answer:\n        \"Yes, the StreamLineer mobile app is designed to work completely offline. Users can download templates when connected, conduct inspections without internet access, and all data is securely stored on the device until they reconnect, at which point it automatically syncs to the cloud.\",\n    },\n    {\n      question: \"Can I generate different report formats from inspections?\",\n      answer:\n        \"Absolutely. Fashcognitive offers customizable PDF reports with your branding, web-based interactive reports, and raw data exports in CSV or Excel format. You can create multiple report templates for different audiences or purposes from the same inspection data.\",\n    },\n    {\n      question: \"How are findings or failed items handled during an inspection?\",\n      answer:\n        \"When an inspector identifies an issue during an inspection, they can flag it as a finding, add photos and notes, assign a severity level, and create an action item directly from that finding. These actions can be assigned to team members with due dates and tracked to completion.\",\n    },\n    {\n      question: \"Is there a limit to the number of templates or inspections?\",\n      answer:\n        \"Our Professional and Enterprise plans include unlimited templates and inspections. The Starter plan includes up to 10 templates and 100 inspections per month. All plans can be upgraded as your needs grow.\",\n    },\n  ]\n\n  // Workflow steps with enhanced content\n  const workflowSteps = [\n    {\n      number: 1,\n      icon: <PenTool size={32} />,\n      title: \"Build\",\n      description:\n        \"Craft intelligent inspection templates effortlessly using our powerful, user-friendly builder. Add various field types and logic.\",\n      color: \"#4895ef\",\n      highlights: [\"Drag-and-drop interface\", \"Conditional logic\", \"Multiple question types\", \"Template versioning\"],\n    },\n    {\n      number: 2,\n      icon: <Smartphone size={32} />,\n      title: \"Inspect\",\n      description:\n        \"Conduct thorough inspections anywhere using the intuitive mobile app – even offline. Capture rich data quickly and easily.\",\n      color: \"#3a7bc8\",\n      highlights: [\"Works offline\", \"Photo annotations\", \"GPS location tracking\", \"Digital signatures\"],\n    },\n    {\n      number: 3,\n      icon: <FileCheck size={32} />,\n      title: \"Report\",\n      description:\n        \"Access detailed inspection reports instantly upon completion. Analyze performance with real-time dashboards.\",\n      color: \"#4cc9f0\",\n      highlights: [\"Instant PDF generation\", \"Custom report templates\", \"Data visualization\", \"Export options\"],\n    },\n    {\n      number: 4,\n      icon: <Zap size={32} />,\n      title: \"Act\",\n      description:\n        \"Identify findings during inspections and assign corrective actions directly within the app for seamless follow-up.\",\n      color: \"#3f37c9\",\n      highlights: [\"Action assignment\", \"Due date tracking\", \"Notification system\", \"Completion verification\"],\n    },\n  ]\n\n  // Background image rotation effect\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentBg((prev) => (prev + 1) % bgImages.length)\n    }, 3000)\n\n    return () => clearInterval(interval)\n  }, [bgImages.length])\n\n  // Scroll effect for header\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 50) {\n        setIsScrolled(true)\n      } else {\n        setIsScrolled(false)\n      }\n    }\n\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => window.removeEventListener(\"scroll\", handleScroll)\n  }, [])\n\n  // Mouse move effect\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      const { clientX, clientY } = e\n      setMousePosition({ x: clientX, y: clientY })\n\n      // Update custom cursor position\n      if (cursorRef.current) {\n        cursorRef.current.style.left = `${clientX}px`\n        cursorRef.current.style.top = `${clientY}px`\n      }\n    }\n\n    window.addEventListener(\"mousemove\", handleMouseMove)\n    return () => window.removeEventListener(\"mousemove\", handleMouseMove)\n  }, [])\n\n  // Intersection Observer for animations\n  const useOnScreen = (options = {}) => {\n    const ref = useRef<HTMLDivElement>(null)\n    const [isVisible, setIsVisible] = useState(false)\n\n    useEffect(() => {\n      const observer = new IntersectionObserver(([entry]) => {\n        setIsVisible(entry.isIntersecting)\n      }, options)\n\n      if (ref.current) {\n        observer.observe(ref.current)\n      }\n\n      return () => {\n        if (ref.current) {\n          observer.unobserve(ref.current)\n        }\n      }\n    }, [ref, options])\n\n    return [ref, isVisible] as const\n  }\n\n  // Refs for scroll animations\n  const [heroRef, heroVisible] = useOnScreen({ threshold: 0.1 })\n  const [workflowRef, workflowVisible] = useOnScreen({ threshold: 0.1 })\n  const [featuresRef, featuresVisible] = useOnScreen({ threshold: 0.1 })\n  const [statsRef, statsVisible] = useOnScreen({ threshold: 0.1 })\n  const [templateRef, templateVisible] = useOnScreen({ threshold: 0.1 })\n  const [mobileRef, mobileVisible] = useOnScreen({ threshold: 0.1 })\n  const [industriesRef, industriesVisible] = useOnScreen({ threshold: 0.1 })\n  const [ctaRef, ctaVisible] = useOnScreen({ threshold: 0.1 })\n\n  // Custom cursor state management\n  const [cursorVariant, setCursorVariant] = useState(\"default\")\n\n  // Function to enter button cursor state\n  const enterButton = () => setCursorVariant(\"button\")\n  // Function to enter link cursor state\n  const enterLink = () => setCursorVariant(\"link\")\n  // Function to reset cursor state\n  const leaveHover = () => setCursorVariant(\"default\")\n\n  // Apply 3D tilt effect to an element\n  const applyTiltEffect = (element: HTMLElement, mouseX: number, mouseY: number) => {\n    if (!element) return\n\n    const rect = element.getBoundingClientRect()\n    const centerX = rect.left + rect.width / 2\n    const centerY = rect.top + rect.height / 2\n\n    const rotateY = ((mouseX - centerX) / (window.innerWidth / 2)) * 5\n    const rotateX = ((centerY - mouseY) / (window.innerHeight / 2)) * 5\n\n    element.style.transform = `perspective(1000px) rotateY(${rotateY}deg) rotateX(${rotateX}deg)`\n  }\n\n  // Apply tilt effect to hero image\n  useEffect(() => {\n    const heroImage = document.querySelector(\".Home2-hero-image-container\") as HTMLElement\n    const templateImage = document.querySelector(\".Home2-template-img-container\") as HTMLElement\n    const mobileImage = document.querySelector(\".Home2-mobile-img-container\") as HTMLElement\n\n    if (heroImage && heroVisible) {\n      applyTiltEffect(heroImage, mousePosition.x, mousePosition.y)\n    }\n\n    if (templateImage && templateVisible) {\n      applyTiltEffect(templateImage, mousePosition.x, mousePosition.y)\n    }\n\n    if (mobileImage && mobileVisible) {\n      applyTiltEffect(mobileImage, mousePosition.x, mousePosition.y)\n    }\n  }, [mousePosition, heroVisible, templateVisible, mobileVisible])\n\n  // Initialize floating elements animation\n  useEffect(() => {\n    const floatingElements = document.querySelectorAll(\".Home2-floating-element\")\n\n    floatingElements.forEach((element, index) => {\n      const el = element as HTMLElement\n      const duration = 6 + index * 2\n      const delay = index * 0.5\n\n      // Set initial animation properties\n      el.style.animation = `float ${duration}s ease-in-out ${delay}s infinite alternate`\n    })\n  }, [])\n\n  // Initialize scroll animations\n  useEffect(() => {\n    const animateOnScroll = () => {\n      const elements = document.querySelectorAll(\".Home2-animate-on-scroll\")\n\n      elements.forEach((element) => {\n        const el = element as HTMLElement\n        const rect = el.getBoundingClientRect()\n\n        if (rect.top < window.innerHeight * 0.8) {\n          el.classList.add(\"Home2-animate-in\")\n        }\n      })\n    }\n\n    window.addEventListener(\"scroll\", animateOnScroll)\n    animateOnScroll() // Run once on mount\n\n    return () => window.removeEventListener(\"scroll\", animateOnScroll)\n  }, [])\n\n  // Initialize progress indicators for workflow steps\n  useEffect(() => {\n    if (workflowVisible) {\n      const progressIndicators = document.querySelectorAll(\".Home2-step-progress-indicator\")\n\n      progressIndicators.forEach((indicator, index) => {\n        const el = indicator as HTMLElement\n        setTimeout(\n          () => {\n            el.style.width = \"100%\"\n          },\n          300 + index * 200,\n        )\n      })\n    }\n  }, [workflowVisible])\n\n  // FAQ animation\n  const toggleFaq = (index: number) => {\n    // Toggle the active FAQ without hiding any questions\n    if (activeFaq === index) {\n      setActiveFaq(null)\n    } else {\n      setActiveFaq(index)\n    }\n\n    // Ensure all FAQ items remain visible after a short delay\n    setTimeout(() => {\n      const faqItems = document.querySelectorAll('.Home2-faq-item')\n      faqItems.forEach(item => {\n        const element = item as HTMLElement\n        element.style.opacity = '1'\n        element.style.visibility = 'visible'\n        element.style.display = 'block'\n      })\n\n      const faqQuestions = document.querySelectorAll('.Home2-faq-question')\n      faqQuestions.forEach(question => {\n        const element = question as HTMLElement\n        element.style.opacity = '1'\n        element.style.visibility = 'visible'\n      })\n    }, 50)\n  }\n\n  return (\n    <div className=\"Home2-streamlineer-container\">\n      {/* Custom cursor */}\n      <div ref={cursorRef} className={`Home2-custom-cursor ${cursorVariant === \"button\" ? \"Home2-button\" : cursorVariant === \"link\" ? \"Home2-link\" : \"\"}`}>\n        <MousePointer size={12} />\n      </div>\n\n      {/* Header with animated background */}\n      <header className={`Home2-header ${isScrolled ? \"Home2-scrolled\" : \"\"}`}>\n        <div className=\"Home2-header-content\">\n          <div className=\"Home2-logo\">\n            <span className=\"Home2-logo-text\">STREAMLINEER</span>\n          </div>\n\n          <button\n            className=\"Home2-menu-toggle\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            aria-label={isMenuOpen ? \"Close menu\" : \"Open menu\"}\n            onMouseEnter={enterButton}\n            onMouseLeave={leaveHover}\n          >\n            {isMenuOpen ? <X size={24} /> : <Menu size={24} />}\n          </button>\n\n          <nav className={`Home2-main-nav ${isMenuOpen ? \"Home2-open\" : \"\"}`}>\n            <ul className=\"Home2-nav-list\">\n              <li className=\"Home2-nav-item\">\n                <a href=\"#features\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                  Features <ChevronDown size={16} />\n                </a>\n                <div className=\"Home2-dropdown-menu\">\n                  <a href=\"#template-builder\" className=\"Home2-dropdown-item\">\n                    Template Builder\n                  </a>\n                  <a href=\"#mobile-app\" className=\"Home2-dropdown-item\">\n                    Mobile App\n                  </a>\n                  <a href=\"#reporting\" className=\"Home2-dropdown-item\">\n                    Reporting\n                  </a>\n                  <a href=\"#actions\" className=\"Home2-dropdown-item\">\n                    Action Tracking\n                  </a>\n                </div>\n              </li>\n              <li className=\"Home2-nav-item\">\n                <a href=\"#templates\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                  Templates\n                </a>\n              </li>\n              <li className=\"Home2-nav-item\">\n                <a href=\"#pricing\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                  Pricing\n                </a>\n              </li>\n              <li className=\"Home2-nav-item\">\n                <a href=\"#resources\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                  Resources <ChevronDown size={16} />\n                </a>\n                <div className=\"Home2-dropdown-menu\">\n                  <a href=\"#blog\" className=\"Home2-dropdown-item\">\n                    Blog\n                  </a>\n                  <a href=\"#guides\" className=\"Home2-dropdown-item\">\n                    Guides\n                  </a>\n                  <a href=\"#support\" className=\"Home2-dropdown-item\">\n                    Support\n                  </a>\n                </div>\n              </li>\n              <li className=\"Home2-nav-item\">\n                <a href=\"#contact\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                  Contact Us\n                </a>\n              </li>\n            </ul>\n\n            <div className=\"Home2-nav-buttons\">\n              <a href=\"login\" className=\"Home2-btn Home2-btn-outline\" onMouseEnter={enterButton} onMouseLeave={leaveHover}>\n                Log In\n              </a>\n              <a href=\"register\" className=\"Home2-btn Home2-btn-primary\" onMouseEnter={enterButton} onMouseLeave={leaveHover}>\n                Start Free\n              </a>\n            </div>\n          </nav>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"Home2-hero-section\" ref={heroRef}>\n        <div className=\"Home2-container\">\n          <div className=\"Home2-hero-flex\">\n            <div className={`Home2-hero-content ${heroVisible ? \"Home2-animate-in\" : \"\"}`}>\n              <h1 className=\"Home2-hero-title\">\n                Build Smarter\n                <br />\n                Checklists<span className=\"Home2-accent-dot\">.</span>\n                <br />\n                Conduct Flawless\n                <br />\n                Inspections<span className=\"Home2-accent-dot\">.</span>\n              </h1>\n              <p className=\"Home2-hero-subtitle\">\n                The intuitive platform for rapidly creating powerful, dynamic inspection templates and empowering your\n                teams to execute thorough checks anywhere, capture critical data accurately, and generate instant\n                reports.\n              </p>\n              <div className=\"Home2-hero-buttons\">\n                <a\n                  href=\"register\"\n                  className=\"Home2-btn Home2-btn-primary Home2-btn-lg Home2-btn-hover-effect\"\n                  onMouseEnter={enterButton}\n                  onMouseLeave={leaveHover}\n                >\n                  Start Building Templates Free\n                </a>\n                <a\n                  href=\"#demo\"\n                  className=\"Home2-btn Home2-btn-outline Home2-btn-lg Home2-btn-hover-effect\"\n                  onMouseEnter={enterButton}\n                  onMouseLeave={leaveHover}\n                >\n                  See Inspection Features\n                </a>\n              </div>\n            </div>\n\n            <div className={`Home2-hero-image-container ${heroVisible ? \"Home2-animate-in\" : \"\"}`}>\n              <div className=\"Home2-hero-image-slider\">\n                {bgImages.map((img, index) => (\n                  <div key={index} className={`Home2-hero-slide ${currentBg === index ? \"Home2-active\" : \"\"}`}>\n                    <Image\n                      src={img || \"/placeholder.svg\"}\n                      alt={`StreamLineer platform ${index + 1}`}\n                      width={600}\n                      height={600}\n                      className=\"Home2-hero-img\"\n                    />\n                  </div>\n                ))}\n              </div>\n\n              {/* Image navigation dots */}\n              <div className=\"Home2-image-nav-dots\">\n                {bgImages.map((_, index) => (\n                  <button\n                    key={index}\n                    className={`Home2-nav-dot ${currentBg === index ? \"Home2-active\" : \"\"}`}\n                    onClick={() => setCurrentBg(index)}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Fixed wave position to not hide buttons */}\n        <div className=\"Home2-hero-wave-container\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\" className=\"Home2-hero-wave\">\n            <path\n              fill=\"#ffffff\"\n              fillOpacity=\"1\"\n              d=\"M0,96L48,112C96,128,192,160,288,160C384,160,480,128,576,122.7C672,117,768,139,864,149.3C960,160,1056,160,1152,138.7C1248,117,1344,75,1392,53.3L1440,32L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\n            ></path>\n          </svg>\n        </div>\n      </section>\n\n      {/* Enhanced Workflow section */}\n      <section className=\"Home2-workflow-section\" ref={workflowRef}>\n        <div className=\"Home2-container\">\n          <div className={`Home2-workflow-header Home2-animate-on-scroll ${workflowVisible ? \"Home2-animate-in\" : \"\"}`}>\n            <h2 className=\"Home2-section-title\">Your Inspection Workflow, Simplified</h2>\n            <p className=\"Home2-section-subtitle\">\n              Our streamlined process makes inspections efficient from creation to action\n            </p>\n          </div>\n\n          <div className=\"Home2-workflow-steps-container\">\n            {workflowSteps.map((step, index) => (\n              <div\n                key={index}\n                className={`Home2-workflow-step-card Home2-animate-on-scroll`}\n                style={{\n                  borderTop: `4px solid ${step.color}`,\n                  animationDelay: `${index * 0.15}s`,\n                }}\n              >\n                <div className=\"Home2-step-number-container\">\n                  <div className=\"Home2-step-number\" style={{ backgroundColor: step.color }}>\n                    {step.number}\n                  </div>\n                </div>\n\n                <div className=\"Home2-step-icon-container\" style={{ color: step.color }}>\n                  {step.icon}\n                </div>\n\n                <h3 className=\"Home2-step-title\">{step.title}</h3>\n\n                <p className=\"Home2-step-description\">{step.description}</p>\n\n                <ul className=\"Home2-step-highlights\">\n                  {step.highlights.map((highlight, i) => (\n                    <li\n                      key={i}\n                      className=\"Home2-highlight-item Home2-animate-on-scroll\"\n                      style={{ animationDelay: `${0.6 + i * 0.1}s` }}\n                    >\n                      <ChevronRight size={14} style={{ color: step.color }} />\n                      <span>{highlight}</span>\n                    </li>\n                  ))}\n                </ul>\n\n                <div className=\"Home2-step-progress-indicator\" style={{ backgroundColor: step.color }} />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Floating elements for visual interest */}\n        <div className=\"Home2-floating-element Home2-element-1\">\n          <Sparkles size={32} />\n        </div>\n\n        <div className=\"Home2-floating-element Home2-element-2\">\n          <Star size={24} />\n        </div>\n\n        <div className=\"Home2-floating-element Home2-element-3\">\n          <Award size={28} />\n        </div>\n      </section>\n\n      {/* Problem/Solution Section */}\n      <section className=\"Home2-problems-section\">\n        <div className=\"Home2-container\">\n          <h2 className=\"Home2-section-title\">Escape Inspection Frustrations</h2>\n\n          <div className=\"Home2-problems-grid\">\n            {[0, 1, 2].map((index) => (\n              <div key={index} className=\"Home2-problem-card Home2-animate-on-scroll\" style={{ animationDelay: `${index * 0.2}s` }}>\n                <div className=\"Home2-problem-icon\">\n                  {index === 0 ? (\n                    <Clipboard size={32} />\n                  ) : index === 1 ? (\n                    <AlertTriangle size={32} />\n                  ) : (\n                    <Clock size={32} />\n                  )}\n                </div>\n                <h3 className=\"Home2-problem-title\">\n                  {index === 0\n                    ? \"Static, Inflexible Paper or PDF Checklists?\"\n                    : index === 1\n                      ? \"Inconsistent Data During Inspections?\"\n                      : \"Hours Spent Compiling Inspection Reports?\"}\n                </h3>\n                <p className=\"Home2-problem-text\">\n                  {index === 0\n                    ? \"Design dynamic digital templates in minutes with drag-and-drop ease. Add logic, scoring, photos, signatures, and more – update instantly across all devices.\"\n                    : index === 1\n                      ? \"Ensure standardized, accurate data capture every time with required fields, conditional logic, and uniform templates pushed directly to the mobile app.\"\n                      : \"Generate comprehensive, professional reports automatically the moment an inspection is completed. Share instantly with stakeholders.\"}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Tabs Section */}\n      <section className=\"Home2-features-section\" id=\"features\" ref={featuresRef}>\n        <div className=\"Home2-container\">\n          <h2 className=\"Home2-section-title\">Powering Your Inspections: Key Features</h2>\n\n          <div className=\"Home2-features-tabs\">\n            <div className=\"Home2-tabs-nav\">\n              {tabs.map((tab, index) => (\n                <button\n                  key={index}\n                  className={`Home2-tab-button ${activeTab === index ? \"Home2-active\" : \"\"} Home2-animate-on-scroll`}\n                  onClick={() => setActiveTab(index)}\n                  style={{\n                    animationDelay: `${index * 0.1}s`,\n                    opacity: 1,\n                    visibility: 'visible'\n                  }}\n                  onMouseEnter={enterButton}\n                  onMouseLeave={leaveHover}\n                >\n                  <span className=\"Home2-tab-icon\">{tab.icon}</span>\n                  <span className=\"Home2-tab-text\">{tab.title}</span>\n                </button>\n              ))}\n            </div>\n\n            <div className=\"Home2-tabs-content\">\n              <div className=\"Home2-tab-panel\">\n                <div className=\"Home2-tab-content Home2-animate-on-scroll\">\n                  <h3 className=\"Home2-tab-title\">{tabs[activeTab].contentTitle}</h3>\n                  <p className=\"Home2-tab-description\">{tabs[activeTab].description}</p>\n                  <a\n                    href=\"#learn-more\"\n                    className=\"Home2-btn Home2-btn-outline Home2-btn-sm Home2-btn-hover-effect\"\n                    onMouseEnter={enterButton}\n                    onMouseLeave={leaveHover}\n                  >\n                    Learn More <ArrowRight size={16} />\n                  </a>\n                </div>\n                <div className=\"Home2-tab-image Home2-animate-on-scroll\">\n                  <Image\n                    src={tabs[activeTab].image || \"/placeholder.svg\"}\n                    alt={tabs[activeTab].title}\n                    width={600}\n                    height={400}\n                    className=\"Home2-feature-img\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"Home2-stats-section\" ref={statsRef}>\n        <div className=\"Home2-container\">\n          <h2 className=\"Home2-section-title\">Impact of Smarter Templates & Inspections</h2>\n\n          <div className=\"Home2-stats-grid\">\n            {stats.map((stat, index) => (\n              <div key={index} className=\"Home2-stat-card Home2-animate-on-scroll\" style={{ animationDelay: `${index * 0.1}s` }}>\n                <div className=\"Home2-stat-value\">{stat.value}</div>\n                <div className=\"Home2-stat-label\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Template Builder Feature */}\n      <section className=\"Home2-template-feature\" id=\"template-builder\" ref={templateRef}>\n        <div className=\"Home2-container\">\n          <div className=\"Home2-feature-content\">\n            <div className={`Home2-feature-text Home2-animate-on-scroll ${templateVisible ? \"Home2-animate-in\" : \"\"}`}>\n              <h2 className=\"Home2-feature-title\">Build Intelligence Into Your Checklists</h2>\n              <p className=\"Home2-feature-description\">\n                Go beyond simple yes/no questions. Fashcognitive's template builder lets you implement sophisticated\n                logic. Make questions appear based on previous answers, calculate risk scores automatically, assign\n                weights, and guide inspectors through complex procedures.\n              </p>\n              <ul className=\"Home2-feature-list\">\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.2s\" }}>\n                  <Check size={20} className=\"Home2-check-icon\" />\n                  <span>Dynamic conditional logic (if/then)</span>\n                </li>\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.3s\" }}>\n                  <Check size={20} className=\"Home2-check-icon\" />\n                  <span>Automated scoring and weighting</span>\n                </li>\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.4s\" }}>\n                  <Check size={20} className=\"Home2-check-icon\" />\n                  <span>Embed instructional text, images, or videos</span>\n                </li>\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.5s\" }}>\n                  <Check size={20} className=\"Home2-check-icon\" />\n                  <span>Reusable template sections and version control</span>\n                </li>\n              </ul>\n              <a\n                href=\"#template-demo\"\n                className=\"Home2-btn Home2-btn-primary Home2-btn-hover-effect\"\n                onMouseEnter={enterButton}\n                onMouseLeave={leaveHover}\n              >\n                See Template Builder Demo\n              </a>\n            </div>\n\n            <div\n              className={`Home2-feature-image Home2-template-img-container Home2-animate-on-scroll ${templateVisible ? \"Home2-animate-in\" : \"\"}`}\n            >\n              <Image\n                src={HX}\n                alt=\"Template Builder\"\n                width={600}\n                height={500}\n                className=\"Home2-template-img\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Mobile App Feature */}\n      <section className=\"Home2-mobile-feature\" id=\"mobile-app\" ref={mobileRef}>\n        <div className=\"Home2-container\">\n          <div className=\"Home2-feature-content Home2-reverse\">\n            <div\n              className={`Home2-feature-image Home2-mobile-img-container Home2-animate-on-scroll ${mobileVisible ? \"Home2-animate-in\" : \"\"}`}\n            >\n              <Image\n                src={AZ}\n                alt=\"Mobile App\"\n                width={600}\n                height={500}\n                className=\"Home2-mobile-img\"\n              />\n            </div>\n\n            <div className={`Home2-feature-text Home2-animate-on-scroll ${mobileVisible ? \"Home2-animate-in\" : \"\"}`}>\n              <h2 className=\"Home2-feature-title\">Capture Rich, Actionable Data from the Field</h2>\n              <p className=\"Home2-feature-description\">\n                Empower your inspectors to capture more than just text. The StreamLineer mobile app allows for\n                attaching annotated photos, collecting signatures, recording precise GPS locations, scanning barcodes,\n                and adding detailed notes – all within the inspection form, even offline.\n              </p>\n              <ul className=\"Home2-feature-list\">\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.2s\" }}>\n                  <Check size={20} className=\"Home2-check-icon\" />\n                  <span>High-resolution photo capture with annotation tools</span>\n                </li>\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.3s\" }}>\n                  <Check size={20} className=\"Home2-check-icon\" />\n                  <span>Digital signature collection for sign-offs</span>\n                </li>\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.4s\" }}>\n                  <Check size={20} className=\"Home2-check-icon\" />\n                  <span>Automatic GPS stamping (optional)</span>\n                </li>\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.5s\" }}>\n                  <Check size={20} className=\"Home2-check-icon\" />\n                  <span>Seamless offline data storage and sync</span>\n                </li>\n              </ul>\n              <a\n                href=\"#mobile-demo\"\n                className=\"Home2-btn Home2-btn-primary Home2-btn-hover-effect\"\n                onMouseEnter={enterButton}\n                onMouseLeave={leaveHover}\n              >\n                See Mobile App Demo\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Industries Section */}\n      <section className=\"Home2-industries-section\" ref={industriesRef}>\n        <div className=\"Home2-container\">\n          <h2 className=\"Home2-section-title\">Inspection Templates for Every Need</h2>\n\n          <div className=\"Home2-industries-grid\">\n            {industries.map((industry, index) => (\n              <div\n                key={index}\n                className={`Home2-industry-card Home2-animate-on-scroll ${index >= 5 ? 'Home2-last-row-card' : ''}`}\n                style={{\n                  animationDelay: `${index * 0.05}s`,\n                  ...(index >= 5 && { gridColumn: index === 5 ? '2 / 3' : index === 6 ? '3 / 4' : '4 / 5' })\n                }}\n                onMouseEnter={enterLink}\n                onMouseLeave={leaveHover}\n              >\n                <div className=\"Home2-industry-icon\">{industry.icon}</div>\n                <h3 className=\"Home2-industry-title\">{industry.title}</h3>\n                <div className=\"Home2-industry-arrow\">\n                  <ArrowUpRight size={18} />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* FAQ Section */}\n      <section className=\"Home2-faq-section\">\n        <div className=\"Home2-container\">\n          <h2 className=\"Home2-section-title\">Your Questions About Templates & Inspections</h2>\n\n          <div className=\"Home2-faq-list\">\n            {faqs.map((faq, index) => (\n              <div\n                key={index}\n                className={`Home2-faq-item ${activeFaq === index ? \"Home2-active\" : \"\"} Home2-animate-on-scroll`}\n                style={{\n                  animationDelay: `${index * 0.1}s`,\n                  opacity: 1,\n                  visibility: 'visible',\n                  display: 'block'\n                }}\n              >\n                <button\n                  className=\"Home2-faq-question\"\n                  onClick={() => toggleFaq(index)}\n                  onMouseEnter={enterButton}\n                  onMouseLeave={leaveHover}\n                  style={{\n                    opacity: 1,\n                    visibility: 'visible'\n                  }}\n                >\n                  <span>{faq.question}</span>\n                  <div className={`Home2-faq-icon ${activeFaq === index ? \"Home2-rotate\" : \"\"}`}>\n                    <ChevronDown size={20} />\n                  </div>\n                </button>\n                <div className={`Home2-faq-answer ${activeFaq === index ? \"Home2-open\" : \"\"}`}>\n                  <p>{faq.answer}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"Home2-cta-section\" ref={ctaRef}>\n        <div className=\"Home2-container\">\n          <div className={`Home2-cta-content Home2-animate-on-scroll ${ctaVisible ? \"Home2-animate-in\" : \"\"}`}>\n            <h2 className=\"Home2-cta-title\">Ready to Revolutionize Your Inspection Process?</h2>\n            <p className=\"Home2-cta-text\">\n              Stop wrestling with paper and clunky software. Build intelligent templates and empower your team with\n              efficient mobile inspections using StreamLineer.\n            </p>\n            <div className=\"Home2-cta-buttons\">\n              <a\n                href=\"register\"\n                className=\"Home2-btn Home2-btn-primary Home2-btn-lg Home2-btn-hover-effect\"\n                onMouseEnter={enterButton}\n                onMouseLeave={leaveHover}\n              >\n                Start Building Templates Free\n              </a>\n              <a\n                href=\"#request-demo\"\n                className=\"Home2-btn Home2-btn-outline Home2-btn-lg Home2-btn-hover-effect\"\n                onMouseEnter={enterButton}\n                onMouseLeave={leaveHover}\n              >\n                Request a Demo\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"Home2-footer\">\n        <div className=\"Home2-container\">\n          <div className=\"Home2-footer-top\">\n            <div className=\"Home2-footer-logo\">\n              <span className=\"Home2-logo-text\">STREAMLINEER</span>\n              <p className=\"Home2-footer-tagline\">Build Smart Checklists. Conduct Flawless Inspections.</p>\n            </div>\n\n            <div className=\"Home2-footer-columns\">\n              <div className=\"Home2-footer-column\">\n                <h3 className=\"Home2-footer-heading\">Product</h3>\n                <ul className=\"Home2-footer-links\">\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#template-builder\">Template Builder</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#mobile-app\">Mobile Inspections</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#reporting\">Reporting</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#actions\">Action Tracking</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#pricing\">Pricing</a>\n                  </li>\n                </ul>\n              </div>\n\n              <div className=\"Home2-footer-column\">\n                <h3 className=\"Home2-footer-heading\">Resources</h3>\n                <ul className=\"Home2-footer-links\">\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#blog\">Blog</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#guides\">Guides</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#webinars\">Webinars</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#case-studies\">Case Studies</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#help-center\">Help Center</a>\n                  </li>\n                </ul>\n              </div>\n\n              <div className=\"Home2-footer-column\">\n                <h3 className=\"Home2-footer-heading\">Company</h3>\n                <ul className=\"Home2-footer-links\">\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#about\">About Us</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#careers\">Careers</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#contact\">Contact</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#partners\">Partners</a>\n                  </li>\n                  <li className=\"Home2-footer-link-item\">\n                    <a href=\"#legal\">Legal</a>\n                  </li>\n                </ul>\n              </div>\n\n              <div className=\"Home2-footer-column\">\n                <h3 className=\"Home2-footer-heading\">Connect</h3>\n                <div className=\"Home2-social-links\">\n                  <a href=\"#twitter\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"24\"\n                      height=\"24\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    >\n                      <path d=\"M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z\"></path>\n                    </svg>\n                  </a>\n                  <a href=\"#linkedin\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"24\"\n                      height=\"24\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    >\n                      <path d=\"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z\"></path>\n                      <rect x=\"2\" y=\"9\" width=\"4\" height=\"12\"></rect>\n                      <circle cx=\"4\" cy=\"4\" r=\"2\"></circle>\n                    </svg>\n                  </a>\n                  <a href=\"#facebook\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"24\"\n                      height=\"24\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    >\n                      <path d=\"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z\"></path>\n                    </svg>\n                  </a>\n                  <a href=\"#instagram\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"24\"\n                      height=\"24\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    >\n                      <rect x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"5\" ry=\"5\"></rect>\n                      <path d=\"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\"></path>\n                      <line x1=\"17.5\" y1=\"6.5\" x2=\"17.51\" y2=\"6.5\"></line>\n                    </svg>\n                  </a>\n                </div>\n                <div className=\"Home2-newsletter\">\n                  <h4 className=\"Home2-newsletter-title\">Subscribe to our newsletter</h4>\n                  <form className=\"Home2-newsletter-form\">\n                    <input type=\"email\" placeholder=\"Your email\" className=\"Home2-newsletter-input\" />\n                    <button\n                      type=\"submit\"\n                      className=\"Home2-newsletter-button\"\n                      onMouseEnter={enterButton}\n                      onMouseLeave={leaveHover}\n                    >\n                      Subscribe\n                    </button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"Home2-footer-bottom\">\n            <p className=\"Home2-copyright\">© 2025 StreamLineer, Inc. All rights reserved.</p>\n            <div className=\"Home2-legal-links\">\n              <a href=\"#privacy\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                Privacy Policy\n              </a>\n              <a href=\"#terms\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                Terms of Service\n              </a>\n              <a href=\"#cookies\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\n                Cookie Policy\n              </a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  )\n}\n\nexport default Home2","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Inspection.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Create_template.tsx",["101","102","103","104","105","106","107"],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/garment-template.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/api.ts",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/csrf.ts",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/aqlHelpers.ts",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/ConnectionsPanel.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/TemplateAssignmentManager.tsx",["108","109","110"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  User,\n  UserPlus,\n  Mail,\n  Shield,\n  Check,\n  X,\n  Edit2,\n  Trash2,\n  Search,\n  AlertCircle,\n  Info,\n  Users,\n  ClipboardCheck\n} from 'lucide-react';\nimport './AccessManager.css'; // Reuse the base styles\nimport './TemplateAssignmentManager.css'; // Add specific styles\nimport { fetchCSRFToken } from '../../utils/csrf';\n\n// Define assignment status types\nexport type AssignmentStatus = 'assigned' | 'in_progress' | 'completed' | 'revoked' | 'expired';\n\nexport interface TemplateAssignment {\n  id?: number;\n  template: number;\n  template_title?: string;\n  inspector: number;\n  inspector_email?: string;\n  inspector_name?: string;\n  assigned_by?: number;\n  assigned_by_email?: string;\n  assigned_by_name?: string;\n  status: AssignmentStatus;\n  status_display?: string;\n  assigned_at?: string;\n  started_at?: string;\n  completed_at?: string;\n  revoked_at?: string;\n  expired_at?: string;\n  due_date?: string;\n  notes?: string;\n}\n\ninterface Inspector {\n  id: number;\n  name: string;\n  email: string;\n  avatar?: string;\n  initials?: string;\n}\n\ninterface CurrentUser {\n  id: number;\n  username: string;\n  email: string;\n  user_role: string;\n}\n\ninterface TemplateAssignmentManagerProps {\n  templateId: string | number;\n  templateTitle: string;\n  onAssignmentUpdated?: () => void;\n}\n\nconst TemplateAssignmentManager: React.FC<TemplateAssignmentManagerProps> = ({\n  templateId,\n  templateTitle,\n  onAssignmentUpdated\n}) => {\n  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [assignments, setAssignments] = useState<TemplateAssignment[]>([]);\n  const [inspectors, setInspectors] = useState<Inspector[]>([]);\n  const [showAssignForm, setShowAssignForm] = useState(false);\n  const [selectedInspector, setSelectedInspector] = useState<number | null>(null);\n  const [assignmentNotes, setAssignmentNotes] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [error, setError] = useState<string | null>(null);\n\n  // Check if template has been saved to database (has numeric ID)\n  const isTemplateSaved = String(templateId).match(/^\\d+$/);\n  const templateNotSavedMessage = \"This template must be saved before it can be assigned to inspectors. Please save the template first.\";\n\n  // Fetch current user data\n  useEffect(() => {\n    const fetchCurrentUser = async () => {\n      try {\n        console.log('Fetching current user data...');\n        const response = await axios.get('http://localhost:8000/api/users/auth-status/', {\n          withCredentials: true\n        });\n        console.log('Current user data:', response.data);\n\n        if (response.data.user) {\n          setCurrentUser(response.data.user);\n          console.log('User role from API:', response.data.user.user_role);\n\n          // Store user role in localStorage for persistence\n          localStorage.setItem('user_role', response.data.user.user_role);\n        } else {\n          throw new Error('User data not found in response');\n        }\n      } catch (error) {\n        console.error('Failed to fetch current user:', error);\n        // If we can't get the user from API, try to get from localStorage\n        const email = localStorage.getItem('username');\n        const storedRole = localStorage.getItem('user_role');\n\n        if (email) {\n          setCurrentUser({\n            id: 0,\n            username: email.split('@')[0],\n            email: email,\n            user_role: storedRole || 'regular' // Use stored role or default to regular\n          });\n          console.log('Using localStorage user role:', storedRole || 'regular');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCurrentUser();\n  }, []);\n\n  // Fetch template assignments\n  useEffect(() => {\n    const fetchAssignments = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/api/users/template-assignments/', {\n          withCredentials: true\n        });\n\n        // Filter assignments for this template\n        const templateAssignments = response.data.filter(\n          (assignment: TemplateAssignment) => assignment.template.toString() === templateId.toString()\n        );\n\n        setAssignments(templateAssignments);\n      } catch (error) {\n        console.error('Failed to fetch template assignments:', error);\n        setError('Failed to load template assignments. Please try again later.');\n      }\n    };\n\n    // Only fetch assignments if template is saved and user is loaded\n    if (!isLoading && currentUser && isTemplateSaved) {\n      fetchAssignments();\n    }\n  }, [isLoading, currentUser, templateId, isTemplateSaved]);\n\n  // Fetch inspectors\n  useEffect(() => {\n    const fetchInspectors = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/api/users/inspectors/', {\n          withCredentials: true\n        });\n\n        // Transform the data to match our Inspector interface\n        const inspectorsList = response.data.map((user: any) => ({\n          id: user.id,\n          name: `${user.first_name} ${user.last_name}`.trim() || user.username || user.email.split('@')[0],\n          email: user.email,\n          initials: `${user.first_name?.[0] || ''}${user.last_name?.[0] || ''}`.toUpperCase() || user.email[0].toUpperCase()\n        }));\n\n        setInspectors(inspectorsList);\n      } catch (error) {\n        console.error('Failed to fetch inspectors:', error);\n\n        // If the API endpoint doesn't exist, create some dummy data for testing\n        setInspectors([\n          {\n            id: 4,\n            name: 'Inspector User',\n            email: 'sloganand11@gmail.com',\n            initials: 'IU'\n          }\n        ]);\n      }\n    };\n\n    // Only fetch inspectors if template is saved and user is loaded\n    if (!isLoading && currentUser && isTemplateSaved) {\n      fetchInspectors();\n    }\n  }, [isLoading, currentUser, isTemplateSaved]);\n\n  // Create a new assignment\n  const handleCreateAssignment = async () => {\n    if (!selectedInspector) {\n      setError('Please select an inspector');\n      return;\n    }\n\n    // Check if template is saved before allowing assignment\n    if (!isTemplateSaved) {\n      setError(templateNotSavedMessage);\n      return;\n    }\n\n    try {\n      // First check if the current user is an admin\n      if (currentUser?.user_role !== 'admin') {\n        setError('Only admin users can assign templates to inspectors.');\n        return;\n      }\n\n      // Get a fresh CSRF token\n      const csrfToken = await fetchCSRFToken();\n      console.log('CSRF Token for assignment creation:', csrfToken);\n\n      const assignmentData = {\n        template: templateId,\n        inspector: selectedInspector,\n        notes: assignmentNotes\n      };\n\n      console.log('🔍 Frontend assignment data:', assignmentData);\n      console.log('🔍 Template ID:', templateId, 'Type:', typeof templateId);\n      console.log('🔍 Selected Inspector:', selectedInspector, 'Type:', typeof selectedInspector);\n      console.log('🔍 Is template saved:', isTemplateSaved);\n\n      // Make the request with the CSRF token\n      const response = await axios.post(\n        'http://localhost:8000/api/users/template-assignments/',\n        assignmentData,\n        {\n          withCredentials: true,\n          headers: {\n            'X-CSRFToken': csrfToken,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      console.log('Assignment created successfully:', response.data);\n\n      // Add the new assignment to the list\n      setAssignments([...assignments, response.data]);\n\n      // Reset form\n      setSelectedInspector(null);\n      setAssignmentNotes('');\n      setShowAssignForm(false);\n      setError(null);\n\n      // Notify parent component\n      if (onAssignmentUpdated) {\n        onAssignmentUpdated();\n      }\n    } catch (error: any) {\n      console.error('Failed to create assignment:', error);\n      if (error.response?.status === 403) {\n        setError('You do not have permission to assign templates. Only admin users can assign templates.');\n      } else {\n        setError(error.response?.data?.detail || 'Failed to create assignment. Please try again.');\n      }\n    }\n  };\n\n  // Revoke an assignment\n  const handleRevokeAssignment = async (assignmentId: number) => {\n    try {\n      // First check if the current user is an admin\n      if (currentUser?.user_role !== 'admin') {\n        setError('Only admin users can revoke template assignments.');\n        return;\n      }\n\n      // Get a fresh CSRF token\n      const csrfToken = await fetchCSRFToken();\n      console.log('CSRF Token for assignment revocation:', csrfToken);\n\n      await axios.post(\n        `http://localhost:8000/api/users/template-assignments/${assignmentId}/revoke/`,\n        {},\n        {\n          withCredentials: true,\n          headers: {\n            'X-CSRFToken': csrfToken,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      console.log('Assignment revoked successfully');\n\n      // Update the assignment status in the list\n      setAssignments(assignments.map(assignment =>\n        assignment.id === assignmentId\n          ? { ...assignment, status: 'revoked' }\n          : assignment\n      ));\n\n      // Notify parent component\n      if (onAssignmentUpdated) {\n        onAssignmentUpdated();\n      }\n    } catch (error: any) {\n      console.error('Failed to revoke assignment:', error);\n      if (error.response?.status === 403) {\n        setError('You do not have permission to revoke assignments. Only admin users can revoke assignments.');\n      } else {\n        setError(error.response?.data?.detail || 'Failed to revoke assignment. Please try again.');\n      }\n    }\n  };\n\n  // Filter inspectors based on search term\n  const filteredInspectors = inspectors.filter(inspector =>\n    inspector.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    inspector.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Filter out inspectors who already have active assignments\n  const availableInspectors = filteredInspectors.filter(inspector =>\n    !assignments.some(assignment =>\n      assignment.inspector === inspector.id &&\n      ['assigned', 'in_progress'].includes(assignment.status)\n    )\n  );\n\n  // Get status display text\n  const getStatusDisplay = (status: AssignmentStatus): string => {\n    switch (status) {\n      case 'assigned': return 'Assigned';\n      case 'in_progress': return 'In Progress';\n      case 'completed': return 'Completed';\n      case 'revoked': return 'Revoked';\n      case 'expired': return 'Expired';\n      default: return status;\n    }\n  };\n\n  return (\n    <div className=\"access-manager\">\n      <div style={{ width: '100%', maxWidth: '1000px' }}>\n        <div className=\"access-header\">\n          <div className=\"tam-header-content\">\n            <div className=\"tam-header-icon\">\n              <ClipboardCheck size={32} />\n            </div>\n            <div className=\"tam-header-text\">\n              <h2>Assign Template to Inspector</h2>\n              <p>Assign \"{templateTitle}\" to inspectors who will complete the inspections</p>\n            </div>\n          </div>\n        </div>\n\n        {isLoading && (\n          <div style={{ textAlign: 'center', padding: '20px' }}>\n            <p>Loading assignment information...</p>\n          </div>\n        )}\n\n        {!isLoading && !isTemplateSaved && (\n          <div className=\"info-message\">\n            <Info size={16} />\n            <span>{templateNotSavedMessage}</span>\n          </div>\n        )}\n\n        {!isLoading && isTemplateSaved && currentUser?.user_role !== 'admin' && (\n          <div className=\"info-message\">\n            <Info size={16} />\n            <span>Only admin users can assign templates to inspectors. Contact an admin if you need to assign this template.</span>\n          </div>\n        )}\n\n\n\n        {error && (\n          <div className=\"error-message\">\n            <AlertCircle size={16} />\n            <span>{error}</span>\n            <button onClick={() => setError(null)}>\n              <X size={16} />\n            </button>\n          </div>\n        )}\n\n        <div className=\"access-actions\">\n          <div className=\"search-container\">\n            <Search size={18} className=\"search-icon\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search inspectors...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"search-input\"\n            />\n          </div>\n\n          <div className=\"action-buttons\">\n            <button\n              className=\"tam-main-assign-button\"\n              onClick={() => setShowAssignForm(!showAssignForm)}\n              disabled={!isTemplateSaved || currentUser?.user_role !== 'admin'}\n              title={!isTemplateSaved ? templateNotSavedMessage : undefined}\n            >\n              <UserPlus size={16} />\n              Assign Template\n            </button>\n          </div>\n        </div>\n\n        {showAssignForm && (\n          <div className=\"tam-assign-form\">\n            <div className=\"tam-form-header\">\n              <div className=\"tam-form-title\">\n                <UserPlus size={20} />\n                <h3>Assign Template to Inspector</h3>\n              </div>\n              <button className=\"tam-close-button\" onClick={() => setShowAssignForm(false)}>\n                <X size={16} />\n              </button>\n            </div>\n\n            <div className=\"tam-form-content\">\n              <div className=\"tam-form-group\">\n                <label className=\"tam-form-label\">\n                  <User size={16} />\n                  Select Inspector\n                </label>\n                <select\n                  value={selectedInspector || ''}\n                  onChange={(e) => setSelectedInspector(Number(e.target.value))}\n                  className=\"tam-inspector-select\"\n                >\n                  <option value=\"\">-- Choose an inspector --</option>\n                  {availableInspectors.map(inspector => (\n                    <option key={inspector.id} value={inspector.id}>\n                      {inspector.name} ({inspector.email})\n                    </option>\n                  ))}\n                </select>\n                {availableInspectors.length === 0 && (\n                  <div className=\"tam-no-inspectors\">\n                    <AlertCircle size={16} />\n                    <span>No available inspectors found. All inspectors may already be assigned to this template.</span>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"tam-form-group\">\n                <label className=\"tam-form-label\">\n                  <Edit2 size={16} />\n                  Notes (Optional)\n                </label>\n                <textarea\n                  value={assignmentNotes}\n                  onChange={(e) => setAssignmentNotes(e.target.value)}\n                  placeholder=\"Add any special instructions or notes for this assignment...\"\n                  rows={3}\n                  className=\"tam-notes-textarea\"\n                />\n              </div>\n\n              <div className=\"tam-form-actions\">\n                <button className=\"tam-cancel-button\" onClick={() => setShowAssignForm(false)}>\n                  Cancel\n                </button>\n                <button\n                  className=\"tam-assign-button\"\n                  onClick={handleCreateAssignment}\n                  disabled={!selectedInspector || !isTemplateSaved}\n                  title={!isTemplateSaved ? templateNotSavedMessage : undefined}\n                >\n                  <Check size={16} />\n                  Assign Template\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"users-list-container\">\n          <div className=\"users-list-header\">\n            <div className=\"user-column\">Inspector</div>\n            <div className=\"permission-column\">Status</div>\n            <div className=\"status-column\">Assigned Date</div>\n            <div className=\"actions-column\">Actions</div>\n          </div>\n\n          <div className=\"users-list\">\n            {!isTemplateSaved ? (\n              <div className=\"no-users\">\n                <ClipboardCheck size={24} />\n                <p>Save the template to view and manage assignments</p>\n              </div>\n            ) : assignments.length === 0 ? (\n              <div className=\"no-users\">\n                <ClipboardCheck size={24} />\n                <p>No assignments found for this template</p>\n              </div>\n            ) : (\n              assignments.map(assignment => (\n                <div key={assignment.id} className=\"user-item\">\n                  <div className=\"user-info\">\n                    <div className=\"user-avatar\">\n                      <div className=\"avatar-placeholder\">\n                        {assignment.inspector_name?.[0]?.toUpperCase() || 'I'}\n                      </div>\n                    </div>\n                    <div className=\"user-details\">\n                      <div className=\"user-name\">{assignment.inspector_name || 'Inspector'}</div>\n                      <div className=\"user-email\">{assignment.inspector_email}</div>\n                    </div>\n                  </div>\n\n                  <div className=\"user-permission\">\n                    <div className={`status-badge ${assignment.status}`}>\n                      {assignment.status === 'assigned' && <Check size={14} />}\n                      {assignment.status === 'in_progress' && <ClipboardCheck size={14} />}\n                      {assignment.status === 'completed' && <Check size={14} />}\n                      {assignment.status === 'revoked' && <X size={14} />}\n                      {assignment.status === 'expired' && <AlertCircle size={14} />}\n                      <span>{assignment.status_display || getStatusDisplay(assignment.status)}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"user-status\">\n                    <span>{new Date(assignment.assigned_at || '').toLocaleDateString()}</span>\n                  </div>\n\n                  <div className=\"user-actions\">\n                    {['assigned', 'in_progress'].includes(assignment.status) && currentUser?.user_role === 'admin' && (\n                      <button\n                        className=\"delete-button\"\n                        onClick={() => assignment.id && handleRevokeAssignment(assignment.id)}\n                        title=\"Revoke Assignment\"\n                      >\n                        <Trash2 size={16} />\n                      </button>\n                    )}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TemplateAssignmentManager;\n","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/AccessManager.tsx",["111","112","113","114","115","116"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  User,\n  UserPlus,\n  Mail,\n  Shield,\n  Check,\n  X,\n  Edit2,\n  Trash2,\n  Search,\n  AlertCircle,\n  Info,\n  Copy,\n  ExternalLink,\n  Users\n} from 'lucide-react';\nimport './AccessManager.css';\n\n// Define permission types\nexport type PermissionLevel = 'owner' | 'admin' | 'editor' | 'viewer';\n\nexport interface UserPermission {\n  id: string;\n  name: string;\n  email: string;\n  avatar?: string;\n  permissionLevel: PermissionLevel;\n  status: 'active' | 'pending' | 'expired';\n  lastAccessed?: Date;\n}\n\nexport interface Connection {\n  id: string;\n  name: string;\n  email: string;\n  avatar?: string;\n  initials: string;\n  status: 'active' | 'pending' | 'declined';\n}\n\ninterface CurrentUser {\n  id: number;\n  username: string;\n  email: string;\n}\n\ninterface AccessManagerProps {\n  templateId: string;\n  templateTitle: string;\n  initialUsers?: UserPermission[];\n  onUpdatePermissions?: (users: UserPermission[]) => void;\n}\n\nconst generateId = () => Math.random().toString(36).substring(2, 9);\n\nconst getPermissionLabel = (level: PermissionLevel): string => {\n  switch (level) {\n    case 'owner':\n      return 'Owner';\n    case 'admin':\n      return 'Administrator';\n    case 'editor':\n      return 'Editor';\n    case 'viewer':\n      return 'Viewer';\n    default:\n      return 'Unknown';\n  }\n};\n\nconst getPermissionDescription = (level: PermissionLevel): string => {\n  switch (level) {\n    case 'owner':\n      return 'Full control including template deletion and ownership transfer';\n    case 'admin':\n      return 'Can edit template, manage users, and publish';\n    case 'editor':\n      return 'Can edit template content but cannot publish or manage users';\n    case 'viewer':\n      return 'Can only view and use the template';\n    default:\n      return '';\n  }\n};\n\nconst AccessManager: React.FC<AccessManagerProps> = ({\n  templateId,\n  templateTitle,\n  initialUsers = [],\n  onUpdatePermissions\n}) => {\n  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Fetch current user data\n  useEffect(() => {\n    const fetchCurrentUser = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/api/users/auth-status/', {\n          withCredentials: true\n        });\n        setCurrentUser(response.data.user);\n      } catch (error) {\n        console.error('Failed to fetch current user:', error);\n        // If we can't get the user from API, try to get from localStorage\n        const email = localStorage.getItem('username');\n        if (email) {\n          setCurrentUser({\n            id: 0,\n            username: email.split('@')[0],\n            email: email\n          });\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCurrentUser();\n  }, []);\n\n  // Create default owner based on current user\n  const createDefaultOwner = (): UserPermission => {\n    return {\n      id: generateId(),\n      name: currentUser ? (currentUser.username || currentUser.email.split('@')[0]) : 'You',\n      email: currentUser ? currentUser.email : 'current.user@example.com',\n      permissionLevel: 'owner',\n      status: 'active',\n      lastAccessed: new Date()\n    };\n  };\n\n  const [users, setUsers] = useState<UserPermission[]>(\n    initialUsers.length > 0 ? initialUsers : [createDefaultOwner()]\n  );\n\n  // Update default owner when current user is loaded\n  useEffect(() => {\n    if (!isLoading && currentUser && initialUsers.length === 0) {\n      setUsers([createDefaultOwner()]);\n    }\n  }, [currentUser, isLoading, initialUsers.length]);\n\n  const [showInviteForm, setShowInviteForm] = useState(false);\n  const [newUserEmail, setNewUserEmail] = useState('');\n  const [newUserPermission, setNewUserPermission] = useState<PermissionLevel>('viewer');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [editingUserId, setEditingUserId] = useState<string | null>(null);\n  const [showShareLink, setShowShareLink] = useState(false);\n  const [shareLink, setShareLink] = useState('');\n  const [linkCopied, setLinkCopied] = useState(false);\n  const [showPermissionDetails, setShowPermissionDetails] = useState(false);\n  const [showConnectionsModal, setShowConnectionsModal] = useState(false);\n  const [inviteTab, setInviteTab] = useState<'email' | 'connections'>('email');\n\n  // Sample connections data for demonstration\n  // Map to store individual permission levels for each connection\n  const [connectionPermissions, setConnectionPermissions] = useState<Record<string, PermissionLevel>>({});\n\n  const [connections, setConnections] = useState<Connection[]>([\n    {\n      id: '1',\n      name: 'Grace Miller',\n      email: 'grace.miller@example.com',\n      initials: 'GM',\n      status: 'active'\n    },\n    {\n      id: '2',\n      name: 'John Martinez',\n      email: 'john.martinez@example.com',\n      initials: 'JM',\n      status: 'active'\n    },\n    {\n      id: '3',\n      name: 'Sarah Johnson',\n      email: 'sarah.johnson@example.com',\n      initials: 'SJ',\n      status: 'active'\n    },\n    {\n      id: '4',\n      name: 'Michael Brown',\n      email: 'michael.brown@example.com',\n      initials: 'MB',\n      status: 'active'\n    },\n    {\n      id: '5',\n      name: 'Emily Davis',\n      email: 'emily.davis@example.com',\n      initials: 'ED',\n      status: 'active'\n    }\n  ]);\n\n  // Generate a share link\n  useEffect(() => {\n    setShareLink(`https://fashcognitive.com/templates/share/${templateId}?token=${generateId()}`);\n  }, [templateId]);\n\n  // Update parent component when users change\n  useEffect(() => {\n    if (onUpdatePermissions) {\n      onUpdatePermissions(users);\n    }\n  }, [users, onUpdatePermissions]);\n\n  const handleAddUser = () => {\n    if (!newUserEmail.trim()) return;\n\n    // Check if user already exists\n    if (users.some(user => user.email.toLowerCase() === newUserEmail.toLowerCase())) {\n      alert('This user has already been invited.');\n      return;\n    }\n\n    const newUser: UserPermission = {\n      id: generateId(),\n      name: newUserEmail.split('@')[0], // Extract name from email\n      email: newUserEmail,\n      permissionLevel: newUserPermission,\n      status: 'pending'\n    };\n\n    setUsers([...users, newUser]);\n    setNewUserEmail('');\n    setNewUserPermission('viewer');\n    setShowInviteForm(false);\n  };\n\n  const handleAddConnection = (connection: Connection, permissionLevel: PermissionLevel) => {\n    // Check if connection already exists as a user\n    if (users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())) {\n      alert('This user has already been invited.');\n      return;\n    }\n\n    const newUser: UserPermission = {\n      id: generateId(),\n      name: connection.name,\n      email: connection.email,\n      avatar: connection.avatar,\n      permissionLevel: permissionLevel,\n      status: 'pending'\n    };\n\n    setUsers([...users, newUser]);\n    setShowInviteForm(false);\n  };\n\n  // Initialize connection permissions with default values\n  useEffect(() => {\n    const newPermissions: Record<string, PermissionLevel> = {};\n    connections.forEach(connection => {\n      if (!connectionPermissions[connection.id]) {\n        newPermissions[connection.id] = 'viewer';\n      }\n    });\n\n    if (Object.keys(newPermissions).length > 0) {\n      setConnectionPermissions(prev => ({ ...prev, ...newPermissions }));\n    }\n  }, [connections, connectionPermissions]);\n\n  const handleConnectionPermissionChange = (connectionId: string, permissionLevel: PermissionLevel) => {\n    setConnectionPermissions(prev => ({\n      ...prev,\n      [connectionId]: permissionLevel\n    }));\n  };\n\n  // Filter connections that are not already users\n  const availableConnections = connections.filter(\n    connection => !users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())\n  );\n\n  const handleUpdatePermission = (userId: string, permissionLevel: PermissionLevel) => {\n    setUsers(users.map(user =>\n      user.id === userId ? { ...user, permissionLevel } : user\n    ));\n    setEditingUserId(null);\n  };\n\n  const handleRemoveUser = (userId: string) => {\n    // Don't allow removing the owner\n    if (users.find(user => user.id === userId)?.permissionLevel === 'owner') {\n      alert('You cannot remove the owner of the template.');\n      return;\n    }\n\n    setUsers(users.filter(user => user.id !== userId));\n  };\n\n  const handleTransferOwnership = (userId: string) => {\n    // Find current owner and new owner\n    const currentOwner = users.find(user => user.permissionLevel === 'owner');\n    const newOwner = users.find(user => user.id === userId);\n\n    if (!currentOwner || !newOwner) return;\n\n    // Swap permissions\n    setUsers(users.map(user => {\n      if (user.id === currentOwner.id) {\n        return { ...user, permissionLevel: 'admin' };\n      }\n      if (user.id === userId) {\n        return { ...user, permissionLevel: 'owner' };\n      }\n      return user;\n    }));\n\n    setEditingUserId(null);\n  };\n\n  const copyShareLink = () => {\n    navigator.clipboard.writeText(shareLink);\n    setLinkCopied(true);\n    setTimeout(() => setLinkCopied(false), 2000);\n  };\n\n  // Filter users based on search term\n  const filteredUsers = users.filter(user =>\n    user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"access-manager\">\n      <div className=\"access-header\">\n        <h2>Manage Access</h2>\n        <p>Control who can view and edit \"{templateTitle}\"</p>\n      </div>\n\n      {isLoading && (\n        <div style={{ textAlign: 'center', padding: '20px' }}>\n          <p>Loading user information...</p>\n        </div>\n      )}\n\n      <div className=\"access-actions\">\n        <div className=\"search-container\">\n          <Search size={18} className=\"search-icon\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search users...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"search-input\"\n          />\n        </div>\n\n        <div className=\"action-buttons\">\n          <button\n            className=\"share-link-button\"\n            onClick={() => setShowShareLink(!showShareLink)}\n          >\n            <ExternalLink size={16} />\n            Share Link\n          </button>\n\n          <button\n            className=\"invite-button\"\n            onClick={() => setShowInviteForm(!showInviteForm)}\n          >\n            <UserPlus size={16} />\n            Invite User\n          </button>\n        </div>\n      </div>\n\n      {showShareLink && (\n        <div className=\"share-link-container\">\n          <div className=\"share-link-header\">\n            <h3>Share Template</h3>\n            <button className=\"close-button\" onClick={() => setShowShareLink(false)}>\n              <X size={16} />\n            </button>\n          </div>\n          <p>Anyone with this link can view this template:</p>\n          <div className=\"share-link-input\">\n            <input type=\"text\" value={shareLink} readOnly />\n            <button onClick={copyShareLink}>\n              <Copy size={16} />\n              {linkCopied ? 'Copied!' : 'Copy'}\n            </button>\n          </div>\n        </div>\n      )}\n\n      {showInviteForm && (\n        <div className=\"invite-form\">\n          <div className=\"invite-form-header\">\n            <h3>Invite User</h3>\n            <button className=\"close-button\" onClick={() => setShowInviteForm(false)}>\n              <X size={16} />\n            </button>\n          </div>\n\n          <div className=\"invite-tabs\">\n            <button\n              className={`invite-tab ${inviteTab === 'email' ? 'active' : ''}`}\n              onClick={() => setInviteTab('email')}\n            >\n              <Mail size={16} />\n              Email\n            </button>\n            <button\n              className={`invite-tab ${inviteTab === 'connections' ? 'active' : ''}`}\n              onClick={() => setInviteTab('connections')}\n            >\n              <Users size={16} />\n              My Connections\n            </button>\n          </div>\n\n          {inviteTab === 'email' ? (\n            <div className=\"tab-content\">\n              <div className=\"form-group\">\n                <label>Email Address</label>\n                <div className=\"email-input\">\n                  <Mail size={18} className=\"email-icon\" />\n                  <input\n                    type=\"email\"\n                    placeholder=\"Enter email address\"\n                    value={newUserEmail}\n                    onChange={(e) => setNewUserEmail(e.target.value)}\n                  />\n                </div>\n              </div>\n\n              <div className=\"form-group\">\n                <label>\n                  Permission Level\n                  <button\n                    className=\"info-button\"\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\n                  >\n                    <Info size={14} />\n                  </button>\n                </label>\n                <select\n                  value={newUserPermission}\n                  onChange={(e) => setNewUserPermission(e.target.value as PermissionLevel)}\n                >\n                  <option value=\"viewer\">Viewer</option>\n                  <option value=\"editor\">Editor</option>\n                  <option value=\"admin\">Administrator</option>\n                </select>\n              </div>\n\n              {showPermissionDetails && (\n                <div className=\"permission-details\">\n                  <div className=\"permission-item\">\n                    <h4>Viewer</h4>\n                    <p>Can view and use the template but cannot make changes</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Editor</h4>\n                    <p>Can edit template content but cannot publish or manage users</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Administrator</h4>\n                    <p>Can edit template, manage users, and publish</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Owner</h4>\n                    <p>Full control including template deletion and ownership transfer</p>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"invite-actions\">\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\n                <button\n                  className=\"send-invite-button\"\n                  onClick={handleAddUser}\n                  disabled={!newUserEmail.trim()}\n                >\n                  Send Invite\n                </button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"tab-content\">\n              <div className=\"form-group\">\n                <label>\n                  Permission Levels\n                  <button\n                    className=\"info-button\"\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\n                  >\n                    <Info size={14} />\n                  </button>\n                </label>\n                <p className=\"permission-hint\">Set permission level for each connection individually</p>\n              </div>\n\n              {showPermissionDetails && (\n                <div className=\"permission-details\">\n                  <div className=\"permission-item\">\n                    <h4>Viewer</h4>\n                    <p>Can view and use the template but cannot make changes</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Editor</h4>\n                    <p>Can edit template content but cannot publish or manage users</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Administrator</h4>\n                    <p>Can edit template, manage users, and publish</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Owner</h4>\n                    <p>Full control including template deletion and ownership transfer</p>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"connections-list-container\">\n                <h4 className=\"connections-list-title\">\n                  Select from your connections\n                  <span className=\"connections-count\">({availableConnections.length})</span>\n                </h4>\n\n                {availableConnections.length === 0 ? (\n                  <div className=\"no-connections-message\">\n                    <p>All your connections have already been invited to this template.</p>\n                  </div>\n                ) : (\n                  <div className=\"connections-select-list\">\n                    {availableConnections.map(connection => (\n                      <div key={connection.id} className=\"connection-select-item\">\n                        <div className=\"connection-info\">\n                          {connection.avatar ? (\n                            <img src={connection.avatar} alt={connection.name} className=\"connection-avatar\" />\n                          ) : (\n                            <div className=\"connection-initials\">{connection.initials}</div>\n                          )}\n                          <div className=\"connection-details\">\n                            <span className=\"connection-name\">{connection.name}</span>\n                            <span className=\"connection-email\">{connection.email}</span>\n                          </div>\n                        </div>\n                        <div className=\"connection-actions\">\n                          <select\n                            className=\"connection-permission-select\"\n                            value={connectionPermissions[connection.id] || 'viewer'}\n                            onChange={(e) => handleConnectionPermissionChange(connection.id, e.target.value as PermissionLevel)}\n                          >\n                            <option value=\"viewer\">Viewer</option>\n                            <option value=\"editor\">Editor</option>\n                            <option value=\"admin\">Admin</option>\n                          </select>\n                          <button\n                            className=\"add-connection-btn\"\n                            onClick={() => handleAddConnection(connection, connectionPermissions[connection.id] || 'viewer')}\n                          >\n                            Add\n                          </button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"invite-actions\">\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      <div className=\"users-list-container\">\n        <div className=\"users-list-header\">\n          <div className=\"user-column\">User</div>\n          <div className=\"permission-column\">Permission</div>\n          <div className=\"status-column\">Status</div>\n          <div className=\"actions-column\">Actions</div>\n        </div>\n\n        <div className=\"users-list\">\n          {filteredUsers.length === 0 ? (\n            <div className=\"no-users\">\n              <AlertCircle size={24} />\n              <p>No users found matching \"{searchTerm}\"</p>\n            </div>\n          ) : (\n            filteredUsers.map(user => (\n              <div key={user.id} className=\"user-item\">\n                <div className=\"user-info\">\n                  <div className=\"user-avatar\">\n                    {user.avatar ? (\n                      <img src={user.avatar} alt={user.name} />\n                    ) : (\n                      <div className=\"avatar-placeholder\">\n                        {user.name.charAt(0).toUpperCase()}\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"user-details\">\n                    <div className=\"user-name\">{user.name}</div>\n                    <div className=\"user-email\">{user.email}</div>\n                  </div>\n                </div>\n\n                <div className=\"user-permission\">\n                  {editingUserId === user.id ? (\n                    <select\n                      value={user.permissionLevel}\n                      onChange={(e) => handleUpdatePermission(user.id, e.target.value as PermissionLevel)}\n                      className=\"permission-select\"\n                    >\n                      <option value=\"viewer\">Viewer</option>\n                      <option value=\"editor\">Editor</option>\n                      <option value=\"admin\">Administrator</option>\n                      <option value=\"owner\">Owner (Transfer Ownership)</option>\n                    </select>\n                  ) : (\n                    <div className={`permission-badge ${user.permissionLevel}`}>\n                      <Shield size={14} />\n                      <span>{getPermissionLabel(user.permissionLevel)}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"user-status\">\n                  <div className={`status-badge ${user.status}`}>\n                    {user.status === 'active' && <Check size={14} />}\n                    {user.status === 'pending' && <Mail size={14} />}\n                    {user.status === 'expired' && <AlertCircle size={14} />}\n                    <span>{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\n                  </div>\n                </div>\n\n                <div className=\"user-actions\">\n                  {user.permissionLevel !== 'owner' && (\n                    <>\n                      {editingUserId === user.id ? (\n                        <button\n                          className=\"save-button\"\n                          onClick={() => setEditingUserId(null)}\n                        >\n                          <Check size={16} />\n                        </button>\n                      ) : (\n                        <button\n                          className=\"edit-button\"\n                          onClick={() => setEditingUserId(user.id)}\n                        >\n                          <Edit2 size={16} />\n                        </button>\n                      )}\n                      <button\n                        className=\"delete-button\"\n                        onClick={() => handleRemoveUser(user.id)}\n                      >\n                        <Trash2 size={16} />\n                      </button>\n                    </>\n                  )}\n                  {user.permissionLevel === 'owner' && (\n                    <div className=\"owner-badge\">\n                      <User size={14} />\n                      <span>Owner</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AccessManager;\n","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/aqlTables.ts",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Schedule.tsx",["117"],"import React, { useState, useEffect } from 'react';\nimport './Schedule.css';\nimport {\n  Home,\n  Search,\n  Bell,\n  FileText,\n  Calendar,\n  ClipboardCheck,\n  Play,\n  BookOpen,\n  Package,\n  AlertCircle,\n  Settings,\n  User,\n  LogOut,\n  Plus,\n  Clock,\n  CheckCircle,\n  ArrowRight\n} from 'lucide-react';\nimport ScheduleInspectionModal from './components/ScheduleInspectionModal';\nimport TemplateAssignmentManager from './components/TemplateAssignmentManager';\nimport { fetchData } from '../utils/api';\nimport axios from 'axios';\n\ninterface Assignment {\n  id: number;\n  template: number;\n  template_title: string;\n  inspector: number;\n  inspector_name: string;\n  inspector_email: string;\n  assigned_by: number;\n  assigned_by_name: string;\n  assigned_by_email: string;\n  status: string;\n  status_display: string;\n  assigned_at: string;\n  started_at: string | null;\n  completed_at: string | null;\n  revoked_at: string | null;\n  due_date: string | null;\n  notes: string | null;\n}\n\ninterface Template {\n  id: number;\n  title: string;\n  description?: string;\n  created_at?: string;\n  updated_at?: string;\n  lastModified?: string;\n  owner?: number;\n  createdBy?: string;\n  access?: string;\n  template_type?: string;\n  owner_name?: string;\n  assignment?: Assignment | null; // Current assignment if any\n  status?: string; // Derived status based on assignment\n}\n\ninterface TemplateWithStatus extends Template {\n  display_status: string;\n  display_status_class: string;\n  key_date: string | null;\n  assigned_date: string | null;\n  inspector_info?: {\n    id: number;\n    name: string;\n    email: string;\n  } | null;\n}\n\nconst Schedule: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('my-schedules');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [currentUser, setCurrentUser] = useState<any>(null);\n  const [showAssignmentModal, setShowAssignmentModal] = useState(false);\n  const [selectedTemplateForAssignment, setSelectedTemplateForAssignment] = useState<TemplateWithStatus | null>(null);\n  const [templates, setTemplates] = useState<Template[]>([\n    {\n      id: 1,\n      title: \"Safety Inspection Template (Initial Demo)\",\n      description: \"Demo template for safety inspections\",\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      owner: 1\n    },\n    {\n      id: 2,\n      title: \"Equipment Check Template (Initial Demo)\",\n      description: \"Demo template for equipment checks\",\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      owner: 1\n    }\n  ]);\n  const [templatesWithStatus, setTemplatesWithStatus] = useState<TemplateWithStatus[]>([]);\n\n  // Menu items for the sidebar\n  const menuItems = [\n    { icon: Home, label: \"Home\", href: \"/dashboard\" },\n    { icon: Search, label: \"Search\", href: \"/search\" },\n    { icon: Bell, label: \"Notifications\", href: \"/notifications\" },\n    { icon: FileText, label: \"Templates\", href: \"/templates\" },\n    { icon: Calendar, label: \"Schedule\", href: \"/schedule\", active: true },\n    { icon: ClipboardCheck, label: \"Inspections\", href: \"/inspection\" },\n    { icon: Play, label: \"Actions\", href: \"/actions\" },\n    { icon: BookOpen, label: \"Training\", href: \"/training\" },\n    { icon: Package, label: \"Assets\", href: \"/assets\" },\n    { icon: AlertCircle, label: \"Issues\", href: \"/issues\" },\n  ];\n\n  // Fetch current user\n  useEffect(() => {\n    const fetchCurrentUser = async () => {\n      try {\n        console.log(\"Fetching current user...\");\n        const data = await fetchData(\"users/auth-status/\");\n        console.log(\"Auth status response:\", data);\n\n        // Extract user data from the response\n        if (data.authenticated && data.user) {\n          setCurrentUser(data.user);\n          console.log(\"Current user set:\", data.user);\n          console.log(\"User role:\", data.user.user_role);\n        } else {\n          console.warn(\"User not authenticated or user data missing\");\n          setCurrentUser(null);\n        }\n      } catch (error) {\n        console.error(\"Error fetching current user:\", error);\n        // Set a default user for demo purposes\n        console.log(\"Setting default user due to error\");\n        setCurrentUser({\n          id: 1,\n          username: \"demouser\",\n          email: \"demo@example.com\",\n          user_role: \"admin\"\n        });\n      }\n    };\n\n    fetchCurrentUser();\n  }, []);\n\n  // Fetch assignments based on user role\n  useEffect(() => {\n    const fetchAssignments = async () => {\n      if (!currentUser) return;\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        console.log(\"Current user:\", currentUser);\n\n        // For admin users, fetch all assignments they've created\n        if (currentUser.user_role === 'admin') {\n          const data = await fetchData(\"users/template-assignments/\");\n          console.log(\"Admin assignments data:\", data);\n          setAssignments(data || []);\n        } else if (currentUser.user_role === 'inspector') {\n          // For inspectors, fetch their assigned templates\n          try {\n            const data = await fetchData(\"users/my-assignments/\");\n            console.log(\"Inspector assignments data:\", data);\n\n            // If no assignments found, create demo assignments for testing\n            if (!data || data.length === 0) {\n              console.log(\"No assignments found for inspector, creating demo assignments\");\n              setAssignments([\n                {\n                  id: 1,\n                  template: 1,\n                  template_title: \"Safety Inspection Template (Demo)\",\n                  inspector: currentUser.id,\n                  inspector_name: currentUser.username || \"Inspector User\",\n                  inspector_email: currentUser.email || \"inspector@example.com\",\n                  assigned_by: 1,\n                  assigned_by_name: \"Admin User\",\n                  assigned_by_email: \"admin@example.com\",\n                  status: \"assigned\",\n                  status_display: \"Assigned\",\n                  assigned_at: new Date().toISOString(),\n                  started_at: null,\n                  completed_at: null,\n                  revoked_at: null,\n                  due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days from now\n                  notes: \"Demo assignment for inspector testing\"\n                },\n                {\n                  id: 2,\n                  template: 2,\n                  template_title: \"Equipment Check Template (Demo)\",\n                  inspector: currentUser.id,\n                  inspector_name: currentUser.username || \"Inspector User\",\n                  inspector_email: currentUser.email || \"inspector@example.com\",\n                  assigned_by: 1,\n                  assigned_by_name: \"Admin User\",\n                  assigned_by_email: \"admin@example.com\",\n                  status: \"in_progress\",\n                  status_display: \"In Progress\",\n                  assigned_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n                  started_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // 1 day ago\n                  completed_at: null,\n                  revoked_at: null,\n                  due_date: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days from now\n                  notes: \"Demo assignment in progress\"\n                }\n              ]);\n            } else {\n              setAssignments(data);\n            }\n          } catch (error) {\n            console.error(\"Error fetching inspector assignments:\", error);\n            // Create demo assignments on error\n            setAssignments([\n              {\n                id: 1,\n                template: 1,\n                template_title: \"Safety Inspection Template (Demo)\",\n                inspector: currentUser.id,\n                inspector_name: currentUser.username || \"Inspector User\",\n                inspector_email: currentUser.email || \"inspector@example.com\",\n                assigned_by: 1,\n                assigned_by_name: \"Admin User\",\n                assigned_by_email: \"admin@example.com\",\n                status: \"assigned\",\n                status_display: \"Assigned\",\n                assigned_at: new Date().toISOString(),\n                started_at: null,\n                completed_at: null,\n                revoked_at: null,\n                due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n                notes: \"Demo assignment for inspector testing\"\n              }\n            ]);\n          }\n        } else {\n          setAssignments([]);\n        }\n      } catch (error) {\n        console.error(\"Error loading assignments:\", error);\n        setError(\"Failed to load scheduled inspections\");\n        // Set demo data for display\n        setAssignments([\n          {\n            id: 1,\n            template: 1,\n            template_title: \"Safety Inspection Template (Demo)\",\n            inspector: 2,\n            inspector_name: \"John Inspector\",\n            inspector_email: \"john@example.com\",\n            assigned_by: 1,\n            assigned_by_name: \"Admin User\",\n            assigned_by_email: \"admin@example.com\",\n            status: \"assigned\",\n            status_display: \"Assigned\",\n            assigned_at: new Date().toISOString(),\n            started_at: null,\n            completed_at: null,\n            revoked_at: null,\n            due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days from now\n            notes: \"Demo assignment\"\n          }\n        ]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchAssignments();\n  }, [currentUser]);\n\n  const handleScheduleInspections = () => {\n    setShowScheduleModal(true);\n  };\n\n  const handleAssignTemplate = () => {\n    // Clear any selected template to show all templates\n    setSelectedTemplateForAssignment(null);\n    setShowAssignmentModal(true);\n  };\n\n  const handleLogout = async () => {\n    try {\n      // Call the logout API\n      await axios.post('http://localhost:8000/api/users/logout/', {}, {\n        withCredentials: true,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Clear any stored user data\n      localStorage.removeItem('username');\n      localStorage.removeItem('user_role');\n\n      // Redirect to login page\n      window.location.href = '/login';\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Even if logout API fails, clear local data and redirect\n      localStorage.removeItem('username');\n      localStorage.removeItem('user_role');\n      window.location.href = '/login';\n    }\n  };\n\n  // Fetch templates for assignment\n  useEffect(() => {\n    const fetchTemplates = async () => {\n      try {\n        // Use the same endpoints as Dashboard.tsx\n        const endpointsToTry = [\n          \"/api/users/dashboard/templates/\",\n          \"/api/users/templates/\",\n          \"/api/templates/\",\n        ];\n\n        let templatesData = [];\n\n        for (const endpoint of endpointsToTry) {\n          try {\n            console.log(`Schedule: Trying endpoint: ${endpoint}`);\n            const fullUrl = `http://localhost:8000${endpoint}`;\n            const response = await fetch(fullUrl, {\n              credentials: 'include'\n            });\n\n            if (response.ok) {\n              const data = await response.json();\n              console.log(\"Schedule: Template data received:\", data);\n\n              // Check if the response has the new format with owned_templates and shared_templates\n              if (data.owned_templates && data.shared_templates) {\n                console.log(\"Schedule: Using new API format with owned and shared templates\");\n                templatesData = [...data.owned_templates, ...data.shared_templates];\n              } else if (Array.isArray(data)) {\n                templatesData = data;\n              } else {\n                console.log(\"Schedule: Unknown data format\");\n                templatesData = [];\n              }\n\n              console.log(\"Schedule: Final templates to set:\", templatesData);\n              setTemplates(templatesData);\n              return;\n            }\n          } catch (error) {\n            console.error(`Schedule: Error with endpoint ${endpoint}:`, error);\n            continue;\n          }\n        }\n\n        // If all endpoints fail, set demo data\n        console.log(\"Schedule: All endpoints failed, using demo data\");\n        setTemplates([\n          {\n            id: 1,\n            title: \"Safety Inspection Template (Demo)\",\n            description: \"Demo template for safety inspections\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            owner: 1\n          },\n          {\n            id: 2,\n            title: \"Equipment Check Template (Demo)\",\n            description: \"Demo template for equipment checks\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            owner: 1\n          },\n          {\n            id: 3,\n            title: \"Fire Safety Audit Template (Demo)\",\n            description: \"Demo template for fire safety audits\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            owner: 1\n          }\n        ]);\n      } catch (error) {\n        console.error(\"Schedule: Error fetching templates:\", error);\n        // Set demo data as fallback\n        setTemplates([\n          {\n            id: 1,\n            title: \"Safety Inspection Template (Demo)\",\n            description: \"Demo template for safety inspections\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            owner: 1\n          },\n          {\n            id: 2,\n            title: \"Equipment Check Template (Demo)\",\n            description: \"Demo template for equipment checks\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            owner: 1\n          }\n        ]);\n      }\n    };\n\n    fetchTemplates();\n  }, []);\n\n  // Combine templates with assignment status\n  useEffect(() => {\n    const combineTemplatesWithStatus = () => {\n      // For inspectors, create template-like objects from assignments\n      if (currentUser?.user_role === 'inspector') {\n        const templatesFromAssignments: TemplateWithStatus[] = assignments.map(assignment => {\n          // Determine display status\n          let display_status = assignment.status_display || assignment.status;\n          let display_status_class = assignment.status;\n          let key_date: string | null = null;\n\n          // Set key date based on status\n          switch (assignment.status) {\n            case 'completed':\n              key_date = assignment.completed_at;\n              break;\n            case 'in_progress':\n              key_date = assignment.started_at;\n              break;\n            case 'assigned':\n              key_date = assignment.due_date;\n              break;\n            default:\n              key_date = assignment.due_date;\n          }\n\n          return {\n            id: assignment.template,\n            title: assignment.template_title,\n            description: `Assigned by ${assignment.assigned_by_name}`,\n            created_at: assignment.assigned_at,\n            updated_at: assignment.assigned_at,\n            lastModified: assignment.assigned_at,\n            owner: assignment.assigned_by,\n            createdBy: assignment.assigned_by_name,\n            access: 'assigned',\n            template_type: 'standard',\n            owner_name: assignment.assigned_by_name,\n            assignment: assignment,\n            status: assignment.status,\n            display_status,\n            display_status_class,\n            key_date,\n            assigned_date: assignment.assigned_at,\n            inspector_info: {\n              id: assignment.inspector,\n              name: assignment.inspector_name,\n              email: assignment.inspector_email\n            }\n          };\n        });\n\n        setTemplatesWithStatus(templatesFromAssignments);\n        return;\n      }\n\n      // For admins, use the original logic with templates\n      if (!templates.length) {\n        setTemplatesWithStatus([]);\n        return;\n      }\n\n      const templatesWithStatusData: TemplateWithStatus[] = templates.map(template => {\n        // Find the most recent assignment for this template\n        const templateAssignments = assignments.filter(assignment => assignment.template === template.id);\n\n        const latestAssignment = templateAssignments.length > 0\n          ? templateAssignments.sort((a, b) => new Date(b.assigned_at).getTime() - new Date(a.assigned_at).getTime())[0]\n          : null;\n\n        // Determine display status\n        let display_status = 'unassigned';\n        let display_status_class = 'unassigned';\n        let key_date: string | null = null;\n        let assigned_date: string | null = null;\n        let inspector_info: { id: number; name: string; email: string; } | null = null;\n\n        if (latestAssignment) {\n          display_status = latestAssignment.status_display || latestAssignment.status;\n          display_status_class = latestAssignment.status;\n          assigned_date = latestAssignment.assigned_at;\n          inspector_info = {\n            id: latestAssignment.inspector,\n            name: latestAssignment.inspector_name,\n            email: latestAssignment.inspector_email\n          };\n\n          // Set key date based on status\n          switch (latestAssignment.status) {\n            case 'completed':\n              key_date = latestAssignment.completed_at;\n              break;\n            case 'in_progress':\n              key_date = latestAssignment.started_at;\n              break;\n            case 'assigned':\n              key_date = latestAssignment.due_date;\n              break;\n            default:\n              key_date = latestAssignment.due_date;\n          }\n        } else {\n          // Template has never been assigned\n          display_status = 'Available';\n          display_status_class = 'unassigned';\n          key_date = template.created_at || template.lastModified || new Date().toISOString();\n        }\n\n        const result = {\n          ...template,\n          assignment: latestAssignment,\n          display_status,\n          display_status_class,\n          key_date,\n          assigned_date,\n          inspector_info\n        };\n\n        return result;\n      });\n\n      setTemplatesWithStatus(templatesWithStatusData);\n    };\n\n    combineTemplatesWithStatus();\n  }, [templates, assignments, currentUser]);\n\n  // Format date for display\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return \"N/A\";\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  // Filter templates based on search term\n  const filteredTemplates = templatesWithStatus.filter(template =>\n    template.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (template.inspector_info?.name.toLowerCase().includes(searchTerm.toLowerCase()) || false)\n  );\n\n  // For inspectors: Show all filtered templates (they're already filtered to their assignments)\n  // For admins: Show all templates\n  // If user not loaded yet, show all templates (assume admin for now)\n  const displayTemplates = filteredTemplates;\n\n  // Separate templates by status for better organization\n  const completedTemplates = displayTemplates.filter(t => t.display_status_class === 'completed');\n  const inProgressTemplates = displayTemplates.filter(t => t.display_status_class === 'in_progress');\n  const assignedTemplates = displayTemplates.filter(t => t.display_status_class === 'assigned');\n  const unassignedTemplates = displayTemplates.filter(t => t.display_status_class === 'unassigned');\n\n  // Get templates to display based on active tab\n  const getTabTemplates = () => {\n    // If user not loaded yet, treat as admin and show all templates\n    if (!currentUser) {\n      return displayTemplates;\n    }\n\n    // For inspectors, show their assigned templates for my-schedules, empty for others\n    if (currentUser.user_role === 'inspector') {\n      if (activeTab === 'my-schedules') {\n        // Show all templates (they're already filtered to this inspector's assignments)\n        return displayTemplates;\n      }\n      return []; // Empty for other tabs for inspectors\n    }\n\n    // For admin users, filter based on active tab\n    switch (activeTab) {\n      case 'my-schedules':\n        // Show all templates for admin\n        return displayTemplates;\n      case 'manage-schedules':\n        // Show active assignments (in progress and assigned) plus unassigned templates\n        return [...inProgressTemplates, ...assignedTemplates, ...unassignedTemplates];\n      case 'missed-late':\n        // Show overdue assignments\n        return displayTemplates.filter(template => {\n          if (!template.assignment?.due_date) return false;\n          const dueDate = new Date(template.assignment.due_date);\n          const now = new Date();\n          return dueDate < now && template.display_status_class !== 'completed';\n        });\n      case 'completed-inspections':\n        // Show completed assignments for admin to view\n        return completedTemplates;\n      default:\n        return displayTemplates;\n    }\n  };\n\n  const tabTemplates = getTabTemplates();\n\n  // Debug logging (can be removed in production)\n  console.log(\"=== SCHEDULE DEBUG INFO ===\");\n  console.log(\"Current user:\", currentUser);\n  console.log(\"Templates:\", templates);\n  console.log(\"Assignments:\", assignments);\n  console.log(\"Templates with status:\", templatesWithStatus);\n  console.log(\"Filtered templates:\", filteredTemplates);\n  console.log(\"Display templates:\", displayTemplates);\n  console.log(\"Tab templates:\", tabTemplates);\n  console.log(\"Active tab:\", activeTab);\n\n  return (\n    <div className=\"schedule-container\">\n      {/* Top Navigation */}\n      <nav className=\"schedule-navbar\">\n        <div className=\"schedule-navbar-brand\">STREAMLINEER</div>\n        <div className=\"schedule-navbar-actions\">\n          <button className=\"schedule-nav-button\" title=\"Profile\">\n            <User className=\"schedule-nav-icon\" />\n          </button>\n          <button className=\"schedule-nav-button\" title=\"Settings\">\n            <Settings className=\"schedule-nav-icon\" />\n          </button>\n          <button\n            className=\"schedule-nav-button\"\n            onClick={handleLogout}\n            title=\"Logout\"\n          >\n            <LogOut className=\"schedule-nav-icon\" />\n          </button>\n        </div>\n      </nav>\n\n      {/* Sidebar */}\n      <aside className=\"schedule-sidebar\">\n        <nav className=\"schedule-sidebar-nav\">\n          {menuItems.map((item, index) => {\n            // Make Inspections link inactive for inspector users\n            const isInspectionsLink = item.label === 'Inspections';\n            const isInspectorUser = currentUser?.user_role === 'inspector';\n            const shouldDisableLink = isInspectionsLink && isInspectorUser;\n\n            return shouldDisableLink ? (\n              <span key={index} className={`schedule-nav-link schedule-nav-link-disabled ${item.active ? 'active' : ''}`}>\n                <item.icon className=\"schedule-nav-icon\" />\n                <span>{item.label}</span>\n              </span>\n            ) : (\n              <a key={index} href={item.href} className={`schedule-nav-link ${item.active ? 'active' : ''}`}>\n                <item.icon className=\"schedule-nav-icon\" />\n                <span>{item.label}</span>\n              </a>\n            );\n          })}\n        </nav>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"schedule-main-content\">\n        <div className=\"schedule-header\">\n          <h1 className=\"schedule-page-title\">Schedules</h1>\n\n          {/* Test button to switch user role - FOR TESTING ONLY */}\n          <button\n            onClick={() => {\n              const newRole = currentUser?.user_role === 'inspector' ? 'admin' : 'inspector';\n              setCurrentUser({...currentUser, user_role: newRole});\n            }}\n            style={{\n              padding: '0.5rem 1rem',\n              marginRight: '1rem',\n              backgroundColor: currentUser?.user_role === 'inspector' ? '#ef4444' : '#10b981',\n              color: 'white',\n              border: 'none',\n              borderRadius: '0.5rem',\n              cursor: 'pointer',\n              fontSize: '0.875rem'\n            }}\n          >\n            Test as {currentUser?.user_role === 'inspector' ? 'Admin' : 'Inspector'}\n          </button>\n\n          <div className=\"schedule-header-actions\">\n            {currentUser?.user_role === 'admin' && (\n              <button\n                className=\"schedule-inspections-button\"\n                onClick={handleScheduleInspections}\n              >\n                <Plus size={16} />\n                Schedule inspections\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"schedule-tabs\">\n          <button\n            className={`schedule-tab ${activeTab === 'my-schedules' ? 'active' : ''}`}\n            onClick={() => setActiveTab('my-schedules')}\n          >\n            <span>My Schedules</span>\n          </button>\n          <button\n            className={`schedule-tab ${activeTab === 'manage-schedules' ? 'active' : ''}`}\n            onClick={() => setActiveTab('manage-schedules')}\n          >\n            <span>Manage schedules</span>\n          </button>\n          <button\n            className={`schedule-tab ${activeTab === 'missed-late' ? 'active' : ''}`}\n            onClick={() => setActiveTab('missed-late')}\n          >\n            <span>Missed/Late Inspections</span>\n          </button>\n          {currentUser?.user_role === 'admin' && (\n            <button\n              className={`schedule-tab ${activeTab === 'completed-inspections' ? 'active' : ''}`}\n              onClick={() => setActiveTab('completed-inspections')}\n            >\n              <span>Completed Inspections</span>\n            </button>\n          )}\n        </div>\n\n        {/* Search and Filter */}\n        <div className=\"schedule-controls\">\n          <div className=\"schedule-search-container\">\n            <Search size={16} className=\"schedule-search-icon\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"schedule-search-input\"\n            />\n          </div>\n          <button className=\"schedule-filter-button\">\n            <Plus size={16} />\n            Add filter\n          </button>\n        </div>\n\n        {/* Content based on loading state and templates */}\n        {loading ? (\n          <div className=\"schedule-loading\">\n            <div className=\"schedule-loading-spinner\"></div>\n            <p>Loading templates and schedules...</p>\n          </div>\n        ) : error ? (\n          <div className=\"schedule-error\">\n            <AlertCircle size={48} />\n            <h3>Error loading schedules</h3>\n            <p>{error}</p>\n          </div>\n        ) : tabTemplates.length === 0 ? (\n          <div className=\"schedule-empty-state\">\n            <div className=\"schedule-empty-illustration\">\n              <div className=\"schedule-illustration-bg\">\n                <Calendar size={80} className=\"schedule-calendar-icon\" />\n              </div>\n            </div>\n            <h2 className=\"schedule-empty-title\">\n              {activeTab === 'my-schedules' && currentUser?.user_role === 'inspector' && 'No scheduled inspections due in the next 7 days'}\n              {activeTab === 'my-schedules' && currentUser?.user_role === 'admin' && 'No templates available'}\n              {activeTab === 'manage-schedules' && 'No active assignments to manage'}\n              {activeTab === 'missed-late' && 'No missed or late inspections'}\n              {activeTab === 'completed-inspections' && 'No completed inspections found'}\n            </h2>\n            <p className=\"schedule-empty-description\">\n              {activeTab === 'my-schedules' && currentUser?.user_role === 'inspector' && \"You don't have any assigned inspections due in the next 7 days.\"}\n              {activeTab === 'my-schedules' && currentUser?.user_role === 'admin' && \"No templates have been created yet.\"}\n              {activeTab === 'manage-schedules' && \"All assignments are either completed or not yet started.\"}\n              {activeTab === 'missed-late' && \"All inspections are on track with their schedules.\"}\n              {activeTab === 'completed-inspections' && \"No inspections have been completed yet.\"}\n              <button className=\"schedule-learn-more\" onClick={() => console.log('Learn more clicked')}>Learn more.</button>\n            </p>\n          </div>\n        ) : (\n          <div className=\"schedule-content\">\n\n            {/* Unified display for both admin and inspector users */}\n            <div className=\"schedule-assignments-list\">\n              <h3 className=\"schedule-list-title\">\n                {activeTab === 'my-schedules' && `All Templates (${tabTemplates.length})`}\n                {activeTab === 'manage-schedules' && `Templates & Assignments (${tabTemplates.length})`}\n                {activeTab === 'missed-late' && `Overdue Inspections (${tabTemplates.length})`}\n                {activeTab === 'completed-inspections' && `Completed Inspections (${tabTemplates.length})`}\n              </h3>\n              <div className=\"schedule-assignments-table\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Template</th>\n                      {currentUser?.user_role === 'admin' && <th>Inspector</th>}\n                      <th>Status</th>\n                      <th>\n                        {activeTab === 'my-schedules' ? 'Key Date' :\n                         activeTab === 'manage-schedules' ? 'Key Date' :\n                         activeTab === 'missed-late' ? 'Due Date' :\n                         activeTab === 'completed-inspections' ? 'Completed Date' : 'Date'}\n                      </th>\n                      <th>Assigned Date</th>\n                      <th></th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {tabTemplates.length > 0 ? (\n                      tabTemplates.map((template) => (\n                        <tr key={template.id}>\n                          <td>\n                            <div className=\"schedule-template-cell\">\n                              <div className=\"schedule-template-icon\">\n                                <FileText size={20} />\n                              </div>\n                              <span>{template.title}</span>\n                            </div>\n                          </td>\n                          {currentUser?.user_role === 'admin' && (\n                            <td>\n                              {template.inspector_info ? (\n                                <div className=\"schedule-inspector-badge\">\n                                  <User size={16} />\n                                  <span>{template.inspector_info.name}</span>\n                                </div>\n                              ) : (\n                                <span className=\"schedule-unassigned\">Unassigned</span>\n                              )}\n                            </td>\n                          )}\n                          <td>\n                            <div className={`schedule-status-badge status-${template.display_status_class}`}>\n                              {template.display_status_class === 'assigned' && <Clock size={16} />}\n                              {template.display_status_class === 'in_progress' && <ArrowRight size={16} />}\n                              {template.display_status_class === 'completed' && <CheckCircle size={16} />}\n                              {template.display_status_class === 'unassigned' && <FileText size={16} />}\n                              <span>{template.display_status}</span>\n                            </div>\n                          </td>\n                          <td>\n                            <span className=\"schedule-key-date\">\n                              {formatDate(template.key_date)}\n                            </span>\n                          </td>\n                          <td>{formatDate(template.assigned_date)}</td>\n                          <td>\n                            <div className=\"schedule-action-buttons\">\n                              <button\n                                className={`schedule-view-button ${\n                                  currentUser?.user_role === 'admin' && template.display_status_class === 'unassigned'\n                                    ? 'schedule-assign-button' : ''\n                                }`}\n                                onClick={() => {\n                                  if (template.display_status_class === 'unassigned' && currentUser?.user_role === 'admin') {\n                                    // Store the selected template and open assignment modal\n                                    setSelectedTemplateForAssignment(template);\n                                    setShowAssignmentModal(true);\n                                  } else if (activeTab === 'completed-inspections') {\n                                    window.location.href = `/inspection?templateId=${template.id}`;\n                                  } else {\n                                    window.location.href = `/inspection?templateId=${template.id}`;\n                                  }\n                                }}\n                              >\n                                {template.display_status_class === 'unassigned' && currentUser?.user_role === 'admin' ? 'Assign' :\n                                 activeTab === 'completed-inspections' ? 'View Results' :\n                                 currentUser?.user_role === 'admin'\n                                  ? (template.display_status_class === 'completed' ? 'View Results' :\n                                     template.display_status_class === 'in_progress' ? 'Monitor' : 'Manage')\n                                  : (template.display_status_class === 'assigned' ? 'Start' :\n                                     template.display_status_class === 'in_progress' ? 'Continue' : 'View')\n                                }\n                              </button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))\n                    ) : (\n                      <tr>\n                        <td colSpan={currentUser?.user_role === 'admin' ? 6 : 5} style={{ textAlign: 'center', padding: '20px' }}>\n                          <p>No templates available for this view.</p>\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        )}\n      </main>\n\n      {/* Schedule Inspection Modal */}\n      {showScheduleModal && (\n        <ScheduleInspectionModal\n          onClose={() => setShowScheduleModal(false)}\n          onAssignmentCreated={() => {\n            // Refresh the page data after assignment\n            setShowScheduleModal(false);\n            window.location.reload();\n          }}\n        />\n      )}\n\n      {/* Template Assignment Modal */}\n      {showAssignmentModal && (\n        <div className=\"schedule-assignment-modal-overlay\">\n          <div className=\"schedule-assignment-modal\">\n            <div className=\"schedule-assignment-modal-header\">\n              <h3>Assign Template to Inspector</h3>\n              <button\n                className=\"schedule-modal-close\"\n                onClick={() => {\n                  setShowAssignmentModal(false);\n                  setSelectedTemplateForAssignment(null);\n                }}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"schedule-assignment-modal-content\">\n              {selectedTemplateForAssignment ? (\n                // Show specific template assignment\n                <>\n                  <p>Assign \"{selectedTemplateForAssignment.title}\" to an inspector:</p>\n                  <div className=\"schedule-template-list\">\n                    <div className=\"schedule-template-item\">\n                      <div className=\"schedule-template-info\">\n                        <h4>{selectedTemplateForAssignment.title}</h4>\n                        <p>{selectedTemplateForAssignment.description || 'No description available'}</p>\n                      </div>\n                      <TemplateAssignmentManager\n                        templateId={selectedTemplateForAssignment.id}\n                        templateTitle={selectedTemplateForAssignment.title}\n                        onAssignmentUpdated={() => {\n                          // Refresh assignments after assignment\n                          setShowAssignmentModal(false);\n                          setSelectedTemplateForAssignment(null);\n                          window.location.reload();\n                        }}\n                      />\n                    </div>\n                  </div>\n                </>\n              ) : (\n                // Show all templates for assignment\n                <>\n                  <p>Select a template to assign to an inspector:</p>\n                  <div className=\"schedule-template-list\">\n                    {templates.map((template) => (\n                      <div key={template.id} className=\"schedule-template-item\">\n                        <div className=\"schedule-template-info\">\n                          <h4>{template.title}</h4>\n                          <p>{template.description || 'No description available'}</p>\n                        </div>\n                        <TemplateAssignmentManager\n                          templateId={template.id}\n                          templateTitle={template.title}\n                          onAssignmentUpdated={() => {\n                            // Refresh assignments after assignment\n                            setShowAssignmentModal(false);\n                            setSelectedTemplateForAssignment(null);\n                            window.location.reload();\n                          }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Schedule;\n","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/ScheduleInspectionModal.tsx",["118"],"import React, { useState, useEffect } from 'react';\nimport { X, ChevronDown, Info, AlertCircle } from 'lucide-react';\nimport axios from 'axios';\nimport './ScheduleInspectionModal.css';\nimport { fetchCSRFToken } from '../../utils/csrf';\n\ninterface Template {\n  id: number;\n  title: string;\n  description?: string;\n}\n\ninterface Inspector {\n  id: number;\n  username: string;\n  email: string;\n  first_name?: string;\n  last_name?: string;\n}\n\ninterface ScheduleInspectionModalProps {\n  onClose: () => void;\n  onAssignmentCreated?: () => void;\n}\n\nconst ScheduleInspectionModal: React.FC<ScheduleInspectionModalProps> = ({ onClose, onAssignmentCreated }) => {\n  const [formData, setFormData] = useState({\n    template: '',\n    site: '',\n    asset: '',\n    assignedTo: '',\n    howOften: 'Once',\n    startTime: '9:00 AM',\n    endTime: '5:00 PM',\n    title: 'Once',\n    allowLateSubmission: true,\n    dueDate: '',\n    notes: ''\n  });\n\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [inspectors, setInspectors] = useState<Inspector[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Load templates and inspectors on component mount\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n      try {\n        // Load templates\n        const templatesResponse = await axios.get('/api/users/templates/', {\n          withCredentials: true\n        });\n        setTemplates(templatesResponse.data);\n\n        // Load inspectors\n        const inspectorsResponse = await axios.get('/api/users/inspectors/', {\n          withCredentials: true\n        });\n        setInspectors(inspectorsResponse.data);\n      } catch (error) {\n        console.error('Error loading data:', error);\n        setError('Failed to load templates and inspectors');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleCreate = async () => {\n    if (!formData.template || !formData.assignedTo) {\n      setError('Please select both a template and an inspector');\n      return;\n    }\n\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      const csrfToken = await fetchCSRFToken();\n\n      // Create a comprehensive assignment with all form data\n      const assignmentData = {\n        template_id: parseInt(formData.template),\n        assigned_to_id: parseInt(formData.assignedTo),\n        due_date: formData.dueDate || null,\n        notes: formData.notes || '',\n        // Include scheduling details in notes for now\n        schedule_details: {\n          site: formData.site,\n          asset: formData.asset,\n          frequency: formData.howOften,\n          start_time: formData.startTime,\n          end_time: formData.endTime,\n          title: formData.title,\n          allow_late_submission: formData.allowLateSubmission\n        }\n      };\n\n      // Combine notes with schedule details\n      let combinedNotes = formData.notes || '';\n      if (formData.site || formData.asset || formData.title !== 'Once') {\n        const scheduleInfo = [];\n        if (formData.site) scheduleInfo.push(`Site: ${formData.site}`);\n        if (formData.asset) scheduleInfo.push(`Asset: ${formData.asset}`);\n        if (formData.title !== 'Once') scheduleInfo.push(`Title: ${formData.title}`);\n        scheduleInfo.push(`Frequency: ${formData.howOften}`);\n        scheduleInfo.push(`Time: ${formData.startTime} - ${formData.endTime}`);\n        if (formData.allowLateSubmission) scheduleInfo.push('Late submissions allowed');\n\n        const scheduleText = `Schedule Details:\\n${scheduleInfo.join('\\n')}`;\n        combinedNotes = combinedNotes ? `${combinedNotes}\\n\\n${scheduleText}` : scheduleText;\n      }\n\n      console.log('🔍 Form data before processing:', formData);\n      console.log('🔍 Template value:', formData.template, 'Type:', typeof formData.template);\n      console.log('🔍 AssignedTo value:', formData.assignedTo, 'Type:', typeof formData.assignedTo);\n      console.log('🔍 parseInt(template):', parseInt(formData.template));\n      console.log('🔍 parseInt(assignedTo):', parseInt(formData.assignedTo));\n\n      // Validate and parse the IDs\n      const templateId = parseInt(formData.template);\n      const assignedToId = parseInt(formData.assignedTo);\n\n      if (isNaN(templateId) || isNaN(assignedToId)) {\n        console.error('🔍 Invalid template or assignedTo ID:', {\n          template: formData.template,\n          assignedTo: formData.assignedTo,\n          templateId,\n          assignedToId\n        });\n        setError('Please select both a template and an inspector.');\n        return;\n      }\n\n      const finalAssignmentData = {\n        template_id: templateId,\n        assigned_to_id: assignedToId,\n        due_date: formData.dueDate || null,\n        notes: combinedNotes\n      };\n\n      console.log('🔍 Final assignment data being sent:', finalAssignmentData);\n\n      await axios.post('/api/users/template-assignments/', finalAssignmentData, {\n        withCredentials: true,\n        headers: {\n          'X-CSRFToken': csrfToken,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Call the callback to refresh the parent component\n      if (onAssignmentCreated) {\n        onAssignmentCreated();\n      }\n\n      onClose();\n    } catch (error) {\n      console.error('Error creating assignment:', error);\n      setError('Failed to create schedule. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleCancel = () => {\n    onClose();\n  };\n\n  return (\n    <div className=\"schedule-modal-overlay\" onClick={onClose}>\n      <div className=\"schedule-modal\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"schedule-modal-header\">\n          <h2>Schedule Inspection</h2>\n          <button className=\"schedule-modal-close\" onClick={onClose}>\n            <X size={20} />\n          </button>\n        </div>\n\n        <div className=\"schedule-modal-content\">\n          {error && (\n            <div className=\"schedule-error-message\">\n              <AlertCircle size={16} />\n              <span>{error}</span>\n            </div>\n          )}\n\n          {loading ? (\n            <div className=\"schedule-loading\">Loading templates and inspectors...</div>\n          ) : (\n            <div className=\"schedule-form\">\n              {/* Template Field */}\n              <div className=\"schedule-form-group\">\n                <label htmlFor=\"template\">Template</label>\n                <div className=\"schedule-select-container\">\n                  <select\n                    id=\"template\"\n                    value={formData.template}\n                    onChange={(e) => handleInputChange('template', e.target.value)}\n                    className=\"schedule-select\"\n                    disabled={isSubmitting}\n                  >\n                    <option value=\"\">Add template...</option>\n                    {templates.map((template) => (\n                      <option key={template.id} value={template.id.toString()}>\n                        {template.title}\n                      </option>\n                    ))}\n                  </select>\n                  <ChevronDown size={16} className=\"schedule-select-icon\" />\n                </div>\n                <div className=\"schedule-warning\">\n                  <Info size={16} />\n                  <span>You have locked templates in your templates list</span>\n                </div>\n                <div className=\"schedule-warning-sub\">Your free plan only allows for 5 active templates</div>\n              </div>\n\n              {/* Site Field */}\n              <div className=\"schedule-form-group\">\n                <label htmlFor=\"site\">Site</label>\n                <div className=\"schedule-select-container\">\n                  <select\n                    id=\"site\"\n                    value={formData.site}\n                    onChange={(e) => handleInputChange('site', e.target.value)}\n                    className=\"schedule-select\"\n                    disabled={isSubmitting}\n                  >\n                    <option value=\"\">Select</option>\n                    <option value=\"site1\">Site 1</option>\n                    <option value=\"site2\">Site 2</option>\n                  </select>\n                  <ChevronDown size={16} className=\"schedule-select-icon\" />\n                </div>\n              </div>\n\n              {/* Asset Field */}\n              <div className=\"schedule-form-group\">\n                <label htmlFor=\"asset\">Asset</label>\n                <div className=\"schedule-select-container\">\n                  <select\n                    id=\"asset\"\n                    value={formData.asset}\n                    onChange={(e) => handleInputChange('asset', e.target.value)}\n                    className=\"schedule-select\"\n                    disabled={isSubmitting}\n                  >\n                    <option value=\"\">Select</option>\n                    <option value=\"asset1\">Asset 1</option>\n                    <option value=\"asset2\">Asset 2</option>\n                  </select>\n                  <ChevronDown size={16} className=\"schedule-select-icon\" />\n                </div>\n              </div>\n\n              {/* Assigned to Field */}\n              <div className=\"schedule-form-group\">\n                <label htmlFor=\"assignedTo\">Assigned to</label>\n                <div className=\"schedule-select-container\">\n                  <select\n                    id=\"assignedTo\"\n                    value={formData.assignedTo}\n                    onChange={(e) => handleInputChange('assignedTo', e.target.value)}\n                    className=\"schedule-select\"\n                    disabled={isSubmitting}\n                  >\n                    <option value=\"\">Assignee</option>\n                    {inspectors.map((inspector) => (\n                      <option key={inspector.id} value={inspector.id.toString()}>\n                        {inspector.first_name && inspector.last_name\n                          ? `${inspector.first_name} ${inspector.last_name} (${inspector.email})`\n                          : `${inspector.username} (${inspector.email})`\n                        }\n                      </option>\n                    ))}\n                  </select>\n                  <ChevronDown size={16} className=\"schedule-select-icon\" />\n                </div>\n              </div>\n\n              {/* How often Field */}\n              <div className=\"schedule-form-group\">\n                <label htmlFor=\"howOften\">How often</label>\n                <div className=\"schedule-select-container\">\n                  <select\n                    id=\"howOften\"\n                    value={formData.howOften}\n                    onChange={(e) => handleInputChange('howOften', e.target.value)}\n                    className=\"schedule-select\"\n                    disabled={isSubmitting}\n                  >\n                    <option value=\"Once\">Once</option>\n                    <option value=\"Every day\">Every day</option>\n                    <option value=\"Weekly\">Weekly</option>\n                    <option value=\"Monthly\">Monthly</option>\n                  </select>\n                  <ChevronDown size={16} className=\"schedule-select-icon\" />\n                </div>\n              </div>\n\n              {/* Time Fields */}\n              <div className=\"schedule-time-row\">\n                <div className=\"schedule-form-group\">\n                  <div className=\"schedule-select-container\">\n                    <select\n                      value={formData.startTime}\n                      onChange={(e) => handleInputChange('startTime', e.target.value)}\n                      className=\"schedule-select\"\n                      disabled={isSubmitting}\n                    >\n                      <option value=\"9:00 AM\">9:00 AM</option>\n                      <option value=\"10:00 AM\">10:00 AM</option>\n                      <option value=\"11:00 AM\">11:00 AM</option>\n                    </select>\n                    <ChevronDown size={16} className=\"schedule-select-icon\" />\n                  </div>\n                </div>\n                <div className=\"schedule-form-group\">\n                  <div className=\"schedule-select-container\">\n                    <select\n                      value={formData.endTime}\n                      onChange={(e) => handleInputChange('endTime', e.target.value)}\n                      className=\"schedule-select\"\n                      disabled={isSubmitting}\n                    >\n                      <option value=\"5:00 PM\">5:00 PM</option>\n                      <option value=\"6:00 PM\">6:00 PM</option>\n                      <option value=\"7:00 PM\">7:00 PM</option>\n                    </select>\n                    <ChevronDown size={16} className=\"schedule-select-icon\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"schedule-date-info\">First schedule starts on 29 May 2025.</div>\n\n              {/* Checkbox */}\n              <div className=\"schedule-checkbox-group\">\n                <input\n                  type=\"checkbox\"\n                  id=\"allowLateSubmission\"\n                  checked={formData.allowLateSubmission}\n                  onChange={(e) => handleInputChange('allowLateSubmission', e.target.checked)}\n                  className=\"schedule-checkbox\"\n                  disabled={isSubmitting}\n                />\n                <label htmlFor=\"allowLateSubmission\">\n                  Allow inspections to be submitted after the due date\n                  <Info size={16} className=\"schedule-info-icon\" />\n                </label>\n              </div>\n\n              {/* Title Field */}\n              <div className=\"schedule-form-group\">\n                <label htmlFor=\"title\">Title</label>\n                <input\n                  type=\"text\"\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => handleInputChange('title', e.target.value)}\n                  className=\"schedule-input\"\n                  placeholder=\"Once\"\n                  disabled={isSubmitting}\n                />\n              </div>\n\n              {/* Additional Fields for Assignment */}\n              <div className=\"schedule-form-group\">\n                <label htmlFor=\"dueDate\">Due Date (Optional)</label>\n                <input\n                  type=\"date\"\n                  id=\"dueDate\"\n                  value={formData.dueDate}\n                  onChange={(e) => handleInputChange('dueDate', e.target.value)}\n                  className=\"schedule-input\"\n                  disabled={isSubmitting}\n                />\n              </div>\n\n              <div className=\"schedule-form-group\">\n                <label htmlFor=\"notes\">Notes (Optional)</label>\n                <textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => handleInputChange('notes', e.target.value)}\n                  className=\"schedule-textarea\"\n                  placeholder=\"Add any additional notes for the inspector...\"\n                  rows={3}\n                  disabled={isSubmitting}\n                />\n              </div>\n            </div>\n          )}\n\n        </div>\n\n        <div className=\"schedule-modal-footer\">\n          <button\n            className=\"schedule-cancel-button\"\n            onClick={handleCancel}\n            disabled={isSubmitting}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"schedule-create-button\"\n            onClick={handleCreate}\n            disabled={isSubmitting || loading || !formData.template || !formData.assignedTo}\n          >\n            {isSubmitting ? 'Creating...' : 'Create'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScheduleInspectionModal;\n",{"ruleId":"119","severity":1,"message":"120","line":12,"column":3,"nodeType":"121","messageId":"122","endLine":12,"endColumn":6},{"ruleId":"119","severity":1,"message":"123","line":13,"column":3,"nodeType":"121","messageId":"122","endLine":13,"endColumn":17},{"ruleId":"124","severity":1,"message":"125","line":345,"column":6,"nodeType":"126","endLine":345,"endColumn":19,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"128","line":307,"column":6,"nodeType":"126","endLine":307,"endColumn":33,"suggestions":"129"},{"ruleId":"124","severity":1,"message":"130","line":279,"column":34,"nodeType":"121","endLine":279,"endColumn":41},{"ruleId":"119","severity":1,"message":"131","line":290,"column":23,"nodeType":"121","messageId":"122","endLine":290,"endColumn":38},{"ruleId":"119","severity":1,"message":"132","line":291,"column":20,"nodeType":"121","messageId":"122","endLine":291,"endColumn":32},{"ruleId":"119","severity":1,"message":"133","line":294,"column":25,"nodeType":"121","messageId":"122","endLine":294,"endColumn":42},{"ruleId":"119","severity":1,"message":"134","line":10,"column":8,"nodeType":"121","messageId":"122","endLine":10,"endColumn":33},{"ruleId":"119","severity":1,"message":"135","line":36,"column":3,"nodeType":"121","messageId":"122","endLine":36,"endColumn":18},{"ruleId":"119","severity":1,"message":"136","line":51,"column":3,"nodeType":"121","messageId":"122","endLine":51,"endColumn":17},{"ruleId":"119","severity":1,"message":"137","line":193,"column":10,"nodeType":"121","messageId":"122","endLine":193,"endColumn":19},{"ruleId":"119","severity":1,"message":"138","line":2162,"column":10,"nodeType":"121","messageId":"122","endLine":2162,"endColumn":20},{"ruleId":"119","severity":1,"message":"139","line":2162,"column":22,"nodeType":"121","messageId":"122","endLine":2162,"endColumn":35},{"ruleId":"119","severity":1,"message":"140","line":2163,"column":10,"nodeType":"121","messageId":"122","endLine":2163,"endColumn":22},{"ruleId":"119","severity":1,"message":"141","line":6,"column":3,"nodeType":"121","messageId":"122","endLine":6,"endColumn":7},{"ruleId":"119","severity":1,"message":"142","line":7,"column":3,"nodeType":"121","messageId":"122","endLine":7,"endColumn":9},{"ruleId":"119","severity":1,"message":"143","line":15,"column":3,"nodeType":"121","messageId":"122","endLine":15,"endColumn":8},{"ruleId":"119","severity":1,"message":"144","line":73,"column":7,"nodeType":"121","messageId":"122","endLine":73,"endColumn":31},{"ruleId":"124","severity":1,"message":"145","line":145,"column":6,"nodeType":"126","endLine":145,"endColumn":51,"suggestions":"146"},{"ruleId":"119","severity":1,"message":"147","line":156,"column":10,"nodeType":"121","messageId":"122","endLine":156,"endColumn":30},{"ruleId":"119","severity":1,"message":"148","line":156,"column":32,"nodeType":"121","messageId":"122","endLine":156,"endColumn":55},{"ruleId":"119","severity":1,"message":"149","line":163,"column":23,"nodeType":"121","messageId":"122","endLine":163,"endColumn":37},{"ruleId":"119","severity":1,"message":"150","line":299,"column":9,"nodeType":"121","messageId":"122","endLine":299,"endColumn":32},{"ruleId":"119","severity":1,"message":"151","line":285,"column":9,"nodeType":"121","messageId":"122","endLine":285,"endColumn":29},{"ruleId":"119","severity":1,"message":"152","line":94,"column":13,"nodeType":"121","messageId":"122","endLine":94,"endColumn":27},"@typescript-eslint/no-unused-vars","'Eye' is defined but never used.","Identifier","unusedVar","'MoreHorizontal' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'endpointsToTry' and 'loggedInUser'. Either include them or remove the dependency array.","ArrayExpression",["153"],"React Hook useEffect has missing dependencies: 'checkAuthStatus' and 'endpointsToTry'. Either include them or remove the dependency array.",["154"],"The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","'featuresVisible' is assigned a value but never used.","'statsVisible' is assigned a value but never used.","'industriesVisible' is assigned a value but never used.","'TemplateAssignmentManager' is defined but never used.","'CornerDownRight' is defined but never used.","'ClipboardCheck' is defined but never used.","'getCookie' is defined but never used.","'templateId' is assigned a value but never used.","'setTemplateId' is assigned a value but never used.","'templateData' is assigned a value but never used.","'Mail' is defined but never used.","'Shield' is defined but never used.","'Users' is defined but never used.","'getPermissionDescription' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'createDefaultOwner'. Either include it or remove the dependency array.",["155"],"'showConnectionsModal' is assigned a value but never used.","'setShowConnectionsModal' is assigned a value but never used.","'setConnections' is assigned a value but never used.","'handleTransferOwnership' is assigned a value but never used.","'handleAssignTemplate' is assigned a value but never used.","'assignmentData' is assigned a value but never used.",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [currentUser, endpointsToTry, loggedInUser]",{"range":"162","text":"163"},"Update the dependencies array to be: [loggedInUser, currentUser, checkAuthStatus, endpointsToTry]",{"range":"164","text":"165"},"Update the dependencies array to be: [currentUser, isLoading, initialUsers.length, createDefaultOwner]",{"range":"166","text":"167"},[11088,11101],"[currentUser, endpointsToTry, loggedInUser]",[9760,9787],"[loggedInUser, currentUser, checkAuthStatus, endpointsToTry]",[3593,3638],"[currentUser, isLoading, initialUsers.length, createDefaultOwner]"]