[{"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\index.tsx":"1","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\App.tsx":"2","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\routes.tsx":"3","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\register.tsx":"4","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\TemplateView.tsx":"5","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Dashboard.tsx":"6","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\login.tsx":"7","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\home.tsx":"8","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Template.tsx":"9","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Create_template.tsx":"10","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\utils\\csrf.ts":"11","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\components\\ConnectionsPanel.tsx":"12","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\components\\AccessManager.tsx":"13","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\garment-template.tsx":"14","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\utils\\aqlHelpers.ts":"15","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\utils\\aqlTables.ts":"16"},{"size":332,"mtime":1740314516837,"results":"17","hashOfConfig":"18"},{"size":244,"mtime":1745474310903,"results":"19","hashOfConfig":"18"},{"size":1303,"mtime":1746938442097,"results":"20","hashOfConfig":"18"},{"size":9374,"mtime":1740324531641,"results":"21","hashOfConfig":"18"},{"size":8303,"mtime":1746940154391,"results":"22","hashOfConfig":"18"},{"size":9676,"mtime":1746940055373,"results":"23","hashOfConfig":"18"},{"size":5163,"mtime":1746707668316,"results":"24","hashOfConfig":"18"},{"size":51488,"mtime":1746708741003,"results":"25","hashOfConfig":"18"},{"size":13888,"mtime":1746939843178,"results":"26","hashOfConfig":"18"},{"size":116753,"mtime":1746858649557,"results":"27","hashOfConfig":"18"},{"size":1118,"mtime":1746677293210,"results":"28","hashOfConfig":"18"},{"size":10716,"mtime":1745322908030,"results":"29","hashOfConfig":"18"},{"size":23977,"mtime":1746854187901,"results":"30","hashOfConfig":"18"},{"size":136569,"mtime":1746939062879,"results":"31","hashOfConfig":"18"},{"size":466,"mtime":1746859391926,"results":"32","hashOfConfig":"18"},{"size":2185,"mtime":1746877598045,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1azbrgt",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\index.tsx",[],["70","71"],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\App.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\routes.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\register.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\TemplateView.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Dashboard.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\login.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\home.tsx",["72","73","74","75","76","77"],"\"use client\"\r\nimport { Link } from \"react-router-dom\";\r\nimport type React from \"react\"\r\nimport { useState, useEffect, useRef } from \"react\"\r\nimport {\r\n  ChevronDown,\r\n  Menu,\r\n  X,\r\n  ArrowRight,\r\n  Check,\r\n  Zap,\r\n  Shield,\r\n  BarChart3,\r\n  Clock,\r\n  FileCheck,\r\n  Smartphone,\r\n  PenTool,\r\n  Users,\r\n  Building,\r\n  Car,\r\n  Clipboard,\r\n  CheckCircle2,\r\n  AlertTriangle,\r\n  Wrench,\r\n  ArrowUpRight,\r\n  MousePointer,\r\n  ChevronRight,\r\n  Star,\r\n  Award,\r\n  Sparkles,\r\n} from \"lucide-react\"\r\nimport \"./Home2.css\"\r\n\r\n// Custom Image component to replace Next.js Image\r\nconst Image = ({\r\n  src,\r\n  alt,\r\n  width,\r\n  height,\r\n  className,\r\n}: {\r\n  src: string\r\n  alt: string\r\n  width: number\r\n  height: number\r\n  className?: string\r\n}) => {\r\n  return (\r\n    <img\r\n      src={src || \"/placeholder.svg\"}\r\n      alt={alt}\r\n      width={width}\r\n      height={height}\r\n      className={className}\r\n      style={{ maxWidth: \"100%\", height: \"auto\" }}\r\n    />\r\n  )\r\n}\r\n\r\nconst Home2: React.FC = () => {\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\r\n  const [activeTab, setActiveTab] = useState(0)\r\n  const [activeFaq, setActiveFaq] = useState<number | null>(null)\r\n  const [currentBg, setCurrentBg] = useState(0)\r\n  const [isScrolled, setIsScrolled] = useState(false)\r\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })\r\n  const cursorRef = useRef<HTMLDivElement>(null)\r\n\r\n  // Background images for header\r\n  const bgImages = [\r\n    \"/placeholder.svg?height=600&width=600&text=Image1\",\r\n    \"/placeholder.svg?height=600&width=600&text=Image2\",\r\n    \"/placeholder.svg?height=600&width=600&text=Image3\",\r\n    \"/placeholder.svg?height=600&width=600&text=Image4\",\r\n    \"/placeholder.svg?height=600&width=600&text=Image5\",\r\n  ]\r\n\r\n  // Tabs for features section\r\n  const tabs = [\r\n    {\r\n      title: \"Template Builder\",\r\n      icon: <PenTool size={20} />,\r\n      contentTitle: \"Intuitive Drag-and-Drop Template Builder\",\r\n      description:\r\n        \"Create any checklist or form you need. Utilize diverse question types (text, number, multiple-choice, signature, photo, GPS), add conditional logic, scoring, mandatory fields, and instructional media.\",\r\n      image: \"/placeholder.svg?height=400&width=600&text=Template+Builder\",\r\n    },\r\n    {\r\n      title: \"Mobile Inspections\",\r\n      icon: <Smartphone size={20} />,\r\n      contentTitle: \"Powerful Mobile Inspection App\",\r\n      description:\r\n        \"The easy-to-use app for iOS & Android ensures seamless inspections. Works flawlessly offline, allows rich data capture (annotated photos, notes), and provides access to relevant templates anytime.\",\r\n      image: \"/placeholder.svg?height=400&width=600&text=Mobile+App\",\r\n    },\r\n    {\r\n      title: \"Instant Reporting\",\r\n      icon: <FileCheck size={20} />,\r\n      contentTitle: \"Automated Inspection Reporting\",\r\n      description:\r\n        \"Forget manual report writing. Generate customizable PDF or web reports instantly after each inspection. Visualize data, track completion rates, and identify trends on dashboards.\",\r\n      image: \"/placeholder.svg?height=400&width=600&text=Reporting\",\r\n    },\r\n    {\r\n      title: \"Findings & Actions\",\r\n      icon: <AlertTriangle size={20} />,\r\n      contentTitle: \"Integrated Findings & Action Tracking\",\r\n      description:\r\n        \"Flag issues or non-conformances directly within an inspection. Assign corrective actions with deadlines and track their status to ensure prompt resolution, all linked back to the original inspection.\",\r\n      image: \"/placeholder.svg?height=400&width=600&text=Action+Tracking\",\r\n    },\r\n  ]\r\n\r\n  // Stats for metrics section\r\n  const stats = [\r\n    { value: \"90%\", label: \"Faster Template Creation & Updates\" },\r\n    { value: \"50%\", label: \"Reduction in Inspection Time\" },\r\n    { value: \"100%\", label: \"Data Consistency Across Inspections\" },\r\n    { value: \"Instant\", label: \"Access to Completed Reports\" },\r\n  ]\r\n\r\n  // Industries for use cases section\r\n  const industries = [\r\n    { icon: <Shield size={24} />, title: \"Safety Walkthroughs & Audits\" },\r\n    { icon: <CheckCircle2 size={24} />, title: \"Quality Assurance Checklists\" },\r\n    { icon: <Wrench size={24} />, title: \"Preventative Maintenance Forms\" },\r\n    { icon: <Car size={24} />, title: \"Vehicle & Equipment Inspections\" },\r\n    { icon: <Building size={24} />, title: \"Facility & Site Inspections\" },\r\n    { icon: <Clipboard size={24} />, title: \"Regulatory Compliance Audits\" },\r\n    { icon: <Users size={24} />, title: \"Training Assessments & Sign-offs\" },\r\n    { icon: <BarChart3 size={24} />, title: \"Inventory & Stock Checks\" },\r\n  ]\r\n\r\n  // Testimonials\r\n  const testimonials = [\r\n    {\r\n      quote:\r\n        \"Creating and updating our complex safety checklists used to take days. With StreamLineer, we can build and deploy new templates in under an hour. It's incredibly intuitive.\",\r\n      name: \"John Davis\",\r\n      role: \"EHS Manager\",\r\n      company: \"Construction Group Ltd.\",\r\n      avatar: \"/placeholder.svg?height=60&width=60&text=JD\",\r\n    },\r\n    {\r\n      quote:\r\n        \"Our inspectors love the mobile app. It guides them through the process, works offline perfectly, and the instant reports have drastically cut down admin time back in the office.\",\r\n      name: \"Maria Garcia\",\r\n      role: \"Quality Assurance Lead\",\r\n      company: \"Food Processing Co.\",\r\n      avatar: \"/placeholder.svg?height=60&width=60&text=MG\",\r\n    },\r\n    {\r\n      quote:\r\n        \"The template builder is so flexible that we've been able to digitize every single inspection process in our organization. The ROI has been incredible.\",\r\n      name: \"Robert Chen\",\r\n      role: \"Operations Director\",\r\n      company: \"Global Manufacturing Inc.\",\r\n      avatar: \"/placeholder.svg?height=60&width=60&text=RC\",\r\n    },\r\n  ]\r\n\r\n  // FAQs\r\n  const faqs = [\r\n    {\r\n      question: \"What types of questions/fields can I add to templates?\",\r\n      answer:\r\n        \"StreamLineer supports a wide range of field types including text, number, multiple choice, checkboxes, dropdown menus, date/time pickers, photo capture with annotation, signature fields, GPS location, barcode/QR scanning, and scoring fields. You can also add instructional text, images, or videos to guide inspectors.\",\r\n    },\r\n    {\r\n      question: \"How are templates shared and updated for field users?\",\r\n      answer:\r\n        \"Templates are centrally managed in the cloud. When you publish a new template or update an existing one, it's automatically synced to all users' mobile devices the next time they connect to the internet. Version control ensures everyone is always using the latest template version.\",\r\n    },\r\n    {\r\n      question: \"Does the mobile app work without an internet connection?\",\r\n      answer:\r\n        \"Yes, the StreamLineer mobile app is designed to work completely offline. Users can download templates when connected, conduct inspections without internet access, and all data is securely stored on the device until they reconnect, at which point it automatically syncs to the cloud.\",\r\n    },\r\n    {\r\n      question: \"Can I generate different report formats from inspections?\",\r\n      answer:\r\n        \"Absolutely. Fashcognitive offers customizable PDF reports with your branding, web-based interactive reports, and raw data exports in CSV or Excel format. You can create multiple report templates for different audiences or purposes from the same inspection data.\",\r\n    },\r\n    {\r\n      question: \"How are findings or failed items handled during an inspection?\",\r\n      answer:\r\n        \"When an inspector identifies an issue during an inspection, they can flag it as a finding, add photos and notes, assign a severity level, and create an action item directly from that finding. These actions can be assigned to team members with due dates and tracked to completion.\",\r\n    },\r\n    {\r\n      question: \"Is there a limit to the number of templates or inspections?\",\r\n      answer:\r\n        \"Our Professional and Enterprise plans include unlimited templates and inspections. The Starter plan includes up to 10 templates and 100 inspections per month. All plans can be upgraded as your needs grow.\",\r\n    },\r\n  ]\r\n\r\n  // Workflow steps with enhanced content\r\n  const workflowSteps = [\r\n    {\r\n      number: 1,\r\n      icon: <PenTool size={32} />,\r\n      title: \"Build\",\r\n      description:\r\n        \"Craft intelligent inspection templates effortlessly using our powerful, user-friendly builder. Add various field types and logic.\",\r\n      color: \"#4895ef\",\r\n      highlights: [\"Drag-and-drop interface\", \"Conditional logic\", \"Multiple question types\", \"Template versioning\"],\r\n    },\r\n    {\r\n      number: 2,\r\n      icon: <Smartphone size={32} />,\r\n      title: \"Inspect\",\r\n      description:\r\n        \"Conduct thorough inspections anywhere using the intuitive mobile app – even offline. Capture rich data quickly and easily.\",\r\n      color: \"#3a7bc8\",\r\n      highlights: [\"Works offline\", \"Photo annotations\", \"GPS location tracking\", \"Digital signatures\"],\r\n    },\r\n    {\r\n      number: 3,\r\n      icon: <FileCheck size={32} />,\r\n      title: \"Report\",\r\n      description:\r\n        \"Access detailed inspection reports instantly upon completion. Analyze performance with real-time dashboards.\",\r\n      color: \"#4cc9f0\",\r\n      highlights: [\"Instant PDF generation\", \"Custom report templates\", \"Data visualization\", \"Export options\"],\r\n    },\r\n    {\r\n      number: 4,\r\n      icon: <Zap size={32} />,\r\n      title: \"Act\",\r\n      description:\r\n        \"Identify findings during inspections and assign corrective actions directly within the app for seamless follow-up.\",\r\n      color: \"#3f37c9\",\r\n      highlights: [\"Action assignment\", \"Due date tracking\", \"Notification system\", \"Completion verification\"],\r\n    },\r\n  ]\r\n\r\n  // Background image rotation effect\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentBg((prev) => (prev + 1) % bgImages.length)\r\n    }, 3000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  // Scroll effect for header\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      if (window.scrollY > 50) {\r\n        setIsScrolled(true)\r\n      } else {\r\n        setIsScrolled(false)\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"scroll\", handleScroll)\r\n    return () => window.removeEventListener(\"scroll\", handleScroll)\r\n  }, [])\r\n\r\n  // Mouse move effect\r\n  useEffect(() => {\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const { clientX, clientY } = e\r\n      setMousePosition({ x: clientX, y: clientY })\r\n\r\n      // Update custom cursor position\r\n      if (cursorRef.current) {\r\n        cursorRef.current.style.left = `${clientX}px`\r\n        cursorRef.current.style.top = `${clientY}px`\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"mousemove\", handleMouseMove)\r\n    return () => window.removeEventListener(\"mousemove\", handleMouseMove)\r\n  }, [])\r\n\r\n  // Intersection Observer for animations\r\n  const useOnScreen = (options = {}) => {\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    const [isVisible, setIsVisible] = useState(false)\r\n\r\n    useEffect(() => {\r\n      const observer = new IntersectionObserver(([entry]) => {\r\n        setIsVisible(entry.isIntersecting)\r\n      }, options)\r\n\r\n      if (ref.current) {\r\n        observer.observe(ref.current)\r\n      }\r\n\r\n      return () => {\r\n        if (ref.current) {\r\n          observer.unobserve(ref.current)\r\n        }\r\n      }\r\n    }, [ref, options])\r\n\r\n    return [ref, isVisible] as const\r\n  }\r\n\r\n  // Refs for scroll animations\r\n  const [heroRef, heroVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [workflowRef, workflowVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [featuresRef, featuresVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [statsRef, statsVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [templateRef, templateVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [mobileRef, mobileVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [industriesRef, industriesVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [testimonialsRef, testimonialsVisible] = useOnScreen({ threshold: 0.1 })\r\n  const [ctaRef, ctaVisible] = useOnScreen({ threshold: 0.1 })\r\n\r\n  // Custom cursor state management\r\n  const [cursorVariant, setCursorVariant] = useState(\"default\")\r\n\r\n  // Function to enter button cursor state\r\n  const enterButton = () => setCursorVariant(\"button\")\r\n  // Function to enter link cursor state\r\n  const enterLink = () => setCursorVariant(\"link\")\r\n  // Function to reset cursor state\r\n  const leaveHover = () => setCursorVariant(\"default\")\r\n\r\n  // Apply 3D tilt effect to an element\r\n  const applyTiltEffect = (element: HTMLElement, mouseX: number, mouseY: number) => {\r\n    if (!element) return\r\n\r\n    const rect = element.getBoundingClientRect()\r\n    const centerX = rect.left + rect.width / 2\r\n    const centerY = rect.top + rect.height / 2\r\n\r\n    const rotateY = ((mouseX - centerX) / (window.innerWidth / 2)) * 5\r\n    const rotateX = ((centerY - mouseY) / (window.innerHeight / 2)) * 5\r\n\r\n    element.style.transform = `perspective(1000px) rotateY(${rotateY}deg) rotateX(${rotateX}deg)`\r\n  }\r\n\r\n  // Apply tilt effect to hero image\r\n  useEffect(() => {\r\n    const heroImage = document.querySelector(\".Home2-hero-image-container\") as HTMLElement\r\n    const templateImage = document.querySelector(\".Home2-template-img-container\") as HTMLElement\r\n    const mobileImage = document.querySelector(\".Home2-mobile-img-container\") as HTMLElement\r\n\r\n    if (heroImage && heroVisible) {\r\n      applyTiltEffect(heroImage, mousePosition.x, mousePosition.y)\r\n    }\r\n\r\n    if (templateImage && templateVisible) {\r\n      applyTiltEffect(templateImage, mousePosition.x, mousePosition.y)\r\n    }\r\n\r\n    if (mobileImage && mobileVisible) {\r\n      applyTiltEffect(mobileImage, mousePosition.x, mousePosition.y)\r\n    }\r\n  }, [mousePosition, heroVisible, templateVisible, mobileVisible])\r\n\r\n  // Initialize floating elements animation\r\n  useEffect(() => {\r\n    const floatingElements = document.querySelectorAll(\".Home2-floating-element\")\r\n\r\n    floatingElements.forEach((element, index) => {\r\n      const el = element as HTMLElement\r\n      const duration = 6 + index * 2\r\n      const delay = index * 0.5\r\n\r\n      // Set initial animation properties\r\n      el.style.animation = `float ${duration}s ease-in-out ${delay}s infinite alternate`\r\n    })\r\n  }, [])\r\n\r\n  // Initialize scroll animations\r\n  useEffect(() => {\r\n    const animateOnScroll = () => {\r\n      const elements = document.querySelectorAll(\".Home2-animate-on-scroll\")\r\n\r\n      elements.forEach((element) => {\r\n        const el = element as HTMLElement\r\n        const rect = el.getBoundingClientRect()\r\n\r\n        if (rect.top < window.innerHeight * 0.8) {\r\n          el.classList.add(\"Home2-animate-in\")\r\n        }\r\n      })\r\n    }\r\n\r\n    window.addEventListener(\"scroll\", animateOnScroll)\r\n    animateOnScroll() // Run once on mount\r\n\r\n    return () => window.removeEventListener(\"scroll\", animateOnScroll)\r\n  }, [])\r\n\r\n  // Initialize progress indicators for workflow steps\r\n  useEffect(() => {\r\n    if (workflowVisible) {\r\n      const progressIndicators = document.querySelectorAll(\".Home2-step-progress-indicator\")\r\n\r\n      progressIndicators.forEach((indicator, index) => {\r\n        const el = indicator as HTMLElement\r\n        setTimeout(\r\n          () => {\r\n            el.style.width = \"100%\"\r\n          },\r\n          300 + index * 200,\r\n        )\r\n      })\r\n    }\r\n  }, [workflowVisible])\r\n\r\n  // FAQ animation\r\n  const toggleFaq = (index: number) => {\r\n    // Toggle the active FAQ without hiding any questions\r\n    if (activeFaq === index) {\r\n      setActiveFaq(null)\r\n    } else {\r\n      setActiveFaq(index)\r\n    }\r\n\r\n    // Ensure all FAQ items remain visible after a short delay\r\n    setTimeout(() => {\r\n      const faqItems = document.querySelectorAll('.Home2-faq-item')\r\n      faqItems.forEach(item => {\r\n        const element = item as HTMLElement\r\n        element.style.opacity = '1'\r\n        element.style.visibility = 'visible'\r\n        element.style.display = 'block'\r\n      })\r\n\r\n      const faqQuestions = document.querySelectorAll('.Home2-faq-question')\r\n      faqQuestions.forEach(question => {\r\n        const element = question as HTMLElement\r\n        element.style.opacity = '1'\r\n        element.style.visibility = 'visible'\r\n      })\r\n    }, 50)\r\n  }\r\n\r\n  return (\r\n    <div className=\"Home2-streamlineer-container\">\r\n      {/* Custom cursor */}\r\n      <div ref={cursorRef} className={`Home2-custom-cursor ${cursorVariant === \"button\" ? \"Home2-button\" : cursorVariant === \"link\" ? \"Home2-link\" : \"\"}`}>\r\n        <MousePointer size={12} />\r\n      </div>\r\n\r\n      {/* Header with animated background */}\r\n      <header className={`Home2-header ${isScrolled ? \"Home2-scrolled\" : \"\"}`}>\r\n        <div className=\"Home2-header-content\">\r\n          <div className=\"Home2-logo\">\r\n            <span className=\"Home2-logo-text\">STREAMLINEER</span>\r\n          </div>\r\n\r\n          <button\r\n            className=\"Home2-menu-toggle\"\r\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\r\n            aria-label={isMenuOpen ? \"Close menu\" : \"Open menu\"}\r\n            onMouseEnter={enterButton}\r\n            onMouseLeave={leaveHover}\r\n          >\r\n            {isMenuOpen ? <X size={24} /> : <Menu size={24} />}\r\n          </button>\r\n\r\n          <nav className={`Home2-main-nav ${isMenuOpen ? \"Home2-open\" : \"\"}`}>\r\n            <ul className=\"Home2-nav-list\">\r\n              <li className=\"Home2-nav-item\">\r\n                <a href=\"#features\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                  Features <ChevronDown size={16} />\r\n                </a>\r\n                <div className=\"Home2-dropdown-menu\">\r\n                  <a href=\"#template-builder\" className=\"Home2-dropdown-item\">\r\n                    Template Builder\r\n                  </a>\r\n                  <a href=\"#mobile-app\" className=\"Home2-dropdown-item\">\r\n                    Mobile App\r\n                  </a>\r\n                  <a href=\"#reporting\" className=\"Home2-dropdown-item\">\r\n                    Reporting\r\n                  </a>\r\n                  <a href=\"#actions\" className=\"Home2-dropdown-item\">\r\n                    Action Tracking\r\n                  </a>\r\n                </div>\r\n              </li>\r\n              <li className=\"Home2-nav-item\">\r\n                <a href=\"#templates\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                  Templates\r\n                </a>\r\n              </li>\r\n              <li className=\"Home2-nav-item\">\r\n                <a href=\"#pricing\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                  Pricing\r\n                </a>\r\n              </li>\r\n              <li className=\"Home2-nav-item\">\r\n                <a href=\"#resources\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                  Resources <ChevronDown size={16} />\r\n                </a>\r\n                <div className=\"Home2-dropdown-menu\">\r\n                  <a href=\"#blog\" className=\"Home2-dropdown-item\">\r\n                    Blog\r\n                  </a>\r\n                  <a href=\"#guides\" className=\"Home2-dropdown-item\">\r\n                    Guides\r\n                  </a>\r\n                  <a href=\"#support\" className=\"Home2-dropdown-item\">\r\n                    Support\r\n                  </a>\r\n                </div>\r\n              </li>\r\n              <li className=\"Home2-nav-item\">\r\n                <a href=\"#contact\" className=\"Home2-nav-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                  Contact Us\r\n                </a>\r\n              </li>\r\n            </ul>\r\n\r\n            <div className=\"Home2-nav-buttons\">\r\n              <Link \r\n                to=\"/login\" \r\n                className=\"Home2-btn Home2-btn-outline\" \r\n                onMouseEnter={enterButton} \r\n                onMouseLeave={leaveHover}\r\n              >\r\n                Log In\r\n              </Link>\r\n\r\n              <Link \r\n                to=\"/register\" \r\n                className=\"Home2-btn Home2-btn-primary\" \r\n                onMouseEnter={enterButton} \r\n                onMouseLeave={leaveHover}\r\n              >\r\n                Start Free\r\n              </Link>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Hero Section */}\r\n      <section className=\"Home2-hero-section\" ref={heroRef}>\r\n        <div className=\"Home2-container\">\r\n          <div className=\"Home2-hero-flex\">\r\n            <div className={`Home2-hero-content ${heroVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n              <h1 className=\"Home2-hero-title\">\r\n                Build Smarter\r\n                <br />\r\n                Checklists<span className=\"Home2-accent-dot\">.</span>\r\n                <br />\r\n                Conduct Flawless\r\n                <br />\r\n                Inspections<span className=\"Home2-accent-dot\">.</span>\r\n              </h1>\r\n              <p className=\"Home2-hero-subtitle\">\r\n                The intuitive platform for rapidly creating powerful, dynamic inspection templates and empowering your\r\n                teams to execute thorough checks anywhere, capture critical data accurately, and generate instant\r\n                reports.\r\n              </p>\r\n              <div className=\"Home2-hero-buttons\">\r\n                <a\r\n                  href=\"signin\"\r\n                  className=\"Home2-btn Home2-btn-primary Home2-btn-lg Home2-btn-hover-effect\"\r\n                  onMouseEnter={enterButton}\r\n                  onMouseLeave={leaveHover}\r\n                >\r\n                  Start Building Templates Free\r\n                </a>\r\n                <a\r\n                  href=\"#demo\"\r\n                  className=\"Home2-btn Home2-btn-outline Home2-btn-lg Home2-btn-hover-effect\"\r\n                  onMouseEnter={enterButton}\r\n                  onMouseLeave={leaveHover}\r\n                >\r\n                  See Inspection Features\r\n                </a>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={`Home2-hero-image-container ${heroVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n              <div className=\"Home2-hero-image-slider\">\r\n                {bgImages.map((img, index) => (\r\n                  <div key={index} className={`Home2-hero-slide ${currentBg === index ? \"Home2-active\" : \"\"}`}>\r\n                    <Image\r\n                      src={img || \"/placeholder.svg\"}\r\n                      alt={`StreamLineer platform ${index + 1}`}\r\n                      width={600}\r\n                      height={600}\r\n                      className=\"Home2-hero-img\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              {/* Image navigation dots */}\r\n              <div className=\"Home2-image-nav-dots\">\r\n                {bgImages.map((_, index) => (\r\n                  <button\r\n                    key={index}\r\n                    className={`Home2-nav-dot ${currentBg === index ? \"Home2-active\" : \"\"}`}\r\n                    onClick={() => setCurrentBg(index)}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Fixed wave position to not hide buttons */}\r\n        <div className=\"Home2-hero-wave-container\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\" className=\"Home2-hero-wave\">\r\n            <path\r\n              fill=\"#ffffff\"\r\n              fillOpacity=\"1\"\r\n              d=\"M0,96L48,112C96,128,192,160,288,160C384,160,480,128,576,122.7C672,117,768,139,864,149.3C960,160,1056,160,1152,138.7C1248,117,1344,75,1392,53.3L1440,32L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n            ></path>\r\n          </svg>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Enhanced Workflow section */}\r\n      <section className=\"Home2-workflow-section\" ref={workflowRef}>\r\n        <div className=\"Home2-container\">\r\n          <div className={`Home2-workflow-header Home2-animate-on-scroll ${workflowVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n            <h2 className=\"Home2-section-title\">Your Inspection Workflow, Simplified</h2>\r\n            <p className=\"Home2-section-subtitle\">\r\n              Our streamlined process makes inspections efficient from creation to action\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"Home2-workflow-steps-container\">\r\n            {workflowSteps.map((step, index) => (\r\n              <div\r\n                key={index}\r\n                className={`Home2-workflow-step-card Home2-animate-on-scroll`}\r\n                style={{\r\n                  borderTop: `4px solid ${step.color}`,\r\n                  animationDelay: `${index * 0.15}s`,\r\n                }}\r\n              >\r\n                <div className=\"Home2-step-number-container\">\r\n                  <div className=\"Home2-step-number\" style={{ backgroundColor: step.color }}>\r\n                    {step.number}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"Home2-step-icon-container\" style={{ color: step.color }}>\r\n                  {step.icon}\r\n                </div>\r\n\r\n                <h3 className=\"Home2-step-title\">{step.title}</h3>\r\n\r\n                <p className=\"Home2-step-description\">{step.description}</p>\r\n\r\n                <ul className=\"Home2-step-highlights\">\r\n                  {step.highlights.map((highlight, i) => (\r\n                    <li\r\n                      key={i}\r\n                      className=\"Home2-highlight-item Home2-animate-on-scroll\"\r\n                      style={{ animationDelay: `${0.6 + i * 0.1}s` }}\r\n                    >\r\n                      <ChevronRight size={14} style={{ color: step.color }} />\r\n                      <span>{highlight}</span>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n\r\n                <div className=\"Home2-step-progress-indicator\" style={{ backgroundColor: step.color }} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Floating elements for visual interest */}\r\n        <div className=\"Home2-floating-element Home2-element-1\">\r\n          <Sparkles size={32} />\r\n        </div>\r\n\r\n        <div className=\"Home2-floating-element Home2-element-2\">\r\n          <Star size={24} />\r\n        </div>\r\n\r\n        <div className=\"Home2-floating-element Home2-element-3\">\r\n          <Award size={28} />\r\n        </div>\r\n      </section>\r\n\r\n      {/* Problem/Solution Section */}\r\n      <section className=\"Home2-problems-section\">\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Escape Inspection Frustrations</h2>\r\n\r\n          <div className=\"Home2-problems-grid\">\r\n            {[0, 1, 2].map((index) => (\r\n              <div key={index} className=\"Home2-problem-card Home2-animate-on-scroll\" style={{ animationDelay: `${index * 0.2}s` }}>\r\n                <div className=\"Home2-problem-icon\">\r\n                  {index === 0 ? (\r\n                    <Clipboard size={32} />\r\n                  ) : index === 1 ? (\r\n                    <AlertTriangle size={32} />\r\n                  ) : (\r\n                    <Clock size={32} />\r\n                  )}\r\n                </div>\r\n                <h3 className=\"Home2-problem-title\">\r\n                  {index === 0\r\n                    ? \"Static, Inflexible Paper or PDF Checklists?\"\r\n                    : index === 1\r\n                      ? \"Inconsistent Data During Inspections?\"\r\n                      : \"Hours Spent Compiling Inspection Reports?\"}\r\n                </h3>\r\n                <p className=\"Home2-problem-text\">\r\n                  {index === 0\r\n                    ? \"Design dynamic digital templates in minutes with drag-and-drop ease. Add logic, scoring, photos, signatures, and more – update instantly across all devices.\"\r\n                    : index === 1\r\n                      ? \"Ensure standardized, accurate data capture every time with required fields, conditional logic, and uniform templates pushed directly to the mobile app.\"\r\n                      : \"Generate comprehensive, professional reports automatically the moment an inspection is completed. Share instantly with stakeholders.\"}\r\n                </p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Features Tabs Section */}\r\n      <section className=\"Home2-features-section\" id=\"features\" ref={featuresRef}>\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Powering Your Inspections: Key Features</h2>\r\n\r\n          <div className=\"Home2-features-tabs\">\r\n            <div className=\"Home2-tabs-nav\">\r\n              {tabs.map((tab, index) => (\r\n                <button\r\n                  key={index}\r\n                  className={`Home2-tab-button ${activeTab === index ? \"Home2-active\" : \"\"} Home2-animate-on-scroll`}\r\n                  onClick={() => setActiveTab(index)}\r\n                  style={{\r\n                    animationDelay: `${index * 0.1}s`,\r\n                    opacity: 1,\r\n                    visibility: 'visible'\r\n                  }}\r\n                  onMouseEnter={enterButton}\r\n                  onMouseLeave={leaveHover}\r\n                >\r\n                  <span className=\"Home2-tab-icon\">{tab.icon}</span>\r\n                  <span className=\"Home2-tab-text\">{tab.title}</span>\r\n                </button>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"Home2-tabs-content\">\r\n              <div className=\"Home2-tab-panel\">\r\n                <div className=\"Home2-tab-content Home2-animate-on-scroll\">\r\n                  <h3 className=\"Home2-tab-title\">{tabs[activeTab].contentTitle}</h3>\r\n                  <p className=\"Home2-tab-description\">{tabs[activeTab].description}</p>\r\n                  <a\r\n                    href=\"#learn-more\"\r\n                    className=\"Home2-btn Home2-btn-outline Home2-btn-sm Home2-btn-hover-effect\"\r\n                    onMouseEnter={enterButton}\r\n                    onMouseLeave={leaveHover}\r\n                  >\r\n                    Learn More <ArrowRight size={16} />\r\n                  </a>\r\n                </div>\r\n                <div className=\"Home2-tab-image Home2-animate-on-scroll\">\r\n                  <Image\r\n                    src={tabs[activeTab].image || \"/placeholder.svg\"}\r\n                    alt={tabs[activeTab].title}\r\n                    width={600}\r\n                    height={400}\r\n                    className=\"Home2-feature-img\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Stats Section */}\r\n      <section className=\"Home2-stats-section\" ref={statsRef}>\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Impact of Smarter Templates & Inspections</h2>\r\n\r\n          <div className=\"Home2-stats-grid\">\r\n            {stats.map((stat, index) => (\r\n              <div key={index} className=\"Home2-stat-card Home2-animate-on-scroll\" style={{ animationDelay: `${index * 0.1}s` }}>\r\n                <div className=\"Home2-stat-value\">{stat.value}</div>\r\n                <div className=\"Home2-stat-label\">{stat.label}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Template Builder Feature */}\r\n      <section className=\"Home2-template-feature\" id=\"template-builder\" ref={templateRef}>\r\n        <div className=\"Home2-container\">\r\n          <div className=\"Home2-feature-content\">\r\n            <div className={`Home2-feature-text Home2-animate-on-scroll ${templateVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n              <h2 className=\"Home2-feature-title\">Build Intelligence Into Your Checklists</h2>\r\n              <p className=\"Home2-feature-description\">\r\n                Go beyond simple yes/no questions. Fashcognitive's template builder lets you implement sophisticated\r\n                logic. Make questions appear based on previous answers, calculate risk scores automatically, assign\r\n                weights, and guide inspectors through complex procedures.\r\n              </p>\r\n              <ul className=\"Home2-feature-list\">\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.2s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Dynamic conditional logic (if/then)</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.3s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Automated scoring and weighting</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.4s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Embed instructional text, images, or videos</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.5s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Reusable template sections and version control</span>\r\n                </li>\r\n              </ul>\r\n              <a\r\n                href=\"#template-demo\"\r\n                className=\"Home2-btn Home2-btn-primary Home2-btn-hover-effect\"\r\n                onMouseEnter={enterButton}\r\n                onMouseLeave={leaveHover}\r\n              >\r\n                See Template Builder Demo\r\n              </a>\r\n            </div>\r\n\r\n            <div\r\n              className={`Home2-feature-image Home2-template-img-container Home2-animate-on-scroll ${templateVisible ? \"Home2-animate-in\" : \"\"}`}\r\n            >\r\n              <Image\r\n                src=\"/placeholder.svg?height=500&width=600&text=Template+Builder\"\r\n                alt=\"Template Builder\"\r\n                width={600}\r\n                height={500}\r\n                className=\"Home2-template-img\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Mobile App Feature */}\r\n      <section className=\"Home2-mobile-feature\" id=\"mobile-app\" ref={mobileRef}>\r\n        <div className=\"Home2-container\">\r\n          <div className=\"Home2-feature-content Home2-reverse\">\r\n            <div\r\n              className={`Home2-feature-image Home2-mobile-img-container Home2-animate-on-scroll ${mobileVisible ? \"Home2-animate-in\" : \"\"}`}\r\n            >\r\n              <Image\r\n                src=\"/placeholder.svg?height=500&width=600&text=Mobile+App\"\r\n                alt=\"Mobile App\"\r\n                width={600}\r\n                height={500}\r\n                className=\"Home2-mobile-img\"\r\n              />\r\n            </div>\r\n\r\n            <div className={`Home2-feature-text Home2-animate-on-scroll ${mobileVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n              <h2 className=\"Home2-feature-title\">Capture Rich, Actionable Data from the Field</h2>\r\n              <p className=\"Home2-feature-description\">\r\n                Empower your inspectors to capture more than just text. The StreamLineer mobile app allows for\r\n                attaching annotated photos, collecting signatures, recording precise GPS locations, scanning barcodes,\r\n                and adding detailed notes – all within the inspection form, even offline.\r\n              </p>\r\n              <ul className=\"Home2-feature-list\">\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.2s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>High-resolution photo capture with annotation tools</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.3s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Digital signature collection for sign-offs</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.4s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Automatic GPS stamping (optional)</span>\r\n                </li>\r\n                <li className=\"Home2-feature-item Home2-animate-on-scroll\" style={{ animationDelay: \"0.5s\" }}>\r\n                  <Check size={20} className=\"Home2-check-icon\" />\r\n                  <span>Seamless offline data storage and sync</span>\r\n                </li>\r\n              </ul>\r\n              <a\r\n                href=\"#mobile-demo\"\r\n                className=\"Home2-btn Home2-btn-primary Home2-btn-hover-effect\"\r\n                onMouseEnter={enterButton}\r\n                onMouseLeave={leaveHover}\r\n              >\r\n                See Mobile App Demo\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Industries Section */}\r\n      <section className=\"Home2-industries-section\" ref={industriesRef}>\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Inspection Templates for Every Need</h2>\r\n\r\n          <div className=\"Home2-industries-grid\">\r\n            {industries.map((industry, index) => (\r\n              <div\r\n                key={index}\r\n                className={`Home2-industry-card Home2-animate-on-scroll ${index >= 5 ? 'Home2-last-row-card' : ''}`}\r\n                style={{\r\n                  animationDelay: `${index * 0.05}s`,\r\n                  ...(index >= 5 && { gridColumn: index === 5 ? '2 / 3' : index === 6 ? '3 / 4' : '4 / 5' })\r\n                }}\r\n                onMouseEnter={enterLink}\r\n                onMouseLeave={leaveHover}\r\n              >\r\n                <div className=\"Home2-industry-icon\">{industry.icon}</div>\r\n                <h3 className=\"Home2-industry-title\">{industry.title}</h3>\r\n                <div className=\"Home2-industry-arrow\">\r\n                  <ArrowUpRight size={18} />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Testimonials Section */}\r\n      <section className=\"Home2-testimonials-section\" ref={testimonialsRef}>\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Trusted for Critical Inspections Globally</h2>\r\n\r\n          <div className=\"Home2-logos-row\">\r\n            {[1, 2, 3, 4, 5].map((logo) => (\r\n              <div key={logo} className=\"Home2-logo-item Home2-animate-on-scroll\" style={{ animationDelay: `${logo * 0.1}s` }}>\r\n                <Image\r\n                  src={`/placeholder.svg?height=60&width=120&text=LOGO${logo}`}\r\n                  alt={`Client Logo ${logo}`}\r\n                  width={120}\r\n                  height={60}\r\n                  className=\"Home2-client-logo\"\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"Home2-testimonials-slider\">\r\n            {testimonials.map((testimonial, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"Home2-testimonial-card Home2-animate-on-scroll\"\r\n                style={{ animationDelay: `${index * 0.2}s` }}\r\n              >\r\n                <div className=\"Home2-testimonial-content\">\r\n                  <div className=\"Home2-quote-mark\">\"</div>\r\n                  <p className=\"Home2-testimonial-quote\">{testimonial.quote}</p>\r\n                  <div className=\"Home2-testimonial-author\">\r\n                    <Image\r\n                      src={testimonial.avatar || \"/placeholder.svg\"}\r\n                      alt={testimonial.name}\r\n                      width={60}\r\n                      height={60}\r\n                      className=\"Home2-author-avatar\"\r\n                    />\r\n                    <div className=\"Home2-author-info\">\r\n                      <h4 className=\"Home2-author-name\">{testimonial.name}</h4>\r\n                      <p className=\"Home2-author-role\">\r\n                        {testimonial.role}, {testimonial.company}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* FAQ Section */}\r\n      <section className=\"Home2-faq-section\">\r\n        <div className=\"Home2-container\">\r\n          <h2 className=\"Home2-section-title\">Your Questions About Templates & Inspections</h2>\r\n\r\n          <div className=\"Home2-faq-list\">\r\n            {faqs.map((faq, index) => (\r\n              <div\r\n                key={index}\r\n                className={`Home2-faq-item ${activeFaq === index ? \"Home2-active\" : \"\"} Home2-animate-on-scroll`}\r\n                style={{\r\n                  animationDelay: `${index * 0.1}s`,\r\n                  opacity: 1,\r\n                  visibility: 'visible',\r\n                  display: 'block'\r\n                }}\r\n              >\r\n                <button\r\n                  className=\"Home2-faq-question\"\r\n                  onClick={() => toggleFaq(index)}\r\n                  onMouseEnter={enterButton}\r\n                  onMouseLeave={leaveHover}\r\n                  style={{\r\n                    opacity: 1,\r\n                    visibility: 'visible'\r\n                  }}\r\n                >\r\n                  <span>{faq.question}</span>\r\n                  <div className={`Home2-faq-icon ${activeFaq === index ? \"Home2-rotate\" : \"\"}`}>\r\n                    <ChevronDown size={20} />\r\n                  </div>\r\n                </button>\r\n                <div className={`Home2-faq-answer ${activeFaq === index ? \"Home2-open\" : \"\"}`}>\r\n                  <p>{faq.answer}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* CTA Section */}\r\n      <section className=\"Home2-cta-section\" ref={ctaRef}>\r\n        <div className=\"Home2-container\">\r\n          <div className={`Home2-cta-content Home2-animate-on-scroll ${ctaVisible ? \"Home2-animate-in\" : \"\"}`}>\r\n            <h2 className=\"Home2-cta-title\">Ready to Revolutionize Your Inspection Process?</h2>\r\n            <p className=\"Home2-cta-text\">\r\n              Stop wrestling with paper and clunky software. Build intelligent templates and empower your team with\r\n              efficient mobile inspections using StreamLineer.\r\n            </p>\r\n            <div className=\"Home2-cta-buttons\">\r\n              <a\r\n                href=\"signin\"\r\n                className=\"Home2-btn Home2-btn-primary Home2-btn-lg Home2-btn-hover-effect\"\r\n                onMouseEnter={enterButton}\r\n                onMouseLeave={leaveHover}\r\n              >\r\n                Start Building Templates Free\r\n              </a>\r\n              <a\r\n                href=\"#request-demo\"\r\n                className=\"Home2-btn Home2-btn-outline Home2-btn-lg Home2-btn-hover-effect\"\r\n                onMouseEnter={enterButton}\r\n                onMouseLeave={leaveHover}\r\n              >\r\n                Request a Demo\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Footer */}\r\n      <footer className=\"Home2-footer\">\r\n        <div className=\"Home2-container\">\r\n          <div className=\"Home2-footer-top\">\r\n            <div className=\"Home2-footer-logo\">\r\n              <span className=\"Home2-logo-text\">STREAMLINEER</span>\r\n              <p className=\"Home2-footer-tagline\">Build Smart Checklists. Conduct Flawless Inspections.</p>\r\n            </div>\r\n\r\n            <div className=\"Home2-footer-columns\">\r\n              <div className=\"Home2-footer-column\">\r\n                <h3 className=\"Home2-footer-heading\">Product</h3>\r\n                <ul className=\"Home2-footer-links\">\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#template-builder\">Template Builder</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#mobile-app\">Mobile Inspections</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#reporting\">Reporting</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#actions\">Action Tracking</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#pricing\">Pricing</a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <div className=\"Home2-footer-column\">\r\n                <h3 className=\"Home2-footer-heading\">Resources</h3>\r\n                <ul className=\"Home2-footer-links\">\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#blog\">Blog</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#guides\">Guides</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#webinars\">Webinars</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#case-studies\">Case Studies</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#help-center\">Help Center</a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <div className=\"Home2-footer-column\">\r\n                <h3 className=\"Home2-footer-heading\">Company</h3>\r\n                <ul className=\"Home2-footer-links\">\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#about\">About Us</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#careers\">Careers</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#contact\">Contact</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#partners\">Partners</a>\r\n                  </li>\r\n                  <li className=\"Home2-footer-link-item\">\r\n                    <a href=\"#legal\">Legal</a>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n\r\n              <div className=\"Home2-footer-column\">\r\n                <h3 className=\"Home2-footer-heading\">Connect</h3>\r\n                <div className=\"Home2-social-links\">\r\n                  <a href=\"#twitter\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z\"></path>\r\n                    </svg>\r\n                  </a>\r\n                  <a href=\"#linkedin\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z\"></path>\r\n                      <rect x=\"2\" y=\"9\" width=\"4\" height=\"12\"></rect>\r\n                      <circle cx=\"4\" cy=\"4\" r=\"2\"></circle>\r\n                    </svg>\r\n                  </a>\r\n                  <a href=\"#facebook\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z\"></path>\r\n                    </svg>\r\n                  </a>\r\n                  <a href=\"#instagram\" className=\"Home2-social-link\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"24\"\r\n                      height=\"24\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <rect x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"5\" ry=\"5\"></rect>\r\n                      <path d=\"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\"></path>\r\n                      <line x1=\"17.5\" y1=\"6.5\" x2=\"17.51\" y2=\"6.5\"></line>\r\n                    </svg>\r\n                  </a>\r\n                </div>\r\n                <div className=\"Home2-newsletter\">\r\n                  <h4 className=\"Home2-newsletter-title\">Subscribe to our newsletter</h4>\r\n                  <form className=\"Home2-newsletter-form\">\r\n                    <input type=\"email\" placeholder=\"Your email\" className=\"Home2-newsletter-input\" />\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"Home2-newsletter-button\"\r\n                      onMouseEnter={enterButton}\r\n                      onMouseLeave={leaveHover}\r\n                    >\r\n                      Subscribe\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"Home2-footer-bottom\">\r\n            <p className=\"Home2-copyright\">© 2025 StreamLineer, Inc. All rights reserved.</p>\r\n            <div className=\"Home2-legal-links\">\r\n              <a href=\"#privacy\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                Privacy Policy\r\n              </a>\r\n              <a href=\"#terms\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                Terms of Service\r\n              </a>\r\n              <a href=\"#cookies\" onMouseEnter={enterLink} onMouseLeave={leaveHover}>\r\n                Cookie Policy\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home2","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Template.tsx",["78"],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Create_template.tsx",["79","80","81","82","83","84"],"\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { useState, useRef, useEffect } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport {\r\n  ChevronDown,\r\n  ChevronUp,\r\n  Edit,\r\n  Plus,\r\n  Calendar,\r\n  User,\r\n  MapPin,\r\n  X,\r\n  Check,\r\n  ImageIcon,\r\n  Trash2,\r\n  Move,\r\n  Clock,\r\n  ArrowLeft,\r\n  Bell,\r\n  FileText,\r\n  MessageSquare,\r\n  CornerDownRight,\r\n  ArrowRight,\r\n  Equal,\r\n  Hash,\r\n  CircleEqual,\r\n  CircleSlash,\r\n  CircleDot,\r\n  ChevronsRight,\r\n  ChevronsLeft,\r\n  ListFilter,\r\n  AlertTriangle,\r\n  Upload,\r\n  Download,\r\n  Building,\r\n  Flag,\r\n  CheckCircle,\r\n} from \"lucide-react\"\r\nimport { jsPDF } from \"jspdf\"\r\nimport AccessManager from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/AccessManager\"\r\nimport { fetchCSRFToken } from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/utils/csrf\"\r\nimport \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/assets/Create_template.css\"\r\nimport \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/TemplateBuilderLayout.css\"\r\nimport \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/FixTransitions.css\"\r\nimport \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/ReportPageFix.css\"\r\nimport \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/AccessPageFix.css\"\r\n\r\n// U\r\n// Utility functions\r\nfunction getCookie(name: string): string | null {\r\n  let cookieValue = null\r\n  if (document.cookie && document.cookie !== \"\") {\r\n    const cookies = document.cookie.split(\";\")\r\n    for (let i = 0; i < cookies.length; i++) {\r\n      const cookie = cookies[i].trim()\r\n      if (cookie.startsWith(name + \"=\")) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1))\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return cookieValue\r\n}\r\n\r\nconst resizeImage = (base64: string): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = document.createElement(\"img\")\r\n    img.crossOrigin = \"anonymous\"\r\n    img.src = base64\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\")\r\n      const MAX_WIDTH = 500\r\n      const scale = Math.min(MAX_WIDTH / img.width, 1)\r\n      canvas.width = img.width * scale\r\n      canvas.height = img.height * scale\r\n      const ctx = canvas.getContext(\"2d\")\r\n      if (ctx) {\r\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n        resolve(canvas.toDataURL(\"image/jpeg\", 0.8))\r\n      } else {\r\n        reject(new Error(\"Failed to get canvas context\"))\r\n      }\r\n    }\r\n    img.onerror = () => reject(new Error(\"Failed to load image\"))\r\n  })\r\n}\r\n\r\n// Types\r\ntype ResponseType =\r\n  | \"Site\"\r\n  | \"Inspection date\"\r\n  | \"Person\"\r\n  | \"Inspection location\"\r\n  | \"Text\"\r\n  | \"Number\"\r\n  | \"Checkbox\"\r\n  | \"Yes/No\"\r\n  | \"Multiple choice\"\r\n  | \"Slider\"\r\n  | \"Media\"\r\n  | \"Annotation\"\r\n  | \"Date & Time\"\r\n\r\ntype LogicOperator =\r\n  | \"equals\"\r\n  | \"notEquals\"\r\n  | \"greaterThan\"\r\n  | \"lessThan\"\r\n  | \"greaterThanOrEqual\"\r\n  | \"lessThanOrEqual\"\r\n  | \"between\"\r\n  | \"isOneOf\"\r\n  | \"isNotOneOf\"\r\n  | \"contains\"\r\n  | \"notContains\"\r\n  | \"startsWith\"\r\n  | \"endsWith\"\r\n  | \"matches\"\r\n\r\ntype TriggerAction = \"require_action\" | \"require_evidence\" | \"notify\" | \"ask_questions\" | \"display_message\"\r\n\r\ntype LogicCondition =\r\n  | \"is\"\r\n  | \"is not\"\r\n  | \"contains\"\r\n  | \"not contains\"\r\n  | \"starts with\"\r\n  | \"ends with\"\r\n  | \"matches (regex)\"\r\n  | \"less than\"\r\n  | \"less than or equal to\"\r\n  | \"equal to\"\r\n  | \"not equal to\"\r\n  | \"greater than or equal to\"\r\n  | \"greater than\"\r\n  | \"between\"\r\n  | \"not between\"\r\n  | \"is one of\"\r\n  | \"is not one of\"\r\n\r\ninterface LogicRule {\r\n  id: string\r\n  condition: LogicCondition\r\n  value: string | number | string[] | [number, number] | null\r\n  trigger: TriggerAction | null\r\n  triggerConfig?: any\r\n  message?: string\r\n  subQuestion?: {\r\n    text: string\r\n    responseType: ResponseType\r\n  }\r\n}\r\n\r\ninterface ConditionalLogicRule {\r\n  id: string\r\n  operator: LogicOperator\r\n  value: string | number | string[] | [number, number]\r\n  trigger: TriggerAction\r\n  subQuestion?: {\r\n    id: string\r\n    text: string\r\n    responseType: ResponseType\r\n    required: boolean\r\n    flagged: boolean\r\n    validation?: string\r\n  }\r\n  message?: string\r\n  actionDetails?: string\r\n  targetElementId?: string\r\n}\r\n\r\ninterface ConditionalLogic {\r\n  enabled: boolean\r\n  rules: ConditionalLogicRule[]\r\n}\r\n\r\ninterface Question {\r\n  id: string\r\n  text: string\r\n  responseType: ResponseType\r\n  required: boolean\r\n  flagged: boolean\r\n  options?: string[]\r\n  value?: string | string[] | boolean | number | null\r\n  conditionalLogic?: ConditionalLogic\r\n  conditionalProof?: string\r\n  logicRules?: LogicRule[]\r\n  multipleSelection?: boolean\r\n}\r\n\r\ninterface Section {\r\n  id: string\r\n  title: string\r\n  description?: string\r\n  questions: Question[]\r\n  isCollapsed: boolean\r\n}\r\n\r\ninterface Template {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  sections: Section[]\r\n  lastSaved?: Date\r\n  lastPublished?: Date\r\n  logo?: string\r\n}\r\n\r\n// Utility type guard\r\nconst isStringArray = (value: unknown): value is string[] =>\r\n  Array.isArray(value) && value.every((v: unknown) => typeof v === \"string\")\r\n\r\n// Helper function to check if a trigger should be shown based on the question's logic rules\r\nconst shouldShowTrigger = (question: Question, triggerType: TriggerAction): boolean => {\r\n  if (!question.logicRules || question.logicRules.length === 0 || !question.value) return false\r\n\r\n  for (const rule of question.logicRules) {\r\n    if (rule.trigger !== triggerType) continue\r\n\r\n    // Evaluate the condition based on the current value\r\n    const value = question.value\r\n    let conditionMet = false\r\n\r\n    switch (rule.condition) {\r\n      case \"is\":\r\n        conditionMet = value === rule.value\r\n        break\r\n      case \"is not\":\r\n        conditionMet = value !== rule.value\r\n        break\r\n      case \"contains\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.includes(rule.value)\r\n        break\r\n      case \"not contains\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && !value.includes(rule.value)\r\n        break\r\n      case \"starts with\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.startsWith(rule.value)\r\n        break\r\n      case \"ends with\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.endsWith(rule.value)\r\n        break\r\n      case \"greater than\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value > rule.value\r\n        break\r\n      case \"less than\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value < rule.value\r\n        break\r\n      case \"equal to\":\r\n        conditionMet = value === rule.value\r\n        break\r\n      case \"not equal to\":\r\n        conditionMet = value !== rule.value\r\n        break\r\n      case \"greater than or equal to\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value >= rule.value\r\n        break\r\n      case \"less than or equal to\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value <= rule.value\r\n        break\r\n      case \"between\":\r\n        conditionMet =\r\n          Array.isArray(rule.value) &&\r\n          rule.value.length === 2 &&\r\n          typeof value === \"number\" &&\r\n          value > Number(rule.value[0]) &&\r\n          value < Number(rule.value[1])\r\n        break\r\n      case \"is one of\":\r\n        conditionMet = isStringArray(rule.value) && typeof value === \"string\" && rule.value.includes(value)\r\n        break\r\n      case \"is not one of\":\r\n        conditionMet = isStringArray(rule.value) && typeof value === \"string\" && !rule.value.includes(value)\r\n        break\r\n    }\r\n\r\n    if (conditionMet) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n// Helper function to get condition icon\r\nconst getConditionIcon = (condition: LogicCondition) => {\r\n  switch (condition) {\r\n    case \"is\":\r\n      return <CircleEqual className=\"condition-icon\" />\r\n    case \"is not\":\r\n      return <CircleSlash className=\"condition-icon\" />\r\n    case \"contains\":\r\n      return <CircleDot className=\"condition-icon\" />\r\n    case \"not contains\":\r\n      return <CircleSlash className=\"condition-icon\" />\r\n    case \"starts with\":\r\n      return <ChevronsRight className=\"condition-icon\" />\r\n    case \"ends with\":\r\n      return <ChevronsLeft className=\"condition-icon\" />\r\n    case \"matches (regex)\":\r\n      return <Hash className=\"condition-icon\" />\r\n    case \"less than\":\r\n      return <ArrowLeft className=\"condition-icon\" />\r\n    case \"less than or equal to\":\r\n      return <ArrowLeft className=\"condition-icon\" />\r\n    case \"equal to\":\r\n      return <Equal className=\"condition-icon\" />\r\n    case \"not equal to\":\r\n      return <CircleSlash className=\"condition-icon\" />\r\n    case \"greater than or equal to\":\r\n      return <ArrowRight className=\"condition-icon\" />\r\n    case \"greater than\":\r\n      return <ArrowRight className=\"condition-icon\" />\r\n    case \"between\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"not between\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"is one of\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"is not one of\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    default:\r\n      return <Equal className=\"condition-icon\" />\r\n  }\r\n}\r\n\r\n// Enhanced Logic Components\r\nconst EnhancedLogicConditionSelector: React.FC<{\r\n  questionType: ResponseType\r\n  selectedCondition: LogicCondition\r\n  onConditionChange: (condition: LogicCondition) => void\r\n  className?: string\r\n}> = ({ questionType, selectedCondition, onConditionChange, className = \"\" }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [availableConditions, setAvailableConditions] = useState<LogicCondition[]>([])\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n\r\n  useEffect(() => {\r\n    const conditions: LogicCondition[] = (() => {\r\n      switch (questionType) {\r\n        case \"Text\":\r\n          return [\"is\", \"is not\", \"contains\", \"not contains\", \"starts with\", \"ends with\", \"matches (regex)\"]\r\n        case \"Number\":\r\n        case \"Slider\":\r\n          return [\r\n            \"less than\",\r\n            \"less than or equal to\",\r\n            \"equal to\",\r\n            \"not equal to\",\r\n            \"greater than or equal to\",\r\n            \"greater than\",\r\n            \"between\",\r\n            \"not between\",\r\n          ]\r\n        case \"Checkbox\":\r\n        case \"Yes/No\":\r\n          return [\"is\", \"is not\"]\r\n        case \"Multiple choice\":\r\n          return [\"is\", \"is not\", \"is one of\", \"is not one of\"]\r\n        case \"Media\":\r\n        case \"Annotation\":\r\n          return [\"is\", \"is not\"]\r\n        case \"Date & Time\":\r\n        case \"Inspection date\":\r\n          return [\"is\", \"is not\", \"less than\", \"greater than\", \"between\"]\r\n        case \"Site\":\r\n        case \"Person\":\r\n        case \"Inspection location\":\r\n          return [\"is\", \"is not\", \"is one of\", \"is not one of\"]\r\n        default:\r\n          return [\"is\", \"is not\"]\r\n      }\r\n    })()\r\n\r\n    setAvailableConditions(conditions)\r\n    if (!conditions.includes(selectedCondition) && conditions.length > 0) {\r\n      onConditionChange(conditions[0])\r\n    }\r\n  }, [questionType, selectedCondition, onConditionChange])\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n  }, [])\r\n\r\n  return (\r\n    <div className={`enhanced-logic-condition-selector ${className}`} ref={dropdownRef}>\r\n      <div className=\"selected-condition\" onClick={() => setIsOpen(!isOpen)}>\r\n        {getConditionIcon(selectedCondition)}\r\n        <span className=\"condition-text\">{selectedCondition}</span>\r\n        <ChevronDown className={`dropdown-arrow ${isOpen ? \"rotate\" : \"\"}`} />\r\n      </div>\r\n      {isOpen && (\r\n        <div className=\"enhanced-condition-dropdown\">\r\n          {availableConditions.map((condition) => (\r\n            <div\r\n              key={condition}\r\n              className={`enhanced-condition-option ${selectedCondition === condition ? \"selected\" : \"\"}`}\r\n              onClick={() => {\r\n                onConditionChange(condition)\r\n                setIsOpen(false)\r\n              }}\r\n            >\r\n              {getConditionIcon(condition)}\r\n              <span>{condition}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicValueInput: React.FC<{\r\n  questionType: ResponseType\r\n  condition: LogicCondition\r\n  value: string | number | string[] | [number, number] | null\r\n  onChange: (value: string | number | string[] | [number, number]) => void\r\n  options?: string[]\r\n  className?: string\r\n}> = ({ questionType, condition, value, onChange, options = [], className = \"\" }) => {\r\n  const [rangeStart, setRangeStart] = useState(\"\")\r\n  const [rangeEnd, setRangeEnd] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(value) && value.length === 2 && [\"between\", \"not between\"].includes(condition)) {\r\n      setRangeStart(String(value[0] || \"\"))\r\n      setRangeEnd(String(value[1] || \"\"))\r\n    }\r\n  }, [value, condition])\r\n\r\n  const handleRangeChange = () => {\r\n    if (rangeStart && rangeEnd) {\r\n      if (questionType === \"Number\") {\r\n        onChange([Number(rangeStart), Number(rangeEnd)] as [number, number])\r\n      } else {\r\n        onChange([rangeStart, rangeEnd] as [string, string])\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleOptionToggle = (option: string) => {\r\n    const currentValues = isStringArray(value) ? value : []\r\n    const newValues = currentValues.includes(option)\r\n      ? currentValues.filter((v) => v !== option)\r\n      : [...currentValues, option]\r\n    onChange(newValues)\r\n  }\r\n\r\n  if ([\"between\", \"not between\"].includes(condition)) {\r\n    return (\r\n      <div className={`enhanced-logic-range-input ${className}`}>\r\n        <input\r\n          type={questionType === \"Number\" ? \"number\" : \"text\"}\r\n          placeholder=\"Min\"\r\n          value={rangeStart}\r\n          onChange={(e) => {\r\n            setRangeStart(e.target.value)\r\n            if (rangeEnd) handleRangeChange()\r\n          }}\r\n          className=\"range-input-min\"\r\n        />\r\n        <span className=\"range-separator\">and</span>\r\n        <input\r\n          type={questionType === \"Number\" ? \"number\" : \"text\"}\r\n          placeholder=\"Max\"\r\n          value={rangeEnd}\r\n          onChange={(e) => {\r\n            setRangeEnd(e.target.value)\r\n            if (rangeStart) handleRangeChange()\r\n          }}\r\n          className=\"range-input-max\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if ([\"is one of\", \"is not one of\"].includes(condition) && options.length > 0) {\r\n    const currentValues = isStringArray(value) ? value : []\r\n    return (\r\n      <div className={`enhanced-logic-multi-select ${className}`}>\r\n        {options.map((option) => (\r\n          <label key={option} className=\"enhanced-multi-select-option\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"sr-only\"\r\n              checked={currentValues.includes(option)}\r\n              onChange={() => handleOptionToggle(option)}\r\n            />\r\n            <span className={currentValues.includes(option) ? \"selected\" : \"\"}>{option}</span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (questionType === \"Yes/No\") {\r\n    return (\r\n      <div className={`enhanced-logic-yes-no-select ${className}`}>\r\n        {[\"Yes\", \"No\", \"N/A\"].map((opt) => (\r\n          <label key={opt} className=\"enhanced-yes-no-option\">\r\n            <input\r\n              type=\"radio\"\r\n              className=\"sr-only\"\r\n              checked={value === opt}\r\n              onChange={() => onChange(opt)}\r\n              name=\"yes-no-value\"\r\n            />\r\n            <span className={value === opt ? \"selected\" : \"\"}>{opt}</span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (questionType === \"Number\") {\r\n    return (\r\n      <input\r\n        type=\"number\"\r\n        value={(value as number) ?? \"\"}\r\n        onChange={(e) => onChange(Number(e.target.value))}\r\n        placeholder=\"Enter value\"\r\n        className={`enhanced-logic-number-input ${className}`}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={(value as string) ?? \"\"}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      placeholder=\"Enter value\"\r\n      className={`enhanced-logic-text-input ${className}`}\r\n    />\r\n  )\r\n}\r\n\r\nconst EnhancedLogicTriggerSelector: React.FC<{\r\n  selectedTrigger: TriggerAction | null\r\n  onTriggerSelect: (trigger: TriggerAction | null) => void\r\n  onConfigChange?: (config: any) => void\r\n  className?: string\r\n}> = ({ selectedTrigger, onTriggerSelect, onConfigChange, className = \"\" }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n\r\n  const triggers: { value: TriggerAction; label: string; icon: React.ReactNode; description: string }[] = [\r\n    {\r\n      value: \"require_action\",\r\n      label: \"Require action\",\r\n      icon: <FileText className=\"trigger-icon\" />,\r\n      description: \"Require the user to take an action\",\r\n    },\r\n    {\r\n      value: \"require_evidence\",\r\n      label: \"Require evidence\",\r\n      icon: <ImageIcon className=\"trigger-icon\" />,\r\n      description: \"Require the user to upload evidence\",\r\n    },\r\n    {\r\n      value: \"notify\",\r\n      label: \"Notify\",\r\n      icon: <Bell className=\"trigger-icon\" />,\r\n      description: \"Send a notification\",\r\n    },\r\n    {\r\n      value: \"ask_questions\",\r\n      label: \"Ask questions\",\r\n      icon: <MessageSquare className=\"trigger-icon\" />,\r\n      description: \"Ask follow-up questions\",\r\n    },\r\n    {\r\n      value: \"display_message\",\r\n      label: \"Display message\",\r\n      icon: <AlertTriangle className=\"trigger-icon\" />,\r\n      description: \"Show a message to the user\",\r\n    },\r\n  ]\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n  }, [])\r\n\r\n  const selectedTriggerInfo = selectedTrigger ? triggers.find((t) => t.value === selectedTrigger) : null\r\n\r\n  return (\r\n    <div className={`enhanced-logic-trigger-selector ${className}`} ref={dropdownRef}>\r\n      {!selectedTrigger ? (\r\n        <button className=\"enhanced-trigger-button\" onClick={() => setIsOpen(!isOpen)}>\r\n          <Plus className=\"trigger-plus-icon\" />\r\n          <span>Add trigger</span>\r\n        </button>\r\n      ) : (\r\n        <div className=\"enhanced-selected-trigger\">\r\n          {selectedTriggerInfo?.icon}\r\n          <span>{selectedTriggerInfo?.label}</span>\r\n          <button\r\n            className=\"enhanced-clear-trigger\"\r\n            onClick={(e) => {\r\n              e.stopPropagation()\r\n              onTriggerSelect(null)\r\n            }}\r\n          >\r\n            <X className=\"clear-icon\" />\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {isOpen && !selectedTrigger && (\r\n        <div className=\"enhanced-trigger-dropdown\">\r\n          {triggers.map((trigger) => (\r\n            <div\r\n              key={trigger.value}\r\n              className=\"enhanced-trigger-option\"\r\n              onClick={() => {\r\n                onTriggerSelect(trigger.value)\r\n                setIsOpen(false)\r\n              }}\r\n            >\r\n              <div className=\"enhanced-trigger-icon-container\">{trigger.icon}</div>\r\n              <div className=\"enhanced-trigger-details\">\r\n                <div className=\"enhanced-trigger-label\">{trigger.label}</div>\r\n                <div className=\"enhanced-trigger-description\">{trigger.description}</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicTriggerConfig: React.FC<{\r\n  trigger: TriggerAction\r\n  config: any\r\n  onConfigChange: (config: any) => void\r\n}> = ({ trigger, config, onConfigChange }) => {\r\n  const [message, setMessage] = useState(config?.message || \"\")\r\n  const [questionText, setQuestionText] = useState(config?.subQuestion?.text || \"\")\r\n  const [responseType, setResponseType] = useState<ResponseType>(config?.subQuestion?.responseType || \"Text\")\r\n\r\n  useEffect(() => {\r\n    if (trigger === \"display_message\") {\r\n      onConfigChange({ ...config, message })\r\n    } else if (trigger === \"ask_questions\") {\r\n      onConfigChange({\r\n        ...config,\r\n        subQuestion: {\r\n          text: questionText,\r\n          responseType,\r\n        },\r\n      })\r\n    }\r\n  }, [trigger, message, questionText, responseType, config, onConfigChange])\r\n\r\n  if (trigger === \"display_message\") {\r\n    return (\r\n      <div className=\"enhanced-trigger-config\">\r\n        <label className=\"enhanced-trigger-config-label\">Message to display:</label>\r\n        <textarea\r\n          className=\"enhanced-logic-text-input\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Enter message to display to the user\"\r\n          rows={3}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (trigger === \"ask_questions\") {\r\n    return (\r\n      <div className=\"enhanced-trigger-config\">\r\n        <label className=\"enhanced-trigger-config-label\">Follow-up question:</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"enhanced-logic-text-input\"\r\n          value={questionText}\r\n          onChange={(e) => setQuestionText(e.target.value)}\r\n          placeholder=\"Enter follow-up question\"\r\n        />\r\n        <label className=\"enhanced-trigger-config-label mt-2\">Response type:</label>\r\n        <select\r\n          className=\"enhanced-logic-text-input\"\r\n          value={responseType}\r\n          onChange={(e) => setResponseType(e.target.value as ResponseType)}\r\n        >\r\n          <option value=\"Text\">Text</option>\r\n          <option value=\"Number\">Number</option>\r\n          <option value=\"Yes/No\">Yes/No</option>\r\n          <option value=\"Multiple choice\">Multiple choice</option>\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nconst generateRuleId = () => `rule_${Math.random().toString(36).substring(2, 9)}`\r\n\r\nconst EnhancedLogicRuleBuilder: React.FC<{\r\n  questionType: ResponseType\r\n  rule: LogicRule\r\n  options?: string[]\r\n  onRuleChange: (rule: LogicRule) => void\r\n  onRuleDelete: () => void\r\n  questions?: Array<{ id: string; text: string }>\r\n  className?: string\r\n}> = ({ questionType, rule, options = [], onRuleChange, onRuleDelete, questions = [], className = \"\" }) => {\r\n  const [localRule, setLocalRule] = useState<LogicRule>(rule)\r\n  const [showConfig, setShowConfig] = useState(false)\r\n\r\n  useEffect(() => {\r\n    onRuleChange(localRule)\r\n  }, [localRule, onRuleChange])\r\n\r\n  useEffect(() => {\r\n    setLocalRule(rule)\r\n  }, [rule])\r\n\r\n  return (\r\n    <div className={`enhanced-logic-rule-builder ${className}`}>\r\n      <div className=\"enhanced-logic-rule-content\">\r\n        <div className=\"enhanced-logic-condition-row\">\r\n          <span className=\"enhanced-if-label\">If answer</span>\r\n          <EnhancedLogicConditionSelector\r\n            questionType={questionType}\r\n            selectedCondition={localRule.condition}\r\n            onConditionChange={(condition) => setLocalRule({ ...localRule, condition })}\r\n          />\r\n          <EnhancedLogicValueInput\r\n            questionType={questionType}\r\n            condition={localRule.condition}\r\n            value={localRule.value}\r\n            onChange={(value) => setLocalRule({ ...localRule, value })}\r\n            options={options}\r\n          />\r\n        </div>\r\n        <div className=\"enhanced-logic-trigger-row\">\r\n          <span className=\"enhanced-then-label\">then</span>\r\n          <EnhancedLogicTriggerSelector\r\n            selectedTrigger={localRule.trigger}\r\n            onTriggerSelect={(trigger) => {\r\n              setLocalRule({\r\n                ...localRule,\r\n                trigger,\r\n                triggerConfig: trigger ? {} : undefined,\r\n                message: trigger === \"display_message\" ? localRule.message || \"\" : undefined,\r\n                subQuestion:\r\n                  trigger === \"ask_questions\" ? localRule.subQuestion || { text: \"\", responseType: \"Text\" } : undefined,\r\n              })\r\n              setShowConfig(!!trigger)\r\n            }}\r\n            onConfigChange={(config) => setLocalRule({ ...localRule, triggerConfig: config })}\r\n          />\r\n          {localRule.trigger && (\r\n            <button\r\n              className=\"enhanced-config-button\"\r\n              onClick={() => setShowConfig(!showConfig)}\r\n              title=\"Configure trigger\"\r\n            >\r\n              <Edit size={16} />\r\n            </button>\r\n          )}\r\n        </div>\r\n        {showConfig && localRule.trigger && (\r\n          <div className=\"enhanced-logic-config-row\">\r\n            <EnhancedLogicTriggerConfig\r\n              trigger={localRule.trigger}\r\n              config={{\r\n                message: localRule.message,\r\n                subQuestion: localRule.subQuestion,\r\n              }}\r\n              onConfigChange={(config) => {\r\n                setLocalRule({\r\n                  ...localRule,\r\n                  message: config.message,\r\n                  subQuestion: config.subQuestion,\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <button className=\"enhanced-delete-rule-button\" onClick={onRuleDelete} aria-label=\"Delete rule\">\r\n        <Trash2 className=\"delete-icon\" />\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicRulesContainer: React.FC<{\r\n  questionType: ResponseType\r\n  rules: LogicRule[]\r\n  options?: string[]\r\n  onRulesChange: (rules: LogicRule[]) => void\r\n  questions?: Array<{ id: string; text: string }>\r\n  onClose: () => void\r\n  className?: string\r\n}> = ({ questionType, rules, options = [], onRulesChange, questions = [], onClose, className = \"\" }) => {\r\n  const addNewRule = () => {\r\n    const defaultCondition: LogicCondition = questionType === \"Number\" ? \"equal to\" : \"is\"\r\n    const newRule: LogicRule = {\r\n      id: generateRuleId(),\r\n      condition: defaultCondition,\r\n      value: null,\r\n      trigger: null,\r\n    }\r\n    onRulesChange([...rules, newRule])\r\n  }\r\n\r\n  const updateRule = (index: number, updatedRule: LogicRule) => {\r\n    const newRules = [...rules]\r\n    newRules[index] = updatedRule\r\n    onRulesChange(newRules)\r\n  }\r\n\r\n  const deleteRule = (index: number) => {\r\n    const newRules = [...rules]\r\n    newRules.splice(index, 1)\r\n    onRulesChange(newRules)\r\n  }\r\n\r\n  return (\r\n    <div className={`enhanced-logic-rules-container ${className}`}>\r\n      <div className=\"enhanced-logic-header\">\r\n        <h3>Logic Rules</h3>\r\n        <button className=\"enhanced-close-button\" onClick={onClose} aria-label=\"Close\">\r\n          <X className=\"close-icon\" />\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"enhanced-logic-rules-list\">\r\n        {rules.length === 0 ? (\r\n          <div className=\"enhanced-empty-rules\">\r\n            <p>No rules added yet. Add your first rule below.</p>\r\n          </div>\r\n        ) : (\r\n          rules.map((rule, index) => (\r\n            <EnhancedLogicRuleBuilder\r\n              key={rule.id}\r\n              questionType={questionType}\r\n              rule={rule}\r\n              options={options}\r\n              onRuleChange={(updatedRule) => updateRule(index, updatedRule)}\r\n              onRuleDelete={() => deleteRule(index)}\r\n              questions={questions}\r\n              className=\"enhanced-logic-rule-item\"\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"enhanced-logic-rules-actions\">\r\n        <button className=\"enhanced-add-rule-button\" onClick={addNewRule}>\r\n          <Plus className=\"add-icon\" />\r\n          <span>Add rule</span>\r\n        </button>\r\n        <button className=\"enhanced-done-button\" onClick={onClose}>\r\n          Done\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedAddLogicButton: React.FC<{\r\n  hasRules: boolean\r\n  onClick: () => void\r\n  className?: string\r\n}> = ({ hasRules, onClick, className = \"\" }) => {\r\n  return (\r\n    <button className={`enhanced-add-logic-button ${hasRules ? \"has-rules\" : \"\"} ${className}`} onClick={onClick}>\r\n      <CornerDownRight className=\"logic-icon\" />\r\n      <span>{hasRules ? \"Edit logic\" : \"Add logic\"}</span>\r\n      {hasRules && <span className=\"rules-badge\">!</span>}\r\n    </button>\r\n  )\r\n}\r\n\r\n// Enhanced Report Component\r\nconst Report: React.FC<{ template: Template }> = ({ template }) => {\r\n  const [activeTab, setActiveTab] = useState(\"summary\")\r\n\r\n  const generatePDF = async () => {\r\n    try {\r\n      // Show loading indicator\r\n      const loadingIndicator = document.createElement(\"div\")\r\n      loadingIndicator.style.position = \"fixed\"\r\n      loadingIndicator.style.top = \"0\"\r\n      loadingIndicator.style.left = \"0\"\r\n      loadingIndicator.style.width = \"100%\"\r\n      loadingIndicator.style.height = \"100%\"\r\n      loadingIndicator.style.backgroundColor = \"rgba(255, 255, 255, 0.8)\"\r\n      loadingIndicator.style.display = \"flex\"\r\n      loadingIndicator.style.justifyContent = \"center\"\r\n      loadingIndicator.style.alignItems = \"center\"\r\n      loadingIndicator.innerHTML =\r\n        '<div style=\"padding: 20px; background: white; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);\">Generating PDF...</div>'\r\n      document.body.appendChild(loadingIndicator)\r\n\r\n      // Create PDF document with professional layout\r\n      const doc = new jsPDF({\r\n        orientation: \"portrait\",\r\n        unit: \"mm\",\r\n        format: \"a4\",\r\n        compress: true,\r\n      })\r\n\r\n      const pageWidth = doc.internal.pageSize.getWidth()\r\n      const pageHeight = doc.internal.pageSize.getHeight()\r\n      const margin = 15\r\n      let yOffset = margin\r\n\r\n      // Add header with template title\r\n      doc.setFontSize(24)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(template.title, margin, yOffset + 10)\r\n\r\n      // Add date and inspector\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n\r\n      const preparedBy =\r\n        template.sections\r\n          .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n          ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"\r\n\r\n      const dateText = `${new Date().toLocaleDateString()} / ${preparedBy}`\r\n      doc.text(dateText, margin, yOffset + 20)\r\n\r\n      // Add status badge\r\n      const totalQuestions = template.sections.reduce((sum, section) => sum + section.questions.length, 0)\r\n      const answeredQuestions = template.sections.reduce(\r\n        (sum, section) => sum + section.questions.filter((q) => q.value !== null && q.value !== undefined).length,\r\n        0,\r\n      )\r\n      const scorePercentage = totalQuestions > 0 ? Math.round((answeredQuestions / totalQuestions) * 100) : 0\r\n\r\n      const statusText = scorePercentage === 100 ? \"Complete\" : \"Incomplete\"\r\n      const statusWidth = (doc.getStringUnitWidth(statusText) * 12) / doc.internal.scaleFactor\r\n\r\n      doc.setFillColor(\r\n        scorePercentage === 100 ? 76 : 244,\r\n        scorePercentage === 100 ? 175 : 67,\r\n        scorePercentage === 100 ? 80 : 54,\r\n      )\r\n      doc.roundedRect(pageWidth - margin - statusWidth - 10, yOffset + 5, statusWidth + 10, 8, 4, 4, \"F\")\r\n\r\n      doc.setTextColor(255, 255, 255)\r\n      doc.setFontSize(10)\r\n      doc.text(statusText, pageWidth - margin - 5, yOffset + 10, { align: \"right\" })\r\n\r\n      yOffset += 30\r\n\r\n      // Add horizontal line\r\n      doc.setDrawColor(220, 220, 220)\r\n      doc.line(margin, yOffset, pageWidth - margin, yOffset)\r\n      yOffset += 15\r\n\r\n      // Add score section\r\n      doc.setFontSize(14)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Score\", margin, yOffset)\r\n      yOffset += 10\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(`${answeredQuestions}/${totalQuestions} (${scorePercentage}%)`, margin, yOffset)\r\n      yOffset += 5\r\n\r\n      // Draw score bar\r\n      doc.setFillColor(240, 240, 240)\r\n      doc.rect(margin, yOffset, pageWidth - margin * 2, 5, \"F\")\r\n      doc.setFillColor(76, 175, 80)\r\n      doc.rect(margin, yOffset, (pageWidth - margin * 2) * (scorePercentage / 100), 5, \"F\")\r\n      yOffset += 20\r\n\r\n      // Add stats section in a grid layout\r\n      const flaggedItems = template.sections.reduce(\r\n        (sum, section) => sum + section.questions.filter((q) => q.flagged).length,\r\n        0,\r\n      )\r\n\r\n      const actionItems = template.sections.reduce(\r\n        (sum, section) =>\r\n          sum +\r\n          section.questions.filter(\r\n            (q) => shouldShowTrigger(q, \"require_action\") || shouldShowTrigger(q, \"require_evidence\"),\r\n          ).length,\r\n        0,\r\n      )\r\n\r\n      // Create a grid for stats\r\n      const statBoxWidth = (pageWidth - margin * 2 - 20) / 3\r\n\r\n      // Flagged items box\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Flagged items\", margin, yOffset + 15)\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(flaggedItems.toString(), margin, yOffset + 30)\r\n\r\n      // Actions box\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Actions\", margin + statBoxWidth + 10, yOffset + 15)\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(actionItems.toString(), margin + statBoxWidth + 10, yOffset + 30)\r\n\r\n      // Status box\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Status\", margin + statBoxWidth * 2 + 20, yOffset + 15)\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(\"In progress\", margin + statBoxWidth * 2 + 20, yOffset + 30)\r\n\r\n      yOffset += 50\r\n\r\n      // Add horizontal line\r\n      doc.setDrawColor(220, 220, 220)\r\n      doc.line(margin, yOffset, pageWidth - margin, yOffset)\r\n      yOffset += 15\r\n\r\n      // Add tabs section\r\n      doc.setFillColor(240, 240, 240)\r\n      doc.rect(margin, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\r\n      doc.setFillColor(255, 255, 255)\r\n      doc.rect(margin + (pageWidth - margin * 2) / 3, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\r\n      doc.setFillColor(240, 240, 240)\r\n      doc.rect(margin + (2 * (pageWidth - margin * 2)) / 3, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\r\n\r\n      doc.setFontSize(10)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(\"Summary\", margin + (pageWidth - margin * 2) / 6, yOffset + 6, { align: \"center\" })\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Flagged Items\", margin + (pageWidth - margin * 2) / 2, yOffset + 6, { align: \"center\" })\r\n      doc.text(\"Media\", margin + (5 * (pageWidth - margin * 2)) / 6, yOffset + 6, { align: \"center\" })\r\n\r\n      yOffset += 20\r\n\r\n      // Add inspection summary\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(\"Inspection Summary\", margin, yOffset)\r\n      yOffset += 10\r\n\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\r\n        `This report provides an overview of the safety inspection conducted at ${template.title}.`,\r\n        margin,\r\n        yOffset,\r\n      )\r\n      yOffset += 20\r\n\r\n      // Process each question with answer\r\n      const processedImages = new Map() // Cache for processed images\r\n\r\n      for (const section of template.sections) {\r\n        for (const question of section.questions) {\r\n          if (question.value !== null && question.value !== undefined) {\r\n            // Check if we need a new page\r\n            if (yOffset > pageHeight - 50) {\r\n              doc.addPage()\r\n              yOffset = margin + 20\r\n            }\r\n\r\n            // Draw question box\r\n            doc.setFillColor(255, 255, 255)\r\n            doc.rect(margin, yOffset, pageWidth - margin * 2, 40, \"F\")\r\n            doc.setDrawColor(230, 230, 230)\r\n            doc.rect(margin, yOffset, pageWidth - margin * 2, 40, \"S\")\r\n\r\n            // Add question icon based on value\r\n            if (question.value === \"Yes\" || question.value === true) {\r\n              doc.setFillColor(76, 175, 80)\r\n              doc.circle(margin + 15, yOffset + 15, 5, \"F\")\r\n            } else {\r\n              doc.setFillColor(244, 67, 54)\r\n              doc.circle(margin + 15, yOffset + 15, 5, \"F\")\r\n            }\r\n\r\n            // Add question text\r\n            doc.setFontSize(12)\r\n            doc.setTextColor(0, 0, 0)\r\n            doc.text(question.text, margin + 30, yOffset + 15)\r\n\r\n            // Add answer\r\n            doc.setFontSize(11)\r\n            doc.setTextColor(100, 100, 100)\r\n            const answerText =\r\n              question.responseType === \"Media\" || question.responseType === \"Annotation\"\r\n                ? \"Media uploaded\"\r\n                : String(question.value)\r\n            doc.text(answerText, margin + 30, yOffset + 30)\r\n\r\n            // Add flag if flagged\r\n            if (question.flagged) {\r\n              doc.setFillColor(244, 67, 54)\r\n              doc.rect(pageWidth - margin - 60, yOffset + 10, 50, 20, \"F\")\r\n              doc.setTextColor(255, 255, 255)\r\n              doc.text(\"Flagged\", pageWidth - margin - 50, yOffset + 22)\r\n            }\r\n\r\n            yOffset += 50\r\n\r\n            // Add media if available\r\n            if ((question.responseType === \"Media\" || question.responseType === \"Annotation\") && question.value) {\r\n              try {\r\n                // Check if we need a new page for the image\r\n                if (yOffset > pageHeight - 100) {\r\n                  doc.addPage()\r\n                  yOffset = margin + 20\r\n                }\r\n\r\n                // Check if we've already processed this image\r\n                const imageValue = question.value as string\r\n                let processedImage\r\n\r\n                if (processedImages.has(imageValue)) {\r\n                  processedImage = processedImages.get(imageValue)\r\n                } else {\r\n                  // Process the image to reduce size\r\n                  const img = document.createElement(\"img\")\r\n                  img.crossOrigin = \"anonymous\"\r\n\r\n                  // Create a promise to handle the image loading\r\n                  const imageLoaded = new Promise((resolve, reject) => {\r\n                    img.onload = () => {\r\n                      const canvas = document.createElement(\"canvas\")\r\n                      const MAX_WIDTH = 600\r\n                      const MAX_HEIGHT = 400\r\n\r\n                      let width = img.width\r\n                      let height = img.height\r\n\r\n                      // Calculate new dimensions while maintaining aspect ratio\r\n                      if (width > height) {\r\n                        if (width > MAX_WIDTH) {\r\n                          height *= MAX_WIDTH / width\r\n                          width = MAX_WIDTH\r\n                        }\r\n                      } else {\r\n                        if (height > MAX_HEIGHT) {\r\n                          width *= MAX_HEIGHT / height\r\n                          height = MAX_HEIGHT\r\n                        }\r\n                      }\r\n\r\n                      canvas.width = width\r\n                      canvas.height = height\r\n\r\n                      const ctx = canvas.getContext(\"2d\")\r\n                      if (ctx) {\r\n                        ctx.drawImage(img, 0, 0, width, height)\r\n                        // Use lower quality JPEG for smaller file size\r\n                        const optimizedImage = canvas.toDataURL(\"image/jpeg\", 0.5)\r\n                        processedImages.set(imageValue, optimizedImage)\r\n                        resolve(optimizedImage)\r\n                      } else {\r\n                        reject(new Error(\"Could not get canvas context\"))\r\n                      }\r\n                    }\r\n                    img.onerror = () => reject(new Error(\"Failed to load image\"))\r\n                  })\r\n\r\n                  img.src = imageValue\r\n\r\n                  try {\r\n                    processedImage = await imageLoaded\r\n                  } catch (err) {\r\n                    console.error(\"Error processing image:\", err)\r\n                    processedImage = imageValue // Fall back to original image\r\n                  }\r\n                }\r\n\r\n                // Add the image to the PDF\r\n                doc.addImage(processedImage, \"JPEG\", margin, yOffset, pageWidth - margin * 2, 80, undefined, \"FAST\")\r\n                yOffset += 90\r\n              } catch (error) {\r\n                console.error(\"Error adding image to PDF:\", error)\r\n                // Add error message instead of image\r\n                doc.setTextColor(244, 67, 54)\r\n                doc.text(\"Error loading image\", margin, yOffset + 10)\r\n                yOffset += 20\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Add footer to all pages\r\n      const totalPages = (doc as any).internal.pages.length - 1\r\n      for (let i = 1; i <= totalPages; i++) {\r\n        doc.setPage(i)\r\n        doc.setFontSize(10)\r\n        doc.setTextColor(150, 150, 150)\r\n        doc.text(`Generated on ${new Date().toLocaleString()}`, margin, pageHeight - 10)\r\n        doc.text(`Page ${i} of ${totalPages}`, pageWidth - margin, pageHeight - 10, { align: \"right\" })\r\n      }\r\n\r\n      // Save the PDF\r\n      doc.save(`${template.title}_Report.pdf`)\r\n\r\n      // Remove loading indicator\r\n      document.body.removeChild(loadingIndicator)\r\n    } catch (error) {\r\n      console.error(\"Error generating PDF:\", error)\r\n      alert(\"There was an error generating the PDF. Please try again.\")\r\n\r\n      // Make sure to remove loading indicator if there's an error\r\n      const loadingIndicator = document.querySelector('[style*=\"position: fixed\"][style*=\"z-index: 9999\"]')\r\n      if (loadingIndicator && loadingIndicator.parentNode) {\r\n        loadingIndicator.parentNode.removeChild(loadingIndicator)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Calculate report statistics\r\n  const totalQuestions = template.sections.reduce((sum, section) => sum + section.questions.length, 0)\r\n  const answeredQuestions = template.sections.reduce(\r\n    (sum, section) => sum + section.questions.filter((q) => q.value !== null && q.value !== undefined).length,\r\n    0,\r\n  )\r\n  const scorePercentage = totalQuestions > 0 ? Math.round((answeredQuestions / totalQuestions) * 100) : 0\r\n\r\n  // Count flagged items and actions\r\n  const flaggedItems = template.sections.reduce(\r\n    (sum, section) => sum + section.questions.filter((q) => q.flagged).length,\r\n    0,\r\n  )\r\n  const actionItems = template.sections.reduce(\r\n    (sum, section) =>\r\n      sum +\r\n      section.questions.filter(\r\n        (q) => shouldShowTrigger(q, \"require_action\") || shouldShowTrigger(q, \"require_evidence\"),\r\n      ).length,\r\n    0,\r\n  )\r\n\r\n  // Get media items\r\n  const mediaItems = template.sections.reduce(\r\n    (items, section) => {\r\n      const sectionMedia = section.questions\r\n        .filter((q) => (q.responseType === \"Media\" || q.responseType === \"Annotation\") && q.value)\r\n        .map((q) => ({\r\n          id: q.id,\r\n          caption: q.text,\r\n          thumbnail: q.value as string,\r\n        }))\r\n      return [...items, ...sectionMedia]\r\n    },\r\n    [] as Array<{ id: string; caption: string; thumbnail: string }>,\r\n  )\r\n\r\n  return (\r\n    <div className=\"report-container\">\r\n      <div className=\"report-header\">\r\n        <h2>Report Preview</h2>\r\n        <button className=\"generate-pdf-button\" onClick={generatePDF}>\r\n          <Download className=\"download-icon\" />\r\n          Download PDF Report\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"report-card\">\r\n        <div className=\"report-card-header\">\r\n          <div className=\"report-title-section\">\r\n            {template.logo && (\r\n              <div className=\"report-logo\">\r\n                <img src={template.logo || \"/placeholder.svg\"} alt=\"Template logo\" />\r\n              </div>\r\n            )}\r\n            <div className=\"report-title-info\">\r\n              <h3>{template.title}</h3>\r\n              <p className=\"report-date\">\r\n                {new Date().toLocaleDateString()} /{\" \"}\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"report-completion-badge\">{scorePercentage === 100 ? \"Complete\" : \"Incomplete\"}</div>\r\n        </div>\r\n\r\n        <div className=\"report-stats\">\r\n          <div className=\"report-score-container\">\r\n            <p className=\"report-stat-label\">Score</p>\r\n            <div className=\"report-score-bar\">\r\n              <div className=\"report-score-progress\" style={{ width: `${scorePercentage}%` }}></div>\r\n            </div>\r\n            <span className=\"report-score-text\">\r\n              {answeredQuestions}/{totalQuestions} ({scorePercentage}%)\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"report-stat-grid\">\r\n            <div className=\"report-stat\">\r\n              <p className=\"report-stat-label\">Flagged items</p>\r\n              <div className=\"report-stat-value\">\r\n                <Flag className=\"report-stat-icon flagged\" />\r\n                <span>{flaggedItems}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"report-stat\">\r\n              <p className=\"report-stat-label\">Actions</p>\r\n              <div className=\"report-stat-value\">\r\n                <AlertTriangle className=\"report-stat-icon action\" />\r\n                <span>{actionItems}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"report-stat\">\r\n              <p className=\"report-stat-label\">Status</p>\r\n              <div className=\"report-stat-value\">\r\n                <Clock className=\"report-stat-icon status\" />\r\n                <span>In progress</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"report-site-info\">\r\n          <div className=\"report-site-info-grid\">\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <Building className=\"report-site-info-icon\" />\r\n                <p>Site conducted</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Site\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Site\" && q.value)?.value || \"Not specified\"}\r\n              </p>\r\n            </div>\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <Calendar className=\"report-site-info-icon\" />\r\n                <p>Conducted on</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Inspection date\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Inspection date\" && q.value)?.value ||\r\n                  new Date().toLocaleDateString()}\r\n              </p>\r\n            </div>\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <User className=\"report-site-info-icon\" />\r\n                <p>Prepared by</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Not specified\"}\r\n              </p>\r\n            </div>\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <MapPin className=\"report-site-info-icon\" />\r\n                <p>Location</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Inspection location\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Inspection location\" && q.value)?.value ||\r\n                  \"Not specified\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"report-tabs\">\r\n        <div className=\"report-tab-buttons\">\r\n          <button\r\n            className={`report-tab-button ${activeTab === \"summary\" ? \"active\" : \"\"}`}\r\n            onClick={() => setActiveTab(\"summary\")}\r\n          >\r\n            Summary\r\n          </button>\r\n          <button\r\n            className={`report-tab-button ${activeTab === \"flagged\" ? \"active\" : \"\"}`}\r\n            onClick={() => setActiveTab(\"flagged\")}\r\n          >\r\n            Flagged Items\r\n          </button>\r\n          <button\r\n            className={`report-tab-button ${activeTab === \"media\" ? \"active\" : \"\"}`}\r\n            onClick={() => setActiveTab(\"media\")}\r\n          >\r\n            Media\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"report-tab-content\">\r\n          {activeTab === \"summary\" && (\r\n            <div className=\"report-summary\">\r\n              <h3 className=\"report-section-title\">Inspection Summary</h3>\r\n              <p className=\"report-section-description\">\r\n                This report provides an overview of the safety inspection conducted at{\" \"}\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Site\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Site\" && q.value)?.value || \"the site\"}\r\n                .\r\n              </p>\r\n\r\n              <div className=\"report-questions-list\">\r\n                {template.sections.map((section) =>\r\n                  section.questions\r\n                    .filter((q) => q.value !== null && q.value !== undefined)\r\n                    .map((question) => (\r\n                      <div key={question.id} className={`report-question-item ${question.flagged ? \"flagged\" : \"\"}`}>\r\n                        <div className=\"report-question-header\">\r\n                          <div className=\"report-question-icon\">\r\n                            {question.value === \"Yes\" || question.value === true ? (\r\n                              <Check className=\"report-question-check\" />\r\n                            ) : (\r\n                              <AlertTriangle className=\"report-question-alert\" />\r\n                            )}\r\n                          </div>\r\n                          <div className=\"report-question-text\">\r\n                            <p>{question.text}</p>\r\n                            <div className=\"report-question-badges\">\r\n                              <span\r\n                                className={`report-question-answer ${question.value === \"Yes\" || question.value === true ? \"positive\" : \"negative\"}`}\r\n                              >\r\n                                {question.responseType === \"Media\" || question.responseType === \"Annotation\"\r\n                                  ? \"Media uploaded\"\r\n                                  : String(question.value)}\r\n                              </span>\r\n                              {question.flagged && (\r\n                                <span className=\"report-question-flag\">\r\n                                  <Flag className=\"report-flag-icon\" />\r\n                                  Flagged\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        {(question.responseType === \"Media\" || question.responseType === \"Annotation\") &&\r\n                          question.value && (\r\n                            <div className=\"report-question-media\">\r\n                              <img\r\n                                src={(question.value as string) || \"/placeholder.svg\"}\r\n                                alt={question.text}\r\n                                className=\"report-media-preview\"\r\n                              />\r\n                            </div>\r\n                          )}\r\n                      </div>\r\n                    )),\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === \"flagged\" && (\r\n            <div className=\"report-flagged\">\r\n              <div className=\"report-flagged-header\">\r\n                <h3 className=\"report-section-title\">Flagged Items</h3>\r\n                <span className=\"report-flagged-count\">\r\n                  {flaggedItems} flagged, {actionItems} action\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"report-questions-list\">\r\n                {template.sections.map((section) =>\r\n                  section.questions\r\n                    .filter((q) => q.flagged)\r\n                    .map((question) => (\r\n                      <div key={question.id} className=\"report-question-item flagged\">\r\n                        <div className=\"report-question-header\">\r\n                          <div className=\"report-question-icon\">\r\n                            <AlertTriangle className=\"report-question-alert\" />\r\n                          </div>\r\n                          <div className=\"report-question-text\">\r\n                            <p>{question.text}</p>\r\n                            <span className=\"report-question-answer negative\">\r\n                              {question.responseType === \"Media\" || question.responseType === \"Annotation\"\r\n                                ? \"Media uploaded\"\r\n                                : String(question.value || \"No\")}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n\r\n                        {(question.responseType === \"Media\" || question.responseType === \"Annotation\") &&\r\n                          question.value && (\r\n                            <div className=\"report-question-media\">\r\n                              <img\r\n                                src={(question.value as string) || \"/placeholder.svg\"}\r\n                                alt={question.text}\r\n                                className=\"report-media-preview\"\r\n                              />\r\n                            </div>\r\n                          )}\r\n\r\n                        <div className=\"report-question-action\">\r\n                          <div className=\"report-action-header\">\r\n                            <span className=\"report-action-status\">In progress</span>\r\n                            <span className=\"report-action-assignee\">\r\n                              <span className=\"report-action-label\">Assignee</span>\r\n                              Fred Smith\r\n                            </span>\r\n                            <span className=\"report-action-priority high\">\r\n                              <span className=\"report-action-label\">Priority</span>\r\n                              High\r\n                            </span>\r\n                          </div>\r\n\r\n                          <div className=\"report-action-due\">\r\n                            <span className=\"report-action-label\">Due</span>\r\n                            {new Date().toLocaleDateString()}\r\n                          </div>\r\n\r\n                          <div className=\"report-action-created\">\r\n                            <span className=\"report-action-label\">Created by</span>\r\n                            {template.sections\r\n                              .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n                              ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"}\r\n                          </div>\r\n\r\n                          <div className=\"report-action-category\">Work Areas / Personal Protective Equipment (PPE)</div>\r\n                          <div className=\"report-action-description\">Make sure the team wear safety hard hats</div>\r\n                        </div>\r\n                      </div>\r\n                    )),\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === \"media\" && (\r\n            <div className=\"report-media\">\r\n              <h3 className=\"report-section-title\">Media Summary</h3>\r\n\r\n              <div className=\"report-media-grid\">\r\n                {mediaItems.length > 0 ? (\r\n                  mediaItems.map((media) => (\r\n                    <div key={media.id} className=\"report-media-item\">\r\n                      <div className=\"report-media-image\">\r\n                        <img src={media.thumbnail || \"/placeholder.svg\"} alt={media.caption} />\r\n                        <div className=\"report-media-caption\">\r\n                          <p>{media.caption}</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div className=\"report-media-empty\">\r\n                    <ImageIcon className=\"report-media-empty-icon\" />\r\n                    <p>No media has been added to this report</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"report-footer\">\r\n        <div className=\"report-footer-buttons\">\r\n          <button className=\"report-footer-button\">\r\n            <FileText className=\"report-footer-icon\" />\r\n            Web preview\r\n          </button>\r\n          <button className=\"report-footer-button primary\" onClick={generatePDF}>\r\n            <Download className=\"report-footer-icon\" />\r\n            PDF preview\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"report-mobile-fab\">\r\n        <button className=\"report-mobile-download\" onClick={generatePDF}>\r\n          <Download className=\"report-mobile-download-icon\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Main Component\r\nconst CreateTemplate = () => {\r\n  const navigate = useNavigate()\r\n\r\n  const [templateId, setTemplateId] = useState<string | null>(null)\r\n\r\n  const [templateData, setTemplateData] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n  })\r\n  const generateId = () => Math.random().toString(36).substring(2, 9)\r\n\r\n  const getDefaultQuestion = (responseType: ResponseType = \"Text\"): Question => ({\r\n    id: generateId(),\r\n    text: \"Type question\",\r\n    responseType,\r\n    required: false,\r\n    flagged: false,\r\n    multipleSelection: false,\r\n    options:\r\n      responseType === \"Multiple choice\" || responseType === \"Yes/No\"\r\n        ? [\"Option 1\", \"Option 2\", \"Option 3\"]\r\n        : undefined,\r\n    value: null,\r\n    logicRules: [],\r\n  })\r\n\r\n  const getDefaultSection = (title = \"Untitled Page\"): Section => ({\r\n    id: generateId(),\r\n    title,\r\n    questions: [],\r\n    isCollapsed: false,\r\n  })\r\n\r\n  const getInitialTemplate = (): Template => {\r\n    const titlePageSection: Section = {\r\n      id: generateId(),\r\n      title: \"Title Page\",\r\n      description: \"The Title Page is the first page of your inspection report. Customize it below.\",\r\n      questions: [\r\n        {\r\n          id: generateId(),\r\n          text: \"Site conducted\",\r\n          responseType: \"Site\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Conducted on\",\r\n          responseType: \"Inspection date\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Prepared by\",\r\n          responseType: \"Person\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Location\",\r\n          responseType: \"Inspection location\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n      ],\r\n      isCollapsed: false,\r\n    }\r\n\r\n    return {\r\n      id: generateId(),\r\n      title: \"Untitled template\",\r\n      description: \"Add a description\",\r\n      sections: [titlePageSection],\r\n      lastSaved: new Date(),\r\n      lastPublished: new Date(),\r\n      logo: undefined,\r\n    }\r\n  }\r\n  const [template, setTemplate] = useState<Template>({\r\n    id: generateId(), // Add the required id property\r\n    title: \"\",\r\n    description: \"\",\r\n    logo: undefined, // Changed from null to undefined\r\n    sections: [],\r\n    lastSaved: new Date(),\r\n    lastPublished: new Date(),\r\n  })\r\n  const [activeTab, setActiveTab] = useState<number>(0)\r\n\r\n  const [activeSectionId, setActiveSectionId] = useState<string | null>(null)\r\n  const [activeQuestionId, setActiveQuestionId] = useState<string | null>(null)\r\n  const [draggedItem, setDraggedItem] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\r\n  const [dropTarget, setDropTarget] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\r\n  const [showResponseTypeMenu, setShowResponseTypeMenu] = useState<string | null>(null)\r\n  const [showMobilePreview, setShowMobilePreview] = useState<boolean>(true)\r\n  const [showLogicPanel, setShowLogicPanel] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  // Add a class to the document body when mobile preview is hidden\r\n  useEffect(() => {\r\n    if (showMobilePreview) {\r\n      document.body.classList.remove('mobile-preview-hidden')\r\n    } else {\r\n      document.body.classList.add('mobile-preview-hidden')\r\n    }\r\n  }, [showMobilePreview])\r\n\r\n  const questionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\r\n  const sectionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\r\n  const { id } = useParams();\r\n\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      axios\r\n        .get(`http://localhost:8000/api/users/templates/${id}/`)\r\n        .then((res) => {\r\n          setTemplate(res.data);\r\n          setTemplateData(res.data);\r\n          setIsLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to load template\", err);\r\n          setIsLoading(false);\r\n        });\r\n    } else {\r\n      const newTemplate = getInitialTemplate();\r\n      setTemplate(newTemplate);\r\n      setActiveSectionId(newTemplate.sections[0]?.id || null);\r\n      setIsLoading(false);\r\n    }\r\n  }, [id]);\r\n\r\n\r\n\r\n  if (isLoading || !template) {\r\n    return <div>Loading template...</div>\r\n  }\r\n\r\n  function toSnakeCase(obj: any): any {\r\n    if (Array.isArray(obj)) {\r\n      return obj.map(toSnakeCase);\r\n    } else if (obj !== null && typeof obj === \"object\") {\r\n      const newObj: any = {};\r\n      for (const key in obj) {\r\n        if (!obj.hasOwnProperty(key)) continue;\r\n        const snakeKey = key.replace(/([A-Z])/g, \"_$1\").toLowerCase();\r\n        newObj[snakeKey] = toSnakeCase(obj[key]);\r\n      }\r\n      return newObj;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n\r\n\r\n  function cleanTemplateForSave(template: Template, isNew: boolean): Partial<Template> {\r\n    return {\r\n      ...(isNew ? {} : { id: template.id }),\r\n      title: template.title,\r\n      description: template.description,\r\n      logo: template.logo,\r\n      sections: template.sections.map((section) => {\r\n        const newSectionId = isNew || typeof section.id === \"number\" ? generateId() : section.id;\r\n\r\n        return {\r\n          id: newSectionId,\r\n          title: section.title,\r\n          description: section.description,\r\n          isCollapsed: section.isCollapsed,\r\n          questions: section.questions.map((q) => {\r\n            const newQuestionId = isNew || typeof q.id === \"number\" ? generateId() : q.id;\r\n\r\n            return {\r\n              id: newQuestionId,\r\n              text: q.text,\r\n              responseType: q.responseType ?? \"Text\", // ensure fallback\r\n              required: q.required,\r\n              flagged: q.flagged,\r\n              options: q.options,\r\n              value: q.value,\r\n              conditionalLogic: q.conditionalLogic,\r\n              conditionalProof: q.conditionalProof,\r\n              logicRules: q.logicRules,\r\n              multipleSelection: q.multipleSelection,\r\n            };\r\n          }),\r\n        };\r\n      }),\r\n    };\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // Updated handleSave function with proper CSRF token handling\r\n  const handleSave = async () => {\r\n    const isNew = !id;\r\n\r\n    if (!template.title) {\r\n      alert(\"Please enter a template title\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const csrfToken = await fetchCSRFToken();\r\n      const formData = new FormData();\r\n\r\n      // Add title and description\r\n      formData.append(\"title\", template.title);\r\n      formData.append(\"description\", template.description);\r\n\r\n      // Add logo if exists\r\n      if (template.logo) {\r\n        if (typeof template.logo === \"string\" && template.logo.startsWith(\"data:\")) {\r\n          const response = await fetch(template.logo);\r\n          const blob = await response.blob();\r\n          formData.append(\"logo\", blob, \"logo.png\");\r\n        } else {\r\n          formData.append(\"logo\", template.logo);\r\n        }\r\n      }\r\n\r\n      // Add sections (correctly cleaned + snake_cased)\r\n      const cleaned = cleanTemplateForSave(template, isNew);\r\n      const snakeCaseSections = toSnakeCase(cleaned.sections);\r\n      formData.append(\"sections\", JSON.stringify(snakeCaseSections));\r\n\r\n      const url = isNew\r\n        ? \"http://localhost:8000/api/users/create_templates/\"\r\n        : `http://localhost:8000/api/users/templates/${id}/`;\r\n\r\n      const method = isNew ? \"POST\" : \"PATCH\";\r\n\r\n      const saveResponse = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          \"X-CSRFToken\": csrfToken,\r\n        },\r\n        body: formData,\r\n        credentials: \"include\",\r\n      });\r\n\r\n      if (!saveResponse.ok) {\r\n        const errorData = await saveResponse.json();\r\n        throw new Error(errorData.error || \"Failed to save template\");\r\n      }\r\n\r\n      alert(\"Template saved successfully!\");\r\n    } catch (error: any) {\r\n      console.error(\"Error saving template:\", error);\r\n      alert(`Failed to save template: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Template Management\r\n  const updateTemplate = (updates: Partial<Template>) => setTemplate((prev) => ({ ...prev, ...updates }))\r\n\r\n  const handleBack = () => {\r\n    if (window.confirm(\"Do you want to save before leaving?\")) handleSave()\r\n      navigate(\"/templates\")\r\n  }\r\n\r\n  const handleLogoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0]\r\n    if (file && file.size <= 5 * 1024 * 1024 && file.type.match(/^image\\//)) {\r\n      const reader = new FileReader()\r\n      reader.onload = async (event) => {\r\n        const result = event.target?.result as string\r\n        if (result) {\r\n          const resizedImage = await resizeImage(result)\r\n          updateTemplate({ logo: resizedImage })\r\n        }\r\n      }\r\n      reader.readAsDataURL(file)\r\n    }\r\n  }\r\n\r\n  // Section Management\r\n  const addSection = () => {\r\n    const newSection = getDefaultSection()\r\n    setTemplate((prev) => ({ ...prev, sections: [...prev.sections, newSection] }))\r\n    setActiveSectionId(newSection.id)\r\n    setTimeout(() => sectionRefs.current[newSection.id]?.scrollIntoView({ behavior: \"smooth\", block: \"start\" }), 100)\r\n  }\r\n\r\n  const updateSection = (sectionId: string, updates: Partial<Section>) => {\r\n    setTemplate((prev) => ({\r\n      ...prev,\r\n      sections: prev.sections.map((s) => (s.id === sectionId ? { ...s, ...updates } : s)),\r\n    }))\r\n  }\r\n\r\n  const deleteSection = (sectionId: string) => {\r\n    setTemplate((prev) => ({ ...prev, sections: prev.sections.filter((s) => s.id !== sectionId) }))\r\n  }\r\n\r\n  const toggleSectionCollapse = (sectionId: string) => {\r\n    updateSection(sectionId, { isCollapsed: !template.sections.find((s) => s.id === sectionId)?.isCollapsed })\r\n  }\r\n\r\n  // Question Management\r\n  const addQuestion = (sectionId: string, responseType: ResponseType = \"Text\") => {\r\n    const newQuestion = getDefaultQuestion(responseType)\r\n    updateSection(sectionId, {\r\n      questions: [...template.sections.find((s) => s.id === sectionId)!.questions, newQuestion],\r\n    })\r\n    setActiveQuestionId(newQuestion.id)\r\n  }\r\n\r\n  const updateQuestion = (sectionId: string, questionId: string, updates: Partial<Question>) => {\r\n    setTemplate((prev) => ({\r\n      ...prev,\r\n      sections: prev.sections.map((s) =>\r\n        s.id === sectionId\r\n          ? { ...s, questions: s.questions.map((q) => (q.id === questionId ? { ...q, ...updates } : q)) }\r\n          : s,\r\n      ),\r\n    }))\r\n  }\r\n\r\n  const deleteQuestion = (sectionId: string, questionId: string) => {\r\n    updateSection(sectionId, {\r\n      questions: template.sections.find((s) => s.id === sectionId)!.questions.filter((q) => q.id !== questionId),\r\n    })\r\n  }\r\n\r\n  const changeQuestionResponseType = (sectionId: string, questionId: string, responseType: ResponseType) => {\r\n    updateQuestion(sectionId, questionId, {\r\n      responseType,\r\n      options:\r\n        responseType === \"Multiple choice\" || responseType === \"Yes/No\"\r\n          ? [\"Option 1\", \"Option 2\", \"Option 3\"]\r\n          : undefined,\r\n      value: null,\r\n      logicRules: [],\r\n    })\r\n    setShowResponseTypeMenu(null)\r\n  }\r\n\r\n  // Drag and Drop\r\n  const handleDragStart = (type: \"question\" | \"section\", id: string) => setDraggedItem({ type, id })\r\n  const handleDragOver = (type: \"question\" | \"section\", id: string, e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    if (draggedItem && draggedItem.id !== id) setDropTarget({ type, id })\r\n  }\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    if (!draggedItem || !dropTarget) return\r\n\r\n    if (draggedItem.type === \"section\" && dropTarget.type === \"section\") {\r\n      const sections = [...template.sections]\r\n      const draggedIndex = sections.findIndex((s) => s.id === draggedItem.id)\r\n      const dropIndex = sections.findIndex((s) => s.id === dropTarget.id)\r\n      const [removed] = sections.splice(draggedIndex, 1)\r\n      sections.splice(dropIndex, 0, removed)\r\n      setTemplate((prev) => ({ ...prev, sections }))\r\n    } else if (draggedItem.type === \"question\" && dropTarget.type === \"question\") {\r\n      const draggedSection = template.sections.find((s) => s.questions.some((q) => q.id === draggedItem.id))\r\n      const dropSection = template.sections.find((s) => s.questions.some((q) => q.id === dropTarget.id))\r\n\r\n      if (draggedSection && dropSection) {\r\n        const newSections = [...template.sections]\r\n        const draggedSectionIndex = newSections.findIndex((s) => s.id === draggedSection.id)\r\n        const draggedQuestionIndex = newSections[draggedSectionIndex].questions.findIndex(\r\n          (q) => q.id === draggedItem.id,\r\n        )\r\n        const dropSectionIndex = newSections.findIndex((s) => s.id === dropSection.id)\r\n        const dropQuestionIndex = newSections[dropSectionIndex].questions.findIndex((q) => q.id === dropTarget.id)\r\n        const [removedQuestion] = newSections[draggedSectionIndex].questions.splice(draggedQuestionIndex, 1)\r\n        newSections[dropSectionIndex].questions.splice(dropQuestionIndex, 0, removedQuestion)\r\n        setTemplate((prev) => ({ ...prev, sections: newSections }))\r\n      }\r\n    }\r\n    setDraggedItem(null)\r\n    setDropTarget(null)\r\n  }\r\n\r\n  // Rendering Helpers\r\n  const renderResponseTypeIcon = (type: ResponseType) => {\r\n    switch (type) {\r\n      case \"Site\":\r\n        return <MapPin size={18} className=\"response-type-icon\" />\r\n      case \"Inspection date\":\r\n        return <Calendar size={18} className=\"response-type-icon\" />\r\n      case \"Person\":\r\n        return <User size={18} className=\"response-type-icon\" />\r\n      case \"Inspection location\":\r\n        return <MapPin size={18} className=\"response-type-icon\" />\r\n      case \"Text\":\r\n        return <div className=\"response-type-icon text-icon\">Aa</div>\r\n      case \"Number\":\r\n        return <div className=\"response-type-icon number-icon\">123</div>\r\n      case \"Checkbox\":\r\n        return (\r\n          <div className=\"response-type-icon checkbox-icon\">\r\n            <Check size={14} />\r\n          </div>\r\n        )\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"response-type-icon yes-no-icon\">\r\n            <span className=\"yes\">Y</span>/<span className=\"no\">N</span>\r\n          </div>\r\n        )\r\n      case \"Multiple choice\":\r\n        return <div className=\"response-type-icon multiple-choice-icon\">☰</div>\r\n      case \"Slider\":\r\n        return <div className=\"response-type-icon slider-icon\">⟷</div>\r\n      case \"Media\":\r\n        return <ImageIcon size={18} className=\"response-type-icon\" />\r\n      case \"Annotation\":\r\n        return <Edit size={18} className=\"response-type-icon\" />\r\n      case \"Date & Time\":\r\n        return <Clock size={18} className=\"response-type-icon\" />\r\n      default:\r\n        return <div className=\"response-type-icon\"></div>\r\n    }\r\n  }\r\n\r\n  const renderResponseTypeMenu = (sectionId: string, questionId: string) => {\r\n    if (showResponseTypeMenu !== questionId) return null\r\n    const responseTypes: ResponseType[] = [\r\n      \"Text\",\r\n      \"Number\",\r\n      \"Checkbox\",\r\n      \"Yes/No\",\r\n      \"Multiple choice\",\r\n      \"Slider\",\r\n      \"Media\",\r\n      \"Annotation\",\r\n      \"Date & Time\",\r\n      \"Site\",\r\n      \"Inspection date\",\r\n      \"Person\",\r\n      \"Inspection location\",\r\n    ]\r\n\r\n    return (\r\n      <div className=\"response-type-menu\">\r\n        <div className=\"response-type-menu-header\">\r\n          <h3>Select response type</h3>\r\n          <button className=\"close-button\" onClick={() => setShowResponseTypeMenu(null)}>\r\n            <X size={18} />\r\n          </button>\r\n        </div>\r\n        <div className=\"response-type-options\">\r\n          {responseTypes.map((type) => (\r\n            <button\r\n              key={type}\r\n              className=\"response-type-option\"\r\n              onClick={() => changeQuestionResponseType(sectionId, questionId, type)}\r\n            >\r\n              {renderResponseTypeIcon(type)}\r\n              <span>{type}</span>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderQuestionResponse = (question: Question, sectionId: string) => {\r\n    switch (question.responseType) {\r\n      case \"Text\":\r\n        return (\r\n          <div className=\"response-field text-field\">\r\n            <div className=\"text-input\">Text answer</div>\r\n          </div>\r\n        )\r\n      case \"Number\":\r\n        return (\r\n          <div className=\"response-field number-field\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"number-input\"\r\n              value={(question.value as number) || \"\"}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { value: Number(e.target.value) })}\r\n              placeholder=\"0\"\r\n            />\r\n          </div>\r\n        )\r\n      case \"Checkbox\":\r\n        return (\r\n          <div className=\"response-field checkbox-field\">\r\n            <div className=\"checkbox-input\">\r\n              <div className=\"checkbox\"></div>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"response-field yes-no-field\">\r\n            <div className=\"yes-no-options\">\r\n              <button className=\"yes-option\">Yes</button>\r\n              <button className=\"no-option\">No</button>\r\n              <button className=\"na-option\">N/A</button>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Multiple choice\":\r\n        return (\r\n          <div className=\"response-field multiple-choice-field\">\r\n            <div className=\"multiple-choice-options\">\r\n              {(question.options || []).map((option, idx) => (\r\n                <button key={idx} className={`choice-option choice-${idx % 4}`}>\r\n                  {option}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Slider\":\r\n        return (\r\n          <div className=\"response-field slider-field\">\r\n            <div className=\"slider-container\">\r\n              <div className=\"slider-track\">\r\n                <div className=\"slider-thumb\"></div>\r\n              </div>\r\n              <div className=\"slider-labels\">\r\n                <span>0</span>\r\n                <span>50</span>\r\n                <span>100</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Media\":\r\n        return (\r\n          <div className=\"response-field media-field\">\r\n            <div className=\"media-upload\">\r\n              <ImageIcon size={20} />\r\n              <span>Upload media</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Annotation\":\r\n        return (\r\n          <div className=\"response-field annotation-field\">\r\n            <div className=\"annotation-area\">\r\n              <Edit size={20} />\r\n              <span>Add annotation</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Date & Time\":\r\n      case \"Inspection date\":\r\n        return (\r\n          <div className=\"response-field date-time-field\">\r\n            <div className=\"date-time-input\">\r\n              <Calendar size={16} />\r\n              <span>{new Date().toLocaleDateString()}</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Site\":\r\n      case \"Person\":\r\n      case \"Inspection location\":\r\n        return (\r\n          <div className=\"response-field dropdown-input\">\r\n            <div className=\"dropdown-input\">\r\n              <span>Select {question.responseType.toLowerCase()}</span>\r\n              <ChevronDown size={16} />\r\n            </div>\r\n          </div>\r\n        )\r\n      default:\r\n        // Exhaustive type check to ensure all ResponseType values are handled\r\n        const _exhaustiveCheck: never = question.responseType\r\n        return <div className=\"response-field\">Unsupported response type</div>\r\n    }\r\n  }\r\n\r\n  const renderQuestion = (question: Question, sectionId: string, index: number) => {\r\n    const isActive = activeQuestionId === question.id\r\n    const isDragging = draggedItem?.type === \"question\" && draggedItem.id === question.id\r\n    const isDropTarget = dropTarget?.type === \"question\" && dropTarget.id === question.id\r\n\r\n    return (\r\n      <div\r\n        key={question.id}\r\n        ref={(el) => {\r\n          questionRefs.current[question.id] = el\r\n        }}\r\n        className={`question-item ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"}`}\r\n        onClick={() => setActiveQuestionId(question.id)}\r\n        draggable\r\n        onDragStart={(e) => handleDragStart(\"question\", question.id)}\r\n        onDragOver={(e) => handleDragOver(\"question\", question.id, e)}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div className=\"question-header\">\r\n          <div className=\"question-drag-handle\">\r\n            <Move size={16} />\r\n          </div>\r\n          <div className=\"question-number\">{index + 1}</div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"question-text\"\r\n            value={question.text}\r\n            onChange={(e) => updateQuestion(sectionId, question.id, { text: e.target.value })}\r\n            placeholder=\"Type question\"\r\n          />\r\n        </div>\r\n        <div className=\"question-body\">\r\n          <div className=\"response-type-selector\">\r\n            <div\r\n              className=\"selected-response-type\"\r\n              onClick={(e) => {\r\n                e.stopPropagation()\r\n                setShowResponseTypeMenu(showResponseTypeMenu === question.id ? null : question.id)\r\n              }}\r\n            >\r\n              {renderResponseTypeIcon(question.responseType)}\r\n              <span>{question.responseType}</span>\r\n              <ChevronDown size={16} />\r\n            </div>\r\n            {renderResponseTypeMenu(sectionId, question.id)}\r\n          </div>\r\n          {renderQuestionResponse(question, sectionId)}\r\n        </div>\r\n        <div className=\"question-footer\">\r\n          <EnhancedAddLogicButton\r\n            hasRules={question.logicRules?.length ? true : false}\r\n            onClick={() => setShowLogicPanel(showLogicPanel === question.id ? null : question.id)}\r\n          />\r\n          <label className=\"required-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={question.required}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { required: e.target.checked })}\r\n            />\r\n            <span>Required</span>\r\n          </label>\r\n          <label className=\"required-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={question.flagged}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { flagged: e.target.checked })}\r\n            />\r\n            <span>Flag</span>\r\n          </label>\r\n          <button className=\"delete-question\" onClick={() => deleteQuestion(sectionId, question.id)}>\r\n            <Trash2 size={16} />\r\n          </button>\r\n          {showLogicPanel === question.id && (\r\n            <EnhancedLogicRulesContainer\r\n              questionType={question.responseType}\r\n              rules={question.logicRules || []}\r\n              options={question.options || []}\r\n              onRulesChange={(rules) => updateQuestion(sectionId, question.id, { logicRules: rules })}\r\n              questions={template.sections.flatMap((s) => s.questions.map((q) => ({ id: q.id, text: q.text })))}\r\n              onClose={() => setShowLogicPanel(null)}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderSection = (section: Section, index: number) => {\r\n    const isActive = activeSectionId === section.id\r\n    const isDragging = draggedItem?.type === \"section\" && draggedItem.id === section.id\r\n    const isDropTarget = dropTarget?.type === \"section\" && dropTarget.id === section.id\r\n    const isTitlePage = index === 0\r\n\r\n    return (\r\n      <div\r\n        key={section.id}\r\n        ref={(el) => {\r\n          sectionRefs.current[section.id] = el\r\n        }}\r\n        className={`section-container ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"}`}\r\n        onClick={() => setActiveSectionId(section.id)}\r\n        draggable={!isTitlePage}\r\n        onDragStart={(e) => !isTitlePage && handleDragStart(\"section\", section.id)}\r\n        onDragOver={(e) => handleDragOver(\"section\", section.id, e)}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div className=\"section-header\">\r\n          <button\r\n            className=\"collapse-button\"\r\n            onClick={(e) => {\r\n              e.stopPropagation()\r\n              toggleSectionCollapse(section.id)\r\n            }}\r\n          >\r\n            {section.isCollapsed ? <ChevronUp size={18} /> : <ChevronDown size={18} />}\r\n          </button>\r\n          <div className=\"section-title-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"section-title\"\r\n              value={section.title}\r\n              onChange={(e) => updateSection(section.id, { title: e.target.value })}\r\n              readOnly={isTitlePage}\r\n            />\r\n            {!isTitlePage && (\r\n              <button className=\"edit-section-title\">\r\n                <Edit size={16} />\r\n              </button>\r\n            )}\r\n          </div>\r\n          {!isTitlePage && (\r\n            <div className=\"section-actions\">\r\n              <button\r\n                className=\"delete-section-button\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation()\r\n                  if (window.confirm(\"Are you sure you want to delete this section?\")) deleteSection(section.id)\r\n                }}\r\n              >\r\n                <Trash2 size={16} />\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {!section.isCollapsed && (\r\n          <>\r\n            {section.description && (\r\n              <div className=\"section-description\">\r\n                {section.description}\r\n                {isTitlePage && <p>customize the Title Page below</p>}\r\n              </div>\r\n            )}\r\n            <div className=\"questions-container\">\r\n              <div className=\"questions-header\">\r\n                <div className=\"question-label\">Question</div>\r\n                <div className=\"response-type-label\">Type of response</div>\r\n                <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\r\n                  <Plus size={16} />\r\n                </button>\r\n              </div>\r\n              {section.questions.map((question, idx) => renderQuestion(question, section.id, idx))}\r\n              <div className=\"question-actions\">\r\n                <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\r\n                  <Plus size={16} /> Add Question\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Updated handlePublishTemplate function with proper CSRF token handling\r\n  const handlePublishTemplate = async () => {\r\n    try {\r\n      // 1. First, get a fresh CSRF token\r\n      const csrfToken = await fetchCSRFToken()\r\n\r\n      // 2. Prepare the form data\r\n      const formData = new FormData()\r\n      formData.append(\"title\", template.title)\r\n      formData.append(\"description\", template.description)\r\n\r\n      // 3. Handle the logo if it exists\r\n      if (template.logo) {\r\n        // If logo is a base64 string, convert to blob\r\n        if (typeof template.logo === \"string\" && template.logo.startsWith(\"data:\")) {\r\n          const response = await fetch(template.logo)\r\n          const blob = await response.blob()\r\n          formData.append(\"logo\", blob, \"logo.png\")\r\n        } else {\r\n          formData.append(\"logo\", template.logo)\r\n        }\r\n      }\r\n\r\n      // 4. Add sections data\r\n      const isNew = !id;\r\n      const cleanedTemplate = cleanTemplateForSave(template, isNew)\r\n      formData.append(\"sections\", JSON.stringify(cleanedTemplate.sections))\r\n\r\n      // 5. Make the API request with the fresh CSRF token\r\n      const publishResponse = await fetch(\"http://localhost:8000/api/users/create_templates/\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"X-CSRFToken\": csrfToken,\r\n        },\r\n        body: formData,\r\n        credentials: \"include\", // Important: include cookies\r\n      })\r\n\r\n      if (!publishResponse.ok) {\r\n        const errorData = await publishResponse.json()\r\n        throw new Error(errorData.error || \"Failed to publish template\")\r\n      }\r\n\r\n      // Success handling\r\n      setTemplate((prev) => ({\r\n        ...prev,\r\n        lastSaved: new Date(),\r\n        lastPublished: new Date(),\r\n      }))\r\n\r\n      console.log(\"Template published successfully!\")\r\n      alert(\"Template published and saved successfully!\")\r\n      navigate(\"/templates\")\r\n    } catch (error: unknown) {\r\n      console.error(\"Error publishing template:\", error)\r\n\r\n      if (axios.isAxiosError(error)) {\r\n        if (error.response?.status === 403) {\r\n          alert(\"Authentication error. Please log in again.\")\r\n          navigate(`/login?returnUrl=${encodeURIComponent(window.location.pathname)}`)\r\n        } else {\r\n          alert(`Failed to publish template: ${error.response?.data?.error || error.message}`)\r\n        }\r\n      } else {\r\n        alert(\"Failed to publish template: Unknown error occurred.\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // Render trigger UI components based on the trigger type\r\n  const renderTriggerUI = (question: Question, activeSection: Section) => {\r\n    if (shouldShowTrigger(question, \"require_evidence\")) {\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-trigger-header\">\r\n            <Upload size={16} />\r\n            <span>Evidence Required</span>\r\n          </div>\r\n          <div className=\"mobile-media-upload\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*,video/*\"\r\n              className=\"sr-only\"\r\n              id={`evidence-upload-${question.id}`}\r\n              onChange={(e) => {\r\n                if (e.target.files && e.target.files[0]) {\r\n                  const reader = new FileReader()\r\n                  reader.onload = (event) => {\r\n                    if (event.target?.result) {\r\n                      updateQuestion(activeSection.id, question.id, { conditionalProof: event.target.result as string })\r\n                    }\r\n                  }\r\n                  reader.readAsDataURL(e.target.files[0])\r\n                }\r\n              }}\r\n            />\r\n            {!question.conditionalProof ? (\r\n              <label htmlFor={`evidence-upload-${question.id}`} className=\"mobile-media-placeholder\">\r\n                <ImageIcon size={20} />\r\n                <span>Upload evidence (photo or video)</span>\r\n              </label>\r\n            ) : (\r\n              <div className=\"mobile-media-preview\">\r\n                <img\r\n                  src={question.conditionalProof || \"/placeholder.svg\"}\r\n                  alt=\"Evidence\"\r\n                  className=\"mobile-media-image\"\r\n                />\r\n                <button\r\n                  className=\"mobile-media-remove\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault()\r\n                    e.stopPropagation()\r\n                    updateQuestion(activeSection.id, question.id, { conditionalProof: undefined })\r\n                  }}\r\n                >\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"require_action\")) {\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-trigger-header\">\r\n            <FileText size={16} />\r\n            <span>Action Required</span>\r\n          </div>\r\n          <div className=\"mobile-action-form\">\r\n            <input type=\"text\" className=\"mobile-text-input\" placeholder=\"Describe the action taken...\" />\r\n            <div className=\"mobile-action-buttons\">\r\n              <button className=\"mobile-action-button\">Submit Action</button>\r\n              <button className=\"mobile-action-button secondary\">Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"notify\")) {\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-notification-banner\">\r\n            <Bell size={16} />\r\n            <span>Notification has been sent to the relevant team members.</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"display_message\")) {\r\n      // Get the message from the rule that triggered this\r\n      const rule = question.logicRules?.find(\r\n        (r) => r.trigger === \"display_message\"\r\n      )\r\n      const message = rule?.message || \"Important: This response requires immediate attention.\"\r\n\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-message-banner\">\r\n            <AlertTriangle size={16} />\r\n            <span>{message}</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"ask_questions\")) {\r\n      // Get the subQuestion from the rule that triggered this\r\n      const rule = question.logicRules?.find((r) => r.trigger === \"ask_questions\")\r\n      const subQuestionText = rule?.subQuestion?.text || \"Please provide more details about this issue\"\r\n      const responseType = rule?.subQuestion?.responseType || \"Text\"\r\n\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-trigger-header\">\r\n            <MessageSquare size={16} />\r\n            <span>Follow-up Questions</span>\r\n          </div>\r\n          <div className=\"mobile-subquestion\">\r\n            <div className=\"mobile-question-text\">\r\n              <span className=\"mobile-required\">*</span>\r\n              {subQuestionText}\r\n            </div>\r\n            <div className=\"mobile-question-response\">\r\n              {responseType === \"Text\" && (\r\n                <textarea className=\"mobile-text-input\" rows={3} placeholder=\"Enter details here...\"></textarea>\r\n              )}\r\n              {responseType === \"Yes/No\" && (\r\n                <div className=\"mobile-yes-no\">\r\n                  <button className=\"mobile-yes\">Yes</button>\r\n                  <button className=\"mobile-no\">No</button>\r\n                  <button className=\"mobile-na\">N/A</button>\r\n                </div>\r\n              )}\r\n              {responseType === \"Number\" && <input type=\"number\" className=\"mobile-number-input\" placeholder=\"0\" />}\r\n              {responseType === \"Multiple choice\" && (\r\n                <div className=\"mobile-multiple-choice\">\r\n                  <button className=\"mobile-choice\">Option 1</button>\r\n                  <button className=\"mobile-choice\">Option 2</button>\r\n                  <button className=\"mobile-choice\">Option 3</button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"mobile-action-buttons\">\r\n            <button className=\"mobile-action-button\">Submit Responses</button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  // Update the renderMobileQuestionResponse function to make it more interactive and realistic\r\n  const renderMobileQuestionResponse = (question: Question, activeSection: Section) => {\r\n    switch (question.responseType) {\r\n      case \"Text\":\r\n        return (\r\n          <input\r\n            type=\"text\"\r\n            className=\"mobile-text-input\"\r\n            placeholder=\"Text answer\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          />\r\n        )\r\n      case \"Number\":\r\n        return (\r\n          <input\r\n            type=\"number\"\r\n            className=\"mobile-number-input\"\r\n            placeholder=\"0\"\r\n            value={(question.value as number) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: Number(e.target.value) })}\r\n          />\r\n        )\r\n      case \"Checkbox\":\r\n        return (\r\n          <div\r\n            className=\"mobile-checkbox\"\r\n            onClick={() => updateQuestion(activeSection.id, question.id, { value: !question.value })}\r\n          >\r\n            <div className={`mobile-checkbox-box ${question.value ? \"checked\" : \"\"}`}>\r\n              {question.value && <Check size={16} />}\r\n            </div>\r\n            <span>Check if applicable</span>\r\n          </div>\r\n        )\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"mobile-yes-no\">\r\n            <button\r\n              className={`mobile-yes ${question.value === \"Yes\" ? \"selected\" : \"\"}`}\r\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"Yes\" })}\r\n            >\r\n              Yes\r\n            </button>\r\n            <button\r\n              className={`mobile-no ${question.value === \"No\" ? \"selected\" : \"\"}`}\r\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"No\" })}\r\n            >\r\n              No\r\n            </button>\r\n            <button\r\n              className={`mobile-na ${question.value === \"N/A\" ? \"selected\" : \"\"}`}\r\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"N/A\" })}\r\n            >\r\n              N/A\r\n            </button>\r\n          </div>\r\n        )\r\n      case \"Multiple choice\":\r\n        return (\r\n          <div className=\"mobile-multiple-choice\">\r\n            {(question.options || []).map((option, idx) => (\r\n              <button\r\n                key={idx}\r\n                className={`mobile-choice ${question.value === option ? \"selected\" : \"\"}`}\r\n                onClick={() => updateQuestion(activeSection.id, question.id, { value: option })}\r\n              >\r\n                {option}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        )\r\n      case \"Slider\":\r\n        return (\r\n          <div className=\"mobile-slider\">\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              className=\"mobile-slider-input\"\r\n              value={(question.value as number) || 50}\r\n              onChange={(e) => updateQuestion(activeSection.id, question.id, { value: Number(e.target.value) })}\r\n            />\r\n            <div className=\"mobile-slider-labels\">\r\n              <span>0</span>\r\n              <span>50</span>\r\n              <span>100</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Media\":\r\n        return (\r\n          <label className=\"mobile-media-upload\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*,video/*\"\r\n              className=\"sr-only\"\r\n              onChange={(e) => {\r\n                if (e.target.files && e.target.files[0]) {\r\n                  const reader = new FileReader()\r\n                  reader.onload = (event) => {\r\n                    if (event.target?.result) {\r\n                      updateQuestion(activeSection.id, question.id, { value: event.target.result as string })\r\n                    }\r\n                  }\r\n                  reader.readAsDataURL(e.target.files[0])\r\n                }\r\n              }}\r\n            />\r\n            {!question.value ? (\r\n              <>\r\n                <ImageIcon size={20} />\r\n                <span>Upload media (photo or video)</span>\r\n              </>\r\n            ) : (\r\n              <div className=\"mobile-media-preview\">\r\n                <img\r\n                  src={(question.value as string) || \"/placeholder.svg\"}\r\n                  alt=\"Uploaded media\"\r\n                  className=\"mobile-media-image\"\r\n                />\r\n                <button\r\n                  className=\"mobile-media-remove\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault()\r\n                    e.stopPropagation()\r\n                    updateQuestion(activeSection.id, question.id, { value: null })\r\n                  }}\r\n                >\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </label>\r\n        )\r\n      case \"Annotation\":\r\n        return (\r\n          <div className=\"mobile-annotation\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              className=\"sr-only\"\r\n              id={`annotation-${question.id}`}\r\n              onChange={(e) => {\r\n                if (e.target.files && e.target.files[0]) {\r\n                  const reader = new FileReader()\r\n                  reader.onload = (event) => {\r\n                    if (event.target?.result) {\r\n                      updateQuestion(activeSection.id, question.id, { value: event.target.result as string })\r\n                    }\r\n                  }\r\n                  reader.readAsDataURL(e.target.files[0])\r\n                }\r\n              }}\r\n            />\r\n            {!question.value ? (\r\n              <label htmlFor={`annotation-${question.id}`} className=\"mobile-annotation-placeholder\">\r\n                <Edit size={20} />\r\n                <span>Add annotation</span>\r\n              </label>\r\n            ) : (\r\n              <div className=\"mobile-annotation-preview\">\r\n                <img\r\n                  src={(question.value as string) || \"/placeholder.svg\"}\r\n                  alt=\"Annotation\"\r\n                  className=\"mobile-annotation-image\"\r\n                />\r\n                <button\r\n                  className=\"mobile-annotation-remove\"\r\n                  onClick={() => updateQuestion(activeSection.id, question.id, { value: null })}\r\n                >\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n      case \"Date & Time\":\r\n      case \"Inspection date\":\r\n        return (\r\n          <input\r\n            type=\"datetime-local\"\r\n            className=\"mobile-date-time\"\r\n            value={(question.value as string) || new Date().toISOString().slice(0, 16)}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          />\r\n        )\r\n      case \"Site\":\r\n        const siteOptions = [\"Main Site\", \"Secondary Site\", \"Remote Location\", \"Headquarters\"]\r\n        return (\r\n          <select\r\n            className=\"mobile-dropdown-field\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select site\r\n            </option>\r\n            {siteOptions.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )\r\n      case \"Person\":\r\n        const personOptions = [\"John Doe\", \"Jane Smith\", \"Alex Johnson\", \"Sam Wilson\"]\r\n        return (\r\n          <select\r\n            className=\"mobile-dropdown-field\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select person\r\n            </option>\r\n            {personOptions.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )\r\n      case \"Inspection location\":\r\n        const locationOptions = [\"Main Building\", \"Warehouse\", \"Office\", \"Factory Floor\", \"Parking Lot\"]\r\n        return (\r\n          <select\r\n            className=\"mobile-dropdown-field\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select location\r\n            </option>\r\n            {locationOptions.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )\r\n      default:\r\n        return <div className=\"mobile-text-input\">Response placeholder</div>\r\n    }\r\n  }\r\n\r\n  const renderMobilePreview = () => {\r\n    if (!showMobilePreview) {\r\n      return (\r\n        <div className=\"mobile-preview-collapsed\">\r\n          <button className=\"show-mobile-preview-button\" onClick={() => setShowMobilePreview(true)}>\r\n            <div className=\"mobile-icon\">\r\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <rect x=\"5\" y=\"2\" width=\"14\" height=\"20\" rx=\"2\" stroke=\"currentColor\" strokeWidth=\"2\" />\r\n                <line x1=\"5\" y1=\"18\" x2=\"19\" y2=\"18\" stroke=\"currentColor\" strokeWidth=\"2\" />\r\n                <line x1=\"9\" y1=\"21\" x2=\"15\" y2=\"21\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" />\r\n              </svg>\r\n            </div>\r\n            <span>Show Preview</span>\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Add null check for template\r\n    if (!template) {\r\n      return <div className=\"mobile-preview\">Loading...</div>\r\n    }\r\n\r\n    const activeSection = template.sections?.find((s) => s.id === activeSectionId) || template.sections?.[0]\r\n\r\n    if (!activeSection) {\r\n      return (\r\n        <div className=\"mobile-preview\">\r\n          <div className=\"mobile-preview-header\">\r\n            <button className=\"mobile-preview-close\" onClick={() => setShowMobilePreview(false)}>\r\n              <X size={16} />\r\n              <span>Hide Preview</span>\r\n            </button>\r\n          </div>\r\n          <div className=\"mobile-device-container\">\r\n            <div className=\"mobile-device\">\r\n              <div className=\"mobile-content\">\r\n                <div className=\"mobile-template-title\">{template.title || \"Untitled Template\"}</div>\r\n                <div className=\"mobile-page-indicator\">No pages added yet.</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"mobile-preview\">\r\n        <div className=\"mobile-preview-header\">\r\n          <button className=\"mobile-preview-close\" onClick={() => setShowMobilePreview(false)}>\r\n            <X size={16} />\r\n            <span>Hide Preview</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"mobile-device-container\">\r\n          <div className=\"mobile-device\">\r\n            <div className=\"mobile-device-notch\"></div>\r\n            <div className=\"mobile-status-bar\">\r\n              <div className=\"mobile-time\">\r\n                {new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\r\n              </div>\r\n              <div className=\"mobile-status-icons\">\r\n                <div className=\"mobile-signal\"></div>\r\n                <div className=\"mobile-wifi\"></div>\r\n                <div className=\"mobile-battery\"></div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mobile-content\">\r\n              {template.logo && (\r\n                <div className=\"mobile-header-content\">\r\n                  <div className=\"mobile-logo\">\r\n                    <img src={template.logo || \"/placeholder.svg\"} alt=\"Template logo\" className=\"mobile-logo-image\" />\r\n                  </div>\r\n                  <div className=\"mobile-template-title\">{template.title}</div>\r\n                </div>\r\n              )}\r\n              <div className=\"mobile-page-indicator\">\r\n                Page {template.sections.indexOf(activeSection) + 1} of {template.sections.length}\r\n              </div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"mobile-page-title\"\r\n                value={activeSection.title}\r\n                onChange={(e) => updateSection(activeSection.id, { title: e.target.value })}\r\n                placeholder=\"Enter page title\"\r\n              />\r\n\r\n              {activeSection.description && (\r\n                <div className=\"mobile-section-description\">{activeSection.description}</div>\r\n              )}\r\n\r\n              <div className=\"mobile-questions\">\r\n                {activeSection.questions.map((question) => (\r\n                  <div key={question.id} className=\"mobile-question\">\r\n                    <div className=\"mobile-question-text\">\r\n                      {question.required && <span className=\"mobile-required\">*</span>}\r\n                      {question.flagged && <span className=\"mobile-flagged\">⚑</span>}\r\n                      {question.text}\r\n                    </div>\r\n                    <div className=\"mobile-question-response\">\r\n                      {renderMobileQuestionResponse(question, activeSection)}\r\n                      {renderTriggerUI(question, activeSection)}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"mobile-nav-buttons\">\r\n              {template.sections.map((section) => (\r\n                <div\r\n                  key={section.id}\r\n                  className={`mobile-nav-dot ${section.id === activeSection.id ? \"active\" : \"\"}`}\r\n                  onClick={() => setActiveSectionId(section.id)}\r\n                ></div>\r\n              ))}\r\n            </div>\r\n            <div className=\"mobile-home-indicator\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Main Render\r\n  return (\r\n    <div className=\"template-builder\">\r\n      <div className=\"top-navigation\">\r\n        <div className=\"nav-left\">\r\n          <div className=\"company-name\">FASHCOGNITIVE</div>\r\n          <button className=\"back-button\" onClick={handleBack}>\r\n            <ArrowLeft size={16} />\r\n            <span>back</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"nav-center\">\r\n          <div className=\"nav-tabs\">\r\n            <button className={`nav-tab ${activeTab === 0 ? \"active\" : \"\"}`} onClick={() => setActiveTab(0)}>\r\n              1. Build\r\n            </button>\r\n            <button\r\n              className={`nav-tab ${activeTab === 2 ? \"active\" : \"\"}`}\r\n              onClick={() => setActiveTab(2)}\r\n              disabled={activeTab < 2}\r\n            >\r\n              2. Report\r\n            </button>\r\n            <button\r\n              className={`nav-tab ${activeTab === 3 ? \"active\" : \"\"}`}\r\n              onClick={() => setActiveTab(3)}\r\n              disabled={activeTab < 3}\r\n            >\r\n              3. Access\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"nav-right\"></div>\r\n      </div>\r\n\r\n      <div className=\"builder-content\">\r\n        {activeTab === 0 && (\r\n          <div className=\"template-builder-container\">\r\n            <div className={`template-content ${showMobilePreview ? 'with-preview' : ''}`}>\r\n              <div className=\"template-header\">\r\n                <div className=\"template-logo\">\r\n                  {template.logo ? (\r\n                    <img\r\n                      src={template.logo || \"/placeholder.svg\"}\r\n                      alt=\"Template logo\"\r\n                      className=\"logo-image\"\r\n                      onClick={() => document.getElementById(\"logo-upload\")?.click()}\r\n                    />\r\n                  ) : (\r\n                    <div className=\"logo-placeholder\" onClick={() => document.getElementById(\"logo-upload\")?.click()}>\r\n                      <Plus size={24} />\r\n                    </div>\r\n                  )}\r\n                  <input\r\n                    id=\"logo-upload\"\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    className=\"sr-only\"\r\n                    onChange={handleLogoUpload}\r\n                  />\r\n                </div>\r\n                <div className=\"template-info\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"template-title\"\r\n                    value={template.title}\r\n                    onChange={(e) => updateTemplate({ title: e.target.value })}\r\n                    placeholder=\"Untitled template\"\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"template-description\"\r\n                    value={template.description}\r\n                    onChange={(e) => updateTemplate({ description: e.target.value })}\r\n                    placeholder=\"Add a description\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"sections-container\">\r\n                {template.sections.map((section, idx) => renderSection(section, idx))}\r\n              </div>\r\n              <div className=\"add-section-container\">\r\n                <div className=\"add-section-actions\">\r\n                  <button className=\"add-section-button\" onClick={addSection}>\r\n                    <Plus size={16} /> Add Section\r\n                  </button>\r\n                  <button className=\"next-button\" onClick={() => setActiveTab(2)}>\r\n                    Next: Report\r\n                    <ArrowRight size={16} />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {renderMobilePreview()}\r\n          </div>\r\n        )}\r\n        {activeTab === 2 && (\r\n          <div className=\"report-page-container\">\r\n            <div style={{ width: \"100%\", maxWidth: \"1200px\" }}>\r\n              {!isLoading && template?.title && <Report template={template} />}\r\n            </div>\r\n            <div className=\"report-footer\">\r\n              <button className=\"next-button\" onClick={() => setActiveTab(3)}>\r\n                Next: Access\r\n                <ArrowRight size={16} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {activeTab === 3 && (\r\n          <div className=\"access-page-container\">\r\n            <h1 className=\"access-main-title\">Template Access & Settings</h1>\r\n            <p className=\"access-main-description\">Configure access permissions and inspection timeframe for this template.</p>\r\n\r\n            <div className=\"access-content\">\r\n              <div className=\"access-tab\">\r\n                <div className=\"session-section\">\r\n                  <h2>\r\n                    <Calendar size={20} className=\"section-icon\" />\r\n                    Inspection Timeframe\r\n                  </h2>\r\n                  <p>Set the start and due dates for inspections using this template.</p>\r\n\r\n                  <div className=\"date-fields\">\r\n                    <div className=\"date-field\">\r\n                      <label htmlFor=\"startDate\">Start Date <span className=\"required-indicator\">*</span></label>\r\n                      <div className=\"date-input-container\">\r\n                        <input\r\n                          type=\"date\"\r\n                          id=\"startDate\"\r\n                          name=\"startDate\"\r\n                          min={new Date().toISOString().split('T')[0]}\r\n                          className=\"date-input\"\r\n                          style={{appearance: \"none\", WebkitAppearance: \"none\"}}\r\n                        />\r\n                        <Calendar size={16} className=\"date-icon\" />\r\n                      </div>\r\n                      <div className=\"date-helper-text\">Earliest date inspections can begin</div>\r\n                    </div>\r\n                    <div className=\"date-field\">\r\n                      <label htmlFor=\"dueDate\">Due Date <span className=\"required-indicator\">*</span></label>\r\n                      <div className=\"date-input-container\">\r\n                        <input\r\n                          type=\"date\"\r\n                          id=\"dueDate\"\r\n                          name=\"dueDate\"\r\n                          min={new Date().toISOString().split('T')[0]}\r\n                          className=\"date-input\"\r\n                          style={{appearance: \"none\", WebkitAppearance: \"none\"}}\r\n                        />\r\n                        <Calendar size={16} className=\"date-icon\" />\r\n                      </div>\r\n                      <div className=\"date-helper-text\">Deadline for completing inspections</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"access-tab\">\r\n                <div className=\"permissions-section\">\r\n                  <h2>\r\n                    <User size={20} className=\"section-icon\" />\r\n                    User Permissions\r\n                  </h2>\r\n                  <p>Manage who can access, edit, and use this template.</p>\r\n\r\n                  <AccessManager\r\n                    templateId={template.id}\r\n                    templateTitle={template.title || \"Untitled Template\"}\r\n                    initialUsers={[]}\r\n                    onUpdatePermissions={(users) => {\r\n                      console.log(\"Updated permissions:\", users)\r\n                      // Here you would update the template with the new permissions\r\n                      // setTemplate({ ...template, permissions: users });\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"access-footer\">\r\n              <button className=\"publish-button\" onClick={handlePublishTemplate}>\r\n                <Upload className=\"publish-icon\" />\r\n                Publish Template\r\n                <CheckCircle size={16} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateTemplate","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\utils\\csrf.ts",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\components\\ConnectionsPanel.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\components\\AccessManager.tsx",["85","86","87","88","89","90"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  User,\r\n  UserPlus,\r\n  Mail,\r\n  Shield,\r\n  Check,\r\n  X,\r\n  Edit2,\r\n  Trash2,\r\n  Search,\r\n  AlertCircle,\r\n  Info,\r\n  Copy,\r\n  ExternalLink,\r\n  Users\r\n} from 'lucide-react';\r\nimport './AccessManager.css';\r\n\r\n// Define permission types\r\nexport type PermissionLevel = 'owner' | 'admin' | 'editor' | 'viewer';\r\n\r\nexport interface UserPermission {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  permissionLevel: PermissionLevel;\r\n  status: 'active' | 'pending' | 'expired';\r\n  lastAccessed?: Date;\r\n}\r\n\r\nexport interface Connection {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  initials: string;\r\n  status: 'active' | 'pending' | 'declined';\r\n}\r\n\r\ninterface CurrentUser {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\ninterface AccessManagerProps {\r\n  templateId: string;\r\n  templateTitle: string;\r\n  initialUsers?: UserPermission[];\r\n  onUpdatePermissions?: (users: UserPermission[]) => void;\r\n}\r\n\r\nconst generateId = () => Math.random().toString(36).substring(2, 9);\r\n\r\nconst getPermissionLabel = (level: PermissionLevel): string => {\r\n  switch (level) {\r\n    case 'owner':\r\n      return 'Owner';\r\n    case 'admin':\r\n      return 'Administrator';\r\n    case 'editor':\r\n      return 'Editor';\r\n    case 'viewer':\r\n      return 'Viewer';\r\n    default:\r\n      return 'Unknown';\r\n  }\r\n};\r\n\r\nconst getPermissionDescription = (level: PermissionLevel): string => {\r\n  switch (level) {\r\n    case 'owner':\r\n      return 'Full control including template deletion and ownership transfer';\r\n    case 'admin':\r\n      return 'Can edit template, manage users, and publish';\r\n    case 'editor':\r\n      return 'Can edit template content but cannot publish or manage users';\r\n    case 'viewer':\r\n      return 'Can only view and use the template';\r\n    default:\r\n      return '';\r\n  }\r\n};\r\n\r\nconst AccessManager: React.FC<AccessManagerProps> = ({\r\n  templateId,\r\n  templateTitle,\r\n  initialUsers = [],\r\n  onUpdatePermissions\r\n}) => {\r\n  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Fetch current user data\r\n  useEffect(() => {\r\n    const fetchCurrentUser = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/users/auth-status/', {\r\n          withCredentials: true\r\n        });\r\n        setCurrentUser(response.data.user);\r\n      } catch (error) {\r\n        console.error('Failed to fetch current user:', error);\r\n        // If we can't get the user from API, try to get from localStorage\r\n        const email = localStorage.getItem('username');\r\n        if (email) {\r\n          setCurrentUser({\r\n            id: 0,\r\n            username: email.split('@')[0],\r\n            email: email\r\n          });\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCurrentUser();\r\n  }, []);\r\n\r\n  // Create default owner based on current user\r\n  const createDefaultOwner = (): UserPermission => {\r\n    return {\r\n      id: generateId(),\r\n      name: currentUser ? (currentUser.username || currentUser.email.split('@')[0]) : 'You',\r\n      email: currentUser ? currentUser.email : 'current.user@example.com',\r\n      permissionLevel: 'owner',\r\n      status: 'active',\r\n      lastAccessed: new Date()\r\n    };\r\n  };\r\n\r\n  const [users, setUsers] = useState<UserPermission[]>(\r\n    initialUsers.length > 0 ? initialUsers : [createDefaultOwner()]\r\n  );\r\n\r\n  // Update default owner when current user is loaded\r\n  useEffect(() => {\r\n    if (!isLoading && currentUser && initialUsers.length === 0) {\r\n      setUsers([createDefaultOwner()]);\r\n    }\r\n  }, [currentUser, isLoading, initialUsers.length]);\r\n\r\n  const [showInviteForm, setShowInviteForm] = useState(false);\r\n  const [newUserEmail, setNewUserEmail] = useState('');\r\n  const [newUserPermission, setNewUserPermission] = useState<PermissionLevel>('viewer');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [editingUserId, setEditingUserId] = useState<string | null>(null);\r\n  const [showShareLink, setShowShareLink] = useState(false);\r\n  const [shareLink, setShareLink] = useState('');\r\n  const [linkCopied, setLinkCopied] = useState(false);\r\n  const [showPermissionDetails, setShowPermissionDetails] = useState(false);\r\n  const [showConnectionsModal, setShowConnectionsModal] = useState(false);\r\n  const [inviteTab, setInviteTab] = useState<'email' | 'connections'>('email');\r\n\r\n  // Sample connections data for demonstration\r\n  // Map to store individual permission levels for each connection\r\n  const [connectionPermissions, setConnectionPermissions] = useState<Record<string, PermissionLevel>>({});\r\n\r\n  const [connections, setConnections] = useState<Connection[]>([\r\n    {\r\n      id: '1',\r\n      name: 'Grace Miller',\r\n      email: 'grace.miller@example.com',\r\n      initials: 'GM',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'John Martinez',\r\n      email: 'john.martinez@example.com',\r\n      initials: 'JM',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Sarah Johnson',\r\n      email: 'sarah.johnson@example.com',\r\n      initials: 'SJ',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '4',\r\n      name: 'Michael Brown',\r\n      email: 'michael.brown@example.com',\r\n      initials: 'MB',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '5',\r\n      name: 'Emily Davis',\r\n      email: 'emily.davis@example.com',\r\n      initials: 'ED',\r\n      status: 'active'\r\n    }\r\n  ]);\r\n\r\n  // Generate a share link\r\n  useEffect(() => {\r\n    setShareLink(`https://fashcognitive.com/templates/share/${templateId}?token=${generateId()}`);\r\n  }, [templateId]);\r\n\r\n  // Update parent component when users change\r\n  useEffect(() => {\r\n    if (onUpdatePermissions) {\r\n      onUpdatePermissions(users);\r\n    }\r\n  }, [users, onUpdatePermissions]);\r\n\r\n  const handleAddUser = () => {\r\n    if (!newUserEmail.trim()) return;\r\n\r\n    // Check if user already exists\r\n    if (users.some(user => user.email.toLowerCase() === newUserEmail.toLowerCase())) {\r\n      alert('This user has already been invited.');\r\n      return;\r\n    }\r\n\r\n    const newUser: UserPermission = {\r\n      id: generateId(),\r\n      name: newUserEmail.split('@')[0], // Extract name from email\r\n      email: newUserEmail,\r\n      permissionLevel: newUserPermission,\r\n      status: 'pending'\r\n    };\r\n\r\n    setUsers([...users, newUser]);\r\n    setNewUserEmail('');\r\n    setNewUserPermission('viewer');\r\n    setShowInviteForm(false);\r\n  };\r\n\r\n  const handleAddConnection = (connection: Connection, permissionLevel: PermissionLevel) => {\r\n    // Check if connection already exists as a user\r\n    if (users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())) {\r\n      alert('This user has already been invited.');\r\n      return;\r\n    }\r\n\r\n    const newUser: UserPermission = {\r\n      id: generateId(),\r\n      name: connection.name,\r\n      email: connection.email,\r\n      avatar: connection.avatar,\r\n      permissionLevel: permissionLevel,\r\n      status: 'pending'\r\n    };\r\n\r\n    setUsers([...users, newUser]);\r\n    setShowInviteForm(false);\r\n  };\r\n\r\n  // Initialize connection permissions with default values\r\n  useEffect(() => {\r\n    const newPermissions: Record<string, PermissionLevel> = {};\r\n    connections.forEach(connection => {\r\n      if (!connectionPermissions[connection.id]) {\r\n        newPermissions[connection.id] = 'viewer';\r\n      }\r\n    });\r\n\r\n    if (Object.keys(newPermissions).length > 0) {\r\n      setConnectionPermissions(prev => ({ ...prev, ...newPermissions }));\r\n    }\r\n  }, [connections, connectionPermissions]);\r\n\r\n  const handleConnectionPermissionChange = (connectionId: string, permissionLevel: PermissionLevel) => {\r\n    setConnectionPermissions(prev => ({\r\n      ...prev,\r\n      [connectionId]: permissionLevel\r\n    }));\r\n  };\r\n\r\n  // Filter connections that are not already users\r\n  const availableConnections = connections.filter(\r\n    connection => !users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())\r\n  );\r\n\r\n  const handleUpdatePermission = (userId: string, permissionLevel: PermissionLevel) => {\r\n    setUsers(users.map(user =>\r\n      user.id === userId ? { ...user, permissionLevel } : user\r\n    ));\r\n    setEditingUserId(null);\r\n  };\r\n\r\n  const handleRemoveUser = (userId: string) => {\r\n    // Don't allow removing the owner\r\n    if (users.find(user => user.id === userId)?.permissionLevel === 'owner') {\r\n      alert('You cannot remove the owner of the template.');\r\n      return;\r\n    }\r\n\r\n    setUsers(users.filter(user => user.id !== userId));\r\n  };\r\n\r\n  const handleTransferOwnership = (userId: string) => {\r\n    // Find current owner and new owner\r\n    const currentOwner = users.find(user => user.permissionLevel === 'owner');\r\n    const newOwner = users.find(user => user.id === userId);\r\n\r\n    if (!currentOwner || !newOwner) return;\r\n\r\n    // Swap permissions\r\n    setUsers(users.map(user => {\r\n      if (user.id === currentOwner.id) {\r\n        return { ...user, permissionLevel: 'admin' };\r\n      }\r\n      if (user.id === userId) {\r\n        return { ...user, permissionLevel: 'owner' };\r\n      }\r\n      return user;\r\n    }));\r\n\r\n    setEditingUserId(null);\r\n  };\r\n\r\n  const copyShareLink = () => {\r\n    navigator.clipboard.writeText(shareLink);\r\n    setLinkCopied(true);\r\n    setTimeout(() => setLinkCopied(false), 2000);\r\n  };\r\n\r\n  // Filter users based on search term\r\n  const filteredUsers = users.filter(user =>\r\n    user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"access-manager\">\r\n      <div style={{ width: '100%', maxWidth: '1000px' }}>\r\n      <div className=\"access-header\">\r\n        <h2>Manage Access</h2>\r\n        <p>Control who can view and edit \"{templateTitle}\"</p>\r\n      </div>\r\n\r\n      {isLoading && (\r\n        <div style={{ textAlign: 'center', padding: '20px' }}>\r\n          <p>Loading user information...</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"access-actions\">\r\n        <div className=\"search-container\">\r\n          <Search size={18} className=\"search-icon\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search users...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"search-input\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"action-buttons\">\r\n          <button\r\n            className=\"share-link-button\"\r\n            onClick={() => setShowShareLink(!showShareLink)}\r\n          >\r\n            <ExternalLink size={16} />\r\n            Share Link\r\n          </button>\r\n\r\n          <button\r\n            className=\"invite-button\"\r\n            onClick={() => setShowInviteForm(!showInviteForm)}\r\n          >\r\n            <UserPlus size={16} />\r\n            Invite User\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {showShareLink && (\r\n        <div className=\"share-link-container\">\r\n          <div className=\"share-link-header\">\r\n            <h3>Share Template</h3>\r\n            <button className=\"close-button\" onClick={() => setShowShareLink(false)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n          <p>Anyone with this link can view this template:</p>\r\n          <div className=\"share-link-input\">\r\n            <input type=\"text\" value={shareLink} readOnly />\r\n            <button onClick={copyShareLink}>\r\n              <Copy size={16} />\r\n              {linkCopied ? 'Copied!' : 'Copy'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showInviteForm && (\r\n        <div className=\"invite-form\">\r\n          <div className=\"invite-form-header\">\r\n            <h3>Invite User</h3>\r\n            <button className=\"close-button\" onClick={() => setShowInviteForm(false)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"invite-tabs\">\r\n            <button\r\n              className={`invite-tab ${inviteTab === 'email' ? 'active' : ''}`}\r\n              onClick={() => setInviteTab('email')}\r\n            >\r\n              <Mail size={16} />\r\n              Email\r\n            </button>\r\n            <button\r\n              className={`invite-tab ${inviteTab === 'connections' ? 'active' : ''}`}\r\n              onClick={() => setInviteTab('connections')}\r\n            >\r\n              <Users size={16} />\r\n              My Connections\r\n            </button>\r\n          </div>\r\n\r\n          {inviteTab === 'email' ? (\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>Email Address</label>\r\n                <div className=\"email-input\">\r\n                  <Mail size={18} className=\"email-icon\" />\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email address\"\r\n                    value={newUserEmail}\r\n                    onChange={(e) => setNewUserEmail(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Permission Level\r\n                  <button\r\n                    className=\"info-button\"\r\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\r\n                  >\r\n                    <Info size={14} />\r\n                  </button>\r\n                </label>\r\n                <select\r\n                  value={newUserPermission}\r\n                  onChange={(e) => setNewUserPermission(e.target.value as PermissionLevel)}\r\n                >\r\n                  <option value=\"viewer\">Viewer</option>\r\n                  <option value=\"editor\">Editor</option>\r\n                  <option value=\"admin\">Administrator</option>\r\n                </select>\r\n              </div>\r\n\r\n              {showPermissionDetails && (\r\n                <div className=\"permission-details\">\r\n                  <div className=\"permission-item\">\r\n                    <h4>Viewer</h4>\r\n                    <p>Can view and use the template but cannot make changes</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Editor</h4>\r\n                    <p>Can edit template content but cannot publish or manage users</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Administrator</h4>\r\n                    <p>Can edit template, manage users, and publish</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Owner</h4>\r\n                    <p>Full control including template deletion and ownership transfer</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\r\n                <button\r\n                  className=\"send-invite-button\"\r\n                  onClick={handleAddUser}\r\n                  disabled={!newUserEmail.trim()}\r\n                >\r\n                  Send Invite\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Permission Levels\r\n                  <button\r\n                    className=\"info-button\"\r\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\r\n                  >\r\n                    <Info size={14} />\r\n                  </button>\r\n                </label>\r\n                <p className=\"permission-hint\">Set permission level for each connection individually</p>\r\n              </div>\r\n\r\n              {showPermissionDetails && (\r\n                <div className=\"permission-details\">\r\n                  <div className=\"permission-item\">\r\n                    <h4>Viewer</h4>\r\n                    <p>Can view and use the template but cannot make changes</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Editor</h4>\r\n                    <p>Can edit template content but cannot publish or manage users</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Administrator</h4>\r\n                    <p>Can edit template, manage users, and publish</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Owner</h4>\r\n                    <p>Full control including template deletion and ownership transfer</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"connections-list-container\">\r\n                <h4 className=\"connections-list-title\">\r\n                  Select from your connections\r\n                  <span className=\"connections-count\">({availableConnections.length})</span>\r\n                </h4>\r\n\r\n                {availableConnections.length === 0 ? (\r\n                  <div className=\"no-connections-message\">\r\n                    <p>All your connections have already been invited to this template.</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"connections-select-list\">\r\n                    {availableConnections.map(connection => (\r\n                      <div key={connection.id} className=\"connection-select-item\">\r\n                        <div className=\"connection-info\">\r\n                          {connection.avatar ? (\r\n                            <img src={connection.avatar} alt={connection.name} className=\"connection-avatar\" />\r\n                          ) : (\r\n                            <div className=\"connection-initials\">{connection.initials}</div>\r\n                          )}\r\n                          <div className=\"connection-details\">\r\n                            <span className=\"connection-name\">{connection.name}</span>\r\n                            <span className=\"connection-email\">{connection.email}</span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"connection-actions\">\r\n                          <select\r\n                            className=\"connection-permission-select\"\r\n                            value={connectionPermissions[connection.id] || 'viewer'}\r\n                            onChange={(e) => handleConnectionPermissionChange(connection.id, e.target.value as PermissionLevel)}\r\n                          >\r\n                            <option value=\"viewer\">Viewer</option>\r\n                            <option value=\"editor\">Editor</option>\r\n                            <option value=\"admin\">Admin</option>\r\n                          </select>\r\n                          <button\r\n                            className=\"add-connection-btn\"\r\n                            onClick={() => handleAddConnection(connection, connectionPermissions[connection.id] || 'viewer')}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"users-list-container\">\r\n        <div className=\"users-list-header\">\r\n          <div className=\"user-column\">User</div>\r\n          <div className=\"permission-column\">Permission</div>\r\n          <div className=\"status-column\">Status</div>\r\n          <div className=\"actions-column\">Actions</div>\r\n        </div>\r\n\r\n        <div className=\"users-list\">\r\n          {filteredUsers.length === 0 ? (\r\n            <div className=\"no-users\">\r\n              <AlertCircle size={24} />\r\n              <p>No users found matching \"{searchTerm}\"</p>\r\n            </div>\r\n          ) : (\r\n            filteredUsers.map(user => (\r\n              <div key={user.id} className=\"user-item\">\r\n                <div className=\"user-info\">\r\n                  <div className=\"user-avatar\">\r\n                    {user.avatar ? (\r\n                      <img src={user.avatar} alt={user.name} />\r\n                    ) : (\r\n                      <div className=\"avatar-placeholder\">\r\n                        {user.name.charAt(0).toUpperCase()}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"user-details\">\r\n                    <div className=\"user-name\">{user.name}</div>\r\n                    <div className=\"user-email\">{user.email}</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"user-permission\">\r\n                  {editingUserId === user.id ? (\r\n                    <select\r\n                      value={user.permissionLevel}\r\n                      onChange={(e) => handleUpdatePermission(user.id, e.target.value as PermissionLevel)}\r\n                      className=\"permission-select\"\r\n                    >\r\n                      <option value=\"viewer\">Viewer</option>\r\n                      <option value=\"editor\">Editor</option>\r\n                      <option value=\"admin\">Administrator</option>\r\n                      <option value=\"owner\">Owner (Transfer Ownership)</option>\r\n                    </select>\r\n                  ) : (\r\n                    <div className={`permission-badge ${user.permissionLevel}`}>\r\n                      <Shield size={14} />\r\n                      <span>{getPermissionLabel(user.permissionLevel)}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"user-status\">\r\n                  <div className={`status-badge ${user.status}`}>\r\n                    {user.status === 'active' && <Check size={14} />}\r\n                    {user.status === 'pending' && <Mail size={14} />}\r\n                    {user.status === 'expired' && <AlertCircle size={14} />}\r\n                    <span>{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"user-actions\">\r\n                  {user.permissionLevel !== 'owner' && (\r\n                    <>\r\n                      {editingUserId === user.id ? (\r\n                        <button\r\n                          className=\"save-button\"\r\n                          onClick={() => setEditingUserId(null)}\r\n                        >\r\n                          <Check size={16} />\r\n                        </button>\r\n                      ) : (\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => setEditingUserId(user.id)}\r\n                        >\r\n                          <Edit2 size={16} />\r\n                        </button>\r\n                      )}\r\n                      <button\r\n                        className=\"delete-button\"\r\n                        onClick={() => handleRemoveUser(user.id)}\r\n                      >\r\n                        <Trash2 size={16} />\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                  {user.permissionLevel === 'owner' && (\r\n                    <div className=\"owner-badge\">\r\n                      <User size={14} />\r\n                      <span>Owner</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccessManager;\r\n","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\garment-template.tsx",["91"],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\utils\\aqlHelpers.ts",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\utils\\aqlTables.ts",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":243,"column":6,"nodeType":"98","endLine":243,"endColumn":8,"suggestions":"99"},{"ruleId":"96","severity":1,"message":"100","line":292,"column":34,"nodeType":"101","endLine":292,"endColumn":41},{"ruleId":"102","severity":1,"message":"103","line":303,"column":23,"nodeType":"101","messageId":"104","endLine":303,"endColumn":38},{"ruleId":"102","severity":1,"message":"105","line":304,"column":20,"nodeType":"101","messageId":"104","endLine":304,"endColumn":32},{"ruleId":"102","severity":1,"message":"106","line":307,"column":25,"nodeType":"101","messageId":"104","endLine":307,"endColumn":42},{"ruleId":"102","severity":1,"message":"107","line":308,"column":27,"nodeType":"101","messageId":"104","endLine":308,"endColumn":46},{"ruleId":"96","severity":1,"message":"108","line":193,"column":6,"nodeType":"98","endLine":193,"endColumn":8,"suggestions":"109"},{"ruleId":"102","severity":1,"message":"110","line":55,"column":10,"nodeType":"101","messageId":"104","endLine":55,"endColumn":19},{"ruleId":"102","severity":1,"message":"111","line":1615,"column":10,"nodeType":"101","messageId":"104","endLine":1615,"endColumn":20},{"ruleId":"102","severity":1,"message":"112","line":1615,"column":22,"nodeType":"101","messageId":"104","endLine":1615,"endColumn":35},{"ruleId":"102","severity":1,"message":"113","line":1617,"column":10,"nodeType":"101","messageId":"104","endLine":1617,"endColumn":22},{"ruleId":"96","severity":1,"message":"114","line":1754,"column":6,"nodeType":"98","endLine":1754,"endColumn":10,"suggestions":"115"},{"ruleId":"102","severity":1,"message":"116","line":2193,"column":15,"nodeType":"101","messageId":"104","endLine":2193,"endColumn":38},{"ruleId":"102","severity":1,"message":"117","line":73,"column":7,"nodeType":"101","messageId":"104","endLine":73,"endColumn":31},{"ruleId":"96","severity":1,"message":"118","line":145,"column":6,"nodeType":"98","endLine":145,"endColumn":51,"suggestions":"119"},{"ruleId":"102","severity":1,"message":"120","line":156,"column":10,"nodeType":"101","messageId":"104","endLine":156,"endColumn":30},{"ruleId":"102","severity":1,"message":"121","line":156,"column":32,"nodeType":"101","messageId":"104","endLine":156,"endColumn":55},{"ruleId":"102","severity":1,"message":"122","line":163,"column":23,"nodeType":"101","messageId":"104","endLine":163,"endColumn":37},{"ruleId":"102","severity":1,"message":"123","line":299,"column":9,"nodeType":"101","messageId":"104","endLine":299,"endColumn":32},{"ruleId":"102","severity":1,"message":"124","line":1436,"column":9,"nodeType":"101","messageId":"104","endLine":1436,"endColumn":26},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'bgImages.length'. Either include it or remove the dependency array.","ArrayExpression",["127"],"The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","@typescript-eslint/no-unused-vars","'featuresVisible' is assigned a value but never used.","unusedVar","'statsVisible' is assigned a value but never used.","'industriesVisible' is assigned a value but never used.","'testimonialsVisible' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'endpointsToTry' and 'loggedInUser'. Either include them or remove the dependency array.",["128"],"'getCookie' is defined but never used.","'templateId' is assigned a value but never used.","'setTemplateId' is assigned a value but never used.","'templateData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getInitialTemplate'. Either include it or remove the dependency array.",["129"],"'_exhaustiveCheck' is assigned a value but never used.","'getPermissionDescription' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'createDefaultOwner'. Either include it or remove the dependency array.",["130"],"'showConnectionsModal' is assigned a value but never used.","'setShowConnectionsModal' is assigned a value but never used.","'setConnections' is assigned a value but never used.","'handleTransferOwnership' is assigned a value but never used.","'evaluateAqlStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [bgImages.length]",{"range":"139","text":"140"},"Update the dependencies array to be: [endpointsToTry, loggedInUser]",{"range":"141","text":"142"},"Update the dependencies array to be: [getInitialTemplate, id]",{"range":"143","text":"144"},"Update the dependencies array to be: [currentUser, isLoading, initialUsers.length, createDefaultOwner]",{"range":"145","text":"146"},[9995,9997],"[bgImages.length]",[6008,6010],"[endpointsToTry, loggedInUser]",[63304,63308],"[getInitialTemplate, id]",[3737,3782],"[currentUser, isLoading, initialUsers.length, createDefaultOwner]"]