[{"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\index.tsx":"1","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\App.tsx":"2","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\routes.tsx":"3","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\login.tsx":"4","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\register.tsx":"5","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Template.tsx":"6","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Dashboard.tsx":"7","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\TemplateView.tsx":"8","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Create_template.tsx":"9","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\home.tsx":"10","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\components\\AccessManager.tsx":"11","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\components\\ConnectionsPanel.tsx":"12","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\utils\\csrf.ts":"13"},{"size":332,"mtime":1740314516837,"results":"14","hashOfConfig":"15"},{"size":244,"mtime":1745474310903,"results":"16","hashOfConfig":"15"},{"size":1100,"mtime":1745556226528,"results":"17","hashOfConfig":"15"},{"size":3888,"mtime":1746032733610,"results":"18","hashOfConfig":"15"},{"size":9374,"mtime":1740324531641,"results":"19","hashOfConfig":"15"},{"size":10581,"mtime":1745165310637,"results":"20","hashOfConfig":"15"},{"size":7068,"mtime":1745992349901,"results":"21","hashOfConfig":"15"},{"size":4487,"mtime":1745475197135,"results":"22","hashOfConfig":"15"},{"size":112661,"mtime":1746073439577,"results":"23","hashOfConfig":"15"},{"size":12983,"mtime":1746016985151,"results":"24","hashOfConfig":"15"},{"size":22370,"mtime":1745423974752,"results":"25","hashOfConfig":"15"},{"size":10716,"mtime":1745322908030,"results":"26","hashOfConfig":"15"},{"size":1118,"mtime":1746030027313,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1azbrgt",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\index.tsx",[],["60","61"],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\App.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\routes.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\login.tsx",["62","63"],"import { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport \"../assets/login.css\";\r\nimport logs from \"../assets/img/flag.jpg\";\r\nimport { fetchCSRFToken } from \"../utils/csrf\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst Login: React.FC = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n      \r\n        try {\r\n          // 1. First, get a fresh CSRF token\r\n          const csrfToken = await fetchCSRFToken();\r\n      \r\n          // 2. Make the login request with the fresh token\r\n          const loginResponse = await fetch(\"http://localhost:8000/api/users/login/\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"X-CSRFToken\": csrfToken,\r\n            },\r\n            body: JSON.stringify({ email, password }),\r\n            credentials: \"include\",\r\n          });\r\n      \r\n          if (!loginResponse.ok) {\r\n            const errorData = await loginResponse.json();\r\n            throw new Error(errorData.error || \"Login failed\");\r\n          }\r\n      \r\n          // Success handling\r\n          console.log(\"Login successful!\");\r\n           \r\n          navigate(\"/dashboard\");\r\n          // Your existing success handling code\r\n          \r\n        } catch (error) {\r\n          console.error(\"Login error:\", error);\r\n          // Your existing error handling code\r\n        }\r\n      };\r\n\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"left-panel\">\r\n                <img src={logs} alt=\"Logo\" className=\"logo\" />\r\n                <h2 className=\"font\">Manage your assets and operations, all in one place</h2>\r\n            </div>\r\n            <div className=\"right-panel\">\r\n                <div className=\"login-card\">\r\n                    <h1>Hello Again!</h1>\r\n                    <p>Welcome Back</p>\r\n\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email\">Email Address</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                required\r\n                                placeholder=\"Enter your email\"\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                required\r\n                                placeholder=\"Enter your password\"\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <button type=\"submit\" className=\"login-button\">Login</button>\r\n\r\n                        {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n\r\n                        <div className=\"bottom-links\">\r\n                            <Link to=\"#\">Forgot Password?</Link>\r\n                            <Link to=\"/register\" className=\"signup-button\">Sign Up</Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\register.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Template.tsx",["64"],"\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport \"../assets/Template.css\"\r\nimport {\r\n  Plus,\r\n  Search,\r\n  FileText,\r\n  User,\r\n  X,\r\n  Home,\r\n  Bell,\r\n  ClipboardCheck,\r\n  Calendar,\r\n  Play,\r\n  BookOpen,\r\n  Package,\r\n  AlertCircle,\r\n  Settings,\r\n} from \"lucide-react\"\r\n\r\ninterface Template {\r\n  id: number\r\n  title: string\r\n  lastModified?: string\r\n  access?: string\r\n}\r\n\r\n// Define interface for endpoint result data\r\ninterface EndpointResult {\r\n  status?: number\r\n  ok?: boolean\r\n  parseError?: string\r\n  error?: string\r\n}\r\n\r\n// Define interface for debug info\r\ninterface DebugInfo {\r\n  endpoints: { [endpoint: string]: EndpointResult }\r\n  successEndpoint?: string\r\n  responseData?: any\r\n}\r\n\r\nconst TemplatePage: React.FC = () => {\r\n  const navigate = useNavigate()\r\n\r\n  const menuItems = [\r\n    { icon: Home, label: \"Home\", href: \"/dashboard\" },\r\n    { icon: Search, label: \"Search\", href: \"/search\" },\r\n    { icon: Bell, label: \"Notifications\", href: \"/notifications\" },\r\n    { icon: FileText, label: \"Templates\", href: \"/templates\", active: true },\r\n    { icon: ClipboardCheck, label: \"Inspections\", href: \"/inspections\" },\r\n    { icon: Calendar, label: \"Schedule\", href: \"/schedule\" },\r\n    { icon: Play, label: \"Actions\", href: \"/actions\" },\r\n    { icon: BookOpen, label: \"Training\", href: \"/training\" },\r\n    { icon: Package, label: \"Assets\", href: \"/assets\" },\r\n    { icon: AlertCircle, label: \"Issues\", href: \"/issues\" },\r\n  ]\r\n\r\n  const [templates, setTemplates] = useState<Template[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(\"\")\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [debugInfo, setDebugInfo] = useState<DebugInfo | null>(null)\r\n\r\n  // List of potential endpoints to try\r\n  const endpointsToTry = [\r\n    \"/api/templates/\",\r\n    \"/templates_api/\",\r\n    \"/templates/\",\r\n    \"/api/v1/templates/\",\r\n    \"/api/user/templates/\",\r\n    \"/dashboard/templates/\",\r\n    \"/api/users/templates/\",\r\n  ]\r\n\r\n  const handleCreateTemplate = () => {\r\n    navigate(\"/create_templates\")\r\n  }\r\n\r\n  // Function to test all endpoints\r\n  useEffect(() => {\r\n    const testAllEndpoints = async () => {\r\n      setLoading(true)\r\n      setError(\"\")\r\n\r\n      const results: { [endpoint: string]: EndpointResult } = {}\r\n\r\n      for (const endpoint of endpointsToTry) {\r\n        try {\r\n          const fullUrl = `http://127.0.0.1:8000${endpoint}`\r\n          console.log(`Testing endpoint: ${fullUrl}`)\r\n\r\n          const response = await fetch(fullUrl)\r\n          results[endpoint] = {\r\n            status: response.status,\r\n            ok: response.ok,\r\n          }\r\n\r\n          if (response.ok) {\r\n            try {\r\n              const data = await response.json()\r\n              console.log(`Success with ${fullUrl}:`, data)\r\n              setTemplates(data)\r\n              setDebugInfo({\r\n                endpoints: results,\r\n                successEndpoint: fullUrl,\r\n                responseData: data,\r\n              })\r\n              setLoading(false)\r\n              return // Stop trying other endpoints\r\n            } catch (e) {\r\n              if (results[endpoint]) {\r\n                results[endpoint].parseError = \"Could not parse JSON\"\r\n              }\r\n            }\r\n          }\r\n        } catch (err) {\r\n          results[endpoint] = {\r\n            error: err instanceof Error ? err.message : String(err),\r\n          }\r\n        }\r\n      }\r\n\r\n      // If we get here, none of the endpoints worked\r\n      console.log(\"All endpoints failed:\", results)\r\n      setDebugInfo({ endpoints: results })\r\n      setError(\"Could not connect to any templates API endpoint\")\r\n\r\n      // Fall back to demo data\r\n      setTemplates([\r\n        { id: 1, title: \"Safety Inspection Form (Demo)\", lastModified: \"2 days ago\", access: \"All users\" },\r\n        { id: 2, title: \"Weekly Equipment Check (Demo)\", lastModified: \"5 days ago\", access: \"Team managers\" },\r\n        { id: 3, title: \"Monthly Fire Safety Audit (Demo)\", lastModified: \"2 weeks ago\", access: \"Safety officers\" },\r\n      ])\r\n\r\n      setLoading(false)\r\n    }\r\n\r\n    testAllEndpoints()\r\n  }, [])\r\n\r\n  // Filter templates based on search term\r\n  const filteredTemplates = templates.filter((template) =>\r\n    template.title.toLowerCase().includes(searchTerm.toLowerCase()),\r\n  )\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      {/* Top Navigation */}\r\n      <nav className=\"navbar\">\r\n        <div className=\"navbar-brand\">FASHCOGNITIVE</div>\r\n        <div className=\"navbar-actions\">\r\n          <button className=\"nav-button\">\r\n            <User size={20} />\r\n          </button>\r\n          <button className=\"nav-button\">\r\n            <Settings size={20} />\r\n          </button>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Sidebar */}\r\n      <aside className=\"sidebar\">\r\n        <nav className=\"sidebar-nav\">\r\n          {menuItems.map((item, index) => (\r\n            <a key={index} href={item.href} className={`nav-link ${item.active ? \"active\" : \"\"}`}>\r\n              <item.icon size={20} />\r\n              <span>{item.label}</span>\r\n            </a>\r\n          ))}\r\n        </nav>\r\n      </aside>\r\n\r\n      <div className=\"template-container\">\r\n        <div className=\"template-header\">\r\n          <nav className=\"template-tabs\">\r\n            <button className=\"tab active\">Templates</button>\r\n            <button className=\"tab\">Responses</button>\r\n            <button className=\"tab\">Public Library</button>\r\n            <button className=\"tab\">Archive</button>\r\n          </nav>\r\n        </div>\r\n\r\n        <div className=\"template-content\">\r\n          <section className=\"creation-section\">\r\n            <div className=\"section-header\">\r\n              <h2>Create your template from one of the options below.</h2>\r\n              <button className=\"close-button\">\r\n                <X size={20} />\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"creation-options\">\r\n              <div className=\"option-card\">\r\n                <div className=\"option-icon\">\r\n                  <Plus size={24} />\r\n                </div>\r\n                <h3>Start from scratch</h3>\r\n                <p>Get started with a blank template.</p>\r\n              </div>\r\n              <div className=\"option-card\">\r\n                <div className=\"option-icon\">\r\n                  <FileText size={24} />\r\n                </div>\r\n                <h3>Describe topic</h3>\r\n                <p>Enter a text prompt about your template.</p>\r\n              </div>\r\n              <div className=\"option-card\">\r\n                <div className=\"option-icon\">\r\n                  <Search size={24} />\r\n                </div>\r\n                <h3>Find pre-made template</h3>\r\n                <p>Choose from over 100,000 editable templates.</p>\r\n              </div>\r\n            </div>\r\n          </section>\r\n\r\n          <section className=\"templates-section\">\r\n            <div className=\"templates-header\">\r\n              <h2>\r\n                Templates{\" \"}\r\n                <span className=\"count\">\r\n                  (1 - {filteredTemplates.length} of {templates.length})\r\n                </span>\r\n              </h2>\r\n              <button className=\"create-button\" onClick={handleCreateTemplate}>\r\n                <Plus size={16} />\r\n                Create\r\n              </button>\r\n            </div>\r\n\r\n            {/* Show loading indicator or error message */}\r\n            {loading && <div className=\"loading\">Loading templates...</div>}\r\n            {error && (\r\n              <div className=\"error-message\">\r\n                {error}\r\n                <p>Showing demo data for display purposes.</p>\r\n                <details>\r\n                  <summary>API Debug Info (Click to expand)</summary>\r\n                  <pre>{JSON.stringify(debugInfo, null, 2)}</pre>\r\n                </details>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"search-controls\">\r\n              <div className=\"search-field\">\r\n                <Search className=\"search-icon\" size={20} />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search all templates\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                />\r\n              </div>\r\n              <button className=\"filter-button\">\r\n                <Plus size={16} />\r\n                Add filter\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"templates-table\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"checkbox-column\">\r\n                      <input type=\"checkbox\" />\r\n                    </th>\r\n                    <th>Template</th>\r\n                    <th>Last modified</th>\r\n                    <th>Access</th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {filteredTemplates.map((template) => (\r\n                    <tr key={template.id}>\r\n                      <td className=\"checkbox-column\">\r\n                        <input type=\"checkbox\" />\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"template-cell\">\r\n                          <div className=\"template-icon\">\r\n                            <FileText size={20} />\r\n                          </div>\r\n                          <span>{template.title}</span>\r\n                        </div>\r\n                      </td>\r\n                      <td>{template.lastModified || \"Not available\"}</td>\r\n                      <td>\r\n                        <div className=\"access-badge\">\r\n                          <User size={16} />\r\n                          <span>{template.access || \"No access specified\"}</span>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"action-buttons\">\r\n                          <button className=\"start-inspection\">Start inspection</button>\r\n                          <button className=\"view-button\" onClick={() => navigate(`/template/${template.id}`)}>\r\n                            View\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TemplatePage\r\n","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Dashboard.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\TemplateView.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\Create_template.tsx",["65","66","67","68","69"],"\"use client\"\r\n\r\nimport type React from \"react\"\r\n\r\nimport { useState, useRef, useEffect } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport {\r\n  ChevronDown,\r\n  ChevronUp,\r\n  Edit,\r\n  Plus,\r\n  Calendar,\r\n  User,\r\n  MapPin,\r\n  X,\r\n  Check,\r\n  ImageIcon,\r\n  Trash2,\r\n  Move,\r\n  Clock,\r\n  ArrowLeft,\r\n  Bell,\r\n  FileText,\r\n  MessageSquare,\r\n  CornerDownRight,\r\n  ArrowRight,\r\n  Equal,\r\n  Hash,\r\n  CircleEqual,\r\n  CircleSlash,\r\n  CircleDot,\r\n  ChevronsRight,\r\n  ChevronsLeft,\r\n  ListFilter,\r\n  AlertTriangle,\r\n  Upload,\r\n  Download,\r\n  Building,\r\n  Flag,\r\n  CheckCircle,\r\n} from \"lucide-react\"\r\nimport { jsPDF } from \"jspdf\"\r\nimport AccessManager from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/AccessManager\"\r\nimport { fetchCSRFToken } from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/utils/csrf\"\r\nimport \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/pages/Create_template.css\"\r\nimport \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/TemplateBuilderLayout.css\"\r\nimport \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/FixTransitions.css\"\r\n\r\n// Utility functions\r\nfunction getCookie(name: string): string | null {\r\n  let cookieValue = null\r\n  if (document.cookie && document.cookie !== \"\") {\r\n    const cookies = document.cookie.split(\";\")\r\n    for (let i = 0; i < cookies.length; i++) {\r\n      const cookie = cookies[i].trim()\r\n      if (cookie.startsWith(name + \"=\")) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1))\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return cookieValue\r\n}\r\n\r\nconst resizeImage = (base64: string): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = document.createElement(\"img\")\r\n    img.crossOrigin = \"anonymous\"\r\n    img.src = base64\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\")\r\n      const MAX_WIDTH = 500\r\n      const scale = Math.min(MAX_WIDTH / img.width, 1)\r\n      canvas.width = img.width * scale\r\n      canvas.height = img.height * scale\r\n      const ctx = canvas.getContext(\"2d\")\r\n      if (ctx) {\r\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n        resolve(canvas.toDataURL(\"image/jpeg\", 0.8))\r\n      } else {\r\n        reject(new Error(\"Failed to get canvas context\"))\r\n      }\r\n    }\r\n    img.onerror = () => reject(new Error(\"Failed to load image\"))\r\n  })\r\n}\r\n\r\n// Types\r\ntype ResponseType =\r\n  | \"Site\"\r\n  | \"Inspection date\"\r\n  | \"Person\"\r\n  | \"Inspection location\"\r\n  | \"Text\"\r\n  | \"Number\"\r\n  | \"Checkbox\"\r\n  | \"Yes/No\"\r\n  | \"Multiple choice\"\r\n  | \"Slider\"\r\n  | \"Media\"\r\n  | \"Annotation\"\r\n  | \"Date & Time\"\r\n\r\ntype LogicOperator =\r\n  | \"equals\"\r\n  | \"notEquals\"\r\n  | \"greaterThan\"\r\n  | \"lessThan\"\r\n  | \"greaterThanOrEqual\"\r\n  | \"lessThanOrEqual\"\r\n  | \"between\"\r\n  | \"isOneOf\"\r\n  | \"isNotOneOf\"\r\n  | \"contains\"\r\n  | \"notContains\"\r\n  | \"startsWith\"\r\n  | \"endsWith\"\r\n  | \"matches\"\r\n\r\ntype TriggerAction = \"require_action\" | \"require_evidence\" | \"notify\" | \"ask_questions\" | \"display_message\"\r\n\r\ntype LogicCondition =\r\n  | \"is\"\r\n  | \"is not\"\r\n  | \"contains\"\r\n  | \"not contains\"\r\n  | \"starts with\"\r\n  | \"ends with\"\r\n  | \"matches (regex)\"\r\n  | \"less than\"\r\n  | \"less than or equal to\"\r\n  | \"equal to\"\r\n  | \"not equal to\"\r\n  | \"greater than or equal to\"\r\n  | \"greater than\"\r\n  | \"between\"\r\n  | \"not between\"\r\n  | \"is one of\"\r\n  | \"is not one of\"\r\n\r\ninterface LogicRule {\r\n  id: string\r\n  condition: LogicCondition\r\n  value: string | number | string[] | [number, number] | null\r\n  trigger: TriggerAction | null\r\n  triggerConfig?: any\r\n  message?: string\r\n  subQuestion?: {\r\n    text: string\r\n    responseType: ResponseType\r\n  }\r\n}\r\n\r\ninterface ConditionalLogicRule {\r\n  id: string\r\n  operator: LogicOperator\r\n  value: string | number | string[] | [number, number]\r\n  trigger: TriggerAction\r\n  subQuestion?: {\r\n    id: string\r\n    text: string\r\n    responseType: ResponseType\r\n    required: boolean\r\n    flagged: boolean\r\n    validation?: string\r\n  }\r\n  message?: string\r\n  actionDetails?: string\r\n  targetElementId?: string\r\n}\r\n\r\ninterface ConditionalLogic {\r\n  enabled: boolean\r\n  rules: ConditionalLogicRule[]\r\n}\r\n\r\ninterface Question {\r\n  id: string\r\n  text: string\r\n  responseType: ResponseType\r\n  required: boolean\r\n  flagged: boolean\r\n  options?: string[]\r\n  value?: string | string[] | boolean | number | null\r\n  conditionalLogic?: ConditionalLogic\r\n  conditionalProof?: string\r\n  logicRules?: LogicRule[]\r\n  multipleSelection?: boolean\r\n}\r\n\r\ninterface Section {\r\n  id: string\r\n  title: string\r\n  description?: string\r\n  questions: Question[]\r\n  isCollapsed: boolean\r\n}\r\n\r\ninterface Template {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  sections: Section[]\r\n  lastSaved?: Date\r\n  lastPublished?: Date\r\n  logo?: string\r\n}\r\n\r\n// Utility type guard\r\nconst isStringArray = (value: unknown): value is string[] =>\r\n  Array.isArray(value) && value.every((v: unknown) => typeof v === \"string\")\r\n\r\n// Helper function to check if a trigger should be shown based on the question's logic rules\r\nconst shouldShowTrigger = (question: Question, triggerType: TriggerAction): boolean => {\r\n  if (!question.logicRules || question.logicRules.length === 0 || !question.value) return false\r\n\r\n  for (const rule of question.logicRules) {\r\n    if (rule.trigger !== triggerType) continue\r\n\r\n    // Evaluate the condition based on the current value\r\n    const value = question.value\r\n    let conditionMet = false\r\n\r\n    switch (rule.condition) {\r\n      case \"is\":\r\n        conditionMet = value === rule.value\r\n        break\r\n      case \"is not\":\r\n        conditionMet = value !== rule.value\r\n        break\r\n      case \"contains\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.includes(rule.value)\r\n        break\r\n      case \"not contains\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && !value.includes(rule.value)\r\n        break\r\n      case \"starts with\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.startsWith(rule.value)\r\n        break\r\n      case \"ends with\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.endsWith(rule.value)\r\n        break\r\n      case \"greater than\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value > rule.value\r\n        break\r\n      case \"less than\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value < rule.value\r\n        break\r\n      case \"equal to\":\r\n        conditionMet = value === rule.value\r\n        break\r\n      case \"not equal to\":\r\n        conditionMet = value !== rule.value\r\n        break\r\n      case \"greater than or equal to\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value >= rule.value\r\n        break\r\n      case \"less than or equal to\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value <= rule.value\r\n        break\r\n      case \"between\":\r\n        conditionMet =\r\n          Array.isArray(rule.value) &&\r\n          rule.value.length === 2 &&\r\n          typeof value === \"number\" &&\r\n          value > Number(rule.value[0]) &&\r\n          value < Number(rule.value[1])\r\n        break\r\n      case \"is one of\":\r\n        conditionMet = isStringArray(rule.value) && typeof value === \"string\" && rule.value.includes(value)\r\n        break\r\n      case \"is not one of\":\r\n        conditionMet = isStringArray(rule.value) && typeof value === \"string\" && !rule.value.includes(value)\r\n        break\r\n    }\r\n\r\n    if (conditionMet) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n// Helper function to get condition icon\r\nconst getConditionIcon = (condition: LogicCondition) => {\r\n  switch (condition) {\r\n    case \"is\":\r\n      return <CircleEqual className=\"condition-icon\" />\r\n    case \"is not\":\r\n      return <CircleSlash className=\"condition-icon\" />\r\n    case \"contains\":\r\n      return <CircleDot className=\"condition-icon\" />\r\n    case \"not contains\":\r\n      return <CircleSlash className=\"condition-icon\" />\r\n    case \"starts with\":\r\n      return <ChevronsRight className=\"condition-icon\" />\r\n    case \"ends with\":\r\n      return <ChevronsLeft className=\"condition-icon\" />\r\n    case \"matches (regex)\":\r\n      return <Hash className=\"condition-icon\" />\r\n    case \"less than\":\r\n      return <ArrowLeft className=\"condition-icon\" />\r\n    case \"less than or equal to\":\r\n      return <ArrowLeft className=\"condition-icon\" />\r\n    case \"equal to\":\r\n      return <Equal className=\"condition-icon\" />\r\n    case \"not equal to\":\r\n      return <CircleSlash className=\"condition-icon\" />\r\n    case \"greater than or equal to\":\r\n      return <ArrowRight className=\"condition-icon\" />\r\n    case \"greater than\":\r\n      return <ArrowRight className=\"condition-icon\" />\r\n    case \"between\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"not between\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"is one of\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"is not one of\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    default:\r\n      return <Equal className=\"condition-icon\" />\r\n  }\r\n}\r\n\r\n// Enhanced Logic Components\r\nconst EnhancedLogicConditionSelector: React.FC<{\r\n  questionType: ResponseType\r\n  selectedCondition: LogicCondition\r\n  onConditionChange: (condition: LogicCondition) => void\r\n  className?: string\r\n}> = ({ questionType, selectedCondition, onConditionChange, className = \"\" }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [availableConditions, setAvailableConditions] = useState<LogicCondition[]>([])\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n\r\n  useEffect(() => {\r\n    const conditions: LogicCondition[] = (() => {\r\n      switch (questionType) {\r\n        case \"Text\":\r\n          return [\"is\", \"is not\", \"contains\", \"not contains\", \"starts with\", \"ends with\", \"matches (regex)\"]\r\n        case \"Number\":\r\n        case \"Slider\":\r\n          return [\r\n            \"less than\",\r\n            \"less than or equal to\",\r\n            \"equal to\",\r\n            \"not equal to\",\r\n            \"greater than or equal to\",\r\n            \"greater than\",\r\n            \"between\",\r\n            \"not between\",\r\n          ]\r\n        case \"Checkbox\":\r\n        case \"Yes/No\":\r\n          return [\"is\", \"is not\"]\r\n        case \"Multiple choice\":\r\n          return [\"is\", \"is not\", \"is one of\", \"is not one of\"]\r\n        case \"Media\":\r\n        case \"Annotation\":\r\n          return [\"is\", \"is not\"]\r\n        case \"Date & Time\":\r\n        case \"Inspection date\":\r\n          return [\"is\", \"is not\", \"less than\", \"greater than\", \"between\"]\r\n        case \"Site\":\r\n        case \"Person\":\r\n        case \"Inspection location\":\r\n          return [\"is\", \"is not\", \"is one of\", \"is not one of\"]\r\n        default:\r\n          return [\"is\", \"is not\"]\r\n      }\r\n    })()\r\n\r\n    setAvailableConditions(conditions)\r\n    if (!conditions.includes(selectedCondition) && conditions.length > 0) {\r\n      onConditionChange(conditions[0])\r\n    }\r\n  }, [questionType, selectedCondition, onConditionChange])\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n  }, [])\r\n\r\n  return (\r\n    <div className={`enhanced-logic-condition-selector ${className}`} ref={dropdownRef}>\r\n      <div className=\"selected-condition\" onClick={() => setIsOpen(!isOpen)}>\r\n        {getConditionIcon(selectedCondition)}\r\n        <span className=\"condition-text\">{selectedCondition}</span>\r\n        <ChevronDown className={`dropdown-arrow ${isOpen ? \"rotate\" : \"\"}`} />\r\n      </div>\r\n      {isOpen && (\r\n        <div className=\"enhanced-condition-dropdown\">\r\n          {availableConditions.map((condition) => (\r\n            <div\r\n              key={condition}\r\n              className={`enhanced-condition-option ${selectedCondition === condition ? \"selected\" : \"\"}`}\r\n              onClick={() => {\r\n                onConditionChange(condition)\r\n                setIsOpen(false)\r\n              }}\r\n            >\r\n              {getConditionIcon(condition)}\r\n              <span>{condition}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicValueInput: React.FC<{\r\n  questionType: ResponseType\r\n  condition: LogicCondition\r\n  value: string | number | string[] | [number, number] | null\r\n  onChange: (value: string | number | string[] | [number, number]) => void\r\n  options?: string[]\r\n  className?: string\r\n}> = ({ questionType, condition, value, onChange, options = [], className = \"\" }) => {\r\n  const [rangeStart, setRangeStart] = useState(\"\")\r\n  const [rangeEnd, setRangeEnd] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(value) && value.length === 2 && [\"between\", \"not between\"].includes(condition)) {\r\n      setRangeStart(String(value[0] || \"\"))\r\n      setRangeEnd(String(value[1] || \"\"))\r\n    }\r\n  }, [value, condition])\r\n\r\n  const handleRangeChange = () => {\r\n    if (rangeStart && rangeEnd) {\r\n      if (questionType === \"Number\") {\r\n        onChange([Number(rangeStart), Number(rangeEnd)] as [number, number])\r\n      } else {\r\n        onChange([rangeStart, rangeEnd] as [string, string])\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleOptionToggle = (option: string) => {\r\n    const currentValues = isStringArray(value) ? value : []\r\n    const newValues = currentValues.includes(option)\r\n      ? currentValues.filter((v) => v !== option)\r\n      : [...currentValues, option]\r\n    onChange(newValues)\r\n  }\r\n\r\n  if ([\"between\", \"not between\"].includes(condition)) {\r\n    return (\r\n      <div className={`enhanced-logic-range-input ${className}`}>\r\n        <input\r\n          type={questionType === \"Number\" ? \"number\" : \"text\"}\r\n          placeholder=\"Min\"\r\n          value={rangeStart}\r\n          onChange={(e) => {\r\n            setRangeStart(e.target.value)\r\n            if (rangeEnd) handleRangeChange()\r\n          }}\r\n          className=\"range-input-min\"\r\n        />\r\n        <span className=\"range-separator\">and</span>\r\n        <input\r\n          type={questionType === \"Number\" ? \"number\" : \"text\"}\r\n          placeholder=\"Max\"\r\n          value={rangeEnd}\r\n          onChange={(e) => {\r\n            setRangeEnd(e.target.value)\r\n            if (rangeStart) handleRangeChange()\r\n          }}\r\n          className=\"range-input-max\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if ([\"is one of\", \"is not one of\"].includes(condition) && options.length > 0) {\r\n    const currentValues = isStringArray(value) ? value : []\r\n    return (\r\n      <div className={`enhanced-logic-multi-select ${className}`}>\r\n        {options.map((option) => (\r\n          <label key={option} className=\"enhanced-multi-select-option\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"sr-only\"\r\n              checked={currentValues.includes(option)}\r\n              onChange={() => handleOptionToggle(option)}\r\n            />\r\n            <span className={currentValues.includes(option) ? \"selected\" : \"\"}>{option}</span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (questionType === \"Yes/No\") {\r\n    return (\r\n      <div className={`enhanced-logic-yes-no-select ${className}`}>\r\n        {[\"Yes\", \"No\", \"N/A\"].map((opt) => (\r\n          <label key={opt} className=\"enhanced-yes-no-option\">\r\n            <input\r\n              type=\"radio\"\r\n              className=\"sr-only\"\r\n              checked={value === opt}\r\n              onChange={() => onChange(opt)}\r\n              name=\"yes-no-value\"\r\n            />\r\n            <span className={value === opt ? \"selected\" : \"\"}>{opt}</span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (questionType === \"Number\") {\r\n    return (\r\n      <input\r\n        type=\"number\"\r\n        value={(value as number) ?? \"\"}\r\n        onChange={(e) => onChange(Number(e.target.value))}\r\n        placeholder=\"Enter value\"\r\n        className={`enhanced-logic-number-input ${className}`}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={(value as string) ?? \"\"}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      placeholder=\"Enter value\"\r\n      className={`enhanced-logic-text-input ${className}`}\r\n    />\r\n  )\r\n}\r\n\r\nconst EnhancedLogicTriggerSelector: React.FC<{\r\n  selectedTrigger: TriggerAction | null\r\n  onTriggerSelect: (trigger: TriggerAction | null) => void\r\n  onConfigChange?: (config: any) => void\r\n  className?: string\r\n}> = ({ selectedTrigger, onTriggerSelect, onConfigChange, className = \"\" }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n\r\n  const triggers: { value: TriggerAction; label: string; icon: React.ReactNode; description: string }[] = [\r\n    {\r\n      value: \"require_action\",\r\n      label: \"Require action\",\r\n      icon: <FileText className=\"trigger-icon\" />,\r\n      description: \"Require the user to take an action\",\r\n    },\r\n    {\r\n      value: \"require_evidence\",\r\n      label: \"Require evidence\",\r\n      icon: <ImageIcon className=\"trigger-icon\" />,\r\n      description: \"Require the user to upload evidence\",\r\n    },\r\n    {\r\n      value: \"notify\",\r\n      label: \"Notify\",\r\n      icon: <Bell className=\"trigger-icon\" />,\r\n      description: \"Send a notification\",\r\n    },\r\n    {\r\n      value: \"ask_questions\",\r\n      label: \"Ask questions\",\r\n      icon: <MessageSquare className=\"trigger-icon\" />,\r\n      description: \"Ask follow-up questions\",\r\n    },\r\n    {\r\n      value: \"display_message\",\r\n      label: \"Display message\",\r\n      icon: <AlertTriangle className=\"trigger-icon\" />,\r\n      description: \"Show a message to the user\",\r\n    },\r\n  ]\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n  }, [])\r\n\r\n  const selectedTriggerInfo = selectedTrigger ? triggers.find((t) => t.value === selectedTrigger) : null\r\n\r\n  return (\r\n    <div className={`enhanced-logic-trigger-selector ${className}`} ref={dropdownRef}>\r\n      {!selectedTrigger ? (\r\n        <button className=\"enhanced-trigger-button\" onClick={() => setIsOpen(!isOpen)}>\r\n          <Plus className=\"trigger-plus-icon\" />\r\n          <span>Add trigger</span>\r\n        </button>\r\n      ) : (\r\n        <div className=\"enhanced-selected-trigger\">\r\n          {selectedTriggerInfo?.icon}\r\n          <span>{selectedTriggerInfo?.label}</span>\r\n          <button\r\n            className=\"enhanced-clear-trigger\"\r\n            onClick={(e) => {\r\n              e.stopPropagation()\r\n              onTriggerSelect(null)\r\n            }}\r\n          >\r\n            <X className=\"clear-icon\" />\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {isOpen && !selectedTrigger && (\r\n        <div className=\"enhanced-trigger-dropdown\">\r\n          {triggers.map((trigger) => (\r\n            <div\r\n              key={trigger.value}\r\n              className=\"enhanced-trigger-option\"\r\n              onClick={() => {\r\n                onTriggerSelect(trigger.value)\r\n                setIsOpen(false)\r\n              }}\r\n            >\r\n              <div className=\"enhanced-trigger-icon-container\">{trigger.icon}</div>\r\n              <div className=\"enhanced-trigger-details\">\r\n                <div className=\"enhanced-trigger-label\">{trigger.label}</div>\r\n                <div className=\"enhanced-trigger-description\">{trigger.description}</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicTriggerConfig: React.FC<{\r\n  trigger: TriggerAction\r\n  config: any\r\n  onConfigChange: (config: any) => void\r\n}> = ({ trigger, config, onConfigChange }) => {\r\n  const [message, setMessage] = useState(config?.message || \"\")\r\n  const [questionText, setQuestionText] = useState(config?.subQuestion?.text || \"\")\r\n  const [responseType, setResponseType] = useState<ResponseType>(config?.subQuestion?.responseType || \"Text\")\r\n\r\n  useEffect(() => {\r\n    if (trigger === \"display_message\") {\r\n      onConfigChange({ ...config, message })\r\n    } else if (trigger === \"ask_questions\") {\r\n      onConfigChange({\r\n        ...config,\r\n        subQuestion: {\r\n          text: questionText,\r\n          responseType,\r\n        },\r\n      })\r\n    }\r\n  }, [trigger, message, questionText, responseType, config, onConfigChange])\r\n\r\n  if (trigger === \"display_message\") {\r\n    return (\r\n      <div className=\"enhanced-trigger-config\">\r\n        <label className=\"enhanced-trigger-config-label\">Message to display:</label>\r\n        <textarea\r\n          className=\"enhanced-logic-text-input\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Enter message to display to the user\"\r\n          rows={3}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (trigger === \"ask_questions\") {\r\n    return (\r\n      <div className=\"enhanced-trigger-config\">\r\n        <label className=\"enhanced-trigger-config-label\">Follow-up question:</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"enhanced-logic-text-input\"\r\n          value={questionText}\r\n          onChange={(e) => setQuestionText(e.target.value)}\r\n          placeholder=\"Enter follow-up question\"\r\n        />\r\n        <label className=\"enhanced-trigger-config-label mt-2\">Response type:</label>\r\n        <select\r\n          className=\"enhanced-logic-text-input\"\r\n          value={responseType}\r\n          onChange={(e) => setResponseType(e.target.value as ResponseType)}\r\n        >\r\n          <option value=\"Text\">Text</option>\r\n          <option value=\"Number\">Number</option>\r\n          <option value=\"Yes/No\">Yes/No</option>\r\n          <option value=\"Multiple choice\">Multiple choice</option>\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nconst generateRuleId = () => `rule_${Math.random().toString(36).substring(2, 9)}`\r\n\r\nconst EnhancedLogicRuleBuilder: React.FC<{\r\n  questionType: ResponseType\r\n  rule: LogicRule\r\n  options?: string[]\r\n  onRuleChange: (rule: LogicRule) => void\r\n  onRuleDelete: () => void\r\n  questions?: Array<{ id: string; text: string }>\r\n  className?: string\r\n}> = ({ questionType, rule, options = [], onRuleChange, onRuleDelete, questions = [], className = \"\" }) => {\r\n  const [localRule, setLocalRule] = useState<LogicRule>(rule)\r\n  const [showConfig, setShowConfig] = useState(false)\r\n\r\n  useEffect(() => {\r\n    onRuleChange(localRule)\r\n  }, [localRule, onRuleChange])\r\n\r\n  useEffect(() => {\r\n    setLocalRule(rule)\r\n  }, [rule])\r\n\r\n  return (\r\n    <div className={`enhanced-logic-rule-builder ${className}`}>\r\n      <div className=\"enhanced-logic-rule-content\">\r\n        <div className=\"enhanced-logic-condition-row\">\r\n          <span className=\"enhanced-if-label\">If answer</span>\r\n          <EnhancedLogicConditionSelector\r\n            questionType={questionType}\r\n            selectedCondition={localRule.condition}\r\n            onConditionChange={(condition) => setLocalRule({ ...localRule, condition })}\r\n          />\r\n          <EnhancedLogicValueInput\r\n            questionType={questionType}\r\n            condition={localRule.condition}\r\n            value={localRule.value}\r\n            onChange={(value) => setLocalRule({ ...localRule, value })}\r\n            options={options}\r\n          />\r\n        </div>\r\n        <div className=\"enhanced-logic-trigger-row\">\r\n          <span className=\"enhanced-then-label\">then</span>\r\n          <EnhancedLogicTriggerSelector\r\n            selectedTrigger={localRule.trigger}\r\n            onTriggerSelect={(trigger) => {\r\n              setLocalRule({\r\n                ...localRule,\r\n                trigger,\r\n                triggerConfig: trigger ? {} : undefined,\r\n                message: trigger === \"display_message\" ? localRule.message || \"\" : undefined,\r\n                subQuestion:\r\n                  trigger === \"ask_questions\" ? localRule.subQuestion || { text: \"\", responseType: \"Text\" } : undefined,\r\n              })\r\n              setShowConfig(!!trigger)\r\n            }}\r\n            onConfigChange={(config) => setLocalRule({ ...localRule, triggerConfig: config })}\r\n          />\r\n          {localRule.trigger && (\r\n            <button\r\n              className=\"enhanced-config-button\"\r\n              onClick={() => setShowConfig(!showConfig)}\r\n              title=\"Configure trigger\"\r\n            >\r\n              <Edit size={16} />\r\n            </button>\r\n          )}\r\n        </div>\r\n        {showConfig && localRule.trigger && (\r\n          <div className=\"enhanced-logic-config-row\">\r\n            <EnhancedLogicTriggerConfig\r\n              trigger={localRule.trigger}\r\n              config={{\r\n                message: localRule.message,\r\n                subQuestion: localRule.subQuestion,\r\n              }}\r\n              onConfigChange={(config) => {\r\n                setLocalRule({\r\n                  ...localRule,\r\n                  message: config.message,\r\n                  subQuestion: config.subQuestion,\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <button className=\"enhanced-delete-rule-button\" onClick={onRuleDelete} aria-label=\"Delete rule\">\r\n        <Trash2 className=\"delete-icon\" />\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicRulesContainer: React.FC<{\r\n  questionType: ResponseType\r\n  rules: LogicRule[]\r\n  options?: string[]\r\n  onRulesChange: (rules: LogicRule[]) => void\r\n  questions?: Array<{ id: string; text: string }>\r\n  onClose: () => void\r\n  className?: string\r\n}> = ({ questionType, rules, options = [], onRulesChange, questions = [], onClose, className = \"\" }) => {\r\n  const addNewRule = () => {\r\n    const defaultCondition: LogicCondition = questionType === \"Number\" ? \"equal to\" : \"is\"\r\n    const newRule: LogicRule = {\r\n      id: generateRuleId(),\r\n      condition: defaultCondition,\r\n      value: null,\r\n      trigger: null,\r\n    }\r\n    onRulesChange([...rules, newRule])\r\n  }\r\n\r\n  const updateRule = (index: number, updatedRule: LogicRule) => {\r\n    const newRules = [...rules]\r\n    newRules[index] = updatedRule\r\n    onRulesChange(newRules)\r\n  }\r\n\r\n  const deleteRule = (index: number) => {\r\n    const newRules = [...rules]\r\n    newRules.splice(index, 1)\r\n    onRulesChange(newRules)\r\n  }\r\n\r\n  return (\r\n    <div className={`enhanced-logic-rules-container ${className}`}>\r\n      <div className=\"enhanced-logic-header\">\r\n        <h3>Logic Rules</h3>\r\n        <button className=\"enhanced-close-button\" onClick={onClose} aria-label=\"Close\">\r\n          <X className=\"close-icon\" />\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"enhanced-logic-rules-list\">\r\n        {rules.length === 0 ? (\r\n          <div className=\"enhanced-empty-rules\">\r\n            <p>No rules added yet. Add your first rule below.</p>\r\n          </div>\r\n        ) : (\r\n          rules.map((rule, index) => (\r\n            <EnhancedLogicRuleBuilder\r\n              key={rule.id}\r\n              questionType={questionType}\r\n              rule={rule}\r\n              options={options}\r\n              onRuleChange={(updatedRule) => updateRule(index, updatedRule)}\r\n              onRuleDelete={() => deleteRule(index)}\r\n              questions={questions}\r\n              className=\"enhanced-logic-rule-item\"\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"enhanced-logic-rules-actions\">\r\n        <button className=\"enhanced-add-rule-button\" onClick={addNewRule}>\r\n          <Plus className=\"add-icon\" />\r\n          <span>Add rule</span>\r\n        </button>\r\n        <button className=\"enhanced-done-button\" onClick={onClose}>\r\n          Done\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedAddLogicButton: React.FC<{\r\n  hasRules: boolean\r\n  onClick: () => void\r\n  className?: string\r\n}> = ({ hasRules, onClick, className = \"\" }) => {\r\n  return (\r\n    <button className={`enhanced-add-logic-button ${hasRules ? \"has-rules\" : \"\"} ${className}`} onClick={onClick}>\r\n      <CornerDownRight className=\"logic-icon\" />\r\n      <span>{hasRules ? \"Edit logic\" : \"Add logic\"}</span>\r\n      {hasRules && <span className=\"rules-badge\">!</span>}\r\n    </button>\r\n  )\r\n}\r\n\r\n// Enhanced Report Component\r\nconst Report: React.FC<{ template: Template }> = ({ template }) => {\r\n  const [activeTab, setActiveTab] = useState(\"summary\")\r\n\r\n  const generatePDF = async () => {\r\n    try {\r\n      // Show loading indicator\r\n      const loadingIndicator = document.createElement(\"div\")\r\n      loadingIndicator.style.position = \"fixed\"\r\n      loadingIndicator.style.top = \"0\"\r\n      loadingIndicator.style.left = \"0\"\r\n      loadingIndicator.style.width = \"100%\"\r\n      loadingIndicator.style.height = \"100%\"\r\n      loadingIndicator.style.backgroundColor = \"rgba(255, 255, 255, 0.8)\"\r\n      loadingIndicator.style.display = \"flex\"\r\n      loadingIndicator.style.justifyContent = \"center\"\r\n      loadingIndicator.style.alignItems = \"center\"\r\n      loadingIndicator.innerHTML =\r\n        '<div style=\"padding: 20px; background: white; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);\">Generating PDF...</div>'\r\n      document.body.appendChild(loadingIndicator)\r\n\r\n      // Create PDF document with professional layout\r\n      const doc = new jsPDF({\r\n        orientation: \"portrait\",\r\n        unit: \"mm\",\r\n        format: \"a4\",\r\n        compress: true,\r\n      })\r\n\r\n      const pageWidth = doc.internal.pageSize.getWidth()\r\n      const pageHeight = doc.internal.pageSize.getHeight()\r\n      const margin = 15\r\n      let yOffset = margin\r\n\r\n      // Add header with template title\r\n      doc.setFontSize(24)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(template.title, margin, yOffset + 10)\r\n\r\n      // Add date and inspector\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n\r\n      const preparedBy =\r\n        template.sections\r\n          .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n          ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"\r\n\r\n      const dateText = `${new Date().toLocaleDateString()} / ${preparedBy}`\r\n      doc.text(dateText, margin, yOffset + 20)\r\n\r\n      // Add status badge\r\n      const totalQuestions = template.sections.reduce((sum, section) => sum + section.questions.length, 0)\r\n      const answeredQuestions = template.sections.reduce(\r\n        (sum, section) => sum + section.questions.filter((q) => q.value !== null && q.value !== undefined).length,\r\n        0,\r\n      )\r\n      const scorePercentage = totalQuestions > 0 ? Math.round((answeredQuestions / totalQuestions) * 100) : 0\r\n\r\n      const statusText = scorePercentage === 100 ? \"Complete\" : \"Incomplete\"\r\n      const statusWidth = (doc.getStringUnitWidth(statusText) * 12) / doc.internal.scaleFactor\r\n\r\n      doc.setFillColor(\r\n        scorePercentage === 100 ? 76 : 244,\r\n        scorePercentage === 100 ? 175 : 67,\r\n        scorePercentage === 100 ? 80 : 54,\r\n      )\r\n      doc.roundedRect(pageWidth - margin - statusWidth - 10, yOffset + 5, statusWidth + 10, 8, 4, 4, \"F\")\r\n\r\n      doc.setTextColor(255, 255, 255)\r\n      doc.setFontSize(10)\r\n      doc.text(statusText, pageWidth - margin - 5, yOffset + 10, { align: \"right\" })\r\n\r\n      yOffset += 30\r\n\r\n      // Add horizontal line\r\n      doc.setDrawColor(220, 220, 220)\r\n      doc.line(margin, yOffset, pageWidth - margin, yOffset)\r\n      yOffset += 15\r\n\r\n      // Add score section\r\n      doc.setFontSize(14)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Score\", margin, yOffset)\r\n      yOffset += 10\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(`${answeredQuestions}/${totalQuestions} (${scorePercentage}%)`, margin, yOffset)\r\n      yOffset += 5\r\n\r\n      // Draw score bar\r\n      doc.setFillColor(240, 240, 240)\r\n      doc.rect(margin, yOffset, pageWidth - margin * 2, 5, \"F\")\r\n      doc.setFillColor(76, 175, 80)\r\n      doc.rect(margin, yOffset, (pageWidth - margin * 2) * (scorePercentage / 100), 5, \"F\")\r\n      yOffset += 20\r\n\r\n      // Add stats section in a grid layout\r\n      const flaggedItems = template.sections.reduce(\r\n        (sum, section) => sum + section.questions.filter((q) => q.flagged).length,\r\n        0,\r\n      )\r\n\r\n      const actionItems = template.sections.reduce(\r\n        (sum, section) =>\r\n          sum +\r\n          section.questions.filter(\r\n            (q) => shouldShowTrigger(q, \"require_action\") || shouldShowTrigger(q, \"require_evidence\"),\r\n          ).length,\r\n        0,\r\n      )\r\n\r\n      // Create a grid for stats\r\n      const statBoxWidth = (pageWidth - margin * 2 - 20) / 3\r\n\r\n      // Flagged items box\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Flagged items\", margin, yOffset + 15)\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(flaggedItems.toString(), margin, yOffset + 30)\r\n\r\n      // Actions box\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Actions\", margin + statBoxWidth + 10, yOffset + 15)\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(actionItems.toString(), margin + statBoxWidth + 10, yOffset + 30)\r\n\r\n      // Status box\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Status\", margin + statBoxWidth * 2 + 20, yOffset + 15)\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(\"In progress\", margin + statBoxWidth * 2 + 20, yOffset + 30)\r\n\r\n      yOffset += 50\r\n\r\n      // Add horizontal line\r\n      doc.setDrawColor(220, 220, 220)\r\n      doc.line(margin, yOffset, pageWidth - margin, yOffset)\r\n      yOffset += 15\r\n\r\n      // Add tabs section\r\n      doc.setFillColor(240, 240, 240)\r\n      doc.rect(margin, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\r\n      doc.setFillColor(255, 255, 255)\r\n      doc.rect(margin + (pageWidth - margin * 2) / 3, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\r\n      doc.setFillColor(240, 240, 240)\r\n      doc.rect(margin + (2 * (pageWidth - margin * 2)) / 3, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\r\n\r\n      doc.setFontSize(10)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(\"Summary\", margin + (pageWidth - margin * 2) / 6, yOffset + 6, { align: \"center\" })\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Flagged Items\", margin + (pageWidth - margin * 2) / 2, yOffset + 6, { align: \"center\" })\r\n      doc.text(\"Media\", margin + (5 * (pageWidth - margin * 2)) / 6, yOffset + 6, { align: \"center\" })\r\n\r\n      yOffset += 20\r\n\r\n      // Add inspection summary\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(\"Inspection Summary\", margin, yOffset)\r\n      yOffset += 10\r\n\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\r\n        `This report provides an overview of the safety inspection conducted at ${template.title}.`,\r\n        margin,\r\n        yOffset,\r\n      )\r\n      yOffset += 20\r\n\r\n      // Process each question with answer\r\n      const processedImages = new Map() // Cache for processed images\r\n\r\n      for (const section of template.sections) {\r\n        for (const question of section.questions) {\r\n          if (question.value !== null && question.value !== undefined) {\r\n            // Check if we need a new page\r\n            if (yOffset > pageHeight - 50) {\r\n              doc.addPage()\r\n              yOffset = margin + 20\r\n            }\r\n\r\n            // Draw question box\r\n            doc.setFillColor(255, 255, 255)\r\n            doc.rect(margin, yOffset, pageWidth - margin * 2, 40, \"F\")\r\n            doc.setDrawColor(230, 230, 230)\r\n            doc.rect(margin, yOffset, pageWidth - margin * 2, 40, \"S\")\r\n\r\n            // Add question icon based on value\r\n            if (question.value === \"Yes\" || question.value === true) {\r\n              doc.setFillColor(76, 175, 80)\r\n              doc.circle(margin + 15, yOffset + 15, 5, \"F\")\r\n            } else {\r\n              doc.setFillColor(244, 67, 54)\r\n              doc.circle(margin + 15, yOffset + 15, 5, \"F\")\r\n            }\r\n\r\n            // Add question text\r\n            doc.setFontSize(12)\r\n            doc.setTextColor(0, 0, 0)\r\n            doc.text(question.text, margin + 30, yOffset + 15)\r\n\r\n            // Add answer\r\n            doc.setFontSize(11)\r\n            doc.setTextColor(100, 100, 100)\r\n            const answerText =\r\n              question.responseType === \"Media\" || question.responseType === \"Annotation\"\r\n                ? \"Media uploaded\"\r\n                : String(question.value)\r\n            doc.text(answerText, margin + 30, yOffset + 30)\r\n\r\n            // Add flag if flagged\r\n            if (question.flagged) {\r\n              doc.setFillColor(244, 67, 54)\r\n              doc.rect(pageWidth - margin - 60, yOffset + 10, 50, 20, \"F\")\r\n              doc.setTextColor(255, 255, 255)\r\n              doc.text(\"Flagged\", pageWidth - margin - 50, yOffset + 22)\r\n            }\r\n\r\n            yOffset += 50\r\n\r\n            // Add media if available\r\n            if ((question.responseType === \"Media\" || question.responseType === \"Annotation\") && question.value) {\r\n              try {\r\n                // Check if we need a new page for the image\r\n                if (yOffset > pageHeight - 100) {\r\n                  doc.addPage()\r\n                  yOffset = margin + 20\r\n                }\r\n\r\n                // Check if we've already processed this image\r\n                const imageValue = question.value as string\r\n                let processedImage\r\n\r\n                if (processedImages.has(imageValue)) {\r\n                  processedImage = processedImages.get(imageValue)\r\n                } else {\r\n                  // Process the image to reduce size\r\n                  const img = document.createElement(\"img\")\r\n                  img.crossOrigin = \"anonymous\"\r\n\r\n                  // Create a promise to handle the image loading\r\n                  const imageLoaded = new Promise((resolve, reject) => {\r\n                    img.onload = () => {\r\n                      const canvas = document.createElement(\"canvas\")\r\n                      const MAX_WIDTH = 600\r\n                      const MAX_HEIGHT = 400\r\n\r\n                      let width = img.width\r\n                      let height = img.height\r\n\r\n                      // Calculate new dimensions while maintaining aspect ratio\r\n                      if (width > height) {\r\n                        if (width > MAX_WIDTH) {\r\n                          height *= MAX_WIDTH / width\r\n                          width = MAX_WIDTH\r\n                        }\r\n                      } else {\r\n                        if (height > MAX_HEIGHT) {\r\n                          width *= MAX_HEIGHT / height\r\n                          height = MAX_HEIGHT\r\n                        }\r\n                      }\r\n\r\n                      canvas.width = width\r\n                      canvas.height = height\r\n\r\n                      const ctx = canvas.getContext(\"2d\")\r\n                      if (ctx) {\r\n                        ctx.drawImage(img, 0, 0, width, height)\r\n                        // Use lower quality JPEG for smaller file size\r\n                        const optimizedImage = canvas.toDataURL(\"image/jpeg\", 0.5)\r\n                        processedImages.set(imageValue, optimizedImage)\r\n                        resolve(optimizedImage)\r\n                      } else {\r\n                        reject(new Error(\"Could not get canvas context\"))\r\n                      }\r\n                    }\r\n                    img.onerror = () => reject(new Error(\"Failed to load image\"))\r\n                  })\r\n\r\n                  img.src = imageValue\r\n\r\n                  try {\r\n                    processedImage = await imageLoaded\r\n                  } catch (err) {\r\n                    console.error(\"Error processing image:\", err)\r\n                    processedImage = imageValue // Fall back to original image\r\n                  }\r\n                }\r\n\r\n                // Add the image to the PDF\r\n                doc.addImage(processedImage, \"JPEG\", margin, yOffset, pageWidth - margin * 2, 80, undefined, \"FAST\")\r\n                yOffset += 90\r\n              } catch (error) {\r\n                console.error(\"Error adding image to PDF:\", error)\r\n                // Add error message instead of image\r\n                doc.setTextColor(244, 67, 54)\r\n                doc.text(\"Error loading image\", margin, yOffset + 10)\r\n                yOffset += 20\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Add footer to all pages\r\n      const totalPages = (doc as any).internal.pages.length - 1\r\n      for (let i = 1; i <= totalPages; i++) {\r\n        doc.setPage(i)\r\n        doc.setFontSize(10)\r\n        doc.setTextColor(150, 150, 150)\r\n        doc.text(`Generated on ${new Date().toLocaleString()}`, margin, pageHeight - 10)\r\n        doc.text(`Page ${i} of ${totalPages}`, pageWidth - margin, pageHeight - 10, { align: \"right\" })\r\n      }\r\n\r\n      // Save the PDF\r\n      doc.save(`${template.title}_Report.pdf`)\r\n\r\n      // Remove loading indicator\r\n      document.body.removeChild(loadingIndicator)\r\n    } catch (error) {\r\n      console.error(\"Error generating PDF:\", error)\r\n      alert(\"There was an error generating the PDF. Please try again.\")\r\n\r\n      // Make sure to remove loading indicator if there's an error\r\n      const loadingIndicator = document.querySelector('[style*=\"position: fixed\"][style*=\"z-index: 9999\"]')\r\n      if (loadingIndicator && loadingIndicator.parentNode) {\r\n        loadingIndicator.parentNode.removeChild(loadingIndicator)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Calculate report statistics\r\n  const totalQuestions = template.sections.reduce((sum, section) => sum + section.questions.length, 0)\r\n  const answeredQuestions = template.sections.reduce(\r\n    (sum, section) => sum + section.questions.filter((q) => q.value !== null && q.value !== undefined).length,\r\n    0,\r\n  )\r\n  const scorePercentage = totalQuestions > 0 ? Math.round((answeredQuestions / totalQuestions) * 100) : 0\r\n\r\n  // Count flagged items and actions\r\n  const flaggedItems = template.sections.reduce(\r\n    (sum, section) => sum + section.questions.filter((q) => q.flagged).length,\r\n    0,\r\n  )\r\n  const actionItems = template.sections.reduce(\r\n    (sum, section) =>\r\n      sum +\r\n      section.questions.filter(\r\n        (q) => shouldShowTrigger(q, \"require_action\") || shouldShowTrigger(q, \"require_evidence\"),\r\n      ).length,\r\n    0,\r\n  )\r\n\r\n  // Get media items\r\n  const mediaItems = template.sections.reduce(\r\n    (items, section) => {\r\n      const sectionMedia = section.questions\r\n        .filter((q) => (q.responseType === \"Media\" || q.responseType === \"Annotation\") && q.value)\r\n        .map((q) => ({\r\n          id: q.id,\r\n          caption: q.text,\r\n          thumbnail: q.value as string,\r\n        }))\r\n      return [...items, ...sectionMedia]\r\n    },\r\n    [] as Array<{ id: string; caption: string; thumbnail: string }>,\r\n  )\r\n\r\n  return (\r\n    <div className=\"report-container\">\r\n      <div className=\"report-header\">\r\n        <h2>Report Preview</h2>\r\n        <button className=\"generate-pdf-button\" onClick={generatePDF}>\r\n          <Download className=\"download-icon\" />\r\n          Download PDF Report\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"report-card\">\r\n        <div className=\"report-card-header\">\r\n          <div className=\"report-title-section\">\r\n            {template.logo && (\r\n              <div className=\"report-logo\">\r\n                <img src={template.logo || \"/placeholder.svg\"} alt=\"Template logo\" />\r\n              </div>\r\n            )}\r\n            <div className=\"report-title-info\">\r\n              <h3>{template.title}</h3>\r\n              <p className=\"report-date\">\r\n                {new Date().toLocaleDateString()} /{\" \"}\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"report-completion-badge\">{scorePercentage === 100 ? \"Complete\" : \"Incomplete\"}</div>\r\n        </div>\r\n\r\n        <div className=\"report-stats\">\r\n          <div className=\"report-score-container\">\r\n            <p className=\"report-stat-label\">Score</p>\r\n            <div className=\"report-score-bar\">\r\n              <div className=\"report-score-progress\" style={{ width: `${scorePercentage}%` }}></div>\r\n            </div>\r\n            <span className=\"report-score-text\">\r\n              {answeredQuestions}/{totalQuestions} ({scorePercentage}%)\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"report-stat-grid\">\r\n            <div className=\"report-stat\">\r\n              <p className=\"report-stat-label\">Flagged items</p>\r\n              <div className=\"report-stat-value\">\r\n                <Flag className=\"report-stat-icon flagged\" />\r\n                <span>{flaggedItems}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"report-stat\">\r\n              <p className=\"report-stat-label\">Actions</p>\r\n              <div className=\"report-stat-value\">\r\n                <AlertTriangle className=\"report-stat-icon action\" />\r\n                <span>{actionItems}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"report-stat\">\r\n              <p className=\"report-stat-label\">Status</p>\r\n              <div className=\"report-stat-value\">\r\n                <Clock className=\"report-stat-icon status\" />\r\n                <span>In progress</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"report-site-info\">\r\n          <div className=\"report-site-info-grid\">\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <Building className=\"report-site-info-icon\" />\r\n                <p>Site conducted</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Site\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Site\" && q.value)?.value || \"Not specified\"}\r\n              </p>\r\n            </div>\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <Calendar className=\"report-site-info-icon\" />\r\n                <p>Conducted on</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Inspection date\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Inspection date\" && q.value)?.value ||\r\n                  new Date().toLocaleDateString()}\r\n              </p>\r\n            </div>\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <User className=\"report-site-info-icon\" />\r\n                <p>Prepared by</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Not specified\"}\r\n              </p>\r\n            </div>\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <MapPin className=\"report-site-info-icon\" />\r\n                <p>Location</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Inspection location\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Inspection location\" && q.value)?.value ||\r\n                  \"Not specified\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"report-tabs\">\r\n        <div className=\"report-tab-buttons\">\r\n          <button\r\n            className={`report-tab-button ${activeTab === \"summary\" ? \"active\" : \"\"}`}\r\n            onClick={() => setActiveTab(\"summary\")}\r\n          >\r\n            Summary\r\n          </button>\r\n          <button\r\n            className={`report-tab-button ${activeTab === \"flagged\" ? \"active\" : \"\"}`}\r\n            onClick={() => setActiveTab(\"flagged\")}\r\n          >\r\n            Flagged Items\r\n          </button>\r\n          <button\r\n            className={`report-tab-button ${activeTab === \"media\" ? \"active\" : \"\"}`}\r\n            onClick={() => setActiveTab(\"media\")}\r\n          >\r\n            Media\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"report-tab-content\">\r\n          {activeTab === \"summary\" && (\r\n            <div className=\"report-summary\">\r\n              <h3 className=\"report-section-title\">Inspection Summary</h3>\r\n              <p className=\"report-section-description\">\r\n                This report provides an overview of the safety inspection conducted at{\" \"}\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Site\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Site\" && q.value)?.value || \"the site\"}\r\n                .\r\n              </p>\r\n\r\n              <div className=\"report-questions-list\">\r\n                {template.sections.map((section) =>\r\n                  section.questions\r\n                    .filter((q) => q.value !== null && q.value !== undefined)\r\n                    .map((question) => (\r\n                      <div key={question.id} className={`report-question-item ${question.flagged ? \"flagged\" : \"\"}`}>\r\n                        <div className=\"report-question-header\">\r\n                          <div className=\"report-question-icon\">\r\n                            {question.value === \"Yes\" || question.value === true ? (\r\n                              <Check className=\"report-question-check\" />\r\n                            ) : (\r\n                              <AlertTriangle className=\"report-question-alert\" />\r\n                            )}\r\n                          </div>\r\n                          <div className=\"report-question-text\">\r\n                            <p>{question.text}</p>\r\n                            <div className=\"report-question-badges\">\r\n                              <span\r\n                                className={`report-question-answer ${question.value === \"Yes\" || question.value === true ? \"positive\" : \"negative\"}`}\r\n                              >\r\n                                {question.responseType === \"Media\" || question.responseType === \"Annotation\"\r\n                                  ? \"Media uploaded\"\r\n                                  : String(question.value)}\r\n                              </span>\r\n                              {question.flagged && (\r\n                                <span className=\"report-question-flag\">\r\n                                  <Flag className=\"report-flag-icon\" />\r\n                                  Flagged\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        {(question.responseType === \"Media\" || question.responseType === \"Annotation\") &&\r\n                          question.value && (\r\n                            <div className=\"report-question-media\">\r\n                              <img\r\n                                src={(question.value as string) || \"/placeholder.svg\"}\r\n                                alt={question.text}\r\n                                className=\"report-media-preview\"\r\n                              />\r\n                            </div>\r\n                          )}\r\n                      </div>\r\n                    )),\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === \"flagged\" && (\r\n            <div className=\"report-flagged\">\r\n              <div className=\"report-flagged-header\">\r\n                <h3 className=\"report-section-title\">Flagged Items</h3>\r\n                <span className=\"report-flagged-count\">\r\n                  {flaggedItems} flagged, {actionItems} action\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"report-questions-list\">\r\n                {template.sections.map((section) =>\r\n                  section.questions\r\n                    .filter((q) => q.flagged)\r\n                    .map((question) => (\r\n                      <div key={question.id} className=\"report-question-item flagged\">\r\n                        <div className=\"report-question-header\">\r\n                          <div className=\"report-question-icon\">\r\n                            <AlertTriangle className=\"report-question-alert\" />\r\n                          </div>\r\n                          <div className=\"report-question-text\">\r\n                            <p>{question.text}</p>\r\n                            <span className=\"report-question-answer negative\">\r\n                              {question.responseType === \"Media\" || question.responseType === \"Annotation\"\r\n                                ? \"Media uploaded\"\r\n                                : String(question.value || \"No\")}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n\r\n                        {(question.responseType === \"Media\" || question.responseType === \"Annotation\") &&\r\n                          question.value && (\r\n                            <div className=\"report-question-media\">\r\n                              <img\r\n                                src={(question.value as string) || \"/placeholder.svg\"}\r\n                                alt={question.text}\r\n                                className=\"report-media-preview\"\r\n                              />\r\n                            </div>\r\n                          )}\r\n\r\n                        <div className=\"report-question-action\">\r\n                          <div className=\"report-action-header\">\r\n                            <span className=\"report-action-status\">In progress</span>\r\n                            <span className=\"report-action-assignee\">\r\n                              <span className=\"report-action-label\">Assignee</span>\r\n                              Fred Smith\r\n                            </span>\r\n                            <span className=\"report-action-priority high\">\r\n                              <span className=\"report-action-label\">Priority</span>\r\n                              High\r\n                            </span>\r\n                          </div>\r\n\r\n                          <div className=\"report-action-due\">\r\n                            <span className=\"report-action-label\">Due</span>\r\n                            {new Date().toLocaleDateString()}\r\n                          </div>\r\n\r\n                          <div className=\"report-action-created\">\r\n                            <span className=\"report-action-label\">Created by</span>\r\n                            {template.sections\r\n                              .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n                              ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"}\r\n                          </div>\r\n\r\n                          <div className=\"report-action-category\">Work Areas / Personal Protective Equipment (PPE)</div>\r\n                          <div className=\"report-action-description\">Make sure the team wear safety hard hats</div>\r\n                        </div>\r\n                      </div>\r\n                    )),\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === \"media\" && (\r\n            <div className=\"report-media\">\r\n              <h3 className=\"report-section-title\">Media Summary</h3>\r\n\r\n              <div className=\"report-media-grid\">\r\n                {mediaItems.length > 0 ? (\r\n                  mediaItems.map((media) => (\r\n                    <div key={media.id} className=\"report-media-item\">\r\n                      <div className=\"report-media-image\">\r\n                        <img src={media.thumbnail || \"/placeholder.svg\"} alt={media.caption} />\r\n                        <div className=\"report-media-caption\">\r\n                          <p>{media.caption}</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div className=\"report-media-empty\">\r\n                    <ImageIcon className=\"report-media-empty-icon\" />\r\n                    <p>No media has been added to this report</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"report-footer\">\r\n        <p>Powered by SafetyCulture</p>\r\n        <div className=\"report-footer-buttons\">\r\n          <button className=\"report-footer-button\">\r\n            <FileText className=\"report-footer-icon\" />\r\n            Web preview\r\n          </button>\r\n          <button className=\"report-footer-button primary\" onClick={generatePDF}>\r\n            <Download className=\"report-footer-icon\" />\r\n            PDF preview\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"report-mobile-fab\">\r\n        <button className=\"report-mobile-download\" onClick={generatePDF}>\r\n          <Download className=\"report-mobile-download-icon\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Main Component\r\nconst CreateTemplate = () => {\r\n  const navigate = useNavigate()\r\n\r\n  const [templateId, setTemplateId] = useState<string | null>(null)\r\n\r\n  const [templateData, setTemplateData] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n  })\r\n  const generateId = () => Math.random().toString(36).substring(2, 9)\r\n\r\n  const getDefaultQuestion = (responseType: ResponseType = \"Text\"): Question => ({\r\n    id: generateId(),\r\n    text: \"Type question\",\r\n    responseType,\r\n    required: false,\r\n    flagged: false,\r\n    multipleSelection: false,\r\n    options:\r\n      responseType === \"Multiple choice\" || responseType === \"Yes/No\"\r\n        ? [\"Option 1\", \"Option 2\", \"Option 3\"]\r\n        : undefined,\r\n    value: null,\r\n    logicRules: [],\r\n  })\r\n\r\n  const getDefaultSection = (title = \"Untitled Page\"): Section => ({\r\n    id: generateId(),\r\n    title,\r\n    questions: [],\r\n    isCollapsed: false,\r\n  })\r\n\r\n  const getInitialTemplate = (): Template => {\r\n    const titlePageSection: Section = {\r\n      id: generateId(),\r\n      title: \"Title Page\",\r\n      description: \"The Title Page is the first page of your inspection report. Customize it below.\",\r\n      questions: [\r\n        {\r\n          id: generateId(),\r\n          text: \"Site conducted\",\r\n          responseType: \"Site\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Conducted on\",\r\n          responseType: \"Inspection date\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Prepared by\",\r\n          responseType: \"Person\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Location\",\r\n          responseType: \"Inspection location\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n      ],\r\n      isCollapsed: false,\r\n    }\r\n\r\n    return {\r\n      id: generateId(),\r\n      title: \"Untitled template\",\r\n      description: \"Add a description\",\r\n      sections: [titlePageSection],\r\n      lastSaved: new Date(),\r\n      lastPublished: new Date(),\r\n      logo: undefined,\r\n    }\r\n  }\r\n  const [template, setTemplate] = useState<Template>({\r\n    id: generateId(), // Add the required id property\r\n    title: \"\",\r\n    description: \"\",\r\n    logo: undefined, // Changed from null to undefined\r\n    sections: [],\r\n    lastSaved: new Date(),\r\n    lastPublished: new Date(),\r\n  })\r\n  const [activeTab, setActiveTab] = useState<number>(0)\r\n\r\n  const [activeSectionId, setActiveSectionId] = useState<string | null>(null)\r\n  const [activeQuestionId, setActiveQuestionId] = useState<string | null>(null)\r\n  const [draggedItem, setDraggedItem] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\r\n  const [dropTarget, setDropTarget] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\r\n  const [showResponseTypeMenu, setShowResponseTypeMenu] = useState<string | null>(null)\r\n  const [showMobilePreview, setShowMobilePreview] = useState<boolean>(true)\r\n  const [showLogicPanel, setShowLogicPanel] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  const questionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\r\n  const sectionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\r\n\r\n  useEffect(() => {\r\n    // Check if we have a template ID in the URL\r\n    const params = new URLSearchParams(window.location.search)\r\n    const id = params.get(\"id\")\r\n\r\n    if (id) {\r\n      setTemplateId(id)\r\n      axios\r\n        .get(`http://localhost:8000/api/users/templates/${id}/`)\r\n        .then((res) => {\r\n          setTemplateData(res.data)\r\n          setTemplate(res.data)\r\n          setIsLoading(false) // ✅ mark as loaded\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to load template\", err)\r\n          setIsLoading(false) // ✅ even on error, stop loading\r\n        })\r\n    } else {\r\n      // If it's a new template (no id), initialize it\r\n      const newTemplate = getInitialTemplate()\r\n      setTemplate(newTemplate)\r\n      setActiveSectionId(newTemplate.sections[0]?.id || null)\r\n      setIsLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  if (isLoading || !template) {\r\n    return <div>Loading template...</div>\r\n  }\r\n\r\n  function cleanTemplateForSave(template: Template): Template {\r\n    const { id, ...templateWithoutId } = template\r\n    return {\r\n      ...templateWithoutId,\r\n      id: id, // Keep the template ID\r\n      sections: template.sections.map(({ id: sectionId, ...sectionWithoutId }) => ({\r\n        ...sectionWithoutId,\r\n        id: sectionId, // Add the id back to each section\r\n        questions: sectionWithoutId.questions.map(({ id: questionId, ...questionWithoutId }) => ({\r\n          ...questionWithoutId,\r\n          id: questionId, // Add the id back to each question\r\n        })),\r\n      })),\r\n    }\r\n  }\r\n\r\n  // Updated handleSave function with proper CSRF token handling\r\n  const handleSave = async () => {\r\n    if (!templateData.title) {\r\n      alert(\"Please enter a template title\")\r\n      return\r\n    }\r\n\r\n    try {\r\n      // 1. First, get a fresh CSRF token\r\n      const csrfToken = await fetchCSRFToken()\r\n\r\n      // 2. Prepare the form data\r\n      const formData = new FormData()\r\n      formData.append(\"title\", templateData.title)\r\n      formData.append(\"description\", templateData.description)\r\n\r\n      // 3. Handle the logo if it exists\r\n      if (template.logo) {\r\n        // If logo is a base64 string, convert to blob\r\n        if (typeof template.logo === \"string\" && template.logo.startsWith(\"data:\")) {\r\n          const response = await fetch(template.logo)\r\n          const blob = await response.blob()\r\n          formData.append(\"logo\", blob, \"logo.png\")\r\n        } else {\r\n          formData.append(\"logo\", template.logo)\r\n        }\r\n      }\r\n\r\n      // 4. Add sections data\r\n      formData.append(\"sections\", JSON.stringify(template.sections))\r\n\r\n      const cleanedTemplate = cleanTemplateForSave(template)\r\n\r\n      // 5. Make the API request with the fresh CSRF token\r\n      const saveResponse = await fetch(\"http://localhost:8000/api/users/create_templates/\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"X-CSRFToken\": csrfToken,\r\n        },\r\n        body: formData,\r\n        credentials: \"include\", // Important: include cookies\r\n      })\r\n\r\n      if (!saveResponse.ok) {\r\n        const errorData = await saveResponse.json()\r\n        throw new Error(errorData.error || \"Failed to save template\")\r\n      }\r\n\r\n      // Success handling\r\n      console.log(\"Template saved successfully!\")\r\n      alert(\"Template saved successfully!\")\r\n    } catch (error: unknown) {\r\n      console.error(\"Error saving template:\", error)\r\n      if (error instanceof Error) {\r\n        alert(`Failed to save template: ${error.message}`)\r\n      } else {\r\n        alert(\"Failed to save template: Unknown error occurred\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // Template Management\r\n  const updateTemplate = (updates: Partial<Template>) => setTemplate((prev) => ({ ...prev, ...updates }))\r\n\r\n  const handleBack = () => {\r\n    if (window.confirm(\"Do you want to save before leaving?\")) handleSave()\r\n      navigate(\"/templates\")\r\n  }\r\n\r\n  const handleLogoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0]\r\n    if (file && file.size <= 5 * 1024 * 1024 && file.type.match(/^image\\//)) {\r\n      const reader = new FileReader()\r\n      reader.onload = async (event) => {\r\n        const result = event.target?.result as string\r\n        if (result) {\r\n          const resizedImage = await resizeImage(result)\r\n          updateTemplate({ logo: resizedImage })\r\n        }\r\n      }\r\n      reader.readAsDataURL(file)\r\n    }\r\n  }\r\n\r\n  // Section Management\r\n  const addSection = () => {\r\n    const newSection = getDefaultSection()\r\n    setTemplate((prev) => ({ ...prev, sections: [...prev.sections, newSection] }))\r\n    setActiveSectionId(newSection.id)\r\n    setTimeout(() => sectionRefs.current[newSection.id]?.scrollIntoView({ behavior: \"smooth\", block: \"start\" }), 100)\r\n  }\r\n\r\n  const updateSection = (sectionId: string, updates: Partial<Section>) => {\r\n    setTemplate((prev) => ({\r\n      ...prev,\r\n      sections: prev.sections.map((s) => (s.id === sectionId ? { ...s, ...updates } : s)),\r\n    }))\r\n  }\r\n\r\n  const deleteSection = (sectionId: string) => {\r\n    setTemplate((prev) => ({ ...prev, sections: prev.sections.filter((s) => s.id !== sectionId) }))\r\n  }\r\n\r\n  const toggleSectionCollapse = (sectionId: string) => {\r\n    updateSection(sectionId, { isCollapsed: !template.sections.find((s) => s.id === sectionId)?.isCollapsed })\r\n  }\r\n\r\n  // Question Management\r\n  const addQuestion = (sectionId: string, responseType: ResponseType = \"Text\") => {\r\n    const newQuestion = getDefaultQuestion(responseType)\r\n    updateSection(sectionId, {\r\n      questions: [...template.sections.find((s) => s.id === sectionId)!.questions, newQuestion],\r\n    })\r\n    setActiveQuestionId(newQuestion.id)\r\n  }\r\n\r\n  const updateQuestion = (sectionId: string, questionId: string, updates: Partial<Question>) => {\r\n    setTemplate((prev) => ({\r\n      ...prev,\r\n      sections: prev.sections.map((s) =>\r\n        s.id === sectionId\r\n          ? { ...s, questions: s.questions.map((q) => (q.id === questionId ? { ...q, ...updates } : q)) }\r\n          : s,\r\n      ),\r\n    }))\r\n  }\r\n\r\n  const deleteQuestion = (sectionId: string, questionId: string) => {\r\n    updateSection(sectionId, {\r\n      questions: template.sections.find((s) => s.id === sectionId)!.questions.filter((q) => q.id !== questionId),\r\n    })\r\n  }\r\n\r\n  const changeQuestionResponseType = (sectionId: string, questionId: string, responseType: ResponseType) => {\r\n    updateQuestion(sectionId, questionId, {\r\n      responseType,\r\n      options:\r\n        responseType === \"Multiple choice\" || responseType === \"Yes/No\"\r\n          ? [\"Option 1\", \"Option 2\", \"Option 3\"]\r\n          : undefined,\r\n      value: null,\r\n      logicRules: [],\r\n    })\r\n    setShowResponseTypeMenu(null)\r\n  }\r\n\r\n  // Drag and Drop\r\n  const handleDragStart = (type: \"question\" | \"section\", id: string) => setDraggedItem({ type, id })\r\n  const handleDragOver = (type: \"question\" | \"section\", id: string, e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    if (draggedItem && draggedItem.id !== id) setDropTarget({ type, id })\r\n  }\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    if (!draggedItem || !dropTarget) return\r\n\r\n    if (draggedItem.type === \"section\" && dropTarget.type === \"section\") {\r\n      const sections = [...template.sections]\r\n      const draggedIndex = sections.findIndex((s) => s.id === draggedItem.id)\r\n      const dropIndex = sections.findIndex((s) => s.id === dropTarget.id)\r\n      const [removed] = sections.splice(draggedIndex, 1)\r\n      sections.splice(dropIndex, 0, removed)\r\n      setTemplate((prev) => ({ ...prev, sections }))\r\n    } else if (draggedItem.type === \"question\" && dropTarget.type === \"question\") {\r\n      const draggedSection = template.sections.find((s) => s.questions.some((q) => q.id === draggedItem.id))\r\n      const dropSection = template.sections.find((s) => s.questions.some((q) => q.id === dropTarget.id))\r\n\r\n      if (draggedSection && dropSection) {\r\n        const newSections = [...template.sections]\r\n        const draggedSectionIndex = newSections.findIndex((s) => s.id === draggedSection.id)\r\n        const draggedQuestionIndex = newSections[draggedSectionIndex].questions.findIndex(\r\n          (q) => q.id === draggedItem.id,\r\n        )\r\n        const dropSectionIndex = newSections.findIndex((s) => s.id === dropSection.id)\r\n        const dropQuestionIndex = newSections[dropSectionIndex].questions.findIndex((q) => q.id === dropTarget.id)\r\n        const [removedQuestion] = newSections[draggedSectionIndex].questions.splice(draggedQuestionIndex, 1)\r\n        newSections[dropSectionIndex].questions.splice(dropQuestionIndex, 0, removedQuestion)\r\n        setTemplate((prev) => ({ ...prev, sections: newSections }))\r\n      }\r\n    }\r\n    setDraggedItem(null)\r\n    setDropTarget(null)\r\n  }\r\n\r\n  // Rendering Helpers\r\n  const renderResponseTypeIcon = (type: ResponseType) => {\r\n    switch (type) {\r\n      case \"Site\":\r\n        return <MapPin size={18} className=\"response-type-icon\" />\r\n      case \"Inspection date\":\r\n        return <Calendar size={18} className=\"response-type-icon\" />\r\n      case \"Person\":\r\n        return <User size={18} className=\"response-type-icon\" />\r\n      case \"Inspection location\":\r\n        return <MapPin size={18} className=\"response-type-icon\" />\r\n      case \"Text\":\r\n        return <div className=\"response-type-icon text-icon\">Aa</div>\r\n      case \"Number\":\r\n        return <div className=\"response-type-icon number-icon\">123</div>\r\n      case \"Checkbox\":\r\n        return (\r\n          <div className=\"response-type-icon checkbox-icon\">\r\n            <Check size={14} />\r\n          </div>\r\n        )\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"response-type-icon yes-no-icon\">\r\n            <span className=\"yes\">Y</span>/<span className=\"no\">N</span>\r\n          </div>\r\n        )\r\n      case \"Multiple choice\":\r\n        return <div className=\"response-type-icon multiple-choice-icon\">☰</div>\r\n      case \"Slider\":\r\n        return <div className=\"response-type-icon slider-icon\">⟷</div>\r\n      case \"Media\":\r\n        return <ImageIcon size={18} className=\"response-type-icon\" />\r\n      case \"Annotation\":\r\n        return <Edit size={18} className=\"response-type-icon\" />\r\n      case \"Date & Time\":\r\n        return <Clock size={18} className=\"response-type-icon\" />\r\n      default:\r\n        return <div className=\"response-type-icon\"></div>\r\n    }\r\n  }\r\n\r\n  const renderResponseTypeMenu = (sectionId: string, questionId: string) => {\r\n    if (showResponseTypeMenu !== questionId) return null\r\n    const responseTypes: ResponseType[] = [\r\n      \"Text\",\r\n      \"Number\",\r\n      \"Checkbox\",\r\n      \"Yes/No\",\r\n      \"Multiple choice\",\r\n      \"Slider\",\r\n      \"Media\",\r\n      \"Annotation\",\r\n      \"Date & Time\",\r\n      \"Site\",\r\n      \"Inspection date\",\r\n      \"Person\",\r\n      \"Inspection location\",\r\n    ]\r\n\r\n    return (\r\n      <div className=\"response-type-menu\">\r\n        <div className=\"response-type-menu-header\">\r\n          <h3>Select response type</h3>\r\n          <button className=\"close-button\" onClick={() => setShowResponseTypeMenu(null)}>\r\n            <X size={18} />\r\n          </button>\r\n        </div>\r\n        <div className=\"response-type-options\">\r\n          {responseTypes.map((type) => (\r\n            <button\r\n              key={type}\r\n              className=\"response-type-option\"\r\n              onClick={() => changeQuestionResponseType(sectionId, questionId, type)}\r\n            >\r\n              {renderResponseTypeIcon(type)}\r\n              <span>{type}</span>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderQuestionResponse = (question: Question, sectionId: string) => {\r\n    switch (question.responseType) {\r\n      case \"Text\":\r\n        return (\r\n          <div className=\"response-field text-field\">\r\n            <div className=\"text-input\">Text answer</div>\r\n          </div>\r\n        )\r\n      case \"Number\":\r\n        return (\r\n          <div className=\"response-field number-field\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"number-input\"\r\n              value={(question.value as number) || \"\"}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { value: Number(e.target.value) })}\r\n              placeholder=\"0\"\r\n            />\r\n          </div>\r\n        )\r\n      case \"Checkbox\":\r\n        return (\r\n          <div className=\"response-field checkbox-field\">\r\n            <div className=\"checkbox-input\">\r\n              <div className=\"checkbox\"></div>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"response-field yes-no-field\">\r\n            <div className=\"yes-no-options\">\r\n              <button className=\"yes-option\">Yes</button>\r\n              <button className=\"no-option\">No</button>\r\n              <button className=\"na-option\">N/A</button>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Multiple choice\":\r\n        return (\r\n          <div className=\"response-field multiple-choice-field\">\r\n            <div className=\"multiple-choice-options\">\r\n              {(question.options || []).map((option, idx) => (\r\n                <button key={idx} className={`choice-option choice-${idx % 4}`}>\r\n                  {option}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Slider\":\r\n        return (\r\n          <div className=\"response-field slider-field\">\r\n            <div className=\"slider-container\">\r\n              <div className=\"slider-track\">\r\n                <div className=\"slider-thumb\"></div>\r\n              </div>\r\n              <div className=\"slider-labels\">\r\n                <span>0</span>\r\n                <span>50</span>\r\n                <span>100</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Media\":\r\n        return (\r\n          <div className=\"response-field media-field\">\r\n            <div className=\"media-upload\">\r\n              <ImageIcon size={20} />\r\n              <span>Upload media</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Annotation\":\r\n        return (\r\n          <div className=\"response-field annotation-field\">\r\n            <div className=\"annotation-area\">\r\n              <Edit size={20} />\r\n              <span>Add annotation</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Date & Time\":\r\n      case \"Inspection date\":\r\n        return (\r\n          <div className=\"response-field date-time-field\">\r\n            <div className=\"date-time-input\">\r\n              <Calendar size={16} />\r\n              <span>{new Date().toLocaleDateString()}</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Site\":\r\n      case \"Person\":\r\n      case \"Inspection location\":\r\n        return (\r\n          <div className=\"response-field dropdown-input\">\r\n            <div className=\"dropdown-input\">\r\n              <span>Select {question.responseType.toLowerCase()}</span>\r\n              <ChevronDown size={16} />\r\n            </div>\r\n          </div>\r\n        )\r\n      default:\r\n        // Exhaustive type check to ensure all ResponseType values are handled\r\n        const _exhaustiveCheck: never = question.responseType\r\n        return <div className=\"response-field\">Unsupported response type</div>\r\n    }\r\n  }\r\n\r\n  const renderQuestion = (question: Question, sectionId: string, index: number) => {\r\n    const isActive = activeQuestionId === question.id\r\n    const isDragging = draggedItem?.type === \"question\" && draggedItem.id === question.id\r\n    const isDropTarget = dropTarget?.type === \"question\" && dropTarget.id === question.id\r\n\r\n    return (\r\n      <div\r\n        key={question.id}\r\n        ref={(el) => {\r\n          questionRefs.current[question.id] = el\r\n        }}\r\n        className={`question-item ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"}`}\r\n        onClick={() => setActiveQuestionId(question.id)}\r\n        draggable\r\n        onDragStart={(e) => handleDragStart(\"question\", question.id)}\r\n        onDragOver={(e) => handleDragOver(\"question\", question.id, e)}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div className=\"question-header\">\r\n          <div className=\"question-drag-handle\">\r\n            <Move size={16} />\r\n          </div>\r\n          <div className=\"question-number\">{index + 1}</div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"question-text\"\r\n            value={question.text}\r\n            onChange={(e) => updateQuestion(sectionId, question.id, { text: e.target.value })}\r\n            placeholder=\"Type question\"\r\n          />\r\n        </div>\r\n        <div className=\"question-body\">\r\n          <div className=\"response-type-selector\">\r\n            <div\r\n              className=\"selected-response-type\"\r\n              onClick={(e) => {\r\n                e.stopPropagation()\r\n                setShowResponseTypeMenu(showResponseTypeMenu === question.id ? null : question.id)\r\n              }}\r\n            >\r\n              {renderResponseTypeIcon(question.responseType)}\r\n              <span>{question.responseType}</span>\r\n              <ChevronDown size={16} />\r\n            </div>\r\n            {renderResponseTypeMenu(sectionId, question.id)}\r\n          </div>\r\n          {renderQuestionResponse(question, sectionId)}\r\n        </div>\r\n        <div className=\"question-footer\">\r\n          <EnhancedAddLogicButton\r\n            hasRules={question.logicRules?.length ? true : false}\r\n            onClick={() => setShowLogicPanel(showLogicPanel === question.id ? null : question.id)}\r\n          />\r\n          <label className=\"required-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={question.required}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { required: e.target.checked })}\r\n            />\r\n            <span>Required</span>\r\n          </label>\r\n          <label className=\"required-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={question.flagged}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { flagged: e.target.checked })}\r\n            />\r\n            <span>Flag</span>\r\n          </label>\r\n          <button className=\"delete-question\" onClick={() => deleteQuestion(sectionId, question.id)}>\r\n            <Trash2 size={16} />\r\n          </button>\r\n          {showLogicPanel === question.id && (\r\n            <EnhancedLogicRulesContainer\r\n              questionType={question.responseType}\r\n              rules={question.logicRules || []}\r\n              options={question.options || []}\r\n              onRulesChange={(rules) => updateQuestion(sectionId, question.id, { logicRules: rules })}\r\n              questions={template.sections.flatMap((s) => s.questions.map((q) => ({ id: q.id, text: q.text })))}\r\n              onClose={() => setShowLogicPanel(null)}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderSection = (section: Section, index: number) => {\r\n    const isActive = activeSectionId === section.id\r\n    const isDragging = draggedItem?.type === \"section\" && draggedItem.id === section.id\r\n    const isDropTarget = dropTarget?.type === \"section\" && dropTarget.id === section.id\r\n    const isTitlePage = index === 0\r\n\r\n    return (\r\n      <div\r\n        key={section.id}\r\n        ref={(el) => {\r\n          sectionRefs.current[section.id] = el\r\n        }}\r\n        className={`section-container ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"}`}\r\n        onClick={() => setActiveSectionId(section.id)}\r\n        draggable={!isTitlePage}\r\n        onDragStart={(e) => !isTitlePage && handleDragStart(\"section\", section.id)}\r\n        onDragOver={(e) => handleDragOver(\"section\", section.id, e)}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div className=\"section-header\">\r\n          <button\r\n            className=\"collapse-button\"\r\n            onClick={(e) => {\r\n              e.stopPropagation()\r\n              toggleSectionCollapse(section.id)\r\n            }}\r\n          >\r\n            {section.isCollapsed ? <ChevronUp size={18} /> : <ChevronDown size={18} />}\r\n          </button>\r\n          <div className=\"section-title-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"section-title\"\r\n              value={section.title}\r\n              onChange={(e) => updateSection(section.id, { title: e.target.value })}\r\n              readOnly={isTitlePage}\r\n            />\r\n            {!isTitlePage && (\r\n              <button className=\"edit-section-title\">\r\n                <Edit size={16} />\r\n              </button>\r\n            )}\r\n          </div>\r\n          {!isTitlePage && (\r\n            <div className=\"section-actions\">\r\n              <button\r\n                className=\"delete-section-button\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation()\r\n                  if (window.confirm(\"Are you sure you want to delete this section?\")) deleteSection(section.id)\r\n                }}\r\n              >\r\n                <Trash2 size={16} />\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {!section.isCollapsed && (\r\n          <>\r\n            {section.description && (\r\n              <div className=\"section-description\">\r\n                {section.description}\r\n                {isTitlePage && <p>customize the Title Page below</p>}\r\n              </div>\r\n            )}\r\n            <div className=\"questions-container\">\r\n              <div className=\"questions-header\">\r\n                <div className=\"question-label\">Question</div>\r\n                <div className=\"response-type-label\">Type of response</div>\r\n                <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\r\n                  <Plus size={16} />\r\n                </button>\r\n              </div>\r\n              {section.questions.map((question, idx) => renderQuestion(question, section.id, idx))}\r\n              <div className=\"question-actions\">\r\n                <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\r\n                  <Plus size={16} /> Add Question\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Updated handlePublishTemplate function with proper CSRF token handling\r\n  const handlePublishTemplate = async () => {\r\n    try {\r\n      // 1. First, get a fresh CSRF token\r\n      const csrfToken = await fetchCSRFToken()\r\n\r\n      // 2. Prepare the form data\r\n      const formData = new FormData()\r\n      formData.append(\"title\", template.title)\r\n      formData.append(\"description\", template.description)\r\n\r\n      // 3. Handle the logo if it exists\r\n      if (template.logo) {\r\n        // If logo is a base64 string, convert to blob\r\n        if (typeof template.logo === \"string\" && template.logo.startsWith(\"data:\")) {\r\n          const response = await fetch(template.logo)\r\n          const blob = await response.blob()\r\n          formData.append(\"logo\", blob, \"logo.png\")\r\n        } else {\r\n          formData.append(\"logo\", template.logo)\r\n        }\r\n      }\r\n\r\n      // 4. Add sections data\r\n      const cleanedTemplate = cleanTemplateForSave(template)\r\n      formData.append(\"sections\", JSON.stringify(cleanedTemplate.sections))\r\n\r\n      // 5. Make the API request with the fresh CSRF token\r\n      const publishResponse = await fetch(\"http://localhost:8000/api/users/create_templates/\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"X-CSRFToken\": csrfToken,\r\n        },\r\n        body: formData,\r\n        credentials: \"include\", // Important: include cookies\r\n      })\r\n\r\n      if (!publishResponse.ok) {\r\n        const errorData = await publishResponse.json()\r\n        throw new Error(errorData.error || \"Failed to publish template\")\r\n      }\r\n\r\n      // Success handling\r\n      setTemplate((prev) => ({\r\n        ...prev,\r\n        lastSaved: new Date(),\r\n        lastPublished: new Date(),\r\n      }))\r\n\r\n      console.log(\"Template published successfully!\")\r\n      alert(\"Template published and saved successfully!\")\r\n      navigate(\"/templates\")\r\n    } catch (error: unknown) {\r\n      console.error(\"Error publishing template:\", error)\r\n\r\n      if (axios.isAxiosError(error)) {\r\n        if (error.response?.status === 403) {\r\n          alert(\"Authentication error. Please log in again.\")\r\n          navigate(`/login?returnUrl=${encodeURIComponent(window.location.pathname)}`)\r\n        } else {\r\n          alert(`Failed to publish template: ${error.response?.data?.error || error.message}`)\r\n        }\r\n      } else {\r\n        alert(\"Failed to publish template: Unknown error occurred.\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // Render trigger UI components based on the trigger type\r\n  const renderTriggerUI = (question: Question, activeSection: Section) => {\r\n    if (shouldShowTrigger(question, \"require_evidence\")) {\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-trigger-header\">\r\n            <Upload size={16} />\r\n            <span>Evidence Required</span>\r\n          </div>\r\n          <div className=\"mobile-media-upload\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*,video/*\"\r\n              className=\"sr-only\"\r\n              id={`evidence-upload-${question.id}`}\r\n              onChange={(e) => {\r\n                if (e.target.files && e.target.files[0]) {\r\n                  const reader = new FileReader()\r\n                  reader.onload = (event) => {\r\n                    if (event.target?.result) {\r\n                      updateQuestion(activeSection.id, question.id, { conditionalProof: event.target.result as string })\r\n                    }\r\n                  }\r\n                  reader.readAsDataURL(e.target.files[0])\r\n                }\r\n              }}\r\n            />\r\n            {!question.conditionalProof ? (\r\n              <label htmlFor={`evidence-upload-${question.id}`} className=\"mobile-media-placeholder\">\r\n                <ImageIcon size={20} />\r\n                <span>Upload evidence (photo or video)</span>\r\n              </label>\r\n            ) : (\r\n              <div className=\"mobile-media-preview\">\r\n                <img\r\n                  src={question.conditionalProof || \"/placeholder.svg\"}\r\n                  alt=\"Evidence\"\r\n                  className=\"mobile-media-image\"\r\n                />\r\n                <button\r\n                  className=\"mobile-media-remove\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault()\r\n                    e.stopPropagation()\r\n                    updateQuestion(activeSection.id, question.id, { conditionalProof: undefined })\r\n                  }}\r\n                >\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"require_action\")) {\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-trigger-header\">\r\n            <FileText size={16} />\r\n            <span>Action Required</span>\r\n          </div>\r\n          <div className=\"mobile-action-form\">\r\n            <input type=\"text\" className=\"mobile-text-input\" placeholder=\"Describe the action taken...\" />\r\n            <div className=\"mobile-action-buttons\">\r\n              <button className=\"mobile-action-button\">Submit Action</button>\r\n              <button className=\"mobile-action-button secondary\">Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"notify\")) {\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-notification-banner\">\r\n            <Bell size={16} />\r\n            <span>Notification has been sent to the relevant team members.</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"display_message\")) {\r\n      // Get the message from the rule that triggered this\r\n      const rule = question.logicRules?.find(\r\n        (r) => r.trigger === \"display_message\"\r\n      )      \r\n      const message = rule?.message || \"Important: This response requires immediate attention.\"\r\n\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-message-banner\">\r\n            <AlertTriangle size={16} />\r\n            <span>{message}</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"ask_questions\")) {\r\n      // Get the subQuestion from the rule that triggered this\r\n      const rule = question.logicRules?.find((r) => r.trigger === \"ask_questions\")\r\n      const subQuestionText = rule?.subQuestion?.text || \"Please provide more details about this issue\"\r\n      const responseType = rule?.subQuestion?.responseType || \"Text\"\r\n\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-trigger-header\">\r\n            <MessageSquare size={16} />\r\n            <span>Follow-up Questions</span>\r\n          </div>\r\n          <div className=\"mobile-subquestion\">\r\n            <div className=\"mobile-question-text\">\r\n              <span className=\"mobile-required\">*</span>\r\n              {subQuestionText}\r\n            </div>\r\n            <div className=\"mobile-question-response\">\r\n              {responseType === \"Text\" && (\r\n                <textarea className=\"mobile-text-input\" rows={3} placeholder=\"Enter details here...\"></textarea>\r\n              )}\r\n              {responseType === \"Yes/No\" && (\r\n                <div className=\"mobile-yes-no\">\r\n                  <button className=\"mobile-yes\">Yes</button>\r\n                  <button className=\"mobile-no\">No</button>\r\n                  <button className=\"mobile-na\">N/A</button>\r\n                </div>\r\n              )}\r\n              {responseType === \"Number\" && <input type=\"number\" className=\"mobile-number-input\" placeholder=\"0\" />}\r\n              {responseType === \"Multiple choice\" && (\r\n                <div className=\"mobile-multiple-choice\">\r\n                  <button className=\"mobile-choice\">Option 1</button>\r\n                  <button className=\"mobile-choice\">Option 2</button>\r\n                  <button className=\"mobile-choice\">Option 3</button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"mobile-action-buttons\">\r\n            <button className=\"mobile-action-button\">Submit Responses</button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  // Update the renderMobileQuestionResponse function to make it more interactive and realistic\r\n  const renderMobileQuestionResponse = (question: Question, activeSection: Section) => {\r\n    switch (question.responseType) {\r\n      case \"Text\":\r\n        return (\r\n          <input\r\n            type=\"text\"\r\n            className=\"mobile-text-input\"\r\n            placeholder=\"Text answer\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          />\r\n        )\r\n      case \"Number\":\r\n        return (\r\n          <input\r\n            type=\"number\"\r\n            className=\"mobile-number-input\"\r\n            placeholder=\"0\"\r\n            value={(question.value as number) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: Number(e.target.value) })}\r\n          />\r\n        )\r\n      case \"Checkbox\":\r\n        return (\r\n          <div\r\n            className=\"mobile-checkbox\"\r\n            onClick={() => updateQuestion(activeSection.id, question.id, { value: !question.value })}\r\n          >\r\n            <div className={`mobile-checkbox-box ${question.value ? \"checked\" : \"\"}`}>\r\n              {question.value && <Check size={16} />}\r\n            </div>\r\n            <span>Check if applicable</span>\r\n          </div>\r\n        )\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"mobile-yes-no\">\r\n            <button\r\n              className={`mobile-yes ${question.value === \"Yes\" ? \"selected\" : \"\"}`}\r\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"Yes\" })}\r\n            >\r\n              Yes\r\n            </button>\r\n            <button\r\n              className={`mobile-no ${question.value === \"No\" ? \"selected\" : \"\"}`}\r\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"No\" })}\r\n            >\r\n              No\r\n            </button>\r\n            <button\r\n              className={`mobile-na ${question.value === \"N/A\" ? \"selected\" : \"\"}`}\r\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"N/A\" })}\r\n            >\r\n              N/A\r\n            </button>\r\n          </div>\r\n        )\r\n      case \"Multiple choice\":\r\n        return (\r\n          <div className=\"mobile-multiple-choice\">\r\n            {(question.options || []).map((option, idx) => (\r\n              <button\r\n                key={idx}\r\n                className={`mobile-choice ${question.value === option ? \"selected\" : \"\"}`}\r\n                onClick={() => updateQuestion(activeSection.id, question.id, { value: option })}\r\n              >\r\n                {option}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        )\r\n      case \"Slider\":\r\n        return (\r\n          <div className=\"mobile-slider\">\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              className=\"mobile-slider-input\"\r\n              value={(question.value as number) || 50}\r\n              onChange={(e) => updateQuestion(activeSection.id, question.id, { value: Number(e.target.value) })}\r\n            />\r\n            <div className=\"mobile-slider-labels\">\r\n              <span>0</span>\r\n              <span>50</span>\r\n              <span>100</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Media\":\r\n        return (\r\n          <label className=\"mobile-media-upload\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*,video/*\"\r\n              className=\"sr-only\"\r\n              onChange={(e) => {\r\n                if (e.target.files && e.target.files[0]) {\r\n                  const reader = new FileReader()\r\n                  reader.onload = (event) => {\r\n                    if (event.target?.result) {\r\n                      updateQuestion(activeSection.id, question.id, { value: event.target.result as string })\r\n                    }\r\n                  }\r\n                  reader.readAsDataURL(e.target.files[0])\r\n                }\r\n              }}\r\n            />\r\n            {!question.value ? (\r\n              <>\r\n                <ImageIcon size={20} />\r\n                <span>Upload media (photo or video)</span>\r\n              </>\r\n            ) : (\r\n              <div className=\"mobile-media-preview\">\r\n                <img\r\n                  src={(question.value as string) || \"/placeholder.svg\"}\r\n                  alt=\"Uploaded media\"\r\n                  className=\"mobile-media-image\"\r\n                />\r\n                <button\r\n                  className=\"mobile-media-remove\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault()\r\n                    e.stopPropagation()\r\n                    updateQuestion(activeSection.id, question.id, { value: null })\r\n                  }}\r\n                >\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </label>\r\n        )\r\n      case \"Annotation\":\r\n        return (\r\n          <div className=\"mobile-annotation\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              className=\"sr-only\"\r\n              id={`annotation-${question.id}`}\r\n              onChange={(e) => {\r\n                if (e.target.files && e.target.files[0]) {\r\n                  const reader = new FileReader()\r\n                  reader.onload = (event) => {\r\n                    if (event.target?.result) {\r\n                      updateQuestion(activeSection.id, question.id, { value: event.target.result as string })\r\n                    }\r\n                  }\r\n                  reader.readAsDataURL(e.target.files[0])\r\n                }\r\n              }}\r\n            />\r\n            {!question.value ? (\r\n              <label htmlFor={`annotation-${question.id}`} className=\"mobile-annotation-placeholder\">\r\n                <Edit size={20} />\r\n                <span>Add annotation</span>\r\n              </label>\r\n            ) : (\r\n              <div className=\"mobile-annotation-preview\">\r\n                <img\r\n                  src={(question.value as string) || \"/placeholder.svg\"}\r\n                  alt=\"Annotation\"\r\n                  className=\"mobile-annotation-image\"\r\n                />\r\n                <button\r\n                  className=\"mobile-annotation-remove\"\r\n                  onClick={() => updateQuestion(activeSection.id, question.id, { value: null })}\r\n                >\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n      case \"Date & Time\":\r\n      case \"Inspection date\":\r\n        return (\r\n          <input\r\n            type=\"datetime-local\"\r\n            className=\"mobile-date-time\"\r\n            value={(question.value as string) || new Date().toISOString().slice(0, 16)}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          />\r\n        )\r\n      case \"Site\":\r\n        const siteOptions = [\"Main Site\", \"Secondary Site\", \"Remote Location\", \"Headquarters\"]\r\n        return (\r\n          <select\r\n            className=\"mobile-dropdown-field\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select site\r\n            </option>\r\n            {siteOptions.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )\r\n      case \"Person\":\r\n        const personOptions = [\"John Doe\", \"Jane Smith\", \"Alex Johnson\", \"Sam Wilson\"]\r\n        return (\r\n          <select\r\n            className=\"mobile-dropdown-field\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select person\r\n            </option>\r\n            {personOptions.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )\r\n      case \"Inspection location\":\r\n        const locationOptions = [\"Main Building\", \"Warehouse\", \"Office\", \"Factory Floor\", \"Parking Lot\"]\r\n        return (\r\n          <select\r\n            className=\"mobile-dropdown-field\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select location\r\n            </option>\r\n            {locationOptions.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )\r\n      default:\r\n        return <div className=\"mobile-text-input\">Response placeholder</div>\r\n    }\r\n  }\r\n\r\n  const renderMobilePreview = () => {\r\n    if (!showMobilePreview) {\r\n      return (\r\n        <div className=\"mobile-preview-collapsed\">\r\n          <button className=\"show-mobile-preview-button\" onClick={() => setShowMobilePreview(true)}>\r\n            <div className=\"mobile-icon\">\r\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <rect x=\"5\" y=\"2\" width=\"14\" height=\"20\" rx=\"2\" stroke=\"currentColor\" strokeWidth=\"2\" />\r\n                <line x1=\"5\" y1=\"18\" x2=\"19\" y2=\"18\" stroke=\"currentColor\" strokeWidth=\"2\" />\r\n                <line x1=\"9\" y1=\"21\" x2=\"15\" y2=\"21\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" />\r\n              </svg>\r\n            </div>\r\n            <span>Show Preview</span>\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Add null check for template\r\n    if (!template) {\r\n      return <div className=\"mobile-preview\">Loading...</div>\r\n    }\r\n\r\n    const activeSection = template.sections?.find((s) => s.id === activeSectionId) || template.sections?.[0]\r\n\r\n    if (!activeSection) {\r\n      return (\r\n        <div className=\"mobile-preview\">\r\n          <div className=\"mobile-preview-header\">\r\n            <button className=\"mobile-preview-close\" onClick={() => setShowMobilePreview(false)}>\r\n              <X size={16} />\r\n              <span>Hide Preview</span>\r\n            </button>\r\n          </div>\r\n          <div className=\"mobile-device-container\">\r\n            <div className=\"mobile-device\">\r\n              <div className=\"mobile-content\">\r\n                <div className=\"mobile-template-title\">{template.title || \"Untitled Template\"}</div>\r\n                <div className=\"mobile-page-indicator\">No pages added yet.</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"mobile-preview\">\r\n        <div className=\"mobile-preview-header\">\r\n          <button className=\"mobile-preview-close\" onClick={() => setShowMobilePreview(false)}>\r\n            <X size={16} />\r\n            <span>Hide Preview</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"mobile-device-container\">\r\n          <div className=\"mobile-device\">\r\n            <div className=\"mobile-device-notch\"></div>\r\n            <div className=\"mobile-status-bar\">\r\n              <div className=\"mobile-time\">\r\n                {new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\r\n              </div>\r\n              <div className=\"mobile-status-icons\">\r\n                <div className=\"mobile-signal\"></div>\r\n                <div className=\"mobile-wifi\"></div>\r\n                <div className=\"mobile-battery\"></div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mobile-content\">\r\n              {template.logo && (\r\n                <div className=\"mobile-header-content\">\r\n                  <div className=\"mobile-logo\">\r\n                    <img src={template.logo || \"/placeholder.svg\"} alt=\"Template logo\" className=\"mobile-logo-image\" />\r\n                  </div>\r\n                  <div className=\"mobile-template-title\">{template.title}</div>\r\n                </div>\r\n              )}\r\n              <div className=\"mobile-page-indicator\">\r\n                Page {template.sections.indexOf(activeSection) + 1} of {template.sections.length}\r\n              </div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"mobile-page-title\"\r\n                value={activeSection.title}\r\n                onChange={(e) => updateSection(activeSection.id, { title: e.target.value })}\r\n                placeholder=\"Enter page title\"\r\n              />\r\n\r\n              {activeSection.description && (\r\n                <div className=\"mobile-section-description\">{activeSection.description}</div>\r\n              )}\r\n\r\n              <div className=\"mobile-questions\">\r\n                {activeSection.questions.map((question) => (\r\n                  <div key={question.id} className=\"mobile-question\">\r\n                    <div className=\"mobile-question-text\">\r\n                      {question.required && <span className=\"mobile-required\">*</span>}\r\n                      {question.flagged && <span className=\"mobile-flagged\">⚑</span>}\r\n                      {question.text}\r\n                    </div>\r\n                    <div className=\"mobile-question-response\">\r\n                      {renderMobileQuestionResponse(question, activeSection)}\r\n                      {renderTriggerUI(question, activeSection)}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"mobile-nav-buttons\">\r\n              {template.sections.map((section) => (\r\n                <div\r\n                  key={section.id}\r\n                  className={`mobile-nav-dot ${section.id === activeSection.id ? \"active\" : \"\"}`}\r\n                  onClick={() => setActiveSectionId(section.id)}\r\n                ></div>\r\n              ))}\r\n            </div>\r\n            <div className=\"mobile-home-indicator\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Main Render\r\n  return (\r\n    <div className=\"template-builder\">\r\n      <div className=\"top-navigation\">\r\n        <div className=\"nav-left\">\r\n          <div className=\"company-name\">FASHCOGNITIVE</div>\r\n          <button className=\"back-button\" onClick={handleBack}>\r\n            <ArrowLeft size={16} />\r\n            <span>back</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"nav-center\">\r\n          <div className=\"nav-tabs\">\r\n            <button className={`nav-tab ${activeTab === 0 ? \"active\" : \"\"}`} onClick={() => setActiveTab(0)}>\r\n              1. Build\r\n            </button>\r\n            <button\r\n              className={`nav-tab ${activeTab === 2 ? \"active\" : \"\"}`}\r\n              onClick={() => setActiveTab(2)}\r\n              disabled={activeTab < 2}\r\n            >\r\n              2. Report\r\n            </button>\r\n            <button\r\n              className={`nav-tab ${activeTab === 3 ? \"active\" : \"\"}`}\r\n              onClick={() => setActiveTab(3)}\r\n              disabled={activeTab < 3}\r\n            >\r\n              3. Access\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"nav-right\"></div>\r\n      </div>\r\n\r\n      <div className=\"builder-content\">\r\n        {activeTab === 0 && (\r\n          <div className=\"template-builder-container\">\r\n            <div className=\"template-content\">\r\n              <div className=\"template-header\">\r\n                <div className=\"template-logo\">\r\n                  {template.logo ? (\r\n                    <img\r\n                      src={template.logo || \"/placeholder.svg\"}\r\n                      alt=\"Template logo\"\r\n                      className=\"logo-image\"\r\n                      onClick={() => document.getElementById(\"logo-upload\")?.click()}\r\n                    />\r\n                  ) : (\r\n                    <div className=\"logo-placeholder\" onClick={() => document.getElementById(\"logo-upload\")?.click()}>\r\n                      <Plus size={24} />\r\n                    </div>\r\n                  )}\r\n                  <input\r\n                    id=\"logo-upload\"\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    className=\"sr-only\"\r\n                    onChange={handleLogoUpload}\r\n                  />\r\n                </div>\r\n                <div className=\"template-info\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"template-title\"\r\n                    value={template.title}\r\n                    onChange={(e) => updateTemplate({ title: e.target.value })}\r\n                    placeholder=\"Untitled template\"\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"template-description\"\r\n                    value={template.description}\r\n                    onChange={(e) => updateTemplate({ description: e.target.value })}\r\n                    placeholder=\"Add a description\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"sections-container\">\r\n                {template.sections.map((section, idx) => renderSection(section, idx))}\r\n              </div>\r\n              <div className=\"add-section-container\">\r\n                <div className=\"add-section-actions\">\r\n                  <button className=\"add-section-button\" onClick={addSection}>\r\n                    <Plus size={16} /> Add Section\r\n                  </button>\r\n                  <button className=\"next-button\" onClick={() => setActiveTab(2)}>\r\n                    Next: Report\r\n                    <ArrowRight size={16} />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mobile-preview-container\">{renderMobilePreview()}</div>\r\n          </div>\r\n        )}\r\n        {activeTab === 2 && (\r\n          <div className=\"report-page-container\">\r\n            <div style={{ width: \"100%\", maxWidth: \"1200px\" }}>\r\n              {!isLoading && template?.title && <Report template={template} />}\r\n            </div>\r\n            <div className=\"report-footer\">\r\n              <button className=\"next-button\" onClick={() => setActiveTab(3)}>\r\n                Next: Access\r\n                <ArrowRight size={16} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {activeTab === 3 && (\r\n          <div className=\"access-page-container\">\r\n            <div className=\"access-tab\">\r\n              <AccessManager\r\n                templateId={template.id}\r\n                templateTitle={template.title || \"Untitled Template\"}\r\n                initialUsers={[]}\r\n                onUpdatePermissions={(users) => {\r\n                  console.log(\"Updated permissions:\", users)\r\n                  // Here you would update the template with the new permissions\r\n                  // setTemplate({ ...template, permissions: users });\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"access-footer\">\r\n              <button className=\"publish-button\" onClick={handlePublishTemplate}>\r\n                <Upload className=\"publish-icon\" />\r\n                Publish Template\r\n                <CheckCircle size={16} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateTemplate\r\n","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\home.tsx",["70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104"],"import type React from \"react\";\r\nimport \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/assets/styles.css\";\r\nimport { Menu } from \"lucide-react\";\r\n\r\n\r\n// Import the icon images and video from the assets folder\r\nimport createIcon from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/create.png\";\r\nimport conductIcon from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/conduct.png\";\r\nimport analyzeIcon from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/analyze.png\"; // Ensure this is a PNG with transparency\r\nimport qr from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/qr.png\";\r\nimport headerVideo from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/head1.mp4\";\r\nimport appStoreBadge from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/app-store-badge.svg\";\r\nimport googlePlayBadge from \"D:/intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/google-play-badge.svg\";\r\n\r\nconst Home2: React.FC = () => {\r\n  return (\r\n    <div className=\"home-container\">\r\n      <header className=\"header\">\r\n        <button className=\"menu-button\">\r\n          <Menu size={24} />\r\n        </button>\r\n        <div className=\"logo\">FASHCOGNITIVE</div>\r\n        <div className=\"auth-buttons\">\r\n          <a href=\"\\login\" className=\"login-button1\">Log in</a>\r\n          <a href=\"\\register\" className=\"signup-button1\">Sign up for free</a>\r\n        </div>\r\n      </header>\r\n\r\n      <nav className=\"navigation\">\r\n        <ul>\r\n          <li className=\"nav-item\">\r\n            Product <span className=\"dropdown-arrow\">▼</span>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            Solutions <span className=\"dropdown-arrow\">▼</span>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            Support <span className=\"dropdown-arrow\">▼</span>\r\n          </li>\r\n          <li className=\"nav-item\">Customers</li>\r\n          <li className=\"nav-item\">Pricing</li>\r\n        </ul>\r\n      </nav>\r\n\r\n      <section className=\"hero-section\">\r\n        <video className=\"hero-video\" autoPlay muted loop>\r\n          <source src={headerVideo} type=\"video/mp4\" />\r\n          Your browser does not support the video tag.\r\n        </video>\r\n        <div className=\"hero-content\">\r\n          <h1 className=\"hero-title\">\r\n            Conduct Inspections\r\n            <br />\r\n            Anytime, Anywhere\r\n            <br />\r\n            Anyplace\r\n          </h1>\r\n          <div className=\"feature-boxes\">\r\n            <div className=\"feature-box\">\r\n              <img src={createIcon} alt=\"Create & Customize Inspections Icon\" className=\"feature-box-icon\" />\r\n              <div className=\"feature-box-text\">Create & Customize Inspections</div>\r\n            </div>\r\n            <div className=\"feature-box\">\r\n              <img src={conductIcon} alt=\"Conduct Inspections & Collect Data Icon\" className=\"feature-box-icon\" />\r\n              <div className=\"feature-box-text\">Conduct Inspections & Collect Data</div>\r\n            </div>\r\n            <div className=\"feature-box\">\r\n              <img src={analyzeIcon} alt=\"Analyze & Take Action Icon\" className=\"feature-box-icon\" />\r\n              <div className=\"feature-box-text\">Analyze & Take Action</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"reports-section\">\r\n        <div className=\"reports-content\">\r\n          <div className=\"reports-images\">\r\n            <div className=\"mobile-report-image\">\r\n              <div className=\"report-mockup\">\r\n                <div className=\"report-header\">\r\n                  <div className=\"report-title\">\r\n                    BRANDED\r\n                    <br />\r\n                    REPORT\r\n                  </div>\r\n                </div>\r\n                <div className=\"dashboard-chart\">\r\n                  <div className=\"chart-placeholder\">\r\n                    <div className=\"chart-bar chart-bar-1\"></div>\r\n                    <div className=\"chart-bar chart-bar-2\"></div>\r\n                    <div className=\"chart-bar chart-bar-3\"></div>\r\n                    <div className=\"chart-bar chart-bar-4\"></div>\r\n                  </div>\r\n                </div>\r\n                <button className=\"purple-button\">Button</button>\r\n              </div>\r\n            </div>\r\n            <div className=\"desktop-report-image\">\r\n              <div className=\"desktop-dashboard\">\r\n                <div className=\"chart-header\">\r\n                  <div className=\"chart-title\">Inspection Results</div>\r\n                  <div className=\"chart-legend\">\r\n                    <span className=\"legend-item passing\">Passing</span>\r\n                    <span className=\"legend-item failing\">Failing</span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"chart-content\">\r\n                  <div className=\"chart-area\">\r\n                    <div className=\"pie-chart\">\r\n                      <div className=\"pie-segment segment-1\"></div>\r\n                      <div className=\"pie-segment segment-2\"></div>\r\n                    </div>\r\n                    <div className=\"data-metrics\">\r\n                      <div className=\"metric\">\r\n                        <div className=\"metric-value\">87%</div>\r\n                        <div className=\"metric-label\">Compliance</div>\r\n                      </div>\r\n                      <div className=\"metric\">\r\n                        <div className=\"metric-value\">24</div>\r\n                        <div className=\"metric-label\">Issues</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"share-button\">\r\n                <span>Share</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"reports-text\">\r\n            <div className=\"reports-badge\">Reports</div>\r\n            <h2 className=\"reports-title\">Generate and share custom reports</h2>\r\n            <p className=\"reports-description\">\r\n              Instantly{\" \"}\r\n              <a href=\"#\" className=\"text-link\">\r\n                generate a report\r\n              </a>{\" \"}\r\n              after an inspection is complete that shows off your unique brand. Share it with your team, managers,\r\n              clients or customers with the tap of a finger.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"app-download-section\">\r\n        <div className=\"app-download-content\">\r\n          <div className=\"app-download-text\">\r\n            <h2 className=\"app-download-title\">Scan the QR code to download the app</h2>\r\n            <ul className=\"app-features-list\">\r\n              <li className=\"app-feature\">Conduct inspections and capture evidence even when offline.</li>\r\n              <li className=\"app-feature\">Personalize and share professional reports.</li>\r\n              <li className=\"app-feature\">Create and assign tasks to get the job done.</li>\r\n              <li className=\"app-feature\">Report issues and notify your team instantly.</li>\r\n              <li className=\"app-feature\">Manage your assets and operations, all in one place.</li>\r\n              <li className=\"app-feature\">Onboard, train and upskill on the job.</li>\r\n            </ul>\r\n            <div className=\"app-store-buttons\">\r\n              <a href=\"#\" className=\"app-store-button\">\r\n                <div className=\"store-badge\">\r\n                  <div className=\"apple-icon\"></div>\r\n                  <span className=\"store-icon\">\r\n                    <span className=\"store-prefix\">Download on the</span>\r\n                    <span className=\"store-name\">App Store</span>\r\n                  </span>\r\n                </div>\r\n              </a>\r\n              <a href=\"#\" className=\"google-play-button\">\r\n                <div className=\"store-badge\">\r\n                  <div className=\"play-icon\">\r\n                    <div className=\"play-triangle\"></div>\r\n                  </div>\r\n                  <span className=\"store-icon\">\r\n                    <span className=\"store-prefix\">GET IT ON</span>\r\n                    <span className=\"store-name\">Google Play</span>\r\n                  </span>\r\n                </div>\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div className=\"qr-code-container\">\r\n            <div className=\"company-logo-large\"></div>\r\n            <div className=\"qr-code\">\r\n              <img src={qr} alt=\"QR Code\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"cta-section\">\r\n        <h2 className=\"cta-title\">\r\n          Perform inspections identify problems\r\n          <br />\r\n          track tasks and communicate effectively.\r\n        </h2>\r\n        <button className=\"cta-button\">Get started for free</button>\r\n      </section>\r\n\r\n      <footer className=\"footer\">\r\n        <div className=\"footer-columns\">\r\n          <div className=\"footer-column\">\r\n            <h3 className=\"footer-heading\">Product</h3>\r\n            <ul className=\"footer-links\">\r\n              <li>\r\n                <a href=\"#\">Pricing</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Book Demo</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Product Updates</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Safety/Culture (formerly Auditor)</a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"footer-column\">\r\n            <h3 className=\"footer-heading\">Support</h3>\r\n            <ul className=\"footer-links\">\r\n              <li>\r\n                <a href=\"#\">Help Center</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Partner Support</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">API Developer Documentation</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Digitize Your Checklist</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Contact Us</a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"footer-column\">\r\n            <h3 className=\"footer-heading\">Resources</h3>\r\n            <ul className=\"footer-links\">\r\n              <li>\r\n                <a href=\"#\">Checklist Library</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">App & Software Guides</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Checklist Guides</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Topic Guides</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">eBooks</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Blog</a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"footer-column\">\r\n            <h3 className=\"footer-heading\">Company</h3>\r\n            <ul className=\"footer-links\">\r\n              <li>\r\n                <a href=\"#\">About</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Careers</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">News Room</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Brand Partnerships</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Meet the Leadership Team</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"#\">Events</a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"footer-bottom\">\r\n          <div className=\"footer-legal\">\r\n            <a href=\"#\">Status</a>\r\n            <span>•</span>\r\n            <a href=\"#\">Legal</a>\r\n            <span>•</span>\r\n            <a href=\"#\">Terms and Conditions</a>\r\n            <span>•</span>\r\n            <a href=\"#\">Privacy Portal</a>\r\n            <span>•</span>\r\n            <a href=\"#\">Security</a>\r\n            <span>•</span>\r\n            <span>© 2025 Fashcognitive, Inc. All rights reserved.</span>\r\n          </div>\r\n          <div className=\"footer-social\">\r\n            <a href=\"#\" className=\"social-icon\" aria-label=\"Twitter\">\r\n              <img src=\"/placeholder.svg?height=20&width=20\" alt=\"Twitter\" />\r\n            </a>\r\n            <a href=\"#\" className=\"social-icon\" aria-label=\"LinkedIn\">\r\n              <img src=\"/placeholder.svg?height=20&width=20\" alt=\"LinkedIn\" />\r\n            </a>\r\n            <a href=\"#\" className=\"social-icon\" aria-label=\"Facebook\">\r\n              <img src=\"/placeholder.svg?height=20&width=20\" alt=\"Facebook\" />\r\n            </a>\r\n            <a href=\"#\" className=\"social-icon\" aria-label=\"Instagram\">\r\n              <img src=\"/placeholder.svg?height=20&width=20\" alt=\"Instagram\" />\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home2;","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\components\\AccessManager.tsx",["105","106","107","108","109"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  User,\r\n  UserPlus,\r\n  Mail,\r\n  Shield,\r\n  Check,\r\n  X,\r\n  Edit2,\r\n  Trash2,\r\n  Search,\r\n  AlertCircle,\r\n  Info,\r\n  Copy,\r\n  ExternalLink,\r\n  Users\r\n} from 'lucide-react';\r\nimport './AccessManager.css';\r\n\r\n// Define permission types\r\nexport type PermissionLevel = 'owner' | 'admin' | 'editor' | 'viewer';\r\n\r\nexport interface UserPermission {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  permissionLevel: PermissionLevel;\r\n  status: 'active' | 'pending' | 'expired';\r\n  lastAccessed?: Date;\r\n}\r\n\r\nexport interface Connection {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  initials: string;\r\n  status: 'active' | 'pending' | 'declined';\r\n}\r\n\r\ninterface AccessManagerProps {\r\n  templateId: string;\r\n  templateTitle: string;\r\n  initialUsers?: UserPermission[];\r\n  onUpdatePermissions?: (users: UserPermission[]) => void;\r\n}\r\n\r\nconst generateId = () => Math.random().toString(36).substring(2, 9);\r\n\r\nconst getPermissionLabel = (level: PermissionLevel): string => {\r\n  switch (level) {\r\n    case 'owner':\r\n      return 'Owner';\r\n    case 'admin':\r\n      return 'Administrator';\r\n    case 'editor':\r\n      return 'Editor';\r\n    case 'viewer':\r\n      return 'Viewer';\r\n    default:\r\n      return 'Unknown';\r\n  }\r\n};\r\n\r\nconst getPermissionDescription = (level: PermissionLevel): string => {\r\n  switch (level) {\r\n    case 'owner':\r\n      return 'Full control including template deletion and ownership transfer';\r\n    case 'admin':\r\n      return 'Can edit template, manage users, and publish';\r\n    case 'editor':\r\n      return 'Can edit template content but cannot publish or manage users';\r\n    case 'viewer':\r\n      return 'Can only view and use the template';\r\n    default:\r\n      return '';\r\n  }\r\n};\r\n\r\nconst AccessManager: React.FC<AccessManagerProps> = ({\r\n  templateId,\r\n  templateTitle,\r\n  initialUsers = [],\r\n  onUpdatePermissions\r\n}) => {\r\n  // Default owner if no users provided\r\n  const defaultOwner: UserPermission = {\r\n    id: generateId(),\r\n    name: 'You',\r\n    email: 'current.user@example.com',\r\n    permissionLevel: 'owner',\r\n    status: 'active',\r\n    lastAccessed: new Date()\r\n  };\r\n\r\n  const [users, setUsers] = useState<UserPermission[]>(\r\n    initialUsers.length > 0 ? initialUsers : [defaultOwner]\r\n  );\r\n\r\n  const [showInviteForm, setShowInviteForm] = useState(false);\r\n  const [newUserEmail, setNewUserEmail] = useState('');\r\n  const [newUserPermission, setNewUserPermission] = useState<PermissionLevel>('viewer');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [editingUserId, setEditingUserId] = useState<string | null>(null);\r\n  const [showShareLink, setShowShareLink] = useState(false);\r\n  const [shareLink, setShareLink] = useState('');\r\n  const [linkCopied, setLinkCopied] = useState(false);\r\n  const [showPermissionDetails, setShowPermissionDetails] = useState(false);\r\n  const [showConnectionsModal, setShowConnectionsModal] = useState(false);\r\n  const [inviteTab, setInviteTab] = useState<'email' | 'connections'>('email');\r\n\r\n  // Sample connections data for demonstration\r\n  // Map to store individual permission levels for each connection\r\n  const [connectionPermissions, setConnectionPermissions] = useState<Record<string, PermissionLevel>>({});\r\n\r\n  const [connections, setConnections] = useState<Connection[]>([\r\n    {\r\n      id: '1',\r\n      name: 'Grace Miller',\r\n      email: 'grace.miller@example.com',\r\n      initials: 'GM',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'John Martinez',\r\n      email: 'john.martinez@example.com',\r\n      initials: 'JM',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Sarah Johnson',\r\n      email: 'sarah.johnson@example.com',\r\n      initials: 'SJ',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '4',\r\n      name: 'Michael Brown',\r\n      email: 'michael.brown@example.com',\r\n      initials: 'MB',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '5',\r\n      name: 'Emily Davis',\r\n      email: 'emily.davis@example.com',\r\n      initials: 'ED',\r\n      status: 'active'\r\n    }\r\n  ]);\r\n\r\n  // Generate a share link\r\n  useEffect(() => {\r\n    setShareLink(`https://fashcognitive.com/templates/share/${templateId}?token=${generateId()}`);\r\n  }, [templateId]);\r\n\r\n  // Update parent component when users change\r\n  useEffect(() => {\r\n    if (onUpdatePermissions) {\r\n      onUpdatePermissions(users);\r\n    }\r\n  }, [users, onUpdatePermissions]);\r\n\r\n  const handleAddUser = () => {\r\n    if (!newUserEmail.trim()) return;\r\n\r\n    // Check if user already exists\r\n    if (users.some(user => user.email.toLowerCase() === newUserEmail.toLowerCase())) {\r\n      alert('This user has already been invited.');\r\n      return;\r\n    }\r\n\r\n    const newUser: UserPermission = {\r\n      id: generateId(),\r\n      name: newUserEmail.split('@')[0], // Extract name from email\r\n      email: newUserEmail,\r\n      permissionLevel: newUserPermission,\r\n      status: 'pending'\r\n    };\r\n\r\n    setUsers([...users, newUser]);\r\n    setNewUserEmail('');\r\n    setNewUserPermission('viewer');\r\n    setShowInviteForm(false);\r\n  };\r\n\r\n  const handleAddConnection = (connection: Connection, permissionLevel: PermissionLevel) => {\r\n    // Check if connection already exists as a user\r\n    if (users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())) {\r\n      alert('This user has already been invited.');\r\n      return;\r\n    }\r\n\r\n    const newUser: UserPermission = {\r\n      id: generateId(),\r\n      name: connection.name,\r\n      email: connection.email,\r\n      avatar: connection.avatar,\r\n      permissionLevel: permissionLevel,\r\n      status: 'pending'\r\n    };\r\n\r\n    setUsers([...users, newUser]);\r\n    setShowInviteForm(false);\r\n  };\r\n\r\n  // Initialize connection permissions with default values\r\n  useEffect(() => {\r\n    const newPermissions: Record<string, PermissionLevel> = {};\r\n    connections.forEach(connection => {\r\n      if (!connectionPermissions[connection.id]) {\r\n        newPermissions[connection.id] = 'viewer';\r\n      }\r\n    });\r\n\r\n    if (Object.keys(newPermissions).length > 0) {\r\n      setConnectionPermissions(prev => ({ ...prev, ...newPermissions }));\r\n    }\r\n  }, [connections, connectionPermissions]);\r\n\r\n  const handleConnectionPermissionChange = (connectionId: string, permissionLevel: PermissionLevel) => {\r\n    setConnectionPermissions(prev => ({\r\n      ...prev,\r\n      [connectionId]: permissionLevel\r\n    }));\r\n  };\r\n\r\n  // Filter connections that are not already users\r\n  const availableConnections = connections.filter(\r\n    connection => !users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())\r\n  );\r\n\r\n  const handleUpdatePermission = (userId: string, permissionLevel: PermissionLevel) => {\r\n    setUsers(users.map(user =>\r\n      user.id === userId ? { ...user, permissionLevel } : user\r\n    ));\r\n    setEditingUserId(null);\r\n  };\r\n\r\n  const handleRemoveUser = (userId: string) => {\r\n    // Don't allow removing the owner\r\n    if (users.find(user => user.id === userId)?.permissionLevel === 'owner') {\r\n      alert('You cannot remove the owner of the template.');\r\n      return;\r\n    }\r\n\r\n    setUsers(users.filter(user => user.id !== userId));\r\n  };\r\n\r\n  const handleTransferOwnership = (userId: string) => {\r\n    // Find current owner and new owner\r\n    const currentOwner = users.find(user => user.permissionLevel === 'owner');\r\n    const newOwner = users.find(user => user.id === userId);\r\n\r\n    if (!currentOwner || !newOwner) return;\r\n\r\n    // Swap permissions\r\n    setUsers(users.map(user => {\r\n      if (user.id === currentOwner.id) {\r\n        return { ...user, permissionLevel: 'admin' };\r\n      }\r\n      if (user.id === userId) {\r\n        return { ...user, permissionLevel: 'owner' };\r\n      }\r\n      return user;\r\n    }));\r\n\r\n    setEditingUserId(null);\r\n  };\r\n\r\n  const copyShareLink = () => {\r\n    navigator.clipboard.writeText(shareLink);\r\n    setLinkCopied(true);\r\n    setTimeout(() => setLinkCopied(false), 2000);\r\n  };\r\n\r\n  // Filter users based on search term\r\n  const filteredUsers = users.filter(user =>\r\n    user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"access-manager\">\r\n      <div style={{ width: '100%', maxWidth: '1000px' }}>\r\n      <div className=\"access-header\">\r\n        <h2>Manage Access</h2>\r\n        <p>Control who can view and edit \"{templateTitle}\"</p>\r\n      </div>\r\n\r\n      <div className=\"access-actions\">\r\n        <div className=\"search-container\">\r\n          <Search size={18} className=\"search-icon\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search users...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"search-input\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"action-buttons\">\r\n          <button\r\n            className=\"share-link-button\"\r\n            onClick={() => setShowShareLink(!showShareLink)}\r\n          >\r\n            <ExternalLink size={16} />\r\n            Share Link\r\n          </button>\r\n\r\n          <button\r\n            className=\"invite-button\"\r\n            onClick={() => setShowInviteForm(!showInviteForm)}\r\n          >\r\n            <UserPlus size={16} />\r\n            Invite User\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {showShareLink && (\r\n        <div className=\"share-link-container\">\r\n          <div className=\"share-link-header\">\r\n            <h3>Share Template</h3>\r\n            <button className=\"close-button\" onClick={() => setShowShareLink(false)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n          <p>Anyone with this link can view this template:</p>\r\n          <div className=\"share-link-input\">\r\n            <input type=\"text\" value={shareLink} readOnly />\r\n            <button onClick={copyShareLink}>\r\n              <Copy size={16} />\r\n              {linkCopied ? 'Copied!' : 'Copy'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showInviteForm && (\r\n        <div className=\"invite-form\">\r\n          <div className=\"invite-form-header\">\r\n            <h3>Invite User</h3>\r\n            <button className=\"close-button\" onClick={() => setShowInviteForm(false)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"invite-tabs\">\r\n            <button\r\n              className={`invite-tab ${inviteTab === 'email' ? 'active' : ''}`}\r\n              onClick={() => setInviteTab('email')}\r\n            >\r\n              <Mail size={16} />\r\n              Email\r\n            </button>\r\n            <button\r\n              className={`invite-tab ${inviteTab === 'connections' ? 'active' : ''}`}\r\n              onClick={() => setInviteTab('connections')}\r\n            >\r\n              <Users size={16} />\r\n              My Connections\r\n            </button>\r\n          </div>\r\n\r\n          {inviteTab === 'email' ? (\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>Email Address</label>\r\n                <div className=\"email-input\">\r\n                  <Mail size={18} className=\"email-icon\" />\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email address\"\r\n                    value={newUserEmail}\r\n                    onChange={(e) => setNewUserEmail(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Permission Level\r\n                  <button\r\n                    className=\"info-button\"\r\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\r\n                  >\r\n                    <Info size={14} />\r\n                  </button>\r\n                </label>\r\n                <select\r\n                  value={newUserPermission}\r\n                  onChange={(e) => setNewUserPermission(e.target.value as PermissionLevel)}\r\n                >\r\n                  <option value=\"viewer\">Viewer</option>\r\n                  <option value=\"editor\">Editor</option>\r\n                  <option value=\"admin\">Administrator</option>\r\n                </select>\r\n              </div>\r\n\r\n              {showPermissionDetails && (\r\n                <div className=\"permission-details\">\r\n                  <div className=\"permission-item\">\r\n                    <h4>Viewer</h4>\r\n                    <p>Can view and use the template but cannot make changes</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Editor</h4>\r\n                    <p>Can edit template content but cannot publish or manage users</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Administrator</h4>\r\n                    <p>Can edit template, manage users, and publish</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Owner</h4>\r\n                    <p>Full control including template deletion and ownership transfer</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\r\n                <button\r\n                  className=\"send-invite-button\"\r\n                  onClick={handleAddUser}\r\n                  disabled={!newUserEmail.trim()}\r\n                >\r\n                  Send Invite\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Permission Levels\r\n                  <button\r\n                    className=\"info-button\"\r\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\r\n                  >\r\n                    <Info size={14} />\r\n                  </button>\r\n                </label>\r\n                <p className=\"permission-hint\">Set permission level for each connection individually</p>\r\n              </div>\r\n\r\n              {showPermissionDetails && (\r\n                <div className=\"permission-details\">\r\n                  <div className=\"permission-item\">\r\n                    <h4>Viewer</h4>\r\n                    <p>Can view and use the template but cannot make changes</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Editor</h4>\r\n                    <p>Can edit template content but cannot publish or manage users</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Administrator</h4>\r\n                    <p>Can edit template, manage users, and publish</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Owner</h4>\r\n                    <p>Full control including template deletion and ownership transfer</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"connections-list-container\">\r\n                <h4 className=\"connections-list-title\">\r\n                  Select from your connections\r\n                  <span className=\"connections-count\">({availableConnections.length})</span>\r\n                </h4>\r\n\r\n                {availableConnections.length === 0 ? (\r\n                  <div className=\"no-connections-message\">\r\n                    <p>All your connections have already been invited to this template.</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"connections-select-list\">\r\n                    {availableConnections.map(connection => (\r\n                      <div key={connection.id} className=\"connection-select-item\">\r\n                        <div className=\"connection-info\">\r\n                          {connection.avatar ? (\r\n                            <img src={connection.avatar} alt={connection.name} className=\"connection-avatar\" />\r\n                          ) : (\r\n                            <div className=\"connection-initials\">{connection.initials}</div>\r\n                          )}\r\n                          <div className=\"connection-details\">\r\n                            <span className=\"connection-name\">{connection.name}</span>\r\n                            <span className=\"connection-email\">{connection.email}</span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"connection-actions\">\r\n                          <select\r\n                            className=\"connection-permission-select\"\r\n                            value={connectionPermissions[connection.id] || 'viewer'}\r\n                            onChange={(e) => handleConnectionPermissionChange(connection.id, e.target.value as PermissionLevel)}\r\n                          >\r\n                            <option value=\"viewer\">Viewer</option>\r\n                            <option value=\"editor\">Editor</option>\r\n                            <option value=\"admin\">Admin</option>\r\n                          </select>\r\n                          <button\r\n                            className=\"add-connection-btn\"\r\n                            onClick={() => handleAddConnection(connection, connectionPermissions[connection.id] || 'viewer')}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"users-list-container\">\r\n        <div className=\"users-list-header\">\r\n          <div className=\"user-column\">User</div>\r\n          <div className=\"permission-column\">Permission</div>\r\n          <div className=\"status-column\">Status</div>\r\n          <div className=\"actions-column\">Actions</div>\r\n        </div>\r\n\r\n        <div className=\"users-list\">\r\n          {filteredUsers.length === 0 ? (\r\n            <div className=\"no-users\">\r\n              <AlertCircle size={24} />\r\n              <p>No users found matching \"{searchTerm}\"</p>\r\n            </div>\r\n          ) : (\r\n            filteredUsers.map(user => (\r\n              <div key={user.id} className=\"user-item\">\r\n                <div className=\"user-info\">\r\n                  <div className=\"user-avatar\">\r\n                    {user.avatar ? (\r\n                      <img src={user.avatar} alt={user.name} />\r\n                    ) : (\r\n                      <div className=\"avatar-placeholder\">\r\n                        {user.name.charAt(0).toUpperCase()}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"user-details\">\r\n                    <div className=\"user-name\">{user.name}</div>\r\n                    <div className=\"user-email\">{user.email}</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"user-permission\">\r\n                  {editingUserId === user.id ? (\r\n                    <select\r\n                      value={user.permissionLevel}\r\n                      onChange={(e) => handleUpdatePermission(user.id, e.target.value as PermissionLevel)}\r\n                      className=\"permission-select\"\r\n                    >\r\n                      <option value=\"viewer\">Viewer</option>\r\n                      <option value=\"editor\">Editor</option>\r\n                      <option value=\"admin\">Administrator</option>\r\n                      <option value=\"owner\">Owner (Transfer Ownership)</option>\r\n                    </select>\r\n                  ) : (\r\n                    <div className={`permission-badge ${user.permissionLevel}`}>\r\n                      <Shield size={14} />\r\n                      <span>{getPermissionLabel(user.permissionLevel)}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"user-status\">\r\n                  <div className={`status-badge ${user.status}`}>\r\n                    {user.status === 'active' && <Check size={14} />}\r\n                    {user.status === 'pending' && <Mail size={14} />}\r\n                    {user.status === 'expired' && <AlertCircle size={14} />}\r\n                    <span>{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"user-actions\">\r\n                  {user.permissionLevel !== 'owner' && (\r\n                    <>\r\n                      {editingUserId === user.id ? (\r\n                        <button\r\n                          className=\"save-button\"\r\n                          onClick={() => setEditingUserId(null)}\r\n                        >\r\n                          <Check size={16} />\r\n                        </button>\r\n                      ) : (\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => setEditingUserId(user.id)}\r\n                        >\r\n                          <Edit2 size={16} />\r\n                        </button>\r\n                      )}\r\n                      <button\r\n                        className=\"delete-button\"\r\n                        onClick={() => handleRemoveUser(user.id)}\r\n                      >\r\n                        <Trash2 size={16} />\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                  {user.permissionLevel === 'owner' && (\r\n                    <div className=\"owner-badge\">\r\n                      <User size={14} />\r\n                      <span>Owner</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccessManager;\r\n","D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\pages\\components\\ConnectionsPanel.tsx",[],"D:\\intern\\safety_culture\\fashcognitive-intern\\frontend\\src\\utils\\csrf.ts",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":6,"column":8,"nodeType":"116","messageId":"117","endLine":6,"endColumn":13},{"ruleId":"114","severity":1,"message":"118","line":12,"column":19,"nodeType":"116","messageId":"117","endLine":12,"endColumn":27},{"ruleId":"119","severity":1,"message":"120","line":143,"column":6,"nodeType":"121","endLine":143,"endColumn":8,"suggestions":"122"},{"ruleId":"114","severity":1,"message":"123","line":51,"column":10,"nodeType":"116","messageId":"117","endLine":51,"endColumn":19},{"ruleId":"114","severity":1,"message":"124","line":1612,"column":10,"nodeType":"116","messageId":"117","endLine":1612,"endColumn":20},{"ruleId":"119","severity":1,"message":"125","line":1746,"column":6,"nodeType":"121","endLine":1746,"endColumn":8,"suggestions":"126"},{"ruleId":"114","severity":1,"message":"127","line":1799,"column":13,"nodeType":"116","messageId":"117","endLine":1799,"endColumn":28},{"ruleId":"114","severity":1,"message":"128","line":2143,"column":15,"nodeType":"116","messageId":"117","endLine":2143,"endColumn":38},{"ruleId":"114","severity":1,"message":"129","line":12,"column":8,"nodeType":"116","messageId":"117","endLine":12,"endColumn":21},{"ruleId":"114","severity":1,"message":"130","line":13,"column":8,"nodeType":"116","messageId":"117","endLine":13,"endColumn":23},{"ruleId":"131","severity":1,"message":"132","line":136,"column":15,"nodeType":"133","endLine":136,"endColumn":49},{"ruleId":"131","severity":1,"message":"132","line":159,"column":15,"nodeType":"133","endLine":159,"endColumn":56},{"ruleId":"131","severity":1,"message":"132","line":168,"column":15,"nodeType":"133","endLine":168,"endColumn":58},{"ruleId":"131","severity":1,"message":"132","line":205,"column":17,"nodeType":"133","endLine":205,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":208,"column":17,"nodeType":"133","endLine":208,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":211,"column":17,"nodeType":"133","endLine":211,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":214,"column":17,"nodeType":"133","endLine":214,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":222,"column":17,"nodeType":"133","endLine":222,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":225,"column":17,"nodeType":"133","endLine":225,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":228,"column":17,"nodeType":"133","endLine":228,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":231,"column":17,"nodeType":"133","endLine":231,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":234,"column":17,"nodeType":"133","endLine":234,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":242,"column":17,"nodeType":"133","endLine":242,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":245,"column":17,"nodeType":"133","endLine":245,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":248,"column":17,"nodeType":"133","endLine":248,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":251,"column":17,"nodeType":"133","endLine":251,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":254,"column":17,"nodeType":"133","endLine":254,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":257,"column":17,"nodeType":"133","endLine":257,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":265,"column":17,"nodeType":"133","endLine":265,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":268,"column":17,"nodeType":"133","endLine":268,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":271,"column":17,"nodeType":"133","endLine":271,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":274,"column":17,"nodeType":"133","endLine":274,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":277,"column":17,"nodeType":"133","endLine":277,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":280,"column":17,"nodeType":"133","endLine":280,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":287,"column":13,"nodeType":"133","endLine":287,"endColumn":25},{"ruleId":"131","severity":1,"message":"132","line":289,"column":13,"nodeType":"133","endLine":289,"endColumn":25},{"ruleId":"131","severity":1,"message":"132","line":291,"column":13,"nodeType":"133","endLine":291,"endColumn":25},{"ruleId":"131","severity":1,"message":"132","line":293,"column":13,"nodeType":"133","endLine":293,"endColumn":25},{"ruleId":"131","severity":1,"message":"132","line":295,"column":13,"nodeType":"133","endLine":295,"endColumn":25},{"ruleId":"131","severity":1,"message":"132","line":300,"column":13,"nodeType":"133","endLine":300,"endColumn":70},{"ruleId":"131","severity":1,"message":"132","line":303,"column":13,"nodeType":"133","endLine":303,"endColumn":71},{"ruleId":"131","severity":1,"message":"132","line":306,"column":13,"nodeType":"133","endLine":306,"endColumn":71},{"ruleId":"131","severity":1,"message":"132","line":309,"column":13,"nodeType":"133","endLine":309,"endColumn":72},{"ruleId":"114","severity":1,"message":"134","line":66,"column":7,"nodeType":"116","messageId":"117","endLine":66,"endColumn":31},{"ruleId":"114","severity":1,"message":"135","line":110,"column":10,"nodeType":"116","messageId":"117","endLine":110,"endColumn":30},{"ruleId":"114","severity":1,"message":"136","line":110,"column":32,"nodeType":"116","messageId":"117","endLine":110,"endColumn":55},{"ruleId":"114","severity":1,"message":"137","line":117,"column":23,"nodeType":"116","messageId":"117","endLine":117,"endColumn":37},{"ruleId":"114","severity":1,"message":"138","line":253,"column":9,"nodeType":"116","messageId":"117","endLine":253,"endColumn":32},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"@typescript-eslint/no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'setError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'endpointsToTry'. Either include it or remove the dependency array.","ArrayExpression",["141"],"'getCookie' is defined but never used.","'templateId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getInitialTemplate'. Either include it or remove the dependency array.",["142"],"'cleanedTemplate' is assigned a value but never used.","'_exhaustiveCheck' is assigned a value but never used.","'appStoreBadge' is defined but never used.","'googlePlayBadge' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'getPermissionDescription' is assigned a value but never used.","'showConnectionsModal' is assigned a value but never used.","'setShowConnectionsModal' is assigned a value but never used.","'setConnections' is assigned a value but never used.","'handleTransferOwnership' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [endpointsToTry]",{"range":"147","text":"148"},"Update the dependencies array to be: [getInitialTemplate]",{"range":"149","text":"150"},[4204,4206],"[endpointsToTry]",[63030,63032],"[getInitialTemplate]"]