[{"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/index.tsx":"1","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/App.tsx":"2","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/routes.tsx":"3","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Dashboard.tsx":"4","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/login.tsx":"5","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/home.tsx":"6","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Create_template.tsx":"7","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/TemplateView.tsx":"8","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Template.tsx":"9","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/register.tsx":"10","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/csrf.ts":"11","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/ConnectionsPanel.tsx":"12","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/AccessManager.tsx":"13"},{"size":319,"mtime":1745062432486,"results":"14","hashOfConfig":"15"},{"size":231,"mtime":1745062432449,"results":"16","hashOfConfig":"15"},{"size":1071,"mtime":1745845905258,"results":"17","hashOfConfig":"15"},{"size":6819,"mtime":1745404393818,"results":"18","hashOfConfig":"15"},{"size":3801,"mtime":1746081497037,"results":"19","hashOfConfig":"15"},{"size":13040,"mtime":1746081748007,"results":"20","hashOfConfig":"15"},{"size":110740,"mtime":1746120518790,"results":"21","hashOfConfig":"15"},{"size":4349,"mtime":1745845905257,"results":"22","hashOfConfig":"15"},{"size":10263,"mtime":1745211105919,"results":"23","hashOfConfig":"15"},{"size":9154,"mtime":1745062432487,"results":"24","hashOfConfig":"15"},{"size":1084,"mtime":1746079464888,"results":"25","hashOfConfig":"15"},{"size":10716,"mtime":1745214534000,"results":"26","hashOfConfig":"15"},{"size":21736,"mtime":1745214534000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"143jhuv",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/index.tsx",[],["59","60"],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/App.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/routes.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Dashboard.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/login.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/home.tsx",["61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89"],"import type React from \"react\";\nimport \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/assets/styles.css\";\nimport { Menu } from \"lucide-react\";\n\n\n// Import the icon images and video from the assets folder\nimport createIcon from \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/create.png\";\nimport conductIcon from \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/conduct.png\";\nimport analyzeIcon from \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/analyze.png\"; // Ensure this is a PNG with transparency\nimport qr from \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/qr.png\";\nimport headerVideo from \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/head1.mp4\";\n//import appStoreBadge from \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/app-store-badge.svg\";\n//import googlePlayBadge from \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/assets/img/google-play-badge.svg\";\n\nconst Home2: React.FC = () => {\n  return (\n    <div className=\"home-container\">\n      <header className=\"header\">\n        <button className=\"menu-button\">\n          <Menu size={24} />\n        </button>\n        <div className=\"logo\">FASHCOGNITIVE</div>\n        <div className=\"auth-buttons\">\n          <a href=\"\\login\" className=\"login-button1\">Log in</a>\n          <a href=\"\\register\" className=\"signup-button1\">Sign up for free</a>\n        </div>\n      </header>\n\n      <nav className=\"navigation\">\n        <ul>\n          <li className=\"nav-item\">\n            Product <span className=\"dropdown-arrow\">▼</span>\n          </li>\n          <li className=\"nav-item\">\n            Solutions <span className=\"dropdown-arrow\">▼</span>\n          </li>\n          <li className=\"nav-item\">\n            Support <span className=\"dropdown-arrow\">▼</span>\n          </li>\n          <li className=\"nav-item\">Customers</li>\n          <li className=\"nav-item\">Pricing</li>\n        </ul>\n      </nav>\n\n      <section className=\"hero-section\">\n        <video className=\"hero-video\" autoPlay muted loop>\n          <source src={headerVideo} type=\"video/mp4\" />\n          Your browser does not support the video tag.\n        </video>\n        <div className=\"hero-content\">\n          <h1 className=\"hero-title\">\n            Conduct Inspections\n            <br />\n            Anytime, Anywhere\n            <br />\n            Anyplace\n          </h1>\n          <div className=\"feature-boxes\">\n            <div className=\"feature-box\">\n              <img src={createIcon} alt=\"Create & Customize Inspections Icon\" className=\"feature-box-icon\" />\n              <div className=\"feature-box-text\">Create & Customize Inspections</div>\n            </div>\n            <div className=\"feature-box\">\n              <img src={conductIcon} alt=\"Conduct Inspections & Collect Data Icon\" className=\"feature-box-icon\" />\n              <div className=\"feature-box-text\">Conduct Inspections & Collect Data</div>\n            </div>\n            <div className=\"feature-box\">\n              <img src={analyzeIcon} alt=\"Analyze & Take Action Icon\" className=\"feature-box-icon\" />\n              <div className=\"feature-box-text\">Analyze & Take Action</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"reports-section\">\n        <div className=\"reports-content\">\n          <div className=\"reports-images\">\n            <div className=\"mobile-report-image\">\n              <div className=\"report-mockup\">\n                <div className=\"report-header\">\n                  <div className=\"report-title\">\n                    BRANDED\n                    <br />\n                    REPORT\n                  </div>\n                </div>\n                <div className=\"dashboard-chart\">\n                  <div className=\"chart-placeholder\">\n                    <div className=\"chart-bar chart-bar-1\"></div>\n                    <div className=\"chart-bar chart-bar-2\"></div>\n                    <div className=\"chart-bar chart-bar-3\"></div>\n                    <div className=\"chart-bar chart-bar-4\"></div>\n                  </div>\n                </div>\n                <button className=\"purple-button\">Button</button>\n              </div>\n            </div>\n            <div className=\"desktop-report-image\">\n              <div className=\"desktop-dashboard\">\n                <div className=\"chart-header\">\n                  <div className=\"chart-title\">Inspection Results</div>\n                  <div className=\"chart-legend\">\n                    <span className=\"legend-item passing\">Passing</span>\n                    <span className=\"legend-item failing\">Failing</span>\n                  </div>\n                </div>\n                <div className=\"chart-content\">\n                  <div className=\"chart-area\">\n                    <div className=\"pie-chart\">\n                      <div className=\"pie-segment segment-1\"></div>\n                      <div className=\"pie-segment segment-2\"></div>\n                    </div>\n                    <div className=\"data-metrics\">\n                      <div className=\"metric\">\n                        <div className=\"metric-value\">87%</div>\n                        <div className=\"metric-label\">Compliance</div>\n                      </div>\n                      <div className=\"metric\">\n                        <div className=\"metric-value\">24</div>\n                        <div className=\"metric-label\">Issues</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"share-button\">\n                <span>Share</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"reports-text\">\n            <div className=\"reports-badge\">Reports</div>\n            <h2 className=\"reports-title\">Generate and share custom reports</h2>\n            <p className=\"reports-description\">\n              Instantly{\" \"}\n              <a href=\"#\" className=\"text-link\">\n                generate a report\n              </a>{\" \"}\n              after an inspection is complete that shows off your unique brand. Share it with your team, managers,\n              clients or customers with the tap of a finger.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"app-download-section\">\n        <div className=\"app-download-content\">\n          <div className=\"app-download-text\">\n            <h2 className=\"app-download-title\">Scan the QR code to download the app</h2>\n            <ul className=\"app-features-list\">\n              <li className=\"app-feature\">Conduct inspections and capture evidence even when offline.</li>\n              <li className=\"app-feature\">Personalize and share professional reports.</li>\n              <li className=\"app-feature\">Create and assign tasks to get the job done.</li>\n              <li className=\"app-feature\">Report issues and notify your team instantly.</li>\n              <li className=\"app-feature\">Manage your assets and operations, all in one place.</li>\n              <li className=\"app-feature\">Onboard, train and upskill on the job.</li>\n            </ul>\n            <div className=\"app-store-buttons\">\n              <a href=\"#\" className=\"app-store-button\">\n                <div className=\"store-badge\">\n                  <div className=\"apple-icon\"></div>\n                  <span className=\"store-icon\">\n                    <span className=\"store-prefix\">Download on the</span>\n                    <span className=\"store-name\">App Store</span>\n                  </span>\n                </div>\n              </a>\n              <a href=\"#\" className=\"google-play-button\">\n                <div className=\"store-badge\">\n                  <div className=\"play-icon\">\n                    <div className=\"play-triangle\"></div>\n                  </div>\n                  <span className=\"store-icon\">\n                    <span className=\"store-prefix\">GET IT ON</span>\n                    <span className=\"store-name\">Google Play</span>\n                  </span>\n                </div>\n              </a>\n            </div>\n          </div>\n          <div className=\"qr-code-container\">\n            <div className=\"company-logo-large\"></div>\n            <div className=\"qr-code\">\n              <img src={qr} alt=\"QR Code\" />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"cta-section\">\n        <h2 className=\"cta-title\">\n          Perform inspections identify problems\n          <br />\n          track tasks and communicate effectively.\n        </h2>\n        <button className=\"cta-button\">Get started for free</button>\n      </section>\n\n      <footer className=\"footer\">\n        <div className=\"footer-columns\">\n          <div className=\"footer-column\">\n            <h3 className=\"footer-heading\">Product</h3>\n            <ul className=\"footer-links\">\n              <li>\n                <a href=\"#\">Pricing</a>\n              </li>\n              <li>\n                <a href=\"#\">Book Demo</a>\n              </li>\n              <li>\n                <a href=\"#\">Product Updates</a>\n              </li>\n              <li>\n                <a href=\"#\">Safety/Culture (formerly Auditor)</a>\n              </li>\n            </ul>\n          </div>\n          <div className=\"footer-column\">\n            <h3 className=\"footer-heading\">Support</h3>\n            <ul className=\"footer-links\">\n              <li>\n                <a href=\"#\">Help Center</a>\n              </li>\n              <li>\n                <a href=\"#\">Partner Support</a>\n              </li>\n              <li>\n                <a href=\"#\">API Developer Documentation</a>\n              </li>\n              <li>\n                <a href=\"#\">Digitize Your Checklist</a>\n              </li>\n              <li>\n                <a href=\"#\">Contact Us</a>\n              </li>\n            </ul>\n          </div>\n          <div className=\"footer-column\">\n            <h3 className=\"footer-heading\">Resources</h3>\n            <ul className=\"footer-links\">\n              <li>\n                <a href=\"#\">Checklist Library</a>\n              </li>\n              <li>\n                <a href=\"#\">App & Software Guides</a>\n              </li>\n              <li>\n                <a href=\"#\">Checklist Guides</a>\n              </li>\n              <li>\n                <a href=\"#\">Topic Guides</a>\n              </li>\n              <li>\n                <a href=\"#\">eBooks</a>\n              </li>\n              <li>\n                <a href=\"#\">Blog</a>\n              </li>\n            </ul>\n          </div>\n          <div className=\"footer-column\">\n            <h3 className=\"footer-heading\">Company</h3>\n            <ul className=\"footer-links\">\n              <li>\n                <a href=\"#\">About</a>\n              </li>\n              <li>\n                <a href=\"#\">Careers</a>\n              </li>\n              <li>\n                <a href=\"#\">News Room</a>\n              </li>\n              <li>\n                <a href=\"#\">Brand Partnerships</a>\n              </li>\n              <li>\n                <a href=\"#\">Meet the Leadership Team</a>\n              </li>\n              <li>\n                <a href=\"#\">Events</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"footer-bottom\">\n          <div className=\"footer-legal\">\n            <a href=\"#\">Status</a>\n            <span>•</span>\n            <a href=\"/legal\">Legal</a> {/* Replace with a valid route */}\n            <span>•</span>\n            <a href=\"/terms-and-conditions\">Terms and Conditions</a> {/* Replace with a valid route */}\n            <span>•</span>\n            <a href=\"/privacy-portal\">Privacy Portal</a> {/* Replace with a valid route */}\n            <span>•</span>\n            <a href=\"/security\">Security</a> {/* Replace with a valid route */}\n            <span>•</span>\n            <span>© 2025 Fashcognitive, Inc. All rights reserved.</span>\n          </div>\n          <div className=\"footer-social\">\n            <a href=\"#\" className=\"social-icon\" aria-label=\"Twitter\">\n              <img src=\"/placeholder.svg?height=20&width=20\" alt=\"Twitter\" />\n            </a>\n            <a href=\"#\" className=\"social-icon\" aria-label=\"LinkedIn\">\n              <img src=\"/placeholder.svg?height=20&width=20\" alt=\"LinkedIn\" />\n            </a>\n            <a href=\"#\" className=\"social-icon\" aria-label=\"Facebook\">\n              <img src=\"/placeholder.svg?height=20&width=20\" alt=\"Facebook\" />\n            </a>\n            <a href=\"#\" className=\"social-icon\" aria-label=\"Instagram\">\n              <img src=\"/placeholder.svg?height=20&width=20\" alt=\"Instagram\" />\n            </a>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default Home2;","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Create_template.tsx",["90","91","92","93"],"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport axios from \"axios\"\nimport {\n  ChevronDown,\n  ChevronUp,\n  Edit,\n  Plus,\n  Calendar,\n  User,\n  MapPin,\n  X,\n  Check,\n  ImageIcon,\n  Trash2,\n  Move,\n  Clock,\n  ArrowLeft,\n  Bell,\n  FileText,\n  MessageSquare,\n  CornerDownRight,\n  ArrowRight,\n  Equal,\n  Hash,\n  CircleEqual,\n  CircleSlash,\n  CircleDot,\n  ChevronsRight,\n  ChevronsLeft,\n  ListFilter,\n  AlertTriangle,\n  Upload,\n  Download,\n  Building,\n  Flag,\n  CheckCircle,\n} from \"lucide-react\"\nimport { jsPDF } from \"jspdf\"\nimport AccessManager from \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/AccessManager\"\nimport { fetchCSRFToken } from \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/csrf\"\nimport \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Create_template.css\"\nimport \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/TemplateBuilderLayout.css\"\nimport \"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/FixTransitions.css\"\n\n// Utility functions\nfunction getCookie(name: string): string | null {\n  let cookieValue = null\n  if (document.cookie && document.cookie !== \"\") {\n    const cookies = document.cookie.split(\";\")\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim()\n      if (cookie.startsWith(name + \"=\")) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1))\n        break\n      }\n    }\n  }\n  return cookieValue\n}\n\nconst resizeImage = (base64: string): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const img = document.createElement(\"img\")\n    img.crossOrigin = \"anonymous\"\n    img.src = base64\n    img.onload = () => {\n      const canvas = document.createElement(\"canvas\")\n      const MAX_WIDTH = 500\n      const scale = Math.min(MAX_WIDTH / img.width, 1)\n      canvas.width = img.width * scale\n      canvas.height = img.height * scale\n      const ctx = canvas.getContext(\"2d\")\n      if (ctx) {\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n        resolve(canvas.toDataURL(\"image/jpeg\", 0.8))\n      } else {\n        reject(new Error(\"Failed to get canvas context\"))\n      }\n    }\n    img.onerror = () => reject(new Error(\"Failed to load image\"))\n  })\n}\n\n// Types\ntype ResponseType =\n  | \"Site\"\n  | \"Inspection date\"\n  | \"Person\"\n  | \"Inspection location\"\n  | \"Text\"\n  | \"Number\"\n  | \"Checkbox\"\n  | \"Yes/No\"\n  | \"Multiple choice\"\n  | \"Slider\"\n  | \"Media\"\n  | \"Annotation\"\n  | \"Date & Time\"\n\ntype LogicOperator =\n  | \"equals\"\n  | \"notEquals\"\n  | \"greaterThan\"\n  | \"lessThan\"\n  | \"greaterThanOrEqual\"\n  | \"lessThanOrEqual\"\n  | \"between\"\n  | \"isOneOf\"\n  | \"isNotOneOf\"\n  | \"contains\"\n  | \"notContains\"\n  | \"startsWith\"\n  | \"endsWith\"\n  | \"matches\"\n\ntype TriggerAction = \"require_action\" | \"require_evidence\" | \"notify\" | \"ask_questions\" | \"display_message\"\n\ntype LogicCondition =\n  | \"is\"\n  | \"is not\"\n  | \"contains\"\n  | \"not contains\"\n  | \"starts with\"\n  | \"ends with\"\n  | \"matches (regex)\"\n  | \"less than\"\n  | \"less than or equal to\"\n  | \"equal to\"\n  | \"not equal to\"\n  | \"greater than or equal to\"\n  | \"greater than\"\n  | \"between\"\n  | \"not between\"\n  | \"is one of\"\n  | \"is not one of\"\n\ninterface LogicRule {\n  id: string\n  condition: LogicCondition\n  value: string | number | string[] | [number, number] | null\n  trigger: TriggerAction | null\n  triggerConfig?: any\n  message?: string\n  subQuestion?: {\n    text: string\n    responseType: ResponseType\n  }\n}\n\ninterface ConditionalLogicRule {\n  id: string\n  operator: LogicOperator\n  value: string | number | string[] | [number, number]\n  trigger: TriggerAction\n  subQuestion?: {\n    id: string\n    text: string\n    responseType: ResponseType\n    required: boolean\n    flagged: boolean\n    validation?: string\n  }\n  message?: string\n  actionDetails?: string\n  targetElementId?: string\n}\n\ninterface ConditionalLogic {\n  enabled: boolean\n  rules: ConditionalLogicRule[]\n}\n\ninterface Question {\n  id: string\n  text: string\n  responseType: ResponseType\n  required: boolean\n  flagged: boolean\n  options?: string[]\n  value?: string | string[] | boolean | number | null\n  conditionalLogic?: ConditionalLogic\n  conditionalProof?: string\n  logicRules?: LogicRule[]\n  multipleSelection?: boolean\n}\n\ninterface Section {\n  id: string\n  title: string\n  description?: string\n  questions: Question[]\n  isCollapsed: boolean\n}\n\ninterface Template {\n  id: string\n  title: string\n  description: string\n  sections: Section[]\n  lastSaved?: Date\n  lastPublished?: Date\n  logo?: string\n}\n\n// Utility type guard\nconst isStringArray = (value: unknown): value is string[] =>\n  Array.isArray(value) && value.every((v: unknown) => typeof v === \"string\")\n\n// Helper function to check if a trigger should be shown based on the question's logic rules\nconst shouldShowTrigger = (question: Question, triggerType: TriggerAction): boolean => {\n  if (!question.logicRules || question.logicRules.length === 0 || !question.value) return false\n\n  for (const rule of question.logicRules) {\n    if (rule.trigger !== triggerType) continue\n\n    // Evaluate the condition based on the current value\n    const value = question.value\n    let conditionMet = false\n\n    switch (rule.condition) {\n      case \"is\":\n        conditionMet = value === rule.value\n        break\n      case \"is not\":\n        conditionMet = value !== rule.value\n        break\n      case \"contains\":\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.includes(rule.value)\n        break\n      case \"not contains\":\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && !value.includes(rule.value)\n        break\n      case \"starts with\":\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.startsWith(rule.value)\n        break\n      case \"ends with\":\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.endsWith(rule.value)\n        break\n      case \"greater than\":\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value > rule.value\n        break\n      case \"less than\":\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value < rule.value\n        break\n      case \"equal to\":\n        conditionMet = value === rule.value\n        break\n      case \"not equal to\":\n        conditionMet = value !== rule.value\n        break\n      case \"greater than or equal to\":\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value >= rule.value\n        break\n      case \"less than or equal to\":\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value <= rule.value\n        break\n      case \"between\":\n        conditionMet =\n          Array.isArray(rule.value) &&\n          rule.value.length === 2 &&\n          typeof value === \"number\" &&\n          value > Number(rule.value[0]) &&\n          value < Number(rule.value[1])\n        break\n      case \"is one of\":\n        conditionMet = isStringArray(rule.value) && typeof value === \"string\" && rule.value.includes(value)\n        break\n      case \"is not one of\":\n        conditionMet = isStringArray(rule.value) && typeof value === \"string\" && !rule.value.includes(value)\n        break\n    }\n\n    if (conditionMet) {\n      return true\n    }\n  }\n\n  return false\n}\n\n// Helper function to get condition icon\nconst getConditionIcon = (condition: LogicCondition) => {\n  switch (condition) {\n    case \"is\":\n      return <CircleEqual className=\"condition-icon\" />\n    case \"is not\":\n      return <CircleSlash className=\"condition-icon\" />\n    case \"contains\":\n      return <CircleDot className=\"condition-icon\" />\n    case \"not contains\":\n      return <CircleSlash className=\"condition-icon\" />\n    case \"starts with\":\n      return <ChevronsRight className=\"condition-icon\" />\n    case \"ends with\":\n      return <ChevronsLeft className=\"condition-icon\" />\n    case \"matches (regex)\":\n      return <Hash className=\"condition-icon\" />\n    case \"less than\":\n      return <ArrowLeft className=\"condition-icon\" />\n    case \"less than or equal to\":\n      return <ArrowLeft className=\"condition-icon\" />\n    case \"equal to\":\n      return <Equal className=\"condition-icon\" />\n    case \"not equal to\":\n      return <CircleSlash className=\"condition-icon\" />\n    case \"greater than or equal to\":\n      return <ArrowRight className=\"condition-icon\" />\n    case \"greater than\":\n      return <ArrowRight className=\"condition-icon\" />\n    case \"between\":\n      return <ListFilter className=\"condition-icon\" />\n    case \"not between\":\n      return <ListFilter className=\"condition-icon\" />\n    case \"is one of\":\n      return <ListFilter className=\"condition-icon\" />\n    case \"is not one of\":\n      return <ListFilter className=\"condition-icon\" />\n    default:\n      return <Equal className=\"condition-icon\" />\n  }\n}\n\n// Enhanced Logic Components\nconst EnhancedLogicConditionSelector: React.FC<{\n  questionType: ResponseType\n  selectedCondition: LogicCondition\n  onConditionChange: (condition: LogicCondition) => void\n  className?: string\n}> = ({ questionType, selectedCondition, onConditionChange, className = \"\" }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [availableConditions, setAvailableConditions] = useState<LogicCondition[]>([])\n  const dropdownRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const conditions: LogicCondition[] = (() => {\n      switch (questionType) {\n        case \"Text\":\n          return [\"is\", \"is not\", \"contains\", \"not contains\", \"starts with\", \"ends with\", \"matches (regex)\"]\n        case \"Number\":\n        case \"Slider\":\n          return [\n            \"less than\",\n            \"less than or equal to\",\n            \"equal to\",\n            \"not equal to\",\n            \"greater than or equal to\",\n            \"greater than\",\n            \"between\",\n            \"not between\",\n          ]\n        case \"Checkbox\":\n        case \"Yes/No\":\n          return [\"is\", \"is not\"]\n        case \"Multiple choice\":\n          return [\"is\", \"is not\", \"is one of\", \"is not one of\"]\n        case \"Media\":\n        case \"Annotation\":\n          return [\"is\", \"is not\"]\n        case \"Date & Time\":\n        case \"Inspection date\":\n          return [\"is\", \"is not\", \"less than\", \"greater than\", \"between\"]\n        case \"Site\":\n        case \"Person\":\n        case \"Inspection location\":\n          return [\"is\", \"is not\", \"is one of\", \"is not one of\"]\n        default:\n          return [\"is\", \"is not\"]\n      }\n    })()\n\n    setAvailableConditions(conditions)\n    if (!conditions.includes(selectedCondition) && conditions.length > 0) {\n      onConditionChange(conditions[0])\n    }\n  }, [questionType, selectedCondition, onConditionChange])\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false)\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\n  }, [])\n\n  return (\n    <div className={`enhanced-logic-condition-selector ${className}`} ref={dropdownRef}>\n      <div className=\"selected-condition\" onClick={() => setIsOpen(!isOpen)}>\n        {getConditionIcon(selectedCondition)}\n        <span className=\"condition-text\">{selectedCondition}</span>\n        <ChevronDown className={`dropdown-arrow ${isOpen ? \"rotate\" : \"\"}`} />\n      </div>\n      {isOpen && (\n        <div className=\"enhanced-condition-dropdown\">\n          {availableConditions.map((condition) => (\n            <div\n              key={condition}\n              className={`enhanced-condition-option ${selectedCondition === condition ? \"selected\" : \"\"}`}\n              onClick={() => {\n                onConditionChange(condition)\n                setIsOpen(false)\n              }}\n            >\n              {getConditionIcon(condition)}\n              <span>{condition}</span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst EnhancedLogicValueInput: React.FC<{\n  questionType: ResponseType\n  condition: LogicCondition\n  value: string | number | string[] | [number, number] | null\n  onChange: (value: string | number | string[] | [number, number]) => void\n  options?: string[]\n  className?: string\n}> = ({ questionType, condition, value, onChange, options = [], className = \"\" }) => {\n  const [rangeStart, setRangeStart] = useState(\"\")\n  const [rangeEnd, setRangeEnd] = useState(\"\")\n\n  useEffect(() => {\n    if (Array.isArray(value) && value.length === 2 && [\"between\", \"not between\"].includes(condition)) {\n      setRangeStart(String(value[0] || \"\"))\n      setRangeEnd(String(value[1] || \"\"))\n    }\n  }, [value, condition])\n\n  const handleRangeChange = () => {\n    if (rangeStart && rangeEnd) {\n      if (questionType === \"Number\") {\n        onChange([Number(rangeStart), Number(rangeEnd)] as [number, number])\n      } else {\n        onChange([rangeStart, rangeEnd] as [string, string])\n      }\n    }\n  }\n\n  const handleOptionToggle = (option: string) => {\n    const currentValues = isStringArray(value) ? value : []\n    const newValues = currentValues.includes(option)\n      ? currentValues.filter((v) => v !== option)\n      : [...currentValues, option]\n    onChange(newValues)\n  }\n\n  if ([\"between\", \"not between\"].includes(condition)) {\n    return (\n      <div className={`enhanced-logic-range-input ${className}`}>\n        <input\n          type={questionType === \"Number\" ? \"number\" : \"text\"}\n          placeholder=\"Min\"\n          value={rangeStart}\n          onChange={(e) => {\n            setRangeStart(e.target.value)\n            if (rangeEnd) handleRangeChange()\n          }}\n          className=\"range-input-min\"\n        />\n        <span className=\"range-separator\">and</span>\n        <input\n          type={questionType === \"Number\" ? \"number\" : \"text\"}\n          placeholder=\"Max\"\n          value={rangeEnd}\n          onChange={(e) => {\n            setRangeEnd(e.target.value)\n            if (rangeStart) handleRangeChange()\n          }}\n          className=\"range-input-max\"\n        />\n      </div>\n    )\n  }\n\n  if ([\"is one of\", \"is not one of\"].includes(condition) && options.length > 0) {\n    const currentValues = isStringArray(value) ? value : []\n    return (\n      <div className={`enhanced-logic-multi-select ${className}`}>\n        {options.map((option) => (\n          <label key={option} className=\"enhanced-multi-select-option\">\n            <input\n              type=\"checkbox\"\n              className=\"sr-only\"\n              checked={currentValues.includes(option)}\n              onChange={() => handleOptionToggle(option)}\n            />\n            <span className={currentValues.includes(option) ? \"selected\" : \"\"}>{option}</span>\n          </label>\n        ))}\n      </div>\n    )\n  }\n\n  if (questionType === \"Yes/No\") {\n    return (\n      <div className={`enhanced-logic-yes-no-select ${className}`}>\n        {[\"Yes\", \"No\", \"N/A\"].map((opt) => (\n          <label key={opt} className=\"enhanced-yes-no-option\">\n            <input\n              type=\"radio\"\n              className=\"sr-only\"\n              checked={value === opt}\n              onChange={() => onChange(opt)}\n              name=\"yes-no-value\"\n            />\n            <span className={value === opt ? \"selected\" : \"\"}>{opt}</span>\n          </label>\n        ))}\n      </div>\n    )\n  }\n\n  if (questionType === \"Number\") {\n    return (\n      <input\n        type=\"number\"\n        value={(value as number) ?? \"\"}\n        onChange={(e) => onChange(Number(e.target.value))}\n        placeholder=\"Enter value\"\n        className={`enhanced-logic-number-input ${className}`}\n      />\n    )\n  }\n\n  return (\n    <input\n      type=\"text\"\n      value={(value as string) ?? \"\"}\n      onChange={(e) => onChange(e.target.value)}\n      placeholder=\"Enter value\"\n      className={`enhanced-logic-text-input ${className}`}\n    />\n  )\n}\n\nconst EnhancedLogicTriggerSelector: React.FC<{\n  selectedTrigger: TriggerAction | null\n  onTriggerSelect: (trigger: TriggerAction | null) => void\n  onConfigChange?: (config: any) => void\n  className?: string\n}> = ({ selectedTrigger, onTriggerSelect, onConfigChange, className = \"\" }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const dropdownRef = useRef<HTMLDivElement>(null)\n\n  const triggers: { value: TriggerAction; label: string; icon: React.ReactNode; description: string }[] = [\n    {\n      value: \"require_action\",\n      label: \"Require action\",\n      icon: <FileText className=\"trigger-icon\" />,\n      description: \"Require the user to take an action\",\n    },\n    {\n      value: \"require_evidence\",\n      label: \"Require evidence\",\n      icon: <ImageIcon className=\"trigger-icon\" />,\n      description: \"Require the user to upload evidence\",\n    },\n    {\n      value: \"notify\",\n      label: \"Notify\",\n      icon: <Bell className=\"trigger-icon\" />,\n      description: \"Send a notification\",\n    },\n    {\n      value: \"ask_questions\",\n      label: \"Ask questions\",\n      icon: <MessageSquare className=\"trigger-icon\" />,\n      description: \"Ask follow-up questions\",\n    },\n    {\n      value: \"display_message\",\n      label: \"Display message\",\n      icon: <AlertTriangle className=\"trigger-icon\" />,\n      description: \"Show a message to the user\",\n    },\n  ]\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false)\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\n  }, [])\n\n  const selectedTriggerInfo = selectedTrigger ? triggers.find((t) => t.value === selectedTrigger) : null\n\n  return (\n    <div className={`enhanced-logic-trigger-selector ${className}`} ref={dropdownRef}>\n      {!selectedTrigger ? (\n        <button className=\"enhanced-trigger-button\" onClick={() => setIsOpen(!isOpen)}>\n          <Plus className=\"trigger-plus-icon\" />\n          <span>Add trigger</span>\n        </button>\n      ) : (\n        <div className=\"enhanced-selected-trigger\">\n          {selectedTriggerInfo?.icon}\n          <span>{selectedTriggerInfo?.label}</span>\n          <button\n            className=\"enhanced-clear-trigger\"\n            onClick={(e) => {\n              e.stopPropagation()\n              onTriggerSelect(null)\n            }}\n          >\n            <X className=\"clear-icon\" />\n          </button>\n        </div>\n      )}\n\n      {isOpen && !selectedTrigger && (\n        <div className=\"enhanced-trigger-dropdown\">\n          {triggers.map((trigger) => (\n            <div\n              key={trigger.value}\n              className=\"enhanced-trigger-option\"\n              onClick={() => {\n                onTriggerSelect(trigger.value)\n                setIsOpen(false)\n              }}\n            >\n              <div className=\"enhanced-trigger-icon-container\">{trigger.icon}</div>\n              <div className=\"enhanced-trigger-details\">\n                <div className=\"enhanced-trigger-label\">{trigger.label}</div>\n                <div className=\"enhanced-trigger-description\">{trigger.description}</div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst EnhancedLogicTriggerConfig: React.FC<{\n  trigger: TriggerAction\n  config: any\n  onConfigChange: (config: any) => void\n}> = ({ trigger, config, onConfigChange }) => {\n  const [message, setMessage] = useState(config?.message || \"\")\n  const [questionText, setQuestionText] = useState(config?.subQuestion?.text || \"\")\n  const [responseType, setResponseType] = useState<ResponseType>(config?.subQuestion?.responseType || \"Text\")\n\n  useEffect(() => {\n    if (trigger === \"display_message\") {\n      onConfigChange({ ...config, message })\n    } else if (trigger === \"ask_questions\") {\n      onConfigChange({\n        ...config,\n        subQuestion: {\n          text: questionText,\n          responseType,\n        },\n      })\n    }\n  }, [trigger, message, questionText, responseType, config, onConfigChange])\n\n  if (trigger === \"display_message\") {\n    return (\n      <div className=\"enhanced-trigger-config\">\n        <label className=\"enhanced-trigger-config-label\">Message to display:</label>\n        <textarea\n          className=\"enhanced-logic-text-input\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"Enter message to display to the user\"\n          rows={3}\n        />\n      </div>\n    )\n  }\n\n  if (trigger === \"ask_questions\") {\n    return (\n      <div className=\"enhanced-trigger-config\">\n        <label className=\"enhanced-trigger-config-label\">Follow-up question:</label>\n        <input\n          type=\"text\"\n          className=\"enhanced-logic-text-input\"\n          value={questionText}\n          onChange={(e) => setQuestionText(e.target.value)}\n          placeholder=\"Enter follow-up question\"\n        />\n        <label className=\"enhanced-trigger-config-label mt-2\">Response type:</label>\n        <select\n          className=\"enhanced-logic-text-input\"\n          value={responseType}\n          onChange={(e) => setResponseType(e.target.value as ResponseType)}\n        >\n          <option value=\"Text\">Text</option>\n          <option value=\"Number\">Number</option>\n          <option value=\"Yes/No\">Yes/No</option>\n          <option value=\"Multiple choice\">Multiple choice</option>\n        </select>\n      </div>\n    )\n  }\n\n  return null\n}\n\nconst generateRuleId = () => `rule_${Math.random().toString(36).substring(2, 9)}`\n\nconst EnhancedLogicRuleBuilder: React.FC<{\n  questionType: ResponseType\n  rule: LogicRule\n  options?: string[]\n  onRuleChange: (rule: LogicRule) => void\n  onRuleDelete: () => void\n  questions?: Array<{ id: string; text: string }>\n  className?: string\n}> = ({ questionType, rule, options = [], onRuleChange, onRuleDelete, questions = [], className = \"\" }) => {\n  const [localRule, setLocalRule] = useState<LogicRule>(rule)\n  const [showConfig, setShowConfig] = useState(false)\n\n  useEffect(() => {\n    onRuleChange(localRule)\n  }, [localRule, onRuleChange])\n\n  useEffect(() => {\n    setLocalRule(rule)\n  }, [rule])\n\n  return (\n    <div className={`enhanced-logic-rule-builder ${className}`}>\n      <div className=\"enhanced-logic-rule-content\">\n        <div className=\"enhanced-logic-condition-row\">\n          <span className=\"enhanced-if-label\">If answer</span>\n          <EnhancedLogicConditionSelector\n            questionType={questionType}\n            selectedCondition={localRule.condition}\n            onConditionChange={(condition) => setLocalRule({ ...localRule, condition })}\n          />\n          <EnhancedLogicValueInput\n            questionType={questionType}\n            condition={localRule.condition}\n            value={localRule.value}\n            onChange={(value) => setLocalRule({ ...localRule, value })}\n            options={options}\n          />\n        </div>\n        <div className=\"enhanced-logic-trigger-row\">\n          <span className=\"enhanced-then-label\">then</span>\n          <EnhancedLogicTriggerSelector\n            selectedTrigger={localRule.trigger}\n            onTriggerSelect={(trigger) => {\n              setLocalRule({\n                ...localRule,\n                trigger,\n                triggerConfig: trigger ? {} : undefined,\n                message: trigger === \"display_message\" ? localRule.message || \"\" : undefined,\n                subQuestion:\n                  trigger === \"ask_questions\" ? localRule.subQuestion || { text: \"\", responseType: \"Text\" } : undefined,\n              })\n              setShowConfig(!!trigger)\n            }}\n            onConfigChange={(config) => setLocalRule({ ...localRule, triggerConfig: config })}\n          />\n          {localRule.trigger && (\n            <button\n              className=\"enhanced-config-button\"\n              onClick={() => setShowConfig(!showConfig)}\n              title=\"Configure trigger\"\n            >\n              <Edit size={16} />\n            </button>\n          )}\n        </div>\n        {showConfig && localRule.trigger && (\n          <div className=\"enhanced-logic-config-row\">\n            <EnhancedLogicTriggerConfig\n              trigger={localRule.trigger}\n              config={{\n                message: localRule.message,\n                subQuestion: localRule.subQuestion,\n              }}\n              onConfigChange={(config) => {\n                setLocalRule({\n                  ...localRule,\n                  message: config.message,\n                  subQuestion: config.subQuestion,\n                })\n              }}\n            />\n          </div>\n        )}\n      </div>\n      <button className=\"enhanced-delete-rule-button\" onClick={onRuleDelete} aria-label=\"Delete rule\">\n        <Trash2 className=\"delete-icon\" />\n      </button>\n    </div>\n  )\n}\n\nconst EnhancedLogicRulesContainer: React.FC<{\n  questionType: ResponseType\n  rules: LogicRule[]\n  options?: string[]\n  onRulesChange: (rules: LogicRule[]) => void\n  questions?: Array<{ id: string; text: string }>\n  onClose: () => void\n  className?: string\n}> = ({ questionType, rules, options = [], onRulesChange, questions = [], onClose, className = \"\" }) => {\n  const addNewRule = () => {\n    const defaultCondition: LogicCondition = questionType === \"Number\" ? \"equal to\" : \"is\"\n    const newRule: LogicRule = {\n      id: generateRuleId(),\n      condition: defaultCondition,\n      value: null,\n      trigger: null,\n    }\n    onRulesChange([...rules, newRule])\n  }\n\n  const updateRule = (index: number, updatedRule: LogicRule) => {\n    const newRules = [...rules]\n    newRules[index] = updatedRule\n    onRulesChange(newRules)\n  }\n\n  const deleteRule = (index: number) => {\n    const newRules = [...rules]\n    newRules.splice(index, 1)\n    onRulesChange(newRules)\n  }\n\n  return (\n    <div className={`enhanced-logic-rules-container ${className}`}>\n      <div className=\"enhanced-logic-header\">\n        <h3>Logic Rules</h3>\n        <button className=\"enhanced-close-button\" onClick={onClose} aria-label=\"Close\">\n          <X className=\"close-icon\" />\n        </button>\n      </div>\n\n      <div className=\"enhanced-logic-rules-list\">\n        {rules.length === 0 ? (\n          <div className=\"enhanced-empty-rules\">\n            <p>No rules added yet. Add your first rule below.</p>\n          </div>\n        ) : (\n          rules.map((rule, index) => (\n            <EnhancedLogicRuleBuilder\n              key={rule.id}\n              questionType={questionType}\n              rule={rule}\n              options={options}\n              onRuleChange={(updatedRule) => updateRule(index, updatedRule)}\n              onRuleDelete={() => deleteRule(index)}\n              questions={questions}\n              className=\"enhanced-logic-rule-item\"\n            />\n          ))\n        )}\n      </div>\n\n      <div className=\"enhanced-logic-rules-actions\">\n        <button className=\"enhanced-add-rule-button\" onClick={addNewRule}>\n          <Plus className=\"add-icon\" />\n          <span>Add rule</span>\n        </button>\n        <button className=\"enhanced-done-button\" onClick={onClose}>\n          Done\n        </button>\n      </div>\n    </div>\n  )\n}\n\nconst EnhancedAddLogicButton: React.FC<{\n  hasRules: boolean\n  onClick: () => void\n  className?: string\n}> = ({ hasRules, onClick, className = \"\" }) => {\n  return (\n    <button className={`enhanced-add-logic-button ${hasRules ? \"has-rules\" : \"\"} ${className}`} onClick={onClick}>\n      <CornerDownRight className=\"logic-icon\" />\n      <span>{hasRules ? \"Edit logic\" : \"Add logic\"}</span>\n      {hasRules && <span className=\"rules-badge\">!</span>}\n    </button>\n  )\n}\n\n// Enhanced Report Component\nconst Report: React.FC<{ template: Template }> = ({ template }) => {\n  const [activeTab, setActiveTab] = useState(\"summary\")\n\n  const generatePDF = async () => {\n    try {\n      // Show loading indicator\n      const loadingIndicator = document.createElement(\"div\")\n      loadingIndicator.style.position = \"fixed\"\n      loadingIndicator.style.top = \"0\"\n      loadingIndicator.style.left = \"0\"\n      loadingIndicator.style.width = \"100%\"\n      loadingIndicator.style.height = \"100%\"\n      loadingIndicator.style.backgroundColor = \"rgba(255, 255, 255, 0.8)\"\n      loadingIndicator.style.display = \"flex\"\n      loadingIndicator.style.justifyContent = \"center\"\n      loadingIndicator.style.alignItems = \"center\"\n      loadingIndicator.innerHTML =\n        '<div style=\"padding: 20px; background: white; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);\">Generating PDF...</div>'\n      document.body.appendChild(loadingIndicator)\n\n      // Create PDF document with professional layout\n      const doc = new jsPDF({\n        orientation: \"portrait\",\n        unit: \"mm\",\n        format: \"a4\",\n        compress: true,\n      })\n\n      const pageWidth = doc.internal.pageSize.getWidth()\n      const pageHeight = doc.internal.pageSize.getHeight()\n      const margin = 15\n      let yOffset = margin\n\n      // Add header with template title\n      doc.setFontSize(24)\n      doc.setTextColor(0, 0, 0)\n      doc.text(template.title, margin, yOffset + 10)\n\n      // Add date and inspector\n      doc.setFontSize(12)\n      doc.setTextColor(100, 100, 100)\n\n      const preparedBy =\n        template.sections\n          .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\n          ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"\n\n      const dateText = `${new Date().toLocaleDateString()} / ${preparedBy}`\n      doc.text(dateText, margin, yOffset + 20)\n\n      // Add status badge\n      const totalQuestions = template.sections.reduce((sum, section) => sum + section.questions.length, 0)\n      const answeredQuestions = template.sections.reduce(\n        (sum, section) => sum + section.questions.filter((q) => q.value !== null && q.value !== undefined).length,\n        0,\n      )\n      const scorePercentage = totalQuestions > 0 ? Math.round((answeredQuestions / totalQuestions) * 100) : 0\n\n      const statusText = scorePercentage === 100 ? \"Complete\" : \"Incomplete\"\n      const statusWidth = (doc.getStringUnitWidth(statusText) * 12) / doc.internal.scaleFactor\n\n      doc.setFillColor(\n        scorePercentage === 100 ? 76 : 244,\n        scorePercentage === 100 ? 175 : 67,\n        scorePercentage === 100 ? 80 : 54,\n      )\n      doc.roundedRect(pageWidth - margin - statusWidth - 10, yOffset + 5, statusWidth + 10, 8, 4, 4, \"F\")\n\n      doc.setTextColor(255, 255, 255)\n      doc.setFontSize(10)\n      doc.text(statusText, pageWidth - margin - 5, yOffset + 10, { align: \"right\" })\n\n      yOffset += 30\n\n      // Add horizontal line\n      doc.setDrawColor(220, 220, 220)\n      doc.line(margin, yOffset, pageWidth - margin, yOffset)\n      yOffset += 15\n\n      // Add score section\n      doc.setFontSize(14)\n      doc.setTextColor(100, 100, 100)\n      doc.text(\"Score\", margin, yOffset)\n      yOffset += 10\n\n      doc.setFontSize(16)\n      doc.setTextColor(0, 0, 0)\n      doc.text(`${answeredQuestions}/${totalQuestions} (${scorePercentage}%)`, margin, yOffset)\n      yOffset += 5\n\n      // Draw score bar\n      doc.setFillColor(240, 240, 240)\n      doc.rect(margin, yOffset, pageWidth - margin * 2, 5, \"F\")\n      doc.setFillColor(76, 175, 80)\n      doc.rect(margin, yOffset, (pageWidth - margin * 2) * (scorePercentage / 100), 5, \"F\")\n      yOffset += 20\n\n      // Add stats section in a grid layout\n      const flaggedItems = template.sections.reduce(\n        (sum, section) => sum + section.questions.filter((q) => q.flagged).length,\n        0,\n      )\n\n      const actionItems = template.sections.reduce(\n        (sum, section) =>\n          sum +\n          section.questions.filter(\n            (q) => shouldShowTrigger(q, \"require_action\") || shouldShowTrigger(q, \"require_evidence\"),\n          ).length,\n        0,\n      )\n\n      // Create a grid for stats\n      const statBoxWidth = (pageWidth - margin * 2 - 20) / 3\n\n      // Flagged items box\n      doc.setFontSize(12)\n      doc.setTextColor(100, 100, 100)\n      doc.text(\"Flagged items\", margin, yOffset + 15)\n\n      doc.setFontSize(16)\n      doc.setTextColor(0, 0, 0)\n      doc.text(flaggedItems.toString(), margin, yOffset + 30)\n\n      // Actions box\n      doc.setFontSize(12)\n      doc.setTextColor(100, 100, 100)\n      doc.text(\"Actions\", margin + statBoxWidth + 10, yOffset + 15)\n\n      doc.setFontSize(16)\n      doc.setTextColor(0, 0, 0)\n      doc.text(actionItems.toString(), margin + statBoxWidth + 10, yOffset + 30)\n\n      // Status box\n      doc.setFontSize(12)\n      doc.setTextColor(100, 100, 100)\n      doc.text(\"Status\", margin + statBoxWidth * 2 + 20, yOffset + 15)\n\n      doc.setFontSize(16)\n      doc.setTextColor(0, 0, 0)\n      doc.text(\"In progress\", margin + statBoxWidth * 2 + 20, yOffset + 30)\n\n      yOffset += 50\n\n      // Add horizontal line\n      doc.setDrawColor(220, 220, 220)\n      doc.line(margin, yOffset, pageWidth - margin, yOffset)\n      yOffset += 15\n\n      // Add tabs section\n      doc.setFillColor(240, 240, 240)\n      doc.rect(margin, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\n      doc.setFillColor(255, 255, 255)\n      doc.rect(margin + (pageWidth - margin * 2) / 3, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\n      doc.setFillColor(240, 240, 240)\n      doc.rect(margin + (2 * (pageWidth - margin * 2)) / 3, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\n\n      doc.setFontSize(10)\n      doc.setTextColor(0, 0, 0)\n      doc.text(\"Summary\", margin + (pageWidth - margin * 2) / 6, yOffset + 6, { align: \"center\" })\n      doc.setTextColor(100, 100, 100)\n      doc.text(\"Flagged Items\", margin + (pageWidth - margin * 2) / 2, yOffset + 6, { align: \"center\" })\n      doc.text(\"Media\", margin + (5 * (pageWidth - margin * 2)) / 6, yOffset + 6, { align: \"center\" })\n\n      yOffset += 20\n\n      // Add inspection summary\n      doc.setFontSize(16)\n      doc.setTextColor(0, 0, 0)\n      doc.text(\"Inspection Summary\", margin, yOffset)\n      yOffset += 10\n\n      doc.setFontSize(12)\n      doc.setTextColor(100, 100, 100)\n      doc.text(\n        `This report provides an overview of the safety inspection conducted at ${template.title}.`,\n        margin,\n        yOffset,\n      )\n      yOffset += 20\n\n      // Process each question with answer\n      const processedImages = new Map() // Cache for processed images\n\n      for (const section of template.sections) {\n        for (const question of section.questions) {\n          if (question.value !== null && question.value !== undefined) {\n            // Check if we need a new page\n            if (yOffset > pageHeight - 50) {\n              doc.addPage()\n              yOffset = margin + 20\n            }\n\n            // Draw question box\n            doc.setFillColor(255, 255, 255)\n            doc.rect(margin, yOffset, pageWidth - margin * 2, 40, \"F\")\n            doc.setDrawColor(230, 230, 230)\n            doc.rect(margin, yOffset, pageWidth - margin * 2, 40, \"S\")\n\n            // Add question icon based on value\n            if (question.value === \"Yes\" || question.value === true) {\n              doc.setFillColor(76, 175, 80)\n              doc.circle(margin + 15, yOffset + 15, 5, \"F\")\n            } else {\n              doc.setFillColor(244, 67, 54)\n              doc.circle(margin + 15, yOffset + 15, 5, \"F\")\n            }\n\n            // Add question text\n            doc.setFontSize(12)\n            doc.setTextColor(0, 0, 0)\n            doc.text(question.text, margin + 30, yOffset + 15)\n\n            // Add answer\n            doc.setFontSize(11)\n            doc.setTextColor(100, 100, 100)\n            const answerText =\n              question.responseType === \"Media\" || question.responseType === \"Annotation\"\n                ? \"Media uploaded\"\n                : String(question.value)\n            doc.text(answerText, margin + 30, yOffset + 30)\n\n            // Add flag if flagged\n            if (question.flagged) {\n              doc.setFillColor(244, 67, 54)\n              doc.rect(pageWidth - margin - 60, yOffset + 10, 50, 20, \"F\")\n              doc.setTextColor(255, 255, 255)\n              doc.text(\"Flagged\", pageWidth - margin - 50, yOffset + 22)\n            }\n\n            yOffset += 50\n\n            // Add media if available\n            if ((question.responseType === \"Media\" || question.responseType === \"Annotation\") && question.value) {\n              try {\n                // Check if we need a new page for the image\n                if (yOffset > pageHeight - 100) {\n                  doc.addPage()\n                  yOffset = margin + 20\n                }\n\n                // Check if we've already processed this image\n                const imageValue = question.value as string\n                let processedImage\n\n                if (processedImages.has(imageValue)) {\n                  processedImage = processedImages.get(imageValue)\n                } else {\n                  // Process the image to reduce size\n                  const img = document.createElement(\"img\")\n                  img.crossOrigin = \"anonymous\"\n\n                  // Create a promise to handle the image loading\n                  const imageLoaded = new Promise((resolve, reject) => {\n                    img.onload = () => {\n                      const canvas = document.createElement(\"canvas\")\n                      const MAX_WIDTH = 600\n                      const MAX_HEIGHT = 400\n\n                      let width = img.width\n                      let height = img.height\n\n                      // Calculate new dimensions while maintaining aspect ratio\n                      if (width > height) {\n                        if (width > MAX_WIDTH) {\n                          height *= MAX_WIDTH / width\n                          width = MAX_WIDTH\n                        }\n                      } else {\n                        if (height > MAX_HEIGHT) {\n                          width *= MAX_HEIGHT / height\n                          height = MAX_HEIGHT\n                        }\n                      }\n\n                      canvas.width = width\n                      canvas.height = height\n\n                      const ctx = canvas.getContext(\"2d\")\n                      if (ctx) {\n                        ctx.drawImage(img, 0, 0, width, height)\n                        // Use lower quality JPEG for smaller file size\n                        const optimizedImage = canvas.toDataURL(\"image/jpeg\", 0.5)\n                        processedImages.set(imageValue, optimizedImage)\n                        resolve(optimizedImage)\n                      } else {\n                        reject(new Error(\"Could not get canvas context\"))\n                      }\n                    }\n                    img.onerror = () => reject(new Error(\"Failed to load image\"))\n                  })\n\n                  img.src = imageValue\n\n                  try {\n                    processedImage = await imageLoaded\n                  } catch (err) {\n                    console.error(\"Error processing image:\", err)\n                    processedImage = imageValue // Fall back to original image\n                  }\n                }\n\n                // Add the image to the PDF\n                doc.addImage(processedImage, \"JPEG\", margin, yOffset, pageWidth - margin * 2, 80, undefined, \"FAST\")\n                yOffset += 90\n              } catch (error) {\n                console.error(\"Error adding image to PDF:\", error)\n                // Add error message instead of image\n                doc.setTextColor(244, 67, 54)\n                doc.text(\"Error loading image\", margin, yOffset + 10)\n                yOffset += 20\n              }\n            }\n          }\n        }\n      }\n\n      // Add footer to all pages\n      const totalPages = (doc as any).internal.pages.length - 1\n      for (let i = 1; i <= totalPages; i++) {\n        doc.setPage(i)\n        doc.setFontSize(10)\n        doc.setTextColor(150, 150, 150)\n        doc.text(`Generated on ${new Date().toLocaleString()}`, margin, pageHeight - 10)\n        doc.text(`Page ${i} of ${totalPages}`, pageWidth - margin, pageHeight - 10, { align: \"right\" })\n      }\n\n      // Save the PDF\n      doc.save(`${template.title}_Report.pdf`)\n\n      // Remove loading indicator\n      document.body.removeChild(loadingIndicator)\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error)\n      alert(\"There was an error generating the PDF. Please try again.\")\n\n      // Make sure to remove loading indicator if there's an error\n      const loadingIndicator = document.querySelector('[style*=\"position: fixed\"][style*=\"z-index: 9999\"]')\n      if (loadingIndicator && loadingIndicator.parentNode) {\n        loadingIndicator.parentNode.removeChild(loadingIndicator)\n      }\n    }\n  }\n\n  // Calculate report statistics\n  const totalQuestions = template.sections.reduce((sum, section) => sum + section.questions.length, 0)\n  const answeredQuestions = template.sections.reduce(\n    (sum, section) => sum + section.questions.filter((q) => q.value !== null && q.value !== undefined).length,\n    0,\n  )\n  const scorePercentage = totalQuestions > 0 ? Math.round((answeredQuestions / totalQuestions) * 100) : 0\n\n  // Count flagged items and actions\n  const flaggedItems = template.sections.reduce(\n    (sum, section) => sum + section.questions.filter((q) => q.flagged).length,\n    0,\n  )\n  const actionItems = template.sections.reduce(\n    (sum, section) =>\n      sum +\n      section.questions.filter(\n        (q) => shouldShowTrigger(q, \"require_action\") || shouldShowTrigger(q, \"require_evidence\"),\n      ).length,\n    0,\n  )\n\n  // Get media items\n  const mediaItems = template.sections.reduce(\n    (items, section) => {\n      const sectionMedia = section.questions\n        .filter((q) => (q.responseType === \"Media\" || q.responseType === \"Annotation\") && q.value)\n        .map((q) => ({\n          id: q.id,\n          caption: q.text,\n          thumbnail: q.value as string,\n        }))\n      return [...items, ...sectionMedia]\n    },\n    [] as Array<{ id: string; caption: string; thumbnail: string }>,\n  )\n\n  return (\n    <div className=\"report-container\">\n      <div className=\"report-header\">\n        <h2>Report Preview</h2>\n        <button className=\"generate-pdf-button\" onClick={generatePDF}>\n          <Download className=\"download-icon\" />\n          Download PDF Report\n        </button>\n      </div>\n\n      <div className=\"report-card\">\n        <div className=\"report-card-header\">\n          <div className=\"report-title-section\">\n            {template.logo && (\n              <div className=\"report-logo\">\n                <img src={template.logo || \"/placeholder.svg\"} alt=\"Template logo\" />\n              </div>\n            )}\n            <div className=\"report-title-info\">\n              <h3>{template.title}</h3>\n              <p className=\"report-date\">\n                {new Date().toLocaleDateString()} /{\" \"}\n                {template.sections\n                  .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\n                  ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"}\n              </p>\n            </div>\n          </div>\n          <div className=\"report-completion-badge\">{scorePercentage === 100 ? \"Complete\" : \"Incomplete\"}</div>\n        </div>\n\n        <div className=\"report-stats\">\n          <div className=\"report-score-container\">\n            <p className=\"report-stat-label\">Score</p>\n            <div className=\"report-score-bar\">\n              <div className=\"report-score-progress\" style={{ width: `${scorePercentage}%` }}></div>\n            </div>\n            <span className=\"report-score-text\">\n              {answeredQuestions}/{totalQuestions} ({scorePercentage}%)\n            </span>\n          </div>\n\n          <div className=\"report-stat-grid\">\n            <div className=\"report-stat\">\n              <p className=\"report-stat-label\">Flagged items</p>\n              <div className=\"report-stat-value\">\n                <Flag className=\"report-stat-icon flagged\" />\n                <span>{flaggedItems}</span>\n              </div>\n            </div>\n            <div className=\"report-stat\">\n              <p className=\"report-stat-label\">Actions</p>\n              <div className=\"report-stat-value\">\n                <AlertTriangle className=\"report-stat-icon action\" />\n                <span>{actionItems}</span>\n              </div>\n            </div>\n            <div className=\"report-stat\">\n              <p className=\"report-stat-label\">Status</p>\n              <div className=\"report-stat-value\">\n                <Clock className=\"report-stat-icon status\" />\n                <span>In progress</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"report-site-info\">\n          <div className=\"report-site-info-grid\">\n            <div className=\"report-site-info-item\">\n              <div className=\"report-site-info-label\">\n                <Building className=\"report-site-info-icon\" />\n                <p>Site conducted</p>\n              </div>\n              <p className=\"report-site-info-value\">\n                {template.sections\n                  .find((s) => s.questions.some((q) => q.responseType === \"Site\" && q.value))\n                  ?.questions.find((q) => q.responseType === \"Site\" && q.value)?.value || \"Not specified\"}\n              </p>\n            </div>\n            <div className=\"report-site-info-item\">\n              <div className=\"report-site-info-label\">\n                <Calendar className=\"report-site-info-icon\" />\n                <p>Conducted on</p>\n              </div>\n              <p className=\"report-site-info-value\">\n                {template.sections\n                  .find((s) => s.questions.some((q) => q.responseType === \"Inspection date\" && q.value))\n                  ?.questions.find((q) => q.responseType === \"Inspection date\" && q.value)?.value ||\n                  new Date().toLocaleDateString()}\n              </p>\n            </div>\n            <div className=\"report-site-info-item\">\n              <div className=\"report-site-info-label\">\n                <User className=\"report-site-info-icon\" />\n                <p>Prepared by</p>\n              </div>\n              <p className=\"report-site-info-value\">\n                {template.sections\n                  .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\n                  ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Not specified\"}\n              </p>\n            </div>\n            <div className=\"report-site-info-item\">\n              <div className=\"report-site-info-label\">\n                <MapPin className=\"report-site-info-icon\" />\n                <p>Location</p>\n              </div>\n              <p className=\"report-site-info-value\">\n                {template.sections\n                  .find((s) => s.questions.some((q) => q.responseType === \"Inspection location\" && q.value))\n                  ?.questions.find((q) => q.responseType === \"Inspection location\" && q.value)?.value ||\n                  \"Not specified\"}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"report-tabs\">\n        <div className=\"report-tab-buttons\">\n          <button\n            className={`report-tab-button ${activeTab === \"summary\" ? \"active\" : \"\"}`}\n            onClick={() => setActiveTab(\"summary\")}\n          >\n            Summary\n          </button>\n          <button\n            className={`report-tab-button ${activeTab === \"flagged\" ? \"active\" : \"\"}`}\n            onClick={() => setActiveTab(\"flagged\")}\n          >\n            Flagged Items\n          </button>\n          <button\n            className={`report-tab-button ${activeTab === \"media\" ? \"active\" : \"\"}`}\n            onClick={() => setActiveTab(\"media\")}\n          >\n            Media\n          </button>\n        </div>\n\n        <div className=\"report-tab-content\">\n          {activeTab === \"summary\" && (\n            <div className=\"report-summary\">\n              <h3 className=\"report-section-title\">Inspection Summary</h3>\n              <p className=\"report-section-description\">\n                This report provides an overview of the safety inspection conducted at{\" \"}\n                {template.sections\n                  .find((s) => s.questions.some((q) => q.responseType === \"Site\" && q.value))\n                  ?.questions.find((q) => q.responseType === \"Site\" && q.value)?.value || \"the site\"}\n                .\n              </p>\n\n              <div className=\"report-questions-list\">\n                {template.sections.map((section) =>\n                  section.questions\n                    .filter((q) => q.value !== null && q.value !== undefined)\n                    .map((question) => (\n                      <div key={question.id} className={`report-question-item ${question.flagged ? \"flagged\" : \"\"}`}>\n                        <div className=\"report-question-header\">\n                          <div className=\"report-question-icon\">\n                            {question.value === \"Yes\" || question.value === true ? (\n                              <Check className=\"report-question-check\" />\n                            ) : (\n                              <AlertTriangle className=\"report-question-alert\" />\n                            )}\n                          </div>\n                          <div className=\"report-question-text\">\n                            <p>{question.text}</p>\n                            <div className=\"report-question-badges\">\n                              <span\n                                className={`report-question-answer ${question.value === \"Yes\" || question.value === true ? \"positive\" : \"negative\"}`}\n                              >\n                                {question.responseType === \"Media\" || question.responseType === \"Annotation\"\n                                  ? \"Media uploaded\"\n                                  : String(question.value)}\n                              </span>\n                              {question.flagged && (\n                                <span className=\"report-question-flag\">\n                                  <Flag className=\"report-flag-icon\" />\n                                  Flagged\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        {(question.responseType === \"Media\" || question.responseType === \"Annotation\") &&\n                          question.value && (\n                            <div className=\"report-question-media\">\n                              <img\n                                src={(question.value as string) || \"/placeholder.svg\"}\n                                alt={question.text}\n                                className=\"report-media-preview\"\n                              />\n                            </div>\n                          )}\n                      </div>\n                    )),\n                )}\n              </div>\n            </div>\n          )}\n\n          {activeTab === \"flagged\" && (\n            <div className=\"report-flagged\">\n              <div className=\"report-flagged-header\">\n                <h3 className=\"report-section-title\">Flagged Items</h3>\n                <span className=\"report-flagged-count\">\n                  {flaggedItems} flagged, {actionItems} action\n                </span>\n              </div>\n\n              <div className=\"report-questions-list\">\n                {template.sections.map((section) =>\n                  section.questions\n                    .filter((q) => q.flagged)\n                    .map((question) => (\n                      <div key={question.id} className=\"report-question-item flagged\">\n                        <div className=\"report-question-header\">\n                          <div className=\"report-question-icon\">\n                            <AlertTriangle className=\"report-question-alert\" />\n                          </div>\n                          <div className=\"report-question-text\">\n                            <p>{question.text}</p>\n                            <span className=\"report-question-answer negative\">\n                              {question.responseType === \"Media\" || question.responseType === \"Annotation\"\n                                ? \"Media uploaded\"\n                                : String(question.value || \"No\")}\n                            </span>\n                          </div>\n                        </div>\n\n                        {(question.responseType === \"Media\" || question.responseType === \"Annotation\") &&\n                          question.value && (\n                            <div className=\"report-question-media\">\n                              <img\n                                src={(question.value as string) || \"/placeholder.svg\"}\n                                alt={question.text}\n                                className=\"report-media-preview\"\n                              />\n                            </div>\n                          )}\n\n                        <div className=\"report-question-action\">\n                          <div className=\"report-action-header\">\n                            <span className=\"report-action-status\">In progress</span>\n                            <span className=\"report-action-assignee\">\n                              <span className=\"report-action-label\">Assignee</span>\n                              Fred Smith\n                            </span>\n                            <span className=\"report-action-priority high\">\n                              <span className=\"report-action-label\">Priority</span>\n                              High\n                            </span>\n                          </div>\n\n                          <div className=\"report-action-due\">\n                            <span className=\"report-action-label\">Due</span>\n                            {new Date().toLocaleDateString()}\n                          </div>\n\n                          <div className=\"report-action-created\">\n                            <span className=\"report-action-label\">Created by</span>\n                            {template.sections\n                              .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\n                              ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"}\n                          </div>\n\n                          <div className=\"report-action-category\">Work Areas / Personal Protective Equipment (PPE)</div>\n                          <div className=\"report-action-description\">Make sure the team wear safety hard hats</div>\n                        </div>\n                      </div>\n                    )),\n                )}\n              </div>\n            </div>\n          )}\n\n          {activeTab === \"media\" && (\n            <div className=\"report-media\">\n              <h3 className=\"report-section-title\">Media Summary</h3>\n\n              <div className=\"report-media-grid\">\n                {mediaItems.length > 0 ? (\n                  mediaItems.map((media) => (\n                    <div key={media.id} className=\"report-media-item\">\n                      <div className=\"report-media-image\">\n                        <img src={media.thumbnail || \"/placeholder.svg\"} alt={media.caption} />\n                        <div className=\"report-media-caption\">\n                          <p>{media.caption}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"report-media-empty\">\n                    <ImageIcon className=\"report-media-empty-icon\" />\n                    <p>No media has been added to this report</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"report-footer\">\n        <p>Powered by SafetyCulture</p>\n        <div className=\"report-footer-buttons\">\n          <button className=\"report-footer-button\">\n            <FileText className=\"report-footer-icon\" />\n            Web preview\n          </button>\n          <button className=\"report-footer-button primary\" onClick={generatePDF}>\n            <Download className=\"report-footer-icon\" />\n            PDF preview\n          </button>\n        </div>\n      </div>\n\n      <div className=\"report-mobile-fab\">\n        <button className=\"report-mobile-download\" onClick={generatePDF}>\n          <Download className=\"report-mobile-download-icon\" />\n        </button>\n      </div>\n    </div>\n  )\n}\n\n// Main Component\nconst CreateTemplate = () => {\n  const navigate = useNavigate()\n\n  const [templateId, setTemplateId] = useState<string | null>(null)\n\n  const [templateData, setTemplateData] = useState({\n    title: \"\",\n    description: \"\",\n  })\n  const generateId = () => Math.random().toString(36).substring(2, 9)\n\n  const getDefaultQuestion = (responseType: ResponseType = \"Text\"): Question => ({\n    id: generateId(),\n    text: \"Type question\",\n    responseType,\n    required: false,\n    flagged: false,\n    multipleSelection: false,\n    options:\n      responseType === \"Multiple choice\" || responseType === \"Yes/No\"\n        ? [\"Option 1\", \"Option 2\", \"Option 3\"]\n        : undefined,\n    value: null,\n    logicRules: [],\n  })\n\n  const getDefaultSection = (title = \"Untitled Page\"): Section => ({\n    id: generateId(),\n    title,\n    questions: [],\n    isCollapsed: false,\n  })\n\n  const getInitialTemplate = (): Template => {\n    const titlePageSection: Section = {\n      id: generateId(),\n      title: \"Title Page\",\n      description: \"The Title Page is the first page of your inspection report. Customize it below.\",\n      questions: [\n        {\n          id: generateId(),\n          text: \"Site conducted\",\n          responseType: \"Site\",\n          required: true,\n          flagged: false,\n          value: null,\n          logicRules: [],\n        },\n        {\n          id: generateId(),\n          text: \"Conducted on\",\n          responseType: \"Inspection date\",\n          required: true,\n          flagged: false,\n          value: null,\n          logicRules: [],\n        },\n        {\n          id: generateId(),\n          text: \"Prepared by\",\n          responseType: \"Person\",\n          required: true,\n          flagged: false,\n          value: null,\n          logicRules: [],\n        },\n        {\n          id: generateId(),\n          text: \"Location\",\n          responseType: \"Inspection location\",\n          required: true,\n          flagged: false,\n          value: null,\n          logicRules: [],\n        },\n      ],\n      isCollapsed: false,\n    }\n\n    return {\n      id: generateId(),\n      title: \"Untitled template\",\n      description: \"Add a description\",\n      sections: [titlePageSection],\n      lastSaved: new Date(),\n      lastPublished: new Date(),\n      logo: undefined,\n    }\n  }\n  const [template, setTemplate] = useState<Template>({\n    id: generateId(), // Add the required id property\n    title: \"\",\n    description: \"\",\n    logo: undefined, // Changed from null to undefined\n    sections: [],\n    lastSaved: new Date(),\n    lastPublished: new Date(),\n  })\n  const [activeTab, setActiveTab] = useState<number>(0)\n\n  const [activeSectionId, setActiveSectionId] = useState<string | null>(null)\n  const [activeQuestionId, setActiveQuestionId] = useState<string | null>(null)\n  const [draggedItem, setDraggedItem] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\n  const [dropTarget, setDropTarget] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\n  const [showResponseTypeMenu, setShowResponseTypeMenu] = useState<string | null>(null)\n  const [showMobilePreview, setShowMobilePreview] = useState<boolean>(true)\n  const [showLogicPanel, setShowLogicPanel] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  const questionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\n  const sectionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\n\n  // Update the useEffect hook that loads the template data to properly set the template state\n  useEffect(() => {\n    // Check if we have a template ID in the URL\n    const params = new URLSearchParams(window.location.search)\n    const id = params.get(\"id\")\n\n    if (id) {\n      setTemplateId(id)\n      setIsLoading(true)\n      axios\n        .get(`http://localhost:8000/api/users/templates/${id}/`)\n        .then((res) => {\n          // Make sure we set both templateData and template with the response data\n          setTemplateData({\n            title: res.data.title || \"\",\n            description: res.data.description || \"\",\n          })\n          setTemplate(res.data)\n\n          // Set the active section to the first section if available\n          if (res.data.sections && res.data.sections.length > 0) {\n            setActiveSectionId(res.data.sections[0].id)\n          }\n\n          setIsLoading(false)\n        })\n        .catch((err) => {\n          console.error(\"Failed to load template\", err)\n          setIsLoading(false)\n        })\n    } else {\n      // If it's a new template (no id), initialize it\n      const newTemplate = getInitialTemplate()\n      setTemplate(newTemplate)\n      setTemplateData({\n        title: newTemplate.title || \"\",\n        description: newTemplate.description || \"\",\n      })\n      setActiveSectionId(newTemplate.sections[0]?.id || null)\n      setIsLoading(false)\n    }\n  }, [])\n\n  function cleanTemplateForSave(template: Template): Template {\n    const { id, ...templateWithoutId } = template\n    return {\n      ...templateWithoutId,\n      id: id, // Keep the template ID\n      sections: template.sections.map(({ id: sectionId, ...sectionWithoutId }) => ({\n        ...sectionWithoutId,\n        id: sectionId, // Add the id back to each section\n        questions: sectionWithoutId.questions.map(({ id: questionId, ...questionWithoutId }) => ({\n          ...questionWithoutId,\n          id: questionId, // Add the id back to each question\n        })),\n      })),\n    }\n  }\n\n  // Updated handleSave function with proper CSRF token handling\n  const handleSave = async () => {\n    if (!template.title) {\n      alert(\"Please enter a template title\")\n      return\n    }\n\n    try {\n      const csrfToken = await fetchCSRFToken()\n      const formData = new FormData()\n\n      // Use template state directly instead of templateData\n      formData.append(\"title\", template.title)\n      formData.append(\"description\", template.description)\n\n      if (template.logo) {\n        if (typeof template.logo === \"string\" && template.logo.startsWith(\"data:\")) {\n          const response = await fetch(template.logo)\n          const blob = await response.blob()\n          formData.append(\"logo\", blob, \"logo.png\")\n        } else {\n          formData.append(\"logo\", template.logo)\n        }\n      }\n\n      formData.append(\"sections\", JSON.stringify(template.sections))\n\n      const isEdit = !!templateId\n      const url = isEdit\n        ? `http://localhost:8000/api/users/templates/${templateId}/`\n        : \"http://localhost:8000/api/users/create_templates/\"\n\n      console.log(`Saving template to ${url} with method ${isEdit ? \"PUT\" : \"POST\"}`)\n\n      const response = await fetch(url, {\n        method: isEdit ? \"PUT\" : \"POST\",\n        headers: {\n          \"X-CSRFToken\": csrfToken,\n        },\n        body: formData,\n        credentials: \"include\",\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.error || \"Failed to save template\")\n      }\n\n      // Update the template with the latest save time\n      setTemplate((prev) => ({\n        ...prev,\n        lastSaved: new Date(),\n      }))\n\n      alert(isEdit ? \"Template updated successfully!\" : \"Template created successfully!\")\n      navigate(\"/templates\")\n    } catch (error) {\n      console.error(\"Error saving template:\", error)\n      if (error instanceof Error) {\n        alert(`Failed to save template: ${error.message}`)\n      } else {\n        alert(\"Failed to save template: Unknown error occurred\")\n      }\n    }\n  }\n\n  // Update the updateTemplate function to also update templateData\n  const updateTemplateFn = (updates: Partial<Template>) => {\n    setTemplate((prev) => ({ ...prev, ...updates }))\n\n    // Also update templateData if title or description is changed\n    if (updates.title !== undefined || updates.description !== undefined) {\n      setTemplateData((prev) => ({\n        ...prev,\n        title: updates.title !== undefined ? updates.title : prev.title,\n        description: updates.description !== undefined ? updates.description : prev.description,\n      }))\n    }\n  }\n\n  // Template Management\n  const handleBack = () => {\n    if (window.confirm(\"Do you want to save before leaving?\")) handleSave()\n    navigate(\"/templates\")\n  }\n\n  const handleLogoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file && file.size <= 5 * 1024 * 1024 && file.type.match(/^image\\//)) {\n      const reader = new FileReader()\n      reader.onload = async (event) => {\n        const result = event.target?.result as string\n        if (result) {\n          const resizedImage = await resizeImage(result)\n          updateTemplateFn({ logo: resizedImage })\n        }\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  // Section Management\n  const addSection = () => {\n    const newSection = getDefaultSection()\n    setTemplate((prev) => ({ ...prev, sections: [...prev.sections, newSection] }))\n    setActiveSectionId(newSection.id)\n    setTimeout(() => sectionRefs.current[newSection.id]?.scrollIntoView({ behavior: \"smooth\", block: \"start\" }), 100)\n  }\n\n  const updateSection = (sectionId: string, updates: Partial<Section>) => {\n    setTemplate((prev) => ({\n      ...prev,\n      sections: prev.sections.map((s) => (s.id === sectionId ? { ...s, ...updates } : s)),\n    }))\n  }\n\n  const deleteSection = (sectionId: string) => {\n    setTemplate((prev) => ({ ...prev, sections: prev.sections.filter((s) => s.id !== sectionId) }))\n  }\n\n  const toggleSectionCollapse = (sectionId: string) => {\n    updateSection(sectionId, { isCollapsed: !template.sections.find((s) => s.id === sectionId)?.isCollapsed })\n  }\n\n  // Question Management\n  const addQuestion = (sectionId: string, responseType: ResponseType = \"Text\") => {\n    const newQuestion = getDefaultQuestion(responseType)\n    updateSection(sectionId, {\n      questions: [...template.sections.find((s) => s.id === sectionId)!.questions, newQuestion],\n    })\n    setActiveQuestionId(newQuestion.id)\n  }\n\n  const updateQuestion = (sectionId: string, questionId: string, updates: Partial<Question>) => {\n    setTemplate((prev) => ({\n      ...prev,\n      sections: prev.sections.map((s) =>\n        s.id === sectionId\n          ? { ...s, questions: s.questions.map((q) => (q.id === questionId ? { ...q, ...updates } : q)) }\n          : s,\n      ),\n    }))\n  }\n\n  const deleteQuestion = (sectionId: string, questionId: string) => {\n    updateSection(sectionId, {\n      questions: template.sections.find((s) => s.id === sectionId)!.questions.filter((q) => q.id !== questionId),\n    })\n  }\n\n  const changeQuestionResponseType = (sectionId: string, questionId: string, responseType: ResponseType) => {\n    updateQuestion(sectionId, questionId, {\n      responseType,\n      options:\n        responseType === \"Multiple choice\" || responseType === \"Yes/No\"\n          ? [\"Option 1\", \"Option 2\", \"Option 3\"]\n          : undefined,\n      value: null,\n      logicRules: [],\n    })\n    setShowResponseTypeMenu(null)\n  }\n\n  // Drag and Drop\n  const handleDragStart = (type: \"question\" | \"section\", id: string) => setDraggedItem({ type, id })\n  const handleDragOver = (type: \"question\" | \"section\", id: string, e: React.DragEvent) => {\n    e.preventDefault()\n    if (draggedItem && draggedItem.id !== id) setDropTarget({ type, id })\n  }\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault()\n    if (!draggedItem || !dropTarget) return\n\n    if (draggedItem.type === \"section\" && dropTarget.type === \"section\") {\n      const sections = [...template.sections]\n      const draggedIndex = sections.findIndex((s) => s.id === draggedItem.id)\n      const dropIndex = sections.findIndex((s) => s.id === dropTarget.id)\n      const [removed] = sections.splice(draggedIndex, 1)\n      sections.splice(dropIndex, 0, removed)\n      setTemplate((prev) => ({ ...prev, sections }))\n    } else if (draggedItem.type === \"question\" && dropTarget.type === \"question\") {\n      const draggedSection = template.sections.find((s) => s.questions.some((q) => q.id === draggedItem.id))\n      const dropSection = template.sections.find((s) => s.questions.some((q) => q.id === dropTarget.id))\n\n      if (draggedSection && dropSection) {\n        const newSections = [...template.sections]\n        const draggedSectionIndex = newSections.findIndex((s) => s.id === draggedSection.id)\n        const draggedQuestionIndex = newSections[draggedSectionIndex].questions.findIndex(\n          (q) => q.id === draggedItem.id,\n        )\n        const dropSectionIndex = newSections.findIndex((s) => s.id === dropSection.id)\n        const dropQuestionIndex = newSections[dropSectionIndex].questions.findIndex((q) => q.id === dropTarget.id)\n        const [removedQuestion] = newSections[draggedSectionIndex].questions.splice(draggedQuestionIndex, 1)\n        newSections[dropSectionIndex].questions.splice(dropQuestionIndex, 0, removedQuestion)\n        setTemplate((prev) => ({ ...prev, sections: newSections }))\n      }\n    }\n    setDraggedItem(null)\n    setDropTarget(null)\n  }\n\n  // Rendering Helpers\n  const renderResponseTypeIcon = (type: ResponseType) => {\n    switch (type) {\n      case \"Site\":\n        return <MapPin size={18} className=\"response-type-icon\" />\n      case \"Inspection date\":\n        return <Calendar size={18} className=\"response-type-icon\" />\n      case \"Person\":\n        return <User size={18} className=\"response-type-icon\" />\n      case \"Inspection location\":\n        return <MapPin size={18} className=\"response-type-icon\" />\n      case \"Text\":\n        return <div className=\"response-type-icon text-icon\">Aa</div>\n      case \"Number\":\n        return <div className=\"response-type-icon number-icon\">123</div>\n      case \"Checkbox\":\n        return (\n          <div className=\"response-type-icon checkbox-icon\">\n            <Check size={14} />\n          </div>\n        )\n      case \"Yes/No\":\n        return (\n          <div className=\"response-type-icon yes-no-icon\">\n            <span className=\"yes\">Y</span>/<span className=\"no\">N</span>\n          </div>\n        )\n      case \"Multiple choice\":\n        return <div className=\"response-type-icon multiple-choice-icon\">☰</div>\n      case \"Slider\":\n        return <div className=\"response-type-icon slider-icon\">⟷</div>\n      case \"Media\":\n        return <ImageIcon size={18} className=\"response-type-icon\" />\n      case \"Annotation\":\n        return <Edit size={18} className=\"response-type-icon\" />\n      case \"Date & Time\":\n        return <Clock size={18} className=\"response-type-icon\" />\n      default:\n        return <div className=\"response-type-icon\"></div>\n    }\n  }\n\n  const renderResponseTypeMenu = (sectionId: string, questionId: string) => {\n    if (showResponseTypeMenu !== questionId) return null\n    const responseTypes: ResponseType[] = [\n      \"Text\",\n      \"Number\",\n      \"Checkbox\",\n      \"Yes/No\",\n      \"Multiple choice\",\n      \"Slider\",\n      \"Media\",\n      \"Annotation\",\n      \"Date & Time\",\n      \"Site\",\n      \"Inspection date\",\n      \"Person\",\n      \"Inspection location\",\n    ]\n\n    return (\n      <div className=\"response-type-menu\">\n        <div className=\"response-type-menu-header\">\n          <h3>Select response type</h3>\n          <button className=\"close-button\" onClick={() => setShowResponseTypeMenu(null)}>\n            <X size={18} />\n          </button>\n        </div>\n        <div className=\"response-type-options\">\n          {responseTypes.map((type) => (\n            <button\n              key={type}\n              className=\"response-type-option\"\n              onClick={() => changeQuestionResponseType(sectionId, questionId, type)}\n            >\n              {renderResponseTypeIcon(type)}\n              <span>{type}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  const renderQuestionResponse = (question: Question, sectionId: string) => {\n    switch (question.responseType) {\n      case \"Text\":\n        return (\n          <div className=\"response-field text-field\">\n            <div className=\"text-input\">Text answer</div>\n          </div>\n        )\n      case \"Number\":\n        return (\n          <div className=\"response-field number-field\">\n            <input\n              type=\"number\"\n              className=\"number-input\"\n              value={(question.value as number) || \"\"}\n              onChange={(e) => updateQuestion(sectionId, question.id, { value: Number(e.target.value) })}\n              placeholder=\"0\"\n            />\n          </div>\n        )\n      case \"Checkbox\":\n        return (\n          <div className=\"response-field checkbox-field\">\n            <div className=\"checkbox-input\">\n              <div className=\"checkbox\"></div>\n            </div>\n          </div>\n        )\n      case \"Yes/No\":\n        return (\n          <div className=\"response-field yes-no-field\">\n            <div className=\"yes-no-options\">\n              <button className=\"yes-option\">Yes</button>\n              <button className=\"no-option\">No</button>\n              <button className=\"na-option\">N/A</button>\n            </div>\n          </div>\n        )\n      case \"Multiple choice\":\n        return (\n          <div className=\"response-field multiple-choice-field\">\n            <div className=\"multiple-choice-options\">\n              {(question.options || []).map((option, idx) => (\n                <button key={idx} className={`choice-option choice-${idx % 4}`}>\n                  {option}\n                </button>\n              ))}\n            </div>\n          </div>\n        )\n      case \"Slider\":\n        return (\n          <div className=\"response-field slider-field\">\n            <div className=\"slider-container\">\n              <div className=\"slider-track\">\n                <div className=\"slider-thumb\"></div>\n              </div>\n              <div className=\"slider-labels\">\n                <span>0</span>\n                <span>50</span>\n                <span>100</span>\n              </div>\n            </div>\n          </div>\n        )\n      case \"Media\":\n        return (\n          <div className=\"response-field media-field\">\n            <div className=\"media-upload\">\n              <ImageIcon size={20} />\n              <span>Upload media</span>\n            </div>\n          </div>\n        )\n      case \"Annotation\":\n        return (\n          <div className=\"response-field annotation-field\">\n            <div className=\"annotation-area\">\n              <Edit size={20} />\n              <span>Add annotation</span>\n            </div>\n          </div>\n        )\n      case \"Date & Time\":\n      case \"Inspection date\":\n        return (\n          <div className=\"response-field date-time-field\">\n            <div className=\"date-time-input\">\n              <Calendar size={16} />\n              <span>{new Date().toLocaleDateString()}</span>\n            </div>\n          </div>\n        )\n      case \"Site\":\n      case \"Person\":\n      case \"Inspection location\":\n        return (\n          <div className=\"response-field dropdown-input\">\n            <div className=\"dropdown-input\">\n              <span>Select {question.responseType.toLowerCase()}</span>\n              <ChevronDown size={16} />\n            </div>\n          </div>\n        )\n      default:\n        // Exhaustive type check to ensure all ResponseType values are handled\n        const _exhaustiveCheck: never = question.responseType\n        return <div className=\"response-field\">Unsupported response type</div>\n    }\n  }\n\n  const renderQuestion = (question: Question, sectionId: string, index: number) => {\n    const isActive = activeQuestionId === question.id\n    const isDragging = draggedItem?.type === \"question\" && draggedItem.id === question.id\n    const isDropTarget = dropTarget?.type === \"question\" && dropTarget.id === question.id\n\n    return (\n      <div\n        key={question.id}\n        ref={(el) => {\n          questionRefs.current[question.id] = el\n        }}\n        className={`question-item ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"}`}\n        onClick={() => setActiveQuestionId(question.id)}\n        draggable\n        onDragStart={(e) => handleDragStart(\"question\", question.id)}\n        onDragOver={(e) => handleDragOver(\"question\", question.id, e)}\n        onDrop={handleDrop}\n      >\n        <div className=\"question-header\">\n          <div className=\"question-drag-handle\">\n            <Move size={16} />\n          </div>\n          <div className=\"question-number\">{index + 1}</div>\n          <input\n            type=\"text\"\n            className=\"question-text\"\n            value={question.text}\n            onChange={(e) => updateQuestion(sectionId, question.id, { text: e.target.value })}\n            placeholder=\"Type question\"\n          />\n        </div>\n        <div className=\"question-body\">\n          <div className=\"response-type-selector\">\n            <div\n              className=\"selected-response-type\"\n              onClick={(e) => {\n                e.stopPropagation()\n                setShowResponseTypeMenu(showResponseTypeMenu === question.id ? null : question.id)\n              }}\n            >\n              {renderResponseTypeIcon(question.responseType)}\n              <span>{question.responseType}</span>\n              <ChevronDown size={16} />\n            </div>\n            {renderResponseTypeMenu(sectionId, question.id)}\n          </div>\n          {renderQuestionResponse(question, sectionId)}\n        </div>\n        <div className=\"question-footer\">\n          <EnhancedAddLogicButton\n            hasRules={question.logicRules?.length ? true : false}\n            onClick={() => setShowLogicPanel(showLogicPanel === question.id ? null : question.id)}\n          />\n          <label className=\"required-checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={question.required}\n              onChange={(e) => updateQuestion(sectionId, question.id, { required: e.target.checked })}\n            />\n            <span>Required</span>\n          </label>\n          <label className=\"required-checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={question.flagged}\n              onChange={(e) => updateQuestion(sectionId, question.id, { flagged: e.target.checked })}\n            />\n            <span>Flag</span>\n          </label>\n          <button className=\"delete-question\" onClick={() => deleteQuestion(sectionId, question.id)}>\n            <Trash2 size={16} />\n          </button>\n          {showLogicPanel === question.id && (\n            <EnhancedLogicRulesContainer\n              questionType={question.responseType}\n              rules={question.logicRules || []}\n              options={question.options || []}\n              onRulesChange={(rules) => updateQuestion(sectionId, question.id, { logicRules: rules })}\n              questions={template.sections.flatMap((s) => s.questions.map((q) => ({ id: q.id, text: q.text })))}\n              onClose={() => setShowLogicPanel(null)}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  const renderSection = (section: Section, index: number) => {\n    const isActive = activeSectionId === section.id\n    const isDragging = draggedItem?.type === \"section\" && draggedItem.id === section.id\n    const isDropTarget = dropTarget?.type === \"section\" && dropTarget.id === section.id\n    const isTitlePage = index === 0\n\n    return (\n      <div\n        key={section.id}\n        ref={(el) => {\n          sectionRefs.current[section.id] = el\n        }}\n        className={`section-container ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"}`}\n        onClick={() => setActiveSectionId(section.id)}\n        draggable={!isTitlePage}\n        onDragStart={(e) => !isTitlePage && handleDragStart(\"section\", section.id)}\n        onDragOver={(e) => handleDragOver(\"section\", section.id, e)}\n        onDrop={handleDrop}\n      >\n        <div className=\"section-header\">\n          <button\n            className=\"collapse-button\"\n            onClick={(e) => {\n              e.stopPropagation()\n              toggleSectionCollapse(section.id)\n            }}\n          >\n            {section.isCollapsed ? <ChevronUp size={18} /> : <ChevronDown size={18} />}\n          </button>\n          <div className=\"section-title-container\">\n            <input\n              type=\"text\"\n              className=\"section-title\"\n              value={section.title}\n              onChange={(e) => updateSection(section.id, { title: e.target.value })}\n              readOnly={isTitlePage}\n            />\n            {!isTitlePage && (\n              <button className=\"edit-section-title\">\n                <Edit size={16} />\n              </button>\n            )}\n          </div>\n          {!isTitlePage && (\n            <div className=\"section-actions\">\n              <button\n                className=\"delete-section-button\"\n                onClick={(e) => {\n                  e.stopPropagation()\n                  if (window.confirm(\"Are you sure you want to delete this section?\")) deleteSection(section.id)\n                }}\n              >\n                <Trash2 size={16} />\n              </button>\n            </div>\n          )}\n        </div>\n        {!section.isCollapsed && (\n          <>\n            {section.description && (\n              <div className=\"section-description\">\n                {section.description}\n                {isTitlePage && <p>customize the Title Page below</p>}\n              </div>\n            )}\n            <div className=\"questions-container\">\n              <div className=\"questions-header\">\n                <div className=\"question-label\">Question</div>\n                <div className=\"response-type-label\">Type of response</div>\n                <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\n                  <Plus size={16} />\n                </button>\n              </div>\n              {section.questions.map((question, idx) => renderQuestion(question, section.id, idx))}\n              <div className=\"question-actions\">\n                <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\n                  <Plus size={16} /> Add Question\n                </button>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    )\n  }\n\n  // Updated handlePublishTemplate function with proper CSRF token handling\n  const handlePublishTemplate = async () => {\n    try {\n      // 1. First, get a fresh CSRF token\n      const csrfToken = await fetchCSRFToken()\n\n      // 2. Prepare the form data\n      const formData = new FormData()\n      formData.append(\"title\", template.title)\n      formData.append(\"description\", template.description)\n\n      // 3. Handle the logo if it exists\n      if (template.logo) {\n        // If logo is a base64 string, convert to blob\n        if (typeof template.logo === \"string\" && template.logo.startsWith(\"data:\")) {\n          const response = await fetch(template.logo)\n          const blob = await response.blob()\n          formData.append(\"logo\", blob, \"logo.png\")\n        } else {\n          formData.append(\"logo\", template.logo)\n        }\n      }\n\n      // 4. Add sections data\n      const cleanedTemplate = cleanTemplateForSave(template)\n      formData.append(\"sections\", JSON.stringify(cleanedTemplate.sections))\n\n      // 5. Make the API request with the fresh CSRF token\n      const publishResponse = await fetch(\"http://localhost:8000/api/users/create_templates/\", {\n        method: \"POST\",\n        headers: {\n          \"X-CSRFToken\": csrfToken,\n        },\n        body: formData,\n        credentials: \"include\", // Important: include cookies\n      })\n\n      if (!publishResponse.ok) {\n        const errorData = await publishResponse.json()\n        throw new Error(errorData.error || \"Failed to publish template\")\n      }\n\n      // Success handling\n      setTemplate((prev) => ({\n        ...prev,\n        lastSaved: new Date(),\n        lastPublished: new Date(),\n      }))\n\n      console.log(\"Template published successfully!\")\n      alert(\"Template published and saved successfully!\")\n      navigate(\"/templates\")\n    } catch (error: unknown) {\n      console.error(\"Error publishing template:\", error)\n\n      if (axios.isAxiosError(error)) {\n        if (error.response?.status === 403) {\n          alert(\"Authentication error. Please log in again.\")\n          navigate(`/login?returnUrl=${encodeURIComponent(window.location.pathname)}`)\n        } else {\n          alert(`Failed to publish template: ${error.response?.data?.error || error.message}`)\n        }\n      } else {\n        alert(\"Failed to publish template: Unknown error occurred.\")\n      }\n    }\n  }\n\n  // Render trigger UI components based on the trigger type\n  const renderTriggerUI = (question: Question, activeSection: Section) => {\n    if (shouldShowTrigger(question, \"require_evidence\")) {\n      return (\n        <div className=\"mobile-trigger-container\">\n          <div className=\"mobile-trigger-header\">\n            <Upload size={16} />\n            <span>Evidence Required</span>\n          </div>\n          <div className=\"mobile-media-upload\">\n            <input\n              type=\"file\"\n              accept=\"image/*,video/*\"\n              className=\"sr-only\"\n              id={`evidence-upload-${question.id}`}\n              onChange={(e) => {\n                if (e.target.files && e.target.files[0]) {\n                  const reader = new FileReader()\n                  reader.onload = (event) => {\n                    if (event.target?.result) {\n                      updateQuestion(activeSection.id, question.id, { conditionalProof: event.target.result as string })\n                    }\n                  }\n                  reader.readAsDataURL(e.target.files[0])\n                }\n              }}\n            />\n            {!question.conditionalProof ? (\n              <label htmlFor={`evidence-upload-${question.id}`} className=\"mobile-media-placeholder\">\n                <ImageIcon size={20} />\n                <span>Upload evidence (photo or video)</span>\n              </label>\n            ) : (\n              <div className=\"mobile-media-preview\">\n                <img\n                  src={question.conditionalProof || \"/placeholder.svg\"}\n                  alt=\"Evidence\"\n                  className=\"mobile-media-image\"\n                />\n                <button\n                  className=\"mobile-media-remove\"\n                  onClick={(e) => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                    updateQuestion(activeSection.id, question.id, { conditionalProof: undefined })\n                  }}\n                >\n                  <X size={16} />\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      )\n    }\n\n    if (shouldShowTrigger(question, \"require_action\")) {\n      return (\n        <div className=\"mobile-trigger-container\">\n          <div className=\"mobile-trigger-header\">\n            <FileText size={16} />\n            <span>Action Required</span>\n          </div>\n          <div className=\"mobile-action-form\">\n            <input type=\"text\" className=\"mobile-text-input\" placeholder=\"Describe the action taken...\" />\n            <div className=\"mobile-action-buttons\">\n              <button className=\"mobile-action-button\">Submit Action</button>\n              <button className=\"mobile-action-button secondary\">Cancel</button>\n            </div>\n          </div>\n        </div>\n      )\n    }\n\n    if (shouldShowTrigger(question, \"notify\")) {\n      return (\n        <div className=\"mobile-trigger-container\">\n          <div className=\"mobile-notification-banner\">\n            <Bell size={16} />\n            <span>Notification has been sent to the relevant team members.</span>\n          </div>\n        </div>\n      )\n    }\n\n    if (shouldShowTrigger(question, \"display_message\")) {\n      // Get the message from the rule that triggered this\n      const rule = question.logicRules?.find((r) => r.trigger === \"display_message\")\n      const message = rule?.message || \"Important: This response requires immediate attention.\"\n\n      return (\n        <div className=\"mobile-trigger-container\">\n          <div className=\"mobile-message-banner\">\n            <AlertTriangle size={16} />\n            <span>{message}</span>\n          </div>\n        </div>\n      )\n    }\n\n    if (shouldShowTrigger(question, \"ask_questions\")) {\n      // Get the subQuestion from the rule that triggered this\n      const rule = question.logicRules?.find((r) => r.trigger === \"ask_questions\")\n      const subQuestionText = rule?.subQuestion?.text || \"Please provide more details about this issue\"\n      const responseType = rule?.subQuestion?.responseType || \"Text\"\n\n      return (\n        <div className=\"mobile-trigger-container\">\n          <div className=\"mobile-trigger-header\">\n            <MessageSquare size={16} />\n            <span>Follow-up Questions</span>\n          </div>\n          <div className=\"mobile-subquestion\">\n            <div className=\"mobile-question-text\">\n              <span className=\"mobile-required\">*</span>\n              {subQuestionText}\n            </div>\n            <div className=\"mobile-question-response\">\n              {responseType === \"Text\" && (\n                <textarea className=\"mobile-text-input\" rows={3} placeholder=\"Enter details here...\"></textarea>\n              )}\n              {responseType === \"Yes/No\" && (\n                <div className=\"mobile-yes-no\">\n                  <button className=\"mobile-yes\">Yes</button>\n                  <button className=\"mobile-no\">No</button>\n                  <button className=\"mobile-na\">N/A</button>\n                </div>\n              )}\n              {responseType === \"Number\" && <input type=\"number\" className=\"mobile-number-input\" placeholder=\"0\" />}\n              {responseType === \"Multiple choice\" && (\n                <div className=\"mobile-multiple-choice\">\n                  <button className=\"mobile-choice\">Option 1</button>\n                  <button className=\"mobile-choice\">Option 2</button>\n                  <button className=\"mobile-choice\">Option 3</button>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"mobile-action-buttons\">\n            <button className=\"mobile-action-button\">Submit Responses</button>\n          </div>\n        </div>\n      )\n    }\n\n    return null\n  }\n\n  // Update the renderMobileQuestionResponse function to make it more interactive and realistic\n  const renderMobileQuestionResponse = (question: Question, activeSection: Section) => {\n    switch (question.responseType) {\n      case \"Text\":\n        return (\n          <input\n            type=\"text\"\n            className=\"mobile-text-input\"\n            placeholder=\"Text answer\"\n            value={(question.value as string) || \"\"}\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\n          />\n        )\n      case \"Number\":\n        return (\n          <input\n            type=\"number\"\n            className=\"mobile-number-input\"\n            placeholder=\"0\"\n            value={(question.value as number) || \"\"}\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: Number(e.target.value) })}\n          />\n        )\n      case \"Checkbox\":\n        return (\n          <div\n            className=\"mobile-checkbox\"\n            onClick={() => updateQuestion(activeSection.id, question.id, { value: !question.value })}\n          >\n            <div className={`mobile-checkbox-box ${question.value ? \"checked\" : \"\"}`}>\n              {question.value && <Check size={16} />}\n            </div>\n            <span>Check if applicable</span>\n          </div>\n        )\n      case \"Yes/No\":\n        return (\n          <div className=\"mobile-yes-no\">\n            <button\n              className={`mobile-yes ${question.value === \"Yes\" ? \"selected\" : \"\"}`}\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"Yes\" })}\n            >\n              Yes\n            </button>\n            <button\n              className={`mobile-no ${question.value === \"No\" ? \"selected\" : \"\"}`}\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"No\" })}\n            >\n              No\n            </button>\n            <button\n              className={`mobile-na ${question.value === \"N/A\" ? \"selected\" : \"\"}`}\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"N/A\" })}\n            >\n              N/A\n            </button>\n          </div>\n        )\n      case \"Multiple choice\":\n        return (\n          <div className=\"mobile-multiple-choice\">\n            {(question.options || []).map((option, idx) => (\n              <button\n                key={idx}\n                className={`mobile-choice ${question.value === option ? \"selected\" : \"\"}`}\n                onClick={() => updateQuestion(activeSection.id, question.id, { value: option })}\n              >\n                {option}\n              </button>\n            ))}\n          </div>\n        )\n      case \"Slider\":\n        return (\n          <div className=\"mobile-slider\">\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              className=\"mobile-slider-input\"\n              value={(question.value as number) || 50}\n              onChange={(e) => updateQuestion(activeSection.id, question.id, { value: Number(e.target.value) })}\n            />\n            <div className=\"mobile-slider-labels\">\n              <span>0</span>\n              <span>50</span>\n              <span>100</span>\n            </div>\n          </div>\n        )\n      case \"Media\":\n        return (\n          <label className=\"mobile-media-upload\">\n            <input\n              type=\"file\"\n              accept=\"image/*,video/*\"\n              className=\"sr-only\"\n              onChange={(e) => {\n                if (e.target.files && e.target.files[0]) {\n                  const reader = new FileReader()\n                  reader.onload = (event) => {\n                    if (event.target?.result) {\n                      updateQuestion(activeSection.id, question.id, { value: event.target.result as string })\n                    }\n                  }\n                  reader.readAsDataURL(e.target.files[0])\n                }\n              }}\n            />\n            {!question.value ? (\n              <>\n                <ImageIcon size={20} />\n                <span>Upload media (photo or video)</span>\n              </>\n            ) : (\n              <div className=\"mobile-media-preview\">\n                <img\n                  src={(question.value as string) || \"/placeholder.svg\"}\n                  alt=\"Uploaded media\"\n                  className=\"mobile-media-image\"\n                />\n                <button\n                  className=\"mobile-media-remove\"\n                  onClick={(e) => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                    updateQuestion(activeSection.id, question.id, { value: null })\n                  }}\n                >\n                  <X size={16} />\n                </button>\n              </div>\n            )}\n          </label>\n        )\n      case \"Annotation\":\n        return (\n          <div className=\"mobile-annotation\">\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              className=\"sr-only\"\n              id={`annotation-${question.id}`}\n              onChange={(e) => {\n                if (e.target.files && e.target.files[0]) {\n                  const reader = new FileReader()\n                  reader.onload = (event) => {\n                    if (event.target?.result) {\n                      updateQuestion(activeSection.id, question.id, { value: event.target.result as string })\n                    }\n                  }\n                  reader.readAsDataURL(e.target.files[0])\n                }\n              }}\n            />\n            {!question.value ? (\n              <label htmlFor={`annotation-${question.id}`} className=\"mobile-annotation-placeholder\">\n                <Edit size={20} />\n                <span>Add annotation</span>\n              </label>\n            ) : (\n              <div className=\"mobile-annotation-preview\">\n                <img\n                  src={(question.value as string) || \"/placeholder.svg\"}\n                  alt=\"Annotation\"\n                  className=\"mobile-annotation-image\"\n                />\n                <button\n                  className=\"mobile-annotation-remove\"\n                  onClick={() => updateQuestion(activeSection.id, question.id, { value: null })}\n                >\n                  <X size={16} />\n                </button>\n              </div>\n            )}\n          </div>\n        )\n      case \"Date & Time\":\n      case \"Inspection date\":\n        return (\n          <input\n            type=\"datetime-local\"\n            className=\"mobile-date-time\"\n            value={(question.value as string) || new Date().toISOString().slice(0, 16)}\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\n          />\n        )\n      case \"Site\":\n        const siteOptions = [\"Main Site\", \"Secondary Site\", \"Remote Location\", \"Headquarters\"]\n        return (\n          <select\n            className=\"mobile-dropdown-field\"\n            value={(question.value as string) || \"\"}\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\n          >\n            <option value=\"\" disabled>\n              Select site\n            </option>\n            {siteOptions.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        )\n      case \"Person\":\n        const personOptions = [\"John Doe\", \"Jane Smith\", \"Alex Johnson\", \"Sam Wilson\"]\n        return (\n          <select\n            className=\"mobile-dropdown-field\"\n            value={(question.value as string) || \"\"}\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\n          >\n            <option value=\"\" disabled>\n              Select person\n            </option>\n            {personOptions.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        )\n      case \"Inspection location\":\n        const locationOptions = [\"Main Building\", \"Warehouse\", \"Office\", \"Factory Floor\", \"Parking Lot\"]\n        return (\n          <select\n            className=\"mobile-dropdown-field\"\n            value={(question.value as string) || \"\"}\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\n          >\n            <option value=\"\" disabled>\n              Select location\n            </option>\n            {locationOptions.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        )\n      default:\n        return <div className=\"mobile-text-input\">Response placeholder</div>\n    }\n  }\n\n  const renderMobilePreview = () => {\n    if (!showMobilePreview) {\n      return (\n        <div className=\"mobile-preview-collapsed\">\n          <button className=\"show-mobile-preview-button\" onClick={() => setShowMobilePreview(true)}>\n            <div className=\"mobile-icon\">\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"5\" y=\"2\" width=\"14\" height=\"20\" rx=\"2\" stroke=\"currentColor\" strokeWidth=\"2\" />\n                <line x1=\"5\" y1=\"18\" x2=\"19\" y2=\"18\" stroke=\"currentColor\" strokeWidth=\"2\" />\n                <line x1=\"9\" y1=\"21\" x2=\"15\" y2=\"21\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" />\n              </svg>\n            </div>\n            <span>Show Preview</span>\n          </button>\n        </div>\n      )\n    }\n\n    // Add null check for template\n    if (!template) {\n      return <div className=\"mobile-preview\">Loading...</div>\n    }\n\n    const activeSection = template.sections?.find((s) => s.id === activeSectionId) || template.sections?.[0]\n\n    if (!activeSection) {\n      return (\n        <div className=\"mobile-preview\">\n          <div className=\"mobile-preview-header\">\n            <button className=\"mobile-preview-close\" onClick={() => setShowMobilePreview(false)}>\n              <X size={16} />\n              <span>Hide Preview</span>\n            </button>\n          </div>\n          <div className=\"mobile-device-container\">\n            <div className=\"mobile-device\">\n              <div className=\"mobile-content\">\n                <div className=\"mobile-template-title\">{template.title || \"Untitled Template\"}</div>\n                <div className=\"mobile-page-indicator\">No pages added yet.</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"mobile-preview\">\n        <div className=\"mobile-preview-header\">\n          <button className=\"mobile-preview-close\" onClick={() => setShowMobilePreview(false)}>\n            <X size={16} />\n            <span>Hide Preview</span>\n          </button>\n        </div>\n        <div className=\"mobile-device-container\">\n          <div className=\"mobile-device\">\n            <div className=\"mobile-device-notch\"></div>\n            <div className=\"mobile-status-bar\">\n              <div className=\"mobile-time\">\n                {new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\n              </div>\n              <div className=\"mobile-status-icons\">\n                <div className=\"mobile-signal\"></div>\n                <div className=\"mobile-wifi\"></div>\n                <div className=\"mobile-battery\"></div>\n              </div>\n            </div>\n            <div className=\"mobile-content\">\n              {template.logo && (\n                <div className=\"mobile-header-content\">\n                  <div className=\"mobile-logo\">\n                    <img src={template.logo || \"/placeholder.svg\"} alt=\"Template logo\" className=\"mobile-logo-image\" />\n                  </div>\n                  <div className=\"mobile-template-title\">{template.title}</div>\n                </div>\n              )}\n              <div className=\"mobile-page-indicator\">\n                Page {template.sections.indexOf(activeSection) + 1} of {template.sections.length}\n              </div>\n              <input\n                type=\"text\"\n                className=\"mobile-page-title\"\n                value={activeSection.title}\n                onChange={(e) => updateSection(activeSection.id, { title: e.target.value })}\n                placeholder=\"Enter page title\"\n              />\n\n              {activeSection.description && (\n                <div className=\"mobile-section-description\">{activeSection.description}</div>\n              )}\n\n              <div className=\"mobile-questions\">\n                {activeSection.questions.map((question) => (\n                  <div key={question.id} className=\"mobile-question\">\n                    <div className=\"mobile-question-text\">\n                      {question.required && <span className=\"mobile-required\">*</span>}\n                      {question.flagged && <span className=\"mobile-flagged\">⚑</span>}\n                      {question.text}\n                    </div>\n                    <div className=\"mobile-question-response\">\n                      {renderMobileQuestionResponse(question, activeSection)}\n                      {renderTriggerUI(question, activeSection)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"mobile-nav-buttons\">\n              {template.sections.map((section) => (\n                <div\n                  key={section.id}\n                  className={`mobile-nav-dot ${section.id === activeSection.id ? \"active\" : \"\"}`}\n                  onClick={() => setActiveSectionId(section.id)}\n                ></div>\n              ))}\n            </div>\n            <div className=\"mobile-home-indicator\"></div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Main Render\n  return (\n    <div className=\"template-builder\">\n      <div className=\"top-navigation\">\n        <div className=\"nav-left\">\n          <div className=\"company-name\">FASHCOGNITIVE</div>\n          <button className=\"back-button\" onClick={handleBack}>\n            <ArrowLeft size={16} />\n            <span>back</span>\n          </button>\n        </div>\n        <div className=\"nav-center\">\n          <div className=\"nav-tabs\">\n            <button className={`nav-tab ${activeTab === 0 ? \"active\" : \"\"}`} onClick={() => setActiveTab(0)}>\n              1. Build\n            </button>\n            <button\n              className={`nav-tab ${activeTab === 2 ? \"active\" : \"\"}`}\n              onClick={() => setActiveTab(2)}\n              disabled={activeTab < 2}\n            >\n              2. Report\n            </button>\n            <button\n              className={`nav-tab ${activeTab === 3 ? \"active\" : \"\"}`}\n              onClick={() => setActiveTab(3)}\n              disabled={activeTab < 3}\n            >\n              3. Access\n            </button>\n          </div>\n        </div>\n        <div className=\"nav-right\"></div>\n      </div>\n\n      <div className=\"builder-content\">\n        {activeTab === 0 && (\n          <div className=\"template-builder-container\">\n            <div className=\"template-content\">\n              <div className=\"template-header\">\n                <div className=\"template-logo\">\n                  {template.logo ? (\n                    <img\n                      src={template.logo || \"/placeholder.svg\"}\n                      alt=\"Template logo\"\n                      className=\"logo-image\"\n                      onClick={() => document.getElementById(\"logo-upload\")?.click()}\n                    />\n                  ) : (\n                    <div className=\"logo-placeholder\" onClick={() => document.getElementById(\"logo-upload\")?.click()}>\n                      <Plus size={24} />\n                    </div>\n                  )}\n                  <input\n                    id=\"logo-upload\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"sr-only\"\n                    onChange={handleLogoUpload}\n                  />\n                </div>\n                <div className=\"template-info\">\n                  <input\n                    type=\"text\"\n                    className=\"template-title\"\n                    value={template.title}\n                    onChange={(e) => updateTemplateFn({ title: e.target.value })}\n                    placeholder=\"Untitled template\"\n                  />\n                  <input\n                    type=\"text\"\n                    className=\"template-description\"\n                    value={template.description}\n                    onChange={(e) => updateTemplateFn({ description: e.target.value })}\n                    placeholder=\"Add a description\"\n                  />\n                </div>\n              </div>\n              <div className=\"sections-container\">\n                {template.sections.map((section, idx) => renderSection(section, idx))}\n              </div>\n              <div className=\"add-section-container\">\n                <div className=\"add-section-actions\">\n                  <button className=\"add-section-button\" onClick={addSection}>\n                    <Plus size={16} /> Add Section\n                  </button>\n                  <button className=\"next-button\" onClick={() => setActiveTab(2)}>\n                    Next: Report\n                    <ArrowRight size={16} />\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"mobile-preview-container\">{renderMobilePreview()}</div>\n          </div>\n        )}\n        {activeTab === 2 && (\n          <div className=\"report-page-container\">\n            <div style={{ width: \"100%\", maxWidth: \"1200px\" }}>\n              {!isLoading && template?.title && <Report template={template} />}\n            </div>\n            <div className=\"report-footer\">\n              <button className=\"next-button\" onClick={() => setActiveTab(3)}>\n                Next: Access\n                <ArrowRight size={16} />\n              </button>\n            </div>\n          </div>\n        )}\n        {activeTab === 3 && (\n          <div className=\"access-page-container\">\n            <div className=\"access-tab\">\n              <AccessManager\n                templateId={template.id}\n                templateTitle={template.title || \"Untitled Template\"}\n                initialUsers={[]}\n                onUpdatePermissions={(users) => {\n                  console.log(\"Updated permissions:\", users)\n                  // Here you would update the template with the new permissions\n                  // setTemplate({ ...template, permissions: users });\n                }}\n              />\n            </div>\n            <div className=\"access-footer\">\n              <button className=\"publish-button\" onClick={handlePublishTemplate}>\n                <Upload className=\"publish-icon\" />\n                Publish Template\n                <CheckCircle size={16} />\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default CreateTemplate\n","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/TemplateView.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/Template.tsx",["94"],"\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport \"../assets/Template.css\"\nimport {\n  Plus,\n  Search,\n  FileText,\n  User,\n  X,\n  Home,\n  Bell,\n  ClipboardCheck,\n  Calendar,\n  Play,\n  BookOpen,\n  Package,\n  AlertCircle,\n  Settings,\n} from \"lucide-react\"\n\ninterface Template {\n  id: number\n  title: string\n  lastModified?: string\n  access?: string\n}\n\n// Define interface for endpoint result data\ninterface EndpointResult {\n  status?: number\n  ok?: boolean\n  parseError?: string\n  error?: string\n}\n\n// Define interface for debug info\ninterface DebugInfo {\n  endpoints: { [endpoint: string]: EndpointResult }\n  successEndpoint?: string\n  responseData?: any\n}\n\nconst TemplatePage: React.FC = () => {\n  const navigate = useNavigate()\n\n  const menuItems = [\n    { icon: Home, label: \"Home\", href: \"/dashboard\" },\n    { icon: Search, label: \"Search\", href: \"/search\" },\n    { icon: Bell, label: \"Notifications\", href: \"/notifications\" },\n    { icon: FileText, label: \"Templates\", href: \"/templates\", active: true },\n    { icon: ClipboardCheck, label: \"Inspections\", href: \"/inspections\" },\n    { icon: Calendar, label: \"Schedule\", href: \"/schedule\" },\n    { icon: Play, label: \"Actions\", href: \"/actions\" },\n    { icon: BookOpen, label: \"Training\", href: \"/training\" },\n    { icon: Package, label: \"Assets\", href: \"/assets\" },\n    { icon: AlertCircle, label: \"Issues\", href: \"/issues\" },\n  ]\n\n  const [templates, setTemplates] = useState<Template[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [debugInfo, setDebugInfo] = useState<DebugInfo | null>(null)\n\n  // List of potential endpoints to try\n  const endpointsToTry = [\n    \"/api/templates/\",\n    \"/templates_api/\",\n    \"/templates/\",\n    \"/api/v1/templates/\",\n    \"/api/user/templates/\",\n    \"/dashboard/templates/\",\n    \"/api/users/templates/\",\n  ]\n\n  const handleCreateTemplate = () => {\n    navigate(\"/create_templates\")\n  }\n\n  // Function to test all endpoints\n  useEffect(() => {\n    const testAllEndpoints = async () => {\n      setLoading(true)\n      setError(\"\")\n\n      const results: { [endpoint: string]: EndpointResult } = {}\n\n      for (const endpoint of endpointsToTry) {\n        try {\n          const fullUrl = `http://127.0.0.1:8000${endpoint}`\n          console.log(`Testing endpoint: ${fullUrl}`)\n\n          const response = await fetch(fullUrl)\n          results[endpoint] = {\n            status: response.status,\n            ok: response.ok,\n          }\n\n          if (response.ok) {\n            try {\n              const data = await response.json()\n              console.log(`Success with ${fullUrl}:`, data)\n              setTemplates(data)\n              setDebugInfo({\n                endpoints: results,\n                successEndpoint: fullUrl,\n                responseData: data,\n              })\n              setLoading(false)\n              return // Stop trying other endpoints\n            } catch (e) {\n              if (results[endpoint]) {\n                results[endpoint].parseError = \"Could not parse JSON\"\n              }\n            }\n          }\n        } catch (err) {\n          results[endpoint] = {\n            error: err instanceof Error ? err.message : String(err),\n          }\n        }\n      }\n\n      // If we get here, none of the endpoints worked\n      console.log(\"All endpoints failed:\", results)\n      setDebugInfo({ endpoints: results })\n      setError(\"Could not connect to any templates API endpoint\")\n\n      // Fall back to demo data\n      setTemplates([\n        { id: 1, title: \"Safety Inspection Form (Demo)\", lastModified: \"2 days ago\", access: \"All users\" },\n        { id: 2, title: \"Weekly Equipment Check (Demo)\", lastModified: \"5 days ago\", access: \"Team managers\" },\n        { id: 3, title: \"Monthly Fire Safety Audit (Demo)\", lastModified: \"2 weeks ago\", access: \"Safety officers\" },\n      ])\n\n      setLoading(false)\n    }\n\n    testAllEndpoints()\n  }, [])\n\n  // Filter templates based on search term\n  const filteredTemplates = templates.filter((template) =>\n    template.title.toLowerCase().includes(searchTerm.toLowerCase()),\n  )\n\n  return (\n    <div className=\"app-container\">\n      {/* Top Navigation */}\n      <nav className=\"navbar\">\n        <div className=\"navbar-brand\">FASHCOGNITIVE</div>\n        <div className=\"navbar-actions\">\n          <button className=\"nav-button\">\n            <User size={20} />\n          </button>\n          <button className=\"nav-button\">\n            <Settings size={20} />\n          </button>\n        </div>\n      </nav>\n\n      {/* Sidebar */}\n      <aside className=\"sidebar\">\n        <nav className=\"sidebar-nav\">\n          {menuItems.map((item, index) => (\n            <a key={index} href={item.href} className={`nav-link ${item.active ? \"active\" : \"\"}`}>\n              <item.icon size={20} />\n              <span>{item.label}</span>\n            </a>\n          ))}\n        </nav>\n      </aside>\n\n      <div className=\"template-container\">\n        <div className=\"template-header\">\n          <nav className=\"template-tabs\">\n            <button className=\"tab active\">Templates</button>\n            <button className=\"tab\">Responses</button>\n            <button className=\"tab\">Public Library</button>\n            <button className=\"tab\">Archive</button>\n          </nav>\n        </div>\n\n        <div className=\"template-content\">\n          <section className=\"creation-section\">\n            <div className=\"section-header\">\n              <h2>Create your template from one of the options below.</h2>\n              <button className=\"close-button\">\n                <X size={20} />\n              </button>\n            </div>\n\n            <div className=\"creation-options\">\n              <div className=\"option-card\">\n                <div className=\"option-icon\">\n                  <Plus size={24} />\n                </div>\n                <h3>Start from scratch</h3>\n                <p>Get started with a blank template.</p>\n              </div>\n              <div className=\"option-card\">\n                <div className=\"option-icon\">\n                  <FileText size={24} />\n                </div>\n                <h3>Describe topic</h3>\n                <p>Enter a text prompt about your template.</p>\n              </div>\n              <div className=\"option-card\">\n                <div className=\"option-icon\">\n                  <Search size={24} />\n                </div>\n                <h3>Find pre-made template</h3>\n                <p>Choose from over 100,000 editable templates.</p>\n              </div>\n            </div>\n          </section>\n\n          <section className=\"templates-section\">\n            <div className=\"templates-header\">\n              <h2>\n                Templates{\" \"}\n                <span className=\"count\">\n                  (1 - {filteredTemplates.length} of {templates.length})\n                </span>\n              </h2>\n              <button className=\"create-button\" onClick={handleCreateTemplate}>\n                <Plus size={16} />\n                Create\n              </button>\n            </div>\n\n            {/* Show loading indicator or error message */}\n            {loading && <div className=\"loading\">Loading templates...</div>}\n            {error && (\n              <div className=\"error-message\">\n                {error}\n                <p>Showing demo data for display purposes.</p>\n                <details>\n                  <summary>API Debug Info (Click to expand)</summary>\n                  <pre>{JSON.stringify(debugInfo, null, 2)}</pre>\n                </details>\n              </div>\n            )}\n\n            <div className=\"search-controls\">\n              <div className=\"search-field\">\n                <Search className=\"search-icon\" size={20} />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search all templates\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <button className=\"filter-button\">\n                <Plus size={16} />\n                Add filter\n              </button>\n            </div>\n\n            <div className=\"templates-table\">\n              <table>\n                <thead>\n                  <tr>\n                    <th className=\"checkbox-column\">\n                      <input type=\"checkbox\" />\n                    </th>\n                    <th>Template</th>\n                    <th>Last modified</th>\n                    <th>Access</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredTemplates.map((template) => (\n                    <tr key={template.id}>\n                      <td className=\"checkbox-column\">\n                        <input type=\"checkbox\" />\n                      </td>\n                      <td>\n                        <div className=\"template-cell\">\n                          <div className=\"template-icon\">\n                            <FileText size={20} />\n                          </div>\n                          <span>{template.title}</span>\n                        </div>\n                      </td>\n                      <td>{template.lastModified || \"Not available\"}</td>\n                      <td>\n                        <div className=\"access-badge\">\n                          <User size={16} />\n                          <span>{template.access || \"No access specified\"}</span>\n                        </div>\n                      </td>\n                      <td>\n                        <div className=\"action-buttons\">\n                          <button className=\"start-inspection\">Start inspection</button>\n                          <button className=\"view-button\" onClick={() => navigate(`/template/${template.id}`)}>\n                            View\n                          </button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </section>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TemplatePage\n","/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/register.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/utils/csrf.ts",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/ConnectionsPanel.tsx",[],"/Users/thilak/PythonFiles/Intern/safety_culture/fashcognitive-intern/frontend/src/pages/components/AccessManager.tsx",["95","96","97","98","99"],"import React, { useState, useEffect } from 'react';\nimport {\n  User,\n  UserPlus,\n  Mail,\n  Shield,\n  Check,\n  X,\n  Edit2,\n  Trash2,\n  Search,\n  AlertCircle,\n  Info,\n  Copy,\n  ExternalLink,\n  Users\n} from 'lucide-react';\nimport './AccessManager.css';\n\n// Define permission types\nexport type PermissionLevel = 'owner' | 'admin' | 'editor' | 'viewer';\n\nexport interface UserPermission {\n  id: string;\n  name: string;\n  email: string;\n  avatar?: string;\n  permissionLevel: PermissionLevel;\n  status: 'active' | 'pending' | 'expired';\n  lastAccessed?: Date;\n}\n\nexport interface Connection {\n  id: string;\n  name: string;\n  email: string;\n  avatar?: string;\n  initials: string;\n  status: 'active' | 'pending' | 'declined';\n}\n\ninterface AccessManagerProps {\n  templateId: string;\n  templateTitle: string;\n  initialUsers?: UserPermission[];\n  onUpdatePermissions?: (users: UserPermission[]) => void;\n}\n\nconst generateId = () => Math.random().toString(36).substring(2, 9);\n\nconst getPermissionLabel = (level: PermissionLevel): string => {\n  switch (level) {\n    case 'owner':\n      return 'Owner';\n    case 'admin':\n      return 'Administrator';\n    case 'editor':\n      return 'Editor';\n    case 'viewer':\n      return 'Viewer';\n    default:\n      return 'Unknown';\n  }\n};\n\nconst getPermissionDescription = (level: PermissionLevel): string => {\n  switch (level) {\n    case 'owner':\n      return 'Full control including template deletion and ownership transfer';\n    case 'admin':\n      return 'Can edit template, manage users, and publish';\n    case 'editor':\n      return 'Can edit template content but cannot publish or manage users';\n    case 'viewer':\n      return 'Can only view and use the template';\n    default:\n      return '';\n  }\n};\n\nconst AccessManager: React.FC<AccessManagerProps> = ({\n  templateId,\n  templateTitle,\n  initialUsers = [],\n  onUpdatePermissions\n}) => {\n  // Default owner if no users provided\n  const defaultOwner: UserPermission = {\n    id: generateId(),\n    name: 'You',\n    email: 'current.user@example.com',\n    permissionLevel: 'owner',\n    status: 'active',\n    lastAccessed: new Date()\n  };\n\n  const [users, setUsers] = useState<UserPermission[]>(\n    initialUsers.length > 0 ? initialUsers : [defaultOwner]\n  );\n\n  const [showInviteForm, setShowInviteForm] = useState(false);\n  const [newUserEmail, setNewUserEmail] = useState('');\n  const [newUserPermission, setNewUserPermission] = useState<PermissionLevel>('viewer');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [editingUserId, setEditingUserId] = useState<string | null>(null);\n  const [showShareLink, setShowShareLink] = useState(false);\n  const [shareLink, setShareLink] = useState('');\n  const [linkCopied, setLinkCopied] = useState(false);\n  const [showPermissionDetails, setShowPermissionDetails] = useState(false);\n  const [showConnectionsModal, setShowConnectionsModal] = useState(false);\n  const [inviteTab, setInviteTab] = useState<'email' | 'connections'>('email');\n\n  // Sample connections data for demonstration\n  // Map to store individual permission levels for each connection\n  const [connectionPermissions, setConnectionPermissions] = useState<Record<string, PermissionLevel>>({});\n\n  const [connections, setConnections] = useState<Connection[]>([\n    {\n      id: '1',\n      name: 'Grace Miller',\n      email: 'grace.miller@example.com',\n      initials: 'GM',\n      status: 'active'\n    },\n    {\n      id: '2',\n      name: 'John Martinez',\n      email: 'john.martinez@example.com',\n      initials: 'JM',\n      status: 'active'\n    },\n    {\n      id: '3',\n      name: 'Sarah Johnson',\n      email: 'sarah.johnson@example.com',\n      initials: 'SJ',\n      status: 'active'\n    },\n    {\n      id: '4',\n      name: 'Michael Brown',\n      email: 'michael.brown@example.com',\n      initials: 'MB',\n      status: 'active'\n    },\n    {\n      id: '5',\n      name: 'Emily Davis',\n      email: 'emily.davis@example.com',\n      initials: 'ED',\n      status: 'active'\n    }\n  ]);\n\n  // Generate a share link\n  useEffect(() => {\n    setShareLink(`https://fashcognitive.com/templates/share/${templateId}?token=${generateId()}`);\n  }, [templateId]);\n\n  // Update parent component when users change\n  useEffect(() => {\n    if (onUpdatePermissions) {\n      onUpdatePermissions(users);\n    }\n  }, [users, onUpdatePermissions]);\n\n  const handleAddUser = () => {\n    if (!newUserEmail.trim()) return;\n\n    // Check if user already exists\n    if (users.some(user => user.email.toLowerCase() === newUserEmail.toLowerCase())) {\n      alert('This user has already been invited.');\n      return;\n    }\n\n    const newUser: UserPermission = {\n      id: generateId(),\n      name: newUserEmail.split('@')[0], // Extract name from email\n      email: newUserEmail,\n      permissionLevel: newUserPermission,\n      status: 'pending'\n    };\n\n    setUsers([...users, newUser]);\n    setNewUserEmail('');\n    setNewUserPermission('viewer');\n    setShowInviteForm(false);\n  };\n\n  const handleAddConnection = (connection: Connection, permissionLevel: PermissionLevel) => {\n    // Check if connection already exists as a user\n    if (users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())) {\n      alert('This user has already been invited.');\n      return;\n    }\n\n    const newUser: UserPermission = {\n      id: generateId(),\n      name: connection.name,\n      email: connection.email,\n      avatar: connection.avatar,\n      permissionLevel: permissionLevel,\n      status: 'pending'\n    };\n\n    setUsers([...users, newUser]);\n    setShowInviteForm(false);\n  };\n\n  // Initialize connection permissions with default values\n  useEffect(() => {\n    const newPermissions: Record<string, PermissionLevel> = {};\n    connections.forEach(connection => {\n      if (!connectionPermissions[connection.id]) {\n        newPermissions[connection.id] = 'viewer';\n      }\n    });\n\n    if (Object.keys(newPermissions).length > 0) {\n      setConnectionPermissions(prev => ({ ...prev, ...newPermissions }));\n    }\n  }, [connections, connectionPermissions]);\n\n  const handleConnectionPermissionChange = (connectionId: string, permissionLevel: PermissionLevel) => {\n    setConnectionPermissions(prev => ({\n      ...prev,\n      [connectionId]: permissionLevel\n    }));\n  };\n\n  // Filter connections that are not already users\n  const availableConnections = connections.filter(\n    connection => !users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())\n  );\n\n  const handleUpdatePermission = (userId: string, permissionLevel: PermissionLevel) => {\n    setUsers(users.map(user =>\n      user.id === userId ? { ...user, permissionLevel } : user\n    ));\n    setEditingUserId(null);\n  };\n\n  const handleRemoveUser = (userId: string) => {\n    // Don't allow removing the owner\n    if (users.find(user => user.id === userId)?.permissionLevel === 'owner') {\n      alert('You cannot remove the owner of the template.');\n      return;\n    }\n\n    setUsers(users.filter(user => user.id !== userId));\n  };\n\n  const handleTransferOwnership = (userId: string) => {\n    // Find current owner and new owner\n    const currentOwner = users.find(user => user.permissionLevel === 'owner');\n    const newOwner = users.find(user => user.id === userId);\n\n    if (!currentOwner || !newOwner) return;\n\n    // Swap permissions\n    setUsers(users.map(user => {\n      if (user.id === currentOwner.id) {\n        return { ...user, permissionLevel: 'admin' };\n      }\n      if (user.id === userId) {\n        return { ...user, permissionLevel: 'owner' };\n      }\n      return user;\n    }));\n\n    setEditingUserId(null);\n  };\n\n  const copyShareLink = () => {\n    navigator.clipboard.writeText(shareLink);\n    setLinkCopied(true);\n    setTimeout(() => setLinkCopied(false), 2000);\n  };\n\n  // Filter users based on search term\n  const filteredUsers = users.filter(user =>\n    user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"access-manager\">\n      <div style={{ width: '100%', maxWidth: '1000px' }}>\n      <div className=\"access-header\">\n        <h2>Manage Access</h2>\n        <p>Control who can view and edit \"{templateTitle}\"</p>\n      </div>\n\n      <div className=\"access-actions\">\n        <div className=\"search-container\">\n          <Search size={18} className=\"search-icon\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search users...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"search-input\"\n          />\n        </div>\n\n        <div className=\"action-buttons\">\n          <button\n            className=\"share-link-button\"\n            onClick={() => setShowShareLink(!showShareLink)}\n          >\n            <ExternalLink size={16} />\n            Share Link\n          </button>\n\n          <button\n            className=\"invite-button\"\n            onClick={() => setShowInviteForm(!showInviteForm)}\n          >\n            <UserPlus size={16} />\n            Invite User\n          </button>\n        </div>\n      </div>\n\n      {showShareLink && (\n        <div className=\"share-link-container\">\n          <div className=\"share-link-header\">\n            <h3>Share Template</h3>\n            <button className=\"close-button\" onClick={() => setShowShareLink(false)}>\n              <X size={16} />\n            </button>\n          </div>\n          <p>Anyone with this link can view this template:</p>\n          <div className=\"share-link-input\">\n            <input type=\"text\" value={shareLink} readOnly />\n            <button onClick={copyShareLink}>\n              <Copy size={16} />\n              {linkCopied ? 'Copied!' : 'Copy'}\n            </button>\n          </div>\n        </div>\n      )}\n\n      {showInviteForm && (\n        <div className=\"invite-form\">\n          <div className=\"invite-form-header\">\n            <h3>Invite User</h3>\n            <button className=\"close-button\" onClick={() => setShowInviteForm(false)}>\n              <X size={16} />\n            </button>\n          </div>\n\n          <div className=\"invite-tabs\">\n            <button\n              className={`invite-tab ${inviteTab === 'email' ? 'active' : ''}`}\n              onClick={() => setInviteTab('email')}\n            >\n              <Mail size={16} />\n              Email\n            </button>\n            <button\n              className={`invite-tab ${inviteTab === 'connections' ? 'active' : ''}`}\n              onClick={() => setInviteTab('connections')}\n            >\n              <Users size={16} />\n              My Connections\n            </button>\n          </div>\n\n          {inviteTab === 'email' ? (\n            <div className=\"tab-content\">\n              <div className=\"form-group\">\n                <label>Email Address</label>\n                <div className=\"email-input\">\n                  <Mail size={18} className=\"email-icon\" />\n                  <input\n                    type=\"email\"\n                    placeholder=\"Enter email address\"\n                    value={newUserEmail}\n                    onChange={(e) => setNewUserEmail(e.target.value)}\n                  />\n                </div>\n              </div>\n\n              <div className=\"form-group\">\n                <label>\n                  Permission Level\n                  <button\n                    className=\"info-button\"\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\n                  >\n                    <Info size={14} />\n                  </button>\n                </label>\n                <select\n                  value={newUserPermission}\n                  onChange={(e) => setNewUserPermission(e.target.value as PermissionLevel)}\n                >\n                  <option value=\"viewer\">Viewer</option>\n                  <option value=\"editor\">Editor</option>\n                  <option value=\"admin\">Administrator</option>\n                </select>\n              </div>\n\n              {showPermissionDetails && (\n                <div className=\"permission-details\">\n                  <div className=\"permission-item\">\n                    <h4>Viewer</h4>\n                    <p>Can view and use the template but cannot make changes</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Editor</h4>\n                    <p>Can edit template content but cannot publish or manage users</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Administrator</h4>\n                    <p>Can edit template, manage users, and publish</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Owner</h4>\n                    <p>Full control including template deletion and ownership transfer</p>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"invite-actions\">\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\n                <button\n                  className=\"send-invite-button\"\n                  onClick={handleAddUser}\n                  disabled={!newUserEmail.trim()}\n                >\n                  Send Invite\n                </button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"tab-content\">\n              <div className=\"form-group\">\n                <label>\n                  Permission Levels\n                  <button\n                    className=\"info-button\"\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\n                  >\n                    <Info size={14} />\n                  </button>\n                </label>\n                <p className=\"permission-hint\">Set permission level for each connection individually</p>\n              </div>\n\n              {showPermissionDetails && (\n                <div className=\"permission-details\">\n                  <div className=\"permission-item\">\n                    <h4>Viewer</h4>\n                    <p>Can view and use the template but cannot make changes</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Editor</h4>\n                    <p>Can edit template content but cannot publish or manage users</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Administrator</h4>\n                    <p>Can edit template, manage users, and publish</p>\n                  </div>\n                  <div className=\"permission-item\">\n                    <h4>Owner</h4>\n                    <p>Full control including template deletion and ownership transfer</p>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"connections-list-container\">\n                <h4 className=\"connections-list-title\">\n                  Select from your connections\n                  <span className=\"connections-count\">({availableConnections.length})</span>\n                </h4>\n\n                {availableConnections.length === 0 ? (\n                  <div className=\"no-connections-message\">\n                    <p>All your connections have already been invited to this template.</p>\n                  </div>\n                ) : (\n                  <div className=\"connections-select-list\">\n                    {availableConnections.map(connection => (\n                      <div key={connection.id} className=\"connection-select-item\">\n                        <div className=\"connection-info\">\n                          {connection.avatar ? (\n                            <img src={connection.avatar} alt={connection.name} className=\"connection-avatar\" />\n                          ) : (\n                            <div className=\"connection-initials\">{connection.initials}</div>\n                          )}\n                          <div className=\"connection-details\">\n                            <span className=\"connection-name\">{connection.name}</span>\n                            <span className=\"connection-email\">{connection.email}</span>\n                          </div>\n                        </div>\n                        <div className=\"connection-actions\">\n                          <select\n                            className=\"connection-permission-select\"\n                            value={connectionPermissions[connection.id] || 'viewer'}\n                            onChange={(e) => handleConnectionPermissionChange(connection.id, e.target.value as PermissionLevel)}\n                          >\n                            <option value=\"viewer\">Viewer</option>\n                            <option value=\"editor\">Editor</option>\n                            <option value=\"admin\">Admin</option>\n                          </select>\n                          <button\n                            className=\"add-connection-btn\"\n                            onClick={() => handleAddConnection(connection, connectionPermissions[connection.id] || 'viewer')}\n                          >\n                            Add\n                          </button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"invite-actions\">\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      <div className=\"users-list-container\">\n        <div className=\"users-list-header\">\n          <div className=\"user-column\">User</div>\n          <div className=\"permission-column\">Permission</div>\n          <div className=\"status-column\">Status</div>\n          <div className=\"actions-column\">Actions</div>\n        </div>\n\n        <div className=\"users-list\">\n          {filteredUsers.length === 0 ? (\n            <div className=\"no-users\">\n              <AlertCircle size={24} />\n              <p>No users found matching \"{searchTerm}\"</p>\n            </div>\n          ) : (\n            filteredUsers.map(user => (\n              <div key={user.id} className=\"user-item\">\n                <div className=\"user-info\">\n                  <div className=\"user-avatar\">\n                    {user.avatar ? (\n                      <img src={user.avatar} alt={user.name} />\n                    ) : (\n                      <div className=\"avatar-placeholder\">\n                        {user.name.charAt(0).toUpperCase()}\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"user-details\">\n                    <div className=\"user-name\">{user.name}</div>\n                    <div className=\"user-email\">{user.email}</div>\n                  </div>\n                </div>\n\n                <div className=\"user-permission\">\n                  {editingUserId === user.id ? (\n                    <select\n                      value={user.permissionLevel}\n                      onChange={(e) => handleUpdatePermission(user.id, e.target.value as PermissionLevel)}\n                      className=\"permission-select\"\n                    >\n                      <option value=\"viewer\">Viewer</option>\n                      <option value=\"editor\">Editor</option>\n                      <option value=\"admin\">Administrator</option>\n                      <option value=\"owner\">Owner (Transfer Ownership)</option>\n                    </select>\n                  ) : (\n                    <div className={`permission-badge ${user.permissionLevel}`}>\n                      <Shield size={14} />\n                      <span>{getPermissionLabel(user.permissionLevel)}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"user-status\">\n                  <div className={`status-badge ${user.status}`}>\n                    {user.status === 'active' && <Check size={14} />}\n                    {user.status === 'pending' && <Mail size={14} />}\n                    {user.status === 'expired' && <AlertCircle size={14} />}\n                    <span>{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\n                  </div>\n                </div>\n\n                <div className=\"user-actions\">\n                  {user.permissionLevel !== 'owner' && (\n                    <>\n                      {editingUserId === user.id ? (\n                        <button\n                          className=\"save-button\"\n                          onClick={() => setEditingUserId(null)}\n                        >\n                          <Check size={16} />\n                        </button>\n                      ) : (\n                        <button\n                          className=\"edit-button\"\n                          onClick={() => setEditingUserId(user.id)}\n                        >\n                          <Edit2 size={16} />\n                        </button>\n                      )}\n                      <button\n                        className=\"delete-button\"\n                        onClick={() => handleRemoveUser(user.id)}\n                      >\n                        <Trash2 size={16} />\n                      </button>\n                    </>\n                  )}\n                  {user.permissionLevel === 'owner' && (\n                    <div className=\"owner-badge\">\n                      <User size={14} />\n                      <span>Owner</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AccessManager;\n",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":136,"column":15,"nodeType":"106","endLine":136,"endColumn":49},{"ruleId":"104","severity":1,"message":"105","line":159,"column":15,"nodeType":"106","endLine":159,"endColumn":56},{"ruleId":"104","severity":1,"message":"105","line":168,"column":15,"nodeType":"106","endLine":168,"endColumn":58},{"ruleId":"104","severity":1,"message":"105","line":205,"column":17,"nodeType":"106","endLine":205,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":208,"column":17,"nodeType":"106","endLine":208,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":211,"column":17,"nodeType":"106","endLine":211,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":214,"column":17,"nodeType":"106","endLine":214,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":222,"column":17,"nodeType":"106","endLine":222,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":225,"column":17,"nodeType":"106","endLine":225,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":228,"column":17,"nodeType":"106","endLine":228,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":231,"column":17,"nodeType":"106","endLine":231,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":234,"column":17,"nodeType":"106","endLine":234,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":242,"column":17,"nodeType":"106","endLine":242,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":245,"column":17,"nodeType":"106","endLine":245,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":248,"column":17,"nodeType":"106","endLine":248,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":251,"column":17,"nodeType":"106","endLine":251,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":254,"column":17,"nodeType":"106","endLine":254,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":257,"column":17,"nodeType":"106","endLine":257,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":265,"column":17,"nodeType":"106","endLine":265,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":268,"column":17,"nodeType":"106","endLine":268,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":271,"column":17,"nodeType":"106","endLine":271,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":274,"column":17,"nodeType":"106","endLine":274,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":277,"column":17,"nodeType":"106","endLine":277,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":280,"column":17,"nodeType":"106","endLine":280,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":287,"column":13,"nodeType":"106","endLine":287,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":300,"column":13,"nodeType":"106","endLine":300,"endColumn":70},{"ruleId":"104","severity":1,"message":"105","line":303,"column":13,"nodeType":"106","endLine":303,"endColumn":71},{"ruleId":"104","severity":1,"message":"105","line":306,"column":13,"nodeType":"106","endLine":306,"endColumn":71},{"ruleId":"104","severity":1,"message":"105","line":309,"column":13,"nodeType":"106","endLine":309,"endColumn":72},{"ruleId":"107","severity":1,"message":"108","line":51,"column":10,"nodeType":"109","messageId":"110","endLine":51,"endColumn":19},{"ruleId":"107","severity":1,"message":"111","line":1614,"column":10,"nodeType":"109","messageId":"110","endLine":1614,"endColumn":22},{"ruleId":"112","severity":1,"message":"113","line":1762,"column":6,"nodeType":"114","endLine":1762,"endColumn":8,"suggestions":"115"},{"ruleId":"107","severity":1,"message":"116","line":2172,"column":15,"nodeType":"109","messageId":"110","endLine":2172,"endColumn":38},{"ruleId":"112","severity":1,"message":"117","line":143,"column":6,"nodeType":"114","endLine":143,"endColumn":8,"suggestions":"118"},{"ruleId":"107","severity":1,"message":"119","line":66,"column":7,"nodeType":"109","messageId":"110","endLine":66,"endColumn":31},{"ruleId":"107","severity":1,"message":"120","line":110,"column":10,"nodeType":"109","messageId":"110","endLine":110,"endColumn":30},{"ruleId":"107","severity":1,"message":"121","line":110,"column":32,"nodeType":"109","messageId":"110","endLine":110,"endColumn":55},{"ruleId":"107","severity":1,"message":"122","line":117,"column":23,"nodeType":"109","messageId":"110","endLine":117,"endColumn":37},{"ruleId":"107","severity":1,"message":"123","line":253,"column":9,"nodeType":"109","messageId":"110","endLine":253,"endColumn":32},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'getCookie' is defined but never used.","Identifier","unusedVar","'templateData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getInitialTemplate'. Either include it or remove the dependency array.","ArrayExpression",["126"],"'_exhaustiveCheck' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'endpointsToTry'. Either include it or remove the dependency array.",["127"],"'getPermissionDescription' is assigned a value but never used.","'showConnectionsModal' is assigned a value but never used.","'setShowConnectionsModal' is assigned a value but never used.","'setConnections' is assigned a value but never used.","'handleTransferOwnership' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [getInitialTemplate]",{"range":"132","text":"133"},"Update the dependencies array to be: [endpointsToTry]",{"range":"134","text":"135"},[61982,61984],"[getInitialTemplate]",[4062,4064],"[endpointsToTry]"]