[{"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\index.tsx":"1","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\App.tsx":"2","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\routes.tsx":"3","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\TemplateView.tsx":"4","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Template.tsx":"5","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\register.tsx":"6","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Dashboard.tsx":"7","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\garment-template.tsx":"8","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\login.tsx":"9","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\home.tsx":"10","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Create_template.tsx":"11","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\aqlHelpers.ts":"12","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\csrf.ts":"13","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\components\\AccessManager.tsx":"14","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\components\\ConnectionsPanel.tsx":"15","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\aqlTables.ts":"16"},{"size":332,"mtime":1740314516837,"results":"17","hashOfConfig":"18"},{"size":244,"mtime":1745474310903,"results":"19","hashOfConfig":"18"},{"size":1303,"mtime":1746938442097,"results":"20","hashOfConfig":"18"},{"size":8303,"mtime":1746940154391,"results":"21","hashOfConfig":"18"},{"size":13888,"mtime":1746939843178,"results":"22","hashOfConfig":"18"},{"size":10401,"mtime":1747196602198,"results":"23","hashOfConfig":"18"},{"size":9676,"mtime":1746940055373,"results":"24","hashOfConfig":"18"},{"size":136554,"mtime":1747055613859,"results":"25","hashOfConfig":"18"},{"size":5040,"mtime":1747195134646,"results":"26","hashOfConfig":"18"},{"size":51401,"mtime":1747195900779,"results":"27","hashOfConfig":"18"},{"size":116711,"mtime":1747111499598,"results":"28","hashOfConfig":"18"},{"size":466,"mtime":1746859391926,"results":"29","hashOfConfig":"18"},{"size":1118,"mtime":1746677293210,"results":"30","hashOfConfig":"18"},{"size":23977,"mtime":1746854187901,"results":"31","hashOfConfig":"18"},{"size":10716,"mtime":1745322908030,"results":"32","hashOfConfig":"18"},{"size":4935,"mtime":1747055501583,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1vmq1fr",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\index.tsx",[],["71","72"],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\App.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\routes.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\TemplateView.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Template.tsx",["73"],"\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useState, useEffect, useRef } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport \"../assets/Template.css\"\r\nimport {\r\n  Plus,\r\n  Search,\r\n  FileText,\r\n  User,\r\n  X,\r\n  Home,\r\n  Bell,\r\n  ClipboardCheck,\r\n  Calendar,\r\n  Play,\r\n  BookOpen,\r\n  Package,\r\n  AlertCircle,\r\n  Settings,\r\n  ChevronDown,\r\n  LogOut,\r\n} from \"lucide-react\"\r\n\r\ninterface Template {\r\n  id: number\r\n  title: string\r\n  lastModified?: string\r\n  access?: string\r\n  createdBy: string\r\n}\r\n\r\ninterface EndpointResult {\r\n  status?: number\r\n  ok?: boolean\r\n  parseError?: string\r\n  error?: string\r\n}\r\n\r\ninterface DebugInfo {\r\n  endpoints: { [endpoint: string]: EndpointResult }\r\n  successEndpoint?: string\r\n  responseData?: any\r\n}\r\n\r\nconst TemplatePage: React.FC = () => {\r\n  const navigate = useNavigate()\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n\r\n  const menuItems = [\r\n    { icon: Home, label: \"Home\", href: \"/dashboard\" },\r\n    { icon: Search, label: \"Search\", href: \"/search\" },\r\n    { icon: Bell, label: \"Notifications\", href: \"/notifications\" },\r\n    { icon: FileText, label: \"Templates\", href: \"/templates\", active: true },\r\n    { icon: ClipboardCheck, label: \"Inspections\", href: \"/inspections\" },\r\n    { icon: Calendar, label: \"Schedule\", href: \"/schedule\" },\r\n    { icon: Play, label: \"Actions\", href: \"/actions\" },\r\n    { icon: BookOpen, label: \"Training\", href: \"/training\" },\r\n    { icon: Package, label: \"Assets\", href: \"/assets\" },\r\n    { icon: AlertCircle, label: \"Issues\", href: \"/issues\" },\r\n  ]\r\n\r\n  const [templates, setTemplates] = useState<Template[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(\"\")\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [debugInfo, setDebugInfo] = useState<DebugInfo | null>(null)\r\n  const [showCreateDropdown, setShowCreateDropdown] = useState(false)\r\n\r\n  const loggedInUser = localStorage.getItem(\"username\")\r\n\r\n  const filteredTemplates = templates.filter((template) =>\r\n    template.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n  )\r\n\r\n  const endpointsToTry = [\r\n    \"/api/templates/\",\r\n    \"/templates_api/\",\r\n    \"/templates/\",\r\n    \"/api/v1/templates/\",\r\n    \"/api/user/templates/\",\r\n    \"/dashboard/templates/\",\r\n    \"/api/users/templates/\",\r\n  ]\r\n\r\n  // Toggle the create template dropdown\r\n  const toggleCreateDropdown = () => {\r\n    setShowCreateDropdown(!showCreateDropdown)\r\n  }\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setShowCreateDropdown(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n\r\n  const handleLogout = () => {\r\n    // Clear authentication tokens or user data\r\n    localStorage.removeItem('authToken'); // Example: Remove token from localStorage\r\n\r\n    // Redirect to login page\r\n    window.location.href = '/login';\r\n  };\r\n\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen(!isDropdownOpen);\r\n  };\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutsideSettings = (event: MouseEvent) => {\r\n      const target = event.target as Node;\r\n      const settingsButton = document.querySelector('.tp-nav-button');\r\n      const dropdownMenu = document.querySelector('.tp-dropdown-menu');\r\n\r\n      if (\r\n        isDropdownOpen &&\r\n        settingsButton &&\r\n        dropdownMenu &&\r\n        !settingsButton.contains(target) &&\r\n        !dropdownMenu.contains(target)\r\n      ) {\r\n        setIsDropdownOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutsideSettings);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutsideSettings);\r\n    };\r\n  }, [isDropdownOpen]);\r\n\r\n  useEffect(() => {\r\n    const testAllEndpoints = async () => {\r\n      setLoading(true)\r\n      setError(\"\")\r\n      const results: { [endpoint: string]: EndpointResult } = {}\r\n\r\n      for (const endpoint of endpointsToTry) {\r\n        try {\r\n          const fullUrl = `http://127.0.0.1:8000${endpoint}`\r\n          const response = await fetch(fullUrl)\r\n          results[endpoint] = {\r\n            status: response.status,\r\n            ok: response.ok,\r\n          }\r\n\r\n          if (response.ok) {\r\n            try {\r\n              console.log(\"Logged in user:\", loggedInUser)\r\n\r\n              const data = await response.json()\r\n              console.log(\"Full response data:\", data);\r\n              console.log(\"Template creators:\", data.map((t: Template) => t.createdBy || 'Unknown'));\r\n              setTemplates(data.filter((template: Template) => template.createdBy === loggedInUser))\r\n\r\n              setDebugInfo({ endpoints: results, successEndpoint: fullUrl, responseData: data })\r\n              setLoading(false)\r\n              return\r\n            } catch {\r\n              results[endpoint].parseError = \"Could not parse JSON\"\r\n            }\r\n          }\r\n        } catch (err) {\r\n          results[endpoint] = {\r\n            error: err instanceof Error ? err.message : String(err),\r\n          }\r\n        }\r\n      }\r\n\r\n      setDebugInfo({ endpoints: results })\r\n      setError(\"Could not connect to any templates API endpoint\")\r\n      setTemplates([\r\n        { id: 1, title: \"Safety Inspection Form (Demo)\", lastModified: \"2 days ago\", access: \"All users\", createdBy: \"demoUser\" },\r\n        { id: 2, title: \"Weekly Equipment Check (Demo)\", lastModified: \"5 days ago\", access: \"Team managers\", createdBy: \"demoUser\" },\r\n        { id: 3, title: \"Monthly Fire Safety Audit (Demo)\", lastModified: \"2 weeks ago\", access: \"Safety officers\", createdBy: \"demoUser\" },\r\n      ])\r\n      setLoading(false)\r\n    }\r\n\r\n    testAllEndpoints()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"tp-app-container\">\r\n      <nav className=\"tp-navbar\">\r\n        <div className=\"tp-navbar-brand\">FASHCOGNITIVE</div>\r\n        <div className=\"tp-navbar-actions\">\r\n          <button className=\"tp-nav-button\">\r\n            <User className=\"tp-nav-icon\" />\r\n          </button>\r\n          <div className=\"tp-dropdown-container\">\r\n            <button\r\n              className=\"tp-nav-button\"\r\n              onClick={toggleDropdown}\r\n              style={{\r\n                position: 'relative',\r\n                backgroundColor: isDropdownOpen ? 'rgba(72, 149, 239, 0.1)' : 'transparent'\r\n              }}\r\n              title=\"Settings\"\r\n            >\r\n              <Settings className=\"tp-nav-icon\" />\r\n            </button>\r\n            {isDropdownOpen && (\r\n              <div className=\"tp-dropdown-menu\">\r\n                <button\r\n                  className=\"tp-dropdown-item logout-button\"\r\n                  onClick={handleLogout}\r\n                  style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '0.75rem',\r\n                    padding: '0.75rem 1.5rem',\r\n                    background: 'linear-gradient(135deg, #ff4b4b 0%, #ff6b6b 100%)',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    borderRadius: 'var(--border-radius)',\r\n                    fontSize: '0.95rem',\r\n                    fontWeight: '600',\r\n                    cursor: 'pointer',\r\n                    transition: 'var(--transition)',\r\n                    margin: '0.5rem 1rem',\r\n                    boxShadow: 'var(--shadow-sm)',\r\n                    width: 'calc(100% - 2rem)'\r\n                  }}\r\n                >\r\n                  <LogOut size={18} />\r\n                  <span>Logout</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <aside className=\"dashboard-sidebar\">\r\n        <nav className=\"dashboard-sidebar-nav\">\r\n          {menuItems.map((item, i) => (\r\n            <a key={i} href={item.href} className={`dashboard-nav-link ${item.active ? \"active\" : \"\"}`}>\r\n              <item.icon size={20} /><span>{item.label}</span>\r\n            </a>\r\n          ))}\r\n        </nav>\r\n      </aside>\r\n\r\n      <div className=\"tp-template-container\">\r\n        <div className=\"tp-template-header\">\r\n          <nav className=\"tp-template-tabs\">\r\n            <button className=\"tp-tab active\">Templates</button>\r\n            <button className=\"tp-tab\">Responses</button>\r\n            <button className=\"tp-tab\">Public Library</button>\r\n            <button className=\"tp-tab\">Archive</button>\r\n          </nav>\r\n        </div>\r\n\r\n        <div className=\"tp-template-content\">\r\n          <section className=\"tp-creation-section\">\r\n            <div className=\"tp-section-header\">\r\n              <h2>Create your template from one of the options below.</h2>\r\n              <button className=\"tp-close-button\"><X size={20} /></button>\r\n            </div>\r\n\r\n            <div className=\"tp-creation-options\">\r\n              <div className=\"tp-option-card\">\r\n                <div className=\"tp-option-icon\"><Plus size={24} /></div>\r\n                <h3>Start from scratch</h3>\r\n                <p>Get started with a blank template.</p>\r\n              </div>\r\n              <div className=\"tp-option-card\">\r\n                <div className=\"tp-option-icon\"><FileText size={24} /></div>\r\n                <h3>Describe topic</h3>\r\n                <p>Enter a text prompt about your template.</p>\r\n              </div>\r\n              <div className=\"tp-option-card\">\r\n                <div className=\"tp-option-icon\"><Search size={24} /></div>\r\n                <h3>Find pre-made template</h3>\r\n                <p>Choose from over 100,000 editable templates.</p>\r\n              </div>\r\n            </div>\r\n          </section>\r\n\r\n          <section className=\"tp-templates-section\">\r\n            <div className=\"tp-templates-header\">\r\n              <h2>Templates <span className=\"tp-count\">(1 - {filteredTemplates.length} of {templates.length})</span></h2>\r\n              <div className=\"tp-create-dropdown\" ref={dropdownRef}>\r\n                <button className=\"tp-create-button\" onClick={toggleCreateDropdown}>\r\n                  <Plus size={16} />\r\n                  Create\r\n                  <ChevronDown size={16} className={`tp-dropdown-icon ${showCreateDropdown ? 'open' : ''}`} />\r\n                </button>\r\n                {showCreateDropdown && (\r\n                  <div className=\"tp-dropdown-menu\">\r\n                    <a href=\"/create_templates\" className=\"tp-dropdown-item\">\r\n                      <FileText size={16} />\r\n                      Standard Template\r\n                    </a>\r\n                    <a href=\"/garment-template\" className=\"tp-dropdown-item\">\r\n                      <FileText size={16} />\r\n                      Garment Template\r\n                    </a>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {loading && <div className=\"tp-loading\">Loading templates...</div>}\r\n            {error && (\r\n              <div className=\"tp-error-message\">\r\n                {error}<p>Showing demo data for display purposes.</p>\r\n                <details><summary>API Debug Info (Click to expand)</summary><pre>{JSON.stringify(debugInfo, null, 2)}</pre></details>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"tp-search-controls\">\r\n              <div className=\"tp-search-field\">\r\n                <Search className=\"tp-search-icon\" size={20} />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Search all templates\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                />\r\n              </div>\r\n              <button className=\"tp-filter-button\"><Plus size={16} /> Add filter</button>\r\n            </div>\r\n\r\n            <div className=\"tp-templates-table\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"tp-checkbox-column\"><input type=\"checkbox\" /></th>\r\n                    <th>Template</th>\r\n                    <th>Last modified</th>\r\n                    <th>Access</th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {filteredTemplates.map((template) => (\r\n                    <tr key={template.id}>\r\n                      <td className=\"tp-checkbox-column\"><input type=\"checkbox\" /></td>\r\n                      <td>\r\n                        <div className=\"tp-template-cell\">\r\n                          <div className=\"tp-template-icon\"><FileText size={20} /></div>\r\n                          <span>{template.title}</span>\r\n                        </div>\r\n                      </td>\r\n                      <td>{template.lastModified || \"Not available\"}</td>\r\n                      <td>\r\n                        <div className=\"tp-access-badge\">\r\n                          <User size={16} />\r\n                          <span>{template.access || \"No access specified\"}</span>\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        <div className=\"tp-action-buttons\">\r\n                          <button className=\"tp-start-inspection\">Start inspection</button>\r\n                          <button className=\"tp-view-button\" onClick={() => navigate(`/template/${template.id}`)}>View</button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TemplatePage","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\register.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Dashboard.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\garment-template.tsx",["74"],"\n\"use client\"\n\nimport React, { useState, useRef, useEffect } from \"react\"\nimport { useNavigate, useParams } from \"react-router-dom\"\nimport { ChevronDown, ChevronUp, Edit, Plus, Calendar, User, MapPin, X, Check, ImageIcon, Trash2, Move, Clock, ArrowLeft, ArrowRight, CheckCircle, Settings, Ruler, Box, List, Shirt, FileText, Printer } from 'lucide-react'\nimport \"./garment-template.css\"\nimport \"./print-styles.css\"\nimport AccessManager from \"./components/AccessManager\"\nimport { getAqlCodeLetter, getSamplePlan } from \"../utils/aqlHelpers\"\nimport { InspectionLevel as AqlInspectionLevel } from \"../utils/aqlTables\";\n\n\n// Types\ntype ResponseType =\n  | \"Site\"\n  | \"Inspection date\"\n  | \"Person\"\n  | \"Inspection location\"\n  | \"Text\"\n  | \"Number\"\n  | \"Checkbox\"\n  | \"Yes/No\"\n  | \"Multiple choice\"\n  | \"Slider\"\n  | \"Media\"\n  | \"Annotation\"\n  | \"Date & Time\"\n\n\n\ntype TriggerAction = \"require_action\" | \"require_evidence\" | \"notify\" | \"ask_questions\" | \"display_message\"\n\ntype LogicCondition =\n  | \"is\"\n  | \"is not\"\n  | \"contains\"\n  | \"not contains\"\n  | \"starts with\"\n  | \"ends with\"\n  | \"matches (regex)\"\n  | \"less than\"\n  | \"less than or equal to\"\n  | \"equal to\"\n  | \"not equal to\"\n  | \"greater than or equal to\"\n  | \"greater than\"\n  | \"between\"\n  | \"not between\"\n  | \"is one of\"\n  | \"is not one of\"\n\ninterface LogicRule {\n  id: string\n  condition: LogicCondition\n  value: string | number | string[] | [number, number] | null\n  trigger: TriggerAction | null\n  triggerConfig?: any\n  message?: string\n  subQuestion?: {\n    text: string\n    responseType: ResponseType\n  }\n}\n\ninterface Question {\n  id: string\n  text: string\n  responseType: ResponseType\n  required: boolean\n  flagged: boolean\n  options?: string[]\n  value?: string | string[] | boolean | number | null\n  logicRules?: LogicRule[]\n  multipleSelection?: boolean\n}\n\n// Garment-specific types\ntype AQLLevel = \"1.5\" | \"2.5\" | \"4.0\" | \"6.5\"\ntype InspectionLevel = \"I\" | \"II\" | \"III\" | \"S1\" | \"S2\" | \"S3\" | \"S4\"\ntype SamplingPlan = \"Single\" | \"Double\" | \"Multiple\"\ntype Severity = \"Normal\" | \"Tightened\" | \"Reduced\"\n\ninterface GarmentDetailsContent {\n  aqlSettings: {\n    aqlLevel: AQLLevel\n    inspectionLevel: InspectionLevel\n    samplingPlan: SamplingPlan\n    severity: Severity\n  }\n  sizes: string[]\n  colors: string[]\n  includeCartonOffered: boolean\n  includeCartonInspected: boolean\n  defaultDefects: string[]\n}\n\ninterface StandardSectionContent {\n  description?: string\n  questions: Question[]\n}\n\ntype SectionType = \"standard\" | \"garmentDetails\"\n\ninterface AppSection {\n  id: string\n  type: SectionType\n  title: string\n  isCollapsed: boolean\n  content: StandardSectionContent | GarmentDetailsContent\n}\n\ninterface Template {\n  id: string\n  title: string\n  description: string\n  logo?: string\n  sections: AppSection[]\n  lastSaved?: Date\n  lastPublished?: Date\n  startDate?: string\n  dueDate?: string\n}\n\ninterface ReportData {\n  quantities: {\n    [color: string]: {\n      [size: string]: QuantityData\n    }\n  }\n  cartonOffered: string\n  cartonInspected: string\n  cartonToInspect: string\n  defects: {\n    type: string\n    remarks: string\n    critical: number | string\n    major: number | string\n    minor: number | string\n    images?: string[]\n  }[]\n  aqlSettings: {\n    aqlLevel: AQLLevel\n    inspectionLevel: InspectionLevel\n    samplingPlan: SamplingPlan\n    severity: Severity\n    status: \"PASS\" | \"FAIL\"\n  }\n  editingAql: boolean\n  newSize: string\n  newColor: string\n  questionAnswers: {\n    [questionId: string]: string | string[] | boolean | number | null\n  }\n}\n\n// Update the type for quantities in ReportData\ninterface QuantityData {\n  [key: string]: string; // This allows indexing with strings\n  orderQty: string;\n  offeredQty: string;\n}\n\n// Type for defect fields\ninterface DefectData {\n  type: string;\n  remarks: string;\n  critical: number | string;\n  major: number | string;\n  minor: number | string;\n  images?: string[];\n  [key: string]: any; // Add index signature\n}\n\n// This function will be defined inside the component\n\n// Constants\nconst AQL_LEVELS: AQLLevel[] = [\"1.5\", \"2.5\", \"4.0\", \"6.5\"]\nconst INSPECTION_LEVELS: InspectionLevel[] = [\"I\", \"II\", \"III\", \"S1\", \"S2\", \"S3\", \"S4\"]\nconst SAMPLING_PLANS: SamplingPlan[] = [\"Single\", \"Double\", \"Multiple\"]\nconst SEVERITIES: Severity[] = [\"Normal\", \"Tightened\", \"Reduced\"]\nconst DEFAULT_SIZES = [\"S\", \"M\", \"L\", \"XL\", \"XXL\"]\nconst DEFAULT_COLORS = [\"BLUE\", \"RED\", \"BLACK\"]\nconst DEFAULT_DEFECTS = [\"Stitching\", \"Fabric\", \"Color\", \"Measurement\", \"Packing\"]\n\n// Utility Functions\nconst generateId = () => Math.random().toString(36).substring(2, 9)\n// Kept for future implementation of logic rules\n// Commented out to avoid unused variable warning\n// const generateRuleId = () => `rule_${Math.random().toString(36).substring(2, 9)}`\n\nconst getDefaultQuestion = (responseType: ResponseType = \"Text\"): Question => ({\n  id: generateId(),\n  text: \"Type question\",\n  responseType,\n  required: false,\n  flagged: false,\n  multipleSelection: false,\n  options:\n    responseType === \"Multiple choice\" || responseType === \"Yes/No\" ? [\"Option 1\", \"Option 2\", \"Option 3\"] : undefined,\n  value: null,\n  logicRules: [],\n})\n\nconst getDefaultStandardSection = (title = \"Untitled Page\"): AppSection => ({\n  id: generateId(),\n  type: \"standard\",\n  title,\n  isCollapsed: false,\n  content: {\n    questions: [],\n  },\n})\n\nconst getDefaultGarmentDetailsSection = (): AppSection => ({\n  id: generateId(),\n  type: \"garmentDetails\",\n  title: \"Garment Inspection Details\",\n  isCollapsed: false,\n  content: {\n    aqlSettings: {\n      aqlLevel: \"2.5\",\n      inspectionLevel: \"II\",\n      samplingPlan: \"Single\",\n      severity: \"Normal\",\n    },\n    sizes: [...DEFAULT_SIZES],\n    colors: [...DEFAULT_COLORS],\n    includeCartonOffered: true,\n    includeCartonInspected: true,\n    defaultDefects: [...DEFAULT_DEFECTS],\n  },\n})\n\nconst getInitialTemplate = (): Template => {\n  const titlePageSection: AppSection = {\n    id: generateId(),\n    type: \"standard\",\n    title: \"Title Page\",\n    isCollapsed: false,\n    content: {\n      description: \"The Title Page is the first page of your garment inspection report.\",\n      questions: [\n        {\n          id: generateId(),\n          text: \"Report No\",\n          responseType: \"Text\",\n          required: true,\n          flagged: false,\n          value: null,\n          logicRules: [],\n        },\n        {\n          id: generateId(),\n          text: \"Factory Name\",\n          responseType: \"Text\",\n          required: true,\n          flagged: false,\n          value: null,\n          logicRules: [],\n        },\n        {\n          id: generateId(),\n          text: \"Style No\",\n          responseType: \"Text\",\n          required: true,\n          flagged: false,\n          value: null,\n          logicRules: [],\n        },\n        {\n          id: generateId(),\n          text: \"Site conducted\",\n          responseType: \"Site\",\n          required: true,\n          flagged: false,\n          value: null,\n          logicRules: [],\n        },\n        {\n          id: generateId(),\n          text: \"Prepared by\",\n          responseType: \"Person\",\n          required: true,\n          flagged: false,\n          value: null,\n          logicRules: [],\n        },\n        {\n          id: generateId(),\n          text: \"Location\",\n          responseType: \"Inspection location\",\n          required: true,\n          flagged: false,\n          value: null,\n          logicRules: [],\n        },\n      ],\n    },\n  }\n\n  const garmentDetailsSection = getDefaultGarmentDetailsSection()\n\n  return {\n    id: generateId(),\n    title: \"Untitled Garment Template\",\n    description: \"Add a description for this garment inspection template\",\n    sections: [titlePageSection, garmentDetailsSection],\n    lastSaved: new Date(),\n    lastPublished: new Date(),\n    logo: undefined,\n  }\n}\n\nconst resizeImage = (base64: string): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const img = document.createElement(\"img\")\n    img.crossOrigin = \"anonymous\"\n    img.src = base64\n    img.onload = () => {\n      const canvas = document.createElement(\"canvas\")\n      const MAX_WIDTH = 500\n      const scale = Math.min(MAX_WIDTH / img.width, 1)\n      canvas.width = img.width * scale\n      canvas.height = img.height * scale\n      const ctx = canvas.getContext(\"2d\")\n      if (ctx) {\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n        resolve(canvas.toDataURL(\"image/jpeg\", 0.8))\n      } else {\n        reject(new Error(\"Failed to get canvas context\"))\n      }\n    }\n    img.onerror = () => reject(new Error(\"Failed to load image\"))\n  })\n}\n\n// Type guard function to check if content is GarmentDetailsContent\nfunction isGarmentDetailsContent(content: StandardSectionContent | GarmentDetailsContent): content is GarmentDetailsContent {\n  return 'aqlSettings' in content && 'sizes' in content && 'colors' in content;\n}\n\n\n\n\n\n\n\nconst renderQuestionResponse = (\n  question: Question,\n  sectionId: string,\n  updateQuestion: (sectionId: string, questionId: string, updates: Partial<Question>) => void\n) => {\n  switch (question.responseType) {\n    case \"Text\":\n      return (\n        <div className=\"response-field text-field\">\n          <div className=\"text-input\">Text answer</div>\n        </div>\n      );\n    case \"Number\":\n      return (\n        <div className=\"response-field number-field\">\n          <input\n            type=\"number\"\n            className=\"number-input\"\n            value={(question.value as number) || \"\"}\n            onChange={(e) => updateQuestion(sectionId, question.id, { value: Number(e.target.value) })}\n            placeholder=\"0\"\n          />\n        </div>\n      );\n    case \"Checkbox\":\n      return (\n        <div className=\"response-field checkbox-field\">\n          <div className=\"checkbox-input\">\n            <div className=\"checkbox\"></div>\n          </div>\n        </div>\n      );\n    case \"Yes/No\":\n      return (\n        <div className=\"response-field yes-no-field\">\n          <div className=\"yes-no-options\">\n            <button className=\"yes-option\">Yes</button>\n            <button className=\"no-option\">No</button>\n            <button className=\"na-option\">N/A</button>\n          </div>\n        </div>\n      );\n    case \"Multiple choice\":\n      return (\n        <div className=\"response-field multiple-choice-field\">\n          <div className=\"multiple-choice-options\">\n            {(question.options || []).map((option, idx) => (\n              <div key={idx} className=\"choice-option-container\">\n                <input\n                  type=\"text\"\n                  className={`choice-option-input choice-${idx % 4}`}\n                  value={option}\n                  onChange={(e) => {\n                    const updatedOptions = [...(question.options || [])];\n                    updatedOptions[idx] = e.target.value;\n                    updateQuestion(sectionId, question.id, { options: updatedOptions });\n                  }}\n                  placeholder={`Option ${idx + 1}`}\n                />\n                <button\n                  className=\"remove-option-button\"\n                  onClick={() => {\n                    const updatedOptions = [...(question.options || [])];\n                    updatedOptions.splice(idx, 1);\n                    updateQuestion(sectionId, question.id, { options: updatedOptions });\n                  }}\n                >\n                  <X size={14} />\n                </button>\n              </div>\n            ))}\n            <button\n              className=\"add-option-button\"\n              onClick={() => {\n                const updatedOptions = [...(question.options || []), `Option ${(question.options || []).length + 1}`];\n                updateQuestion(sectionId, question.id, { options: updatedOptions });\n              }}\n            >\n              <Plus size={14} />\n              <span>Add Option</span>\n            </button>\n          </div>\n        </div>\n      );\n    case \"Slider\":\n      return (\n        <div className=\"response-field slider-field\">\n          <div className=\"slider-container\">\n            <div className=\"slider-track\">\n              <div className=\"slider-thumb\"></div>\n            </div>\n            <div className=\"slider-labels\">\n              <span>0</span>\n              <span>50</span>\n              <span>100</span>\n            </div>\n          </div>\n        </div>\n      );\n    case \"Media\":\n      return (\n        <div className=\"response-field media-field\">\n          <input\n            type=\"file\"\n            accept=\"image/*,video/*\"\n            multiple\n            onChange={async (e) => {\n              const files = e.target.files;\n              if (!files || files.length === 0) return;\n\n              // Convert files to base64 and store them\n              const mediaFiles: string[] = [];\n\n              for (let i = 0; i < files.length; i++) {\n                const file = files[i];\n                const reader = new FileReader();\n\n                reader.onload = async (event) => {\n                  const result = event.target?.result as string;\n                  if (result) {\n                    try {\n                      // Resize image if it's an image\n                      const resizedImage = file.type.startsWith('image/')\n                        ? await resizeImage(result)\n                        : result;\n\n                      mediaFiles.push(resizedImage);\n\n                      // Update the question with the new media files\n                      if (mediaFiles.length === files.length) {\n                        updateQuestion(sectionId, question.id, {\n                          value: mediaFiles\n                        });\n                      }\n                    } catch (error) {\n                      console.error(\"Error processing media file:\", error);\n                    }\n                  }\n                };\n\n                reader.readAsDataURL(file);\n              }\n            }}\n            className=\"media-file-input\"\n            id={`media-upload-${question.id}`}\n          />\n          <label htmlFor={`media-upload-${question.id}`} className=\"media-upload\">\n            <ImageIcon size={20} />\n            <span>Upload media</span>\n          </label>\n\n          {/* Display uploaded media previews */}\n          {Array.isArray(question.value) && question.value.length > 0 && (\n            <div className=\"media-previews\">\n              {question.value.map((media, index) => (\n                <div key={index} className=\"media-preview-item\">\n                  {media.startsWith('data:image') ? (\n                    <img src={media || \"/placeholder.svg\"} alt={`Uploaded media ${index + 1}`} />\n                  ) : (\n                    <div className=\"video-preview\">\n                      <FileText size={24} />\n                      <span>Media file {index + 1}</span>\n                    </div>\n                  )}\n                  <button\n                    className=\"remove-media-button\"\n                    onClick={() => {\n                      const updatedMedia = [...question.value as string[]];\n                      updatedMedia.splice(index, 1);\n                      updateQuestion(sectionId, question.id, { value: updatedMedia });\n                    }}\n                  >\n                    <X size={16} />\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      );\n    case \"Annotation\":\n      return (\n        <div className=\"response-field annotation-field\">\n          <div className=\"annotation-placeholder-box\">\n            Annotation Placeholder\n          </div>\n        </div>\n      );\n    case \"Date & Time\":\n    case \"Inspection date\":\n      return (\n        <div className=\"response-field date-time-field\">\n          <div className=\"date-time-input\">\n            <Calendar size={16} />\n            <span>{new Date().toLocaleDateString()}</span>\n          </div>\n        </div>\n      );\n    case \"Site\":\n    case \"Person\":\n      return (\n        <div className=\"response-field dropdown-input\">\n          <div className=\"dropdown-input\">\n            <span>Select {question.responseType.toLowerCase()}</span>\n            <ChevronDown size={16} />\n          </div>\n        </div>\n      );\n    case \"Inspection location\":\n      return (\n        <div className=\"response-field location-field\">\n          <div className=\"location-input-wrapper\">\n            <input\n              type=\"text\"\n              className=\"text-input\"\n              value={(question.value as string) || \"\"}\n              onChange={(e) => updateQuestion(sectionId, question.id, { value: e.target.value })}\n              placeholder=\"Enter city, area, or address\"\n            />\n            <button\n              className=\"location-button\"\n              title=\"Get current location\"\n              onClick={() => {\n                if (navigator.geolocation) {\n                  navigator.geolocation.getCurrentPosition(\n                    (position) => {\n                      // Get coordinates\n                      const coords = `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`;\n\n                      // Try to get address from coordinates using reverse geocoding\n                      fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${position.coords.latitude}&lon=${position.coords.longitude}`)\n                        .then(response => response.json())\n                        .then(data => {\n                          let locationText = '';\n                          if (data && data.address) {\n                            const address = data.address;\n                            // Create a readable address from components\n                            const components = [];\n                            if (address.city || address.town || address.village) {\n                              components.push(address.city || address.town || address.village);\n                            }\n                            if (address.state || address.county) {\n                              components.push(address.state || address.county);\n                            }\n                            if (address.country) {\n                              components.push(address.country);\n                            }\n                            locationText = components.join(', ');\n                          }\n\n                          // If we couldn't get a readable address, use coordinates\n                          if (!locationText) {\n                            locationText = coords;\n                          }\n\n                          updateQuestion(sectionId, question.id, { value: locationText });\n                        })\n                        .catch(error => {\n                          console.error(\"Error getting location name:\", error);\n                          // Fallback to coordinates if geocoding fails\n                          updateQuestion(sectionId, question.id, { value: coords });\n                        });\n                    },\n                    (error) => {\n                      alert(\"Error getting location: \" + error.message);\n                    }\n                  );\n                } else {\n                  alert(\"Geolocation is not supported by this browser.\");\n                }\n              }}\n            >\n              <MapPin size={14} />\n            </button>\n          </div>\n          {question.value && (\n            <div className=\"location-display\">\n              <MapPin size={12} />\n              <span>{question.value}</span>\n            </div>\n          )}\n        </div>\n      );\n    default:\n      return <div className=\"response-field\">Unsupported response type</div>;\n  }\n};\n\n// Main Component\nconst Garment_Template: React.FC = () => {\n  const navigate = useNavigate()\n  const { id } = useParams<{ id: string }>()\n  const [template, setTemplate] = useState<Template>(getInitialTemplate())\n  const [isLoading, setIsLoading] = useState<boolean>(!!id)\n  const [activeTab, setActiveTab] = useState<number>(0)\n  const [activeSectionId, setActiveSectionId] = useState<string | null>(template.sections[0]?.id || null)\n  const [activeQuestionId, setActiveQuestionId] = useState<string | null>(null)\n  const [draggedItem, setDraggedItem] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\n  const [dropTarget, setDropTarget] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\n  const [showResponseTypeMenu, setShowResponseTypeMenu] = useState<string | null>(null)\n\n  // Load existing template if in edit mode\n  useEffect(() => {\n    console.log(\"Garment_Template: Component mounted, id param:\", id);\n\n    if (id) {\n      console.log(\"Garment_Template: Attempting to load template with ID:\", id);\n      setIsLoading(true)\n      fetch(`http://127.0.0.1:8000/api/users/templates/${id}/`)\n        .then(response => {\n          console.log(\"Garment_Template: API response status:\", response.status);\n          if (!response.ok) {\n            throw new Error(`Failed to load template. Status: ${response.status}`)\n          }\n          return response.json()\n        })\n        .then(data => {\n          console.log('Garment_Template: Loaded template data:', data)\n          console.log('Garment_Template: Template type:', data.template_type)\n\n          try {\n            // Make sure the template is a garment template\n            if (data.template_type === 'garment') {\n              console.log('Garment_Template: Setting template data for garment template')\n\n              // Ensure the template has the required structure\n              const processedTemplate = {\n                ...data,\n                sections: data.sections || [],\n                title: data.title || \"Untitled Garment Template\",\n                description: data.description || \"Add a description for this garment inspection template\",\n                logo: data.logo || undefined\n              };\n\n              // Ensure each section has the required structure\n              processedTemplate.sections = processedTemplate.sections.map((section: any) => {\n                if (!section.id) section.id = generateId();\n                if (!section.title) section.title = \"Untitled Section\";\n                if (!section.type) section.type = \"standard\";\n\n                // Ensure garmentDetails sections have the required content\n                if (section.type === \"garmentDetails\") {\n                  if (!section.content) section.content = {};\n                  if (!section.content.aqlSettings) section.content.aqlSettings = {\n                    aqlLevel: \"2.5\",\n                    inspectionLevel: \"II\",\n                    samplingPlan: \"Single\",\n                    severity: \"Normal\"\n                  };\n                  if (!section.content.sizes) section.content.sizes = [...DEFAULT_SIZES];\n                  if (!section.content.colors) section.content.colors = [...DEFAULT_COLORS];\n                  if (!section.content.defaultDefects) section.content.defaultDefects = [...DEFAULT_DEFECTS];\n                  section.content.includeCartonOffered = section.content.includeCartonOffered !== false;\n                  section.content.includeCartonInspected = section.content.includeCartonInspected !== false;\n                }\n\n                // Ensure standard sections have the required content\n                if (section.type === \"standard\") {\n                  if (!section.content) section.content = {};\n                  if (!section.content.questions) section.content.questions = [];\n                }\n\n                return {\n                  ...section,\n                  isCollapsed: section.isCollapsed || false\n                };\n              });\n\n              // If no garmentDetails section exists, add one\n              if (!processedTemplate.sections.some((s: any) => s.type === \"garmentDetails\")) {\n                processedTemplate.sections.push(getDefaultGarmentDetailsSection());\n              }\n\n              // If no standard section exists, add a title page\n              if (!processedTemplate.sections.some((s: any) => s.type === \"standard\")) {\n                const titlePageSection = {\n                  id: generateId(),\n                  type: \"standard\" as SectionType,\n                  title: \"Title Page\",\n                  isCollapsed: false,\n                  content: {\n                    description: \"The Title Page is the first page of your garment inspection report.\",\n                    questions: [\n                      {\n                        id: generateId(),\n                        text: \"Report No\",\n                        responseType: \"Text\" as ResponseType,\n                        required: true,\n                        flagged: false,\n                        value: null,\n                        logicRules: [],\n                      }\n                    ]\n                  }\n                };\n                processedTemplate.sections.unshift(titlePageSection);\n              }\n\n              console.log('Garment_Template: Processed template:', processedTemplate);\n              setTemplate(processedTemplate);\n              setActiveSectionId(processedTemplate.sections[0]?.id || null);\n\n              // Initialize reportData based on the loaded template\n              const garmentSection = processedTemplate.sections.find((s: any) => s.type === \"garmentDetails\");\n              if (garmentSection) {\n                console.log('Garment_Template: Initializing reportData with loaded template data');\n\n                // Initialize defects from the template\n                const initialDefects = garmentSection.content?.defaultDefects?.map((defect: string) => ({\n                  type: defect,\n                  remarks: \"\",\n                  critical: 0,\n                  major: 0,\n                  minor: 0,\n                })) || [];\n\n                // Initialize AQL settings from the template\n                const aqlSettings = garmentSection.content?.aqlSettings || {\n                  aqlLevel: \"2.5\",\n                  inspectionLevel: \"II\",\n                  samplingPlan: \"Single\",\n                  severity: \"Normal\"\n                };\n\n                setReportData({\n                  quantities: {},\n                  cartonOffered: \"30\",\n                  cartonInspected: \"5\",\n                  cartonToInspect: \"5\",\n                  defects: initialDefects,\n                  aqlSettings: {\n                    ...aqlSettings,\n                    status: \"PASS\"\n                  },\n                  editingAql: false,\n                  newSize: \"\",\n                  newColor: \"\",\n                  questionAnswers: {}\n                });\n              }\n            } else {\n              console.error('Garment_Template: Attempted to load a non-garment template in garment editor')\n              alert('This is not a garment template. Redirecting to standard template editor.')\n              navigate(`/templates/edit/${id}`)\n            }\n          } catch (error) {\n            console.error('Garment_Template: Error processing template data:', error);\n            // Log more details about the template data\n            console.error('Garment_Template: Template data that caused the error:', JSON.stringify(data, null, 2));\n\n            // Fall back to default template\n            const defaultTemplate = getInitialTemplate();\n            console.log('Garment_Template: Using default template:', defaultTemplate);\n\n            setTemplate(defaultTemplate);\n            setActiveSectionId(defaultTemplate.sections[0]?.id || null);\n\n            alert('Error processing template data. Using default template. Check console for details.');\n          }\n        })\n        .catch(error => {\n          console.error('Garment_Template: Error loading template:', error)\n          alert('Failed to load template. Using default template.')\n        })\n        .finally(() => {\n          console.log('Garment_Template: Finished loading attempt, setting isLoading to false')\n          setIsLoading(false)\n        })\n    } else {\n      console.log(\"Garment_Template: No ID provided, using default template\")\n    }\n  }, [id, navigate])\n  const [showMobilePreview, setShowMobilePreview] = useState<boolean>(true)\n  const [newSize, setNewSize] = useState<string>(\"\")\n  const [newColor, setNewColor] = useState<string>(\"\")\n  const [newDefect, setNewDefect] = useState<string>(\"\")\n  const [defectImages, setDefectImages] = useState<{ [defectIndex: number]: string[] }>({})\n  const [startDate, setStartDate] = useState<string>(\"\")\n  const [dueDate, setDueDate] = useState<string>(\"\")\n  const [dateErrors, setDateErrors] = useState<{\n    startDate?: string;\n    dueDate?: string;\n  }>({})\n  const [isExporting, setIsExporting] = useState<boolean>(false)\n\n  // Report data state - moved to top level\n  const [reportData, setReportData] = useState<ReportData>(() => {\n    const initialDefects =\n      (() => {\n        const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n        if (garmentSection && isGarmentDetailsContent(garmentSection.content)) {\n          return garmentSection.content.defaultDefects.map((defect: string) => ({\n          type: defect,\n          remarks: \"\",\n          critical: 0,\n          major: 0,\n          minor: 0,\n          }));\n        }\n        return [];\n      })()\n\n    const initialAqlLevel = (() => {\n      const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n      if (garmentSection && isGarmentDetailsContent(garmentSection.content)) {\n        return garmentSection.content.aqlSettings.aqlLevel;\n      }\n      return \"2.5\"; // default value\n    })();\n    const initialInspectionLevel = (() => {\n      const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n      if (garmentSection && isGarmentDetailsContent(garmentSection.content)) {\n        return garmentSection.content.aqlSettings.inspectionLevel;\n      }\n      return \"II\"; // default value\n    })();\n    const initialSamplingPlan = (() => {\n      const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n      if (garmentSection && isGarmentDetailsContent(garmentSection.content)) {\n        return garmentSection.content.aqlSettings.samplingPlan;\n      }\n      return \"Single\"; // default value\n    })();\n    const initialSeverity = (() => {\n      const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n      if (garmentSection && isGarmentDetailsContent(garmentSection.content)) {\n        return garmentSection.content.aqlSettings.severity;\n      }\n      return \"Normal\"; // default value\n    })();\n\n    return {\n      quantities: {},\n      cartonOffered: \"30\",\n      cartonInspected: \"5\",\n      cartonToInspect: \"5\",\n      defects: initialDefects,\n      aqlSettings: {\n        aqlLevel: initialAqlLevel,\n        inspectionLevel: initialInspectionLevel,\n        samplingPlan: initialSamplingPlan,\n        severity: initialSeverity,\n        status: \"PASS\",\n      },\n      editingAql: false,\n      newSize: \"\",\n      newColor: \"\",\n      questionAnswers: {},\n    }\n  })\n\n  const questionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\n  const sectionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\n  const reportRef = useRef<HTMLDivElement>(null)\n\n  // Template Management\n  const updateTemplate = (updates: Partial<Template>) => setTemplate((prev) => ({ ...prev, ...updates }))\n\n  const fetchCSRFToken = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/users/get-csrf-token/\", {\n        method: \"GET\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch CSRF token\");\n      }\n\n      const data = await response.json();\n      return data.csrfToken;\n    } catch (error) {\n      console.error(\"Error fetching CSRF token:\", error);\n      throw error;\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      // Get CSRF token\n      const csrfToken = await fetchCSRFToken();\n\n      // Create FormData object\n      const formData = new FormData();\n\n      // Add title and description\n      formData.append(\"title\", template.title);\n      formData.append(\"description\", template.description);\n\n      // Add template_type to ensure it's saved as a garment template\n      formData.append(\"template_type\", \"garment\");\n\n      // Add logo if exists\n      if (template.logo) {\n        if (typeof template.logo === \"string\" && template.logo.startsWith(\"data:\")) {\n          const response = await fetch(template.logo);\n          const blob = await response.blob();\n          formData.append(\"logo\", blob, \"logo.png\");\n        }\n      }\n\n      // Prepare sections data\n      const sectionsData = template.sections.map(section => {\n        if (section.type === \"garmentDetails\" && isGarmentDetailsContent(section.content)) {\n          return {\n            id: section.id,\n            title: section.title,\n            type: section.type,\n            isCollapsed: section.isCollapsed,\n            content: {\n              aqlSettings: section.content.aqlSettings,\n              sizes: section.content.sizes,\n              colors: section.content.colors,\n              includeCartonOffered: section.content.includeCartonOffered,\n              includeCartonInspected: section.content.includeCartonInspected,\n              defaultDefects: section.content.defaultDefects\n            }\n          };\n        } else {\n          return {\n            id: section.id,\n            title: section.title,\n            type: section.type,\n            isCollapsed: section.isCollapsed,\n            content: section.content\n          };\n        }\n      });\n\n      // Add sections data\n      formData.append(\"sections\", JSON.stringify(sectionsData));\n\n      // Determine if this is a new template or an edit\n      const isNew = !id;\n\n      // Set the appropriate URL and method based on whether we're creating or updating\n      const url = isNew\n        ? \"http://localhost:8000/api/users/garment-template/\"\n        : `http://localhost:8000/api/users/templates/${id}/`;\n\n      const method = isNew ? \"POST\" : \"PATCH\";\n\n      // Make API request\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          \"X-CSRFToken\": csrfToken,\n        },\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to save template\");\n      }\n\n      // Get the response data\n      let responseData;\n      try {\n        responseData = await response.json();\n      } catch (error) {\n        console.warn(\"Could not parse response as JSON:\", error);\n        responseData = {};\n      }\n\n      // Update local state with the database ID if available\n      if (responseData && responseData.id) {\n        updateTemplate({\n          id: responseData.id.toString(),\n          lastSaved: new Date()\n        });\n        console.log(\"Template saved with ID:\", responseData.id);\n      } else {\n        updateTemplate({ lastSaved: new Date() });\n      }\n\n      alert(\"Template saved successfully!\");\n      console.log(\"Template saved successfully:\", template);\n    } catch (error: any) {\n      console.error(\"Error saving template:\", error);\n      alert(`Failed to save template: ${error.message || \"Unknown error\"}`);\n    }\n  }\n\n  const handleBack = () => {\n    if (window.confirm(\"Do you want to save before leaving?\")) {\n      handleSave()\n      // Use direct navigation for more reliability\n      window.location.href = \"/templates\"\n    } else {\n      window.location.href = \"/templates\"\n    }\n  }\n\n  const handleLogoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0]\n    if (file && file.size <= 5 * 1024 * 1024 && file.type.match(/^image\\//)) {\n      const reader = new FileReader()\n      reader.onload = async (event) => {\n        const result = event.target?.result as string\n        if (result) {\n          const resizedImage = await resizeImage(result)\n          updateTemplate({ logo: resizedImage })\n        }\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  // Section Management\n  const addStandardSection = () => {\n    const newSection = getDefaultStandardSection()\n    setTemplate((prev) => ({ ...prev, sections: [...prev.sections, newSection] }))\n    setActiveSectionId(newSection.id)\n    setTimeout(() => sectionRefs.current[newSection.id]?.scrollIntoView({ behavior: \"smooth\", block: \"start\" }), 100)\n  }\n\n  const updateSection = (sectionId: string, updates: Partial<AppSection>) => {\n    setTemplate((prev) => ({\n      ...prev,\n      sections: prev.sections.map((s) => (s.id === sectionId ? { ...s, ...updates } : s)),\n    }))\n  }\n\n  const deleteSection = (sectionId: string) => {\n    // Don't allow deleting the Title Page or the only Garment Details section\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section) return\n\n    if (section.type === \"garmentDetails\") {\n      if (\n        window.confirm(\n          \"Are you sure you want to delete the Garment Details section? This will remove all garment-specific configuration.\",\n        )\n      ) {\n        setTemplate((prev) => ({ ...prev, sections: prev.sections.filter((s) => s.id !== sectionId) }))\n      }\n      return\n    }\n\n    if (section.title === \"Title Page\" && section === template.sections[0]) {\n      alert(\"The Title Page cannot be deleted.\")\n      return\n    }\n\n    setTemplate((prev) => ({ ...prev, sections: prev.sections.filter((s) => s.id !== sectionId) }))\n  }\n\n  const toggleSectionCollapse = (sectionId: string) => {\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (section) {\n      updateSection(sectionId, { isCollapsed: !section.isCollapsed })\n    }\n  }\n\n  // Question Management\n  const addQuestion = (sectionId: string, responseType: ResponseType = \"Text\") => {\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"standard\") return\n\n    const newQuestion = getDefaultQuestion(responseType)\n    const updatedContent = {\n      ...(section.content as StandardSectionContent),\n      questions: [...(section.content as StandardSectionContent).questions, newQuestion],\n    }\n\n    updateSection(sectionId, { content: updatedContent })\n    setActiveQuestionId(newQuestion.id)\n  }\n\n  const updateQuestion = (sectionId: string, questionId: string, updates: Partial<Question>) => {\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"standard\") return\n\n    const updatedQuestions = (section.content as StandardSectionContent).questions.map((q) =>\n      q.id === questionId ? { ...q, ...updates } : q,\n    )\n\n    const updatedContent = {\n      ...(section.content as StandardSectionContent),\n      questions: updatedQuestions,\n    }\n\n    updateSection(sectionId, { content: updatedContent })\n  }\n\n  const deleteQuestion = (sectionId: string, questionId: string) => {\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"standard\") return\n\n    const updatedQuestions = (section.content as StandardSectionContent).questions.filter((q) => q.id !== questionId)\n\n    const updatedContent = {\n      ...(section.content as StandardSectionContent),\n      questions: updatedQuestions,\n    }\n\n    updateSection(sectionId, { content: updatedContent })\n  }\n\n  const changeQuestionResponseType = (sectionId: string, questionId: string, responseType: ResponseType) => {\n    updateQuestion(sectionId, questionId, {\n      responseType,\n      options:\n        responseType === \"Multiple choice\" || responseType === \"Yes/No\"\n          ? [\"Option 1\", \"Option 2\", \"Option 3\"]\n          : undefined,\n      value: null,\n      logicRules: [],\n    })\n    setShowResponseTypeMenu(null)\n  }\n\n  // Garment Details Management\n  const updateGarmentDetails = (sectionId: string, updates: Partial<GarmentDetailsContent>) => {\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"garmentDetails\") return\n\n    const updatedContent = {\n      ...(section.content as GarmentDetailsContent),\n      ...updates,\n    }\n\n    updateSection(sectionId, { content: updatedContent })\n  }\n\n  const addSize = (sectionId: string) => {\n    if (!newSize.trim()) return\n\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"garmentDetails\") return\n\n    const garmentContent = section.content as GarmentDetailsContent\n    if (garmentContent.sizes.includes(newSize.trim())) {\n      alert(\"This size already exists\")\n      return\n    }\n\n    const updatedSizes = [...garmentContent.sizes, newSize.trim()]\n    updateGarmentDetails(sectionId, { sizes: updatedSizes })\n    setNewSize(\"\")\n  }\n\n  const removeSize = (sectionId: string, size: string) => {\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"garmentDetails\") return\n\n    const garmentContent = section.content as GarmentDetailsContent\n    const updatedSizes = garmentContent.sizes.filter((s) => s !== size)\n    updateGarmentDetails(sectionId, { sizes: updatedSizes })\n  }\n\n  const addColor = (sectionId: string) => {\n    if (!newColor.trim()) return\n\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"garmentDetails\") return\n\n    const garmentContent = section.content as GarmentDetailsContent\n    if (garmentContent.colors.includes(newColor.trim())) {\n      alert(\"This color already exists\")\n      return\n    }\n\n    const updatedColors = [...garmentContent.colors, newColor.trim()]\n    updateGarmentDetails(sectionId, { colors: updatedColors })\n    setNewColor(\"\")\n  }\n\n  const removeColor = (sectionId: string, color: string) => {\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"garmentDetails\") return\n\n    const garmentContent = section.content as GarmentDetailsContent\n    const updatedColors = garmentContent.colors.filter((c) => c !== color)\n    updateGarmentDetails(sectionId, { colors: updatedColors })\n  }\n\n  const addDefect = (sectionId: string) => {\n    if (!newDefect.trim()) return\n\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"garmentDetails\") return\n\n    const garmentContent = section.content as GarmentDetailsContent\n    if (garmentContent.defaultDefects.includes(newDefect.trim())) {\n      alert(\"This defect type already exists\")\n      return\n    }\n\n    const updatedDefects = [...garmentContent.defaultDefects, newDefect.trim()]\n    updateGarmentDetails(sectionId, { defaultDefects: updatedDefects })\n    setNewDefect(\"\")\n  }\n\n  const removeDefect = (sectionId: string, defect: string) => {\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"garmentDetails\") return\n\n    const garmentContent = section.content as GarmentDetailsContent\n    const updatedDefects = garmentContent.defaultDefects.filter((d) => d !== defect)\n    updateGarmentDetails(sectionId, { defaultDefects: updatedDefects })\n  }\n\n  const updateAQLSettings = (sectionId: string, field: keyof GarmentDetailsContent[\"aqlSettings\"], value: string) => {\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"garmentDetails\") return\n\n    const garmentContent = section.content as GarmentDetailsContent\n    const updatedAQLSettings = {\n      ...garmentContent.aqlSettings,\n      [field]: value,\n    }\n\n    updateGarmentDetails(sectionId, { aqlSettings: updatedAQLSettings })\n  }\n\n  const toggleCartonSetting = (sectionId: string, field: \"includeCartonOffered\" | \"includeCartonInspected\") => {\n    const section = template.sections.find((s) => s.id === sectionId)\n    if (!section || section.type !== \"garmentDetails\") return\n\n    const garmentContent = section.content as GarmentDetailsContent\n    updateGarmentDetails(sectionId, { [field]: !garmentContent[field] })\n  }\n\n  // Drag and Drop\n  const handleDragStart = (type: \"question\" | \"section\", id: string) => {\n    // Don't allow dragging the Title Page or Garment Details section\n    if (type === \"section\") {\n      const section = template.sections.find((s) => s.id === id)\n      if (section?.title === \"Title Page\" || section?.type === \"garmentDetails\") {\n        return\n      }\n    }\n\n    setDraggedItem({ type, id })\n  }\n\n  const handleDragOver = (type: \"question\" | \"section\", id: string, e: React.DragEvent) => {\n    e.preventDefault()\n    if (!draggedItem) return\n\n    // Don't allow dropping before Title Page or Garment Details\n    if (type === \"section\" && draggedItem.type === \"section\") {\n      const targetSection = template.sections.find((s) => s.id === id)\n      if (targetSection?.title === \"Title Page\" || targetSection?.type === \"garmentDetails\") {\n        return\n      }\n\n      const draggedSection = template.sections.find((s) => s.id === draggedItem.id)\n      if (draggedSection?.title === \"Title Page\" || draggedSection?.type === \"garmentDetails\") {\n        return\n      }\n    }\n\n    if (draggedItem.id !== id) {\n      setDropTarget({ type, id })\n    }\n  }\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault()\n    if (!draggedItem || !dropTarget) return\n\n    if (draggedItem.type === \"section\" && dropTarget.type === \"section\") {\n      const sections = [...template.sections]\n      const draggedIndex = sections.findIndex((s) => s.id === draggedItem.id)\n      const dropIndex = sections.findIndex((s) => s.id === dropTarget.id)\n\n      // Don't allow reordering Title Page or Garment Details\n      if (\n        sections[draggedIndex].title === \"Title Page\" ||\n        sections[draggedIndex].type === \"garmentDetails\" ||\n        sections[dropIndex].title === \"Title Page\" ||\n        sections[dropIndex].type === \"garmentDetails\"\n      ) {\n        setDraggedItem(null)\n        setDropTarget(null)\n        return\n      }\n\n      const [removed] = sections.splice(draggedIndex, 1)\n      sections.splice(dropIndex, 0, removed)\n      setTemplate((prev) => ({ ...prev, sections }))\n    } else if (draggedItem.type === \"question\" && dropTarget.type === \"question\") {\n      const draggedSectionIndex = template.sections.findIndex(\n        (s) =>\n          s.type === \"standard\" && (s.content as StandardSectionContent).questions.some((q) => q.id === draggedItem.id),\n      )\n\n      const dropSectionIndex = template.sections.findIndex(\n        (s) =>\n          s.type === \"standard\" && (s.content as StandardSectionContent).questions.some((q) => q.id === dropTarget.id),\n      )\n\n      if (draggedSectionIndex === -1 || dropSectionIndex === -1) {\n        setDraggedItem(null)\n        setDropTarget(null)\n        return\n      }\n\n      const draggedSection = template.sections[draggedSectionIndex]\n      const dropSection = template.sections[dropSectionIndex]\n\n      if (draggedSection.type !== \"standard\" || dropSection.type !== \"standard\") {\n        setDraggedItem(null)\n        setDropTarget(null)\n        return\n      }\n\n      const newSections = [...template.sections]\n\n      const draggedQuestionIndex = (draggedSection.content as StandardSectionContent).questions.findIndex(\n        (q) => q.id === draggedItem.id,\n      )\n\n      const dropQuestionIndex = (dropSection.content as StandardSectionContent).questions.findIndex(\n        (q) => q.id === dropTarget.id,\n      )\n\n      const [removedQuestion] = (newSections[draggedSectionIndex].content as StandardSectionContent).questions.splice(\n        draggedQuestionIndex,\n        1,\n      )\n      ;(newSections[dropSectionIndex].content as StandardSectionContent).questions.splice(\n        dropQuestionIndex,\n        0,\n        removedQuestion,\n      )\n\n      setTemplate((prev) => ({ ...prev, sections: newSections }))\n    }\n\n    setDraggedItem(null)\n    setDropTarget(null)\n  }\n\n  // Report functions\n  const handleQuantityChange = (color: string, size: string, field: string, value: string) => {\n    setReportData((prev) => {\n      const newQuantities = { ...prev.quantities }\n      if (!newQuantities[color]) newQuantities[color] = {}\n      if (!newQuantities[color][size]) newQuantities[color][size] = { orderQty: \"\", offeredQty: \"\" }\n      newQuantities[color][size][field] = value\n      return { ...prev, quantities: newQuantities }\n    })\n  }\n\n  const calculateRowTotal = (color: string, field: string) => {\n    const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n    const sizes: string[] = garmentSection && isGarmentDetailsContent(garmentSection.content)\n      ? garmentSection.content.sizes\n      : [];\n    let total = 0;\n    sizes.forEach((size: string) => {\n      const qty = reportData.quantities[color]?.[size]?.[field];\n      total += qty ? Number.parseInt(qty, 10) : 0;\n    });\n    return total;\n  };\n\n  const calculateColumnTotal = (size: string, field: string) => {\n    const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n    const colors: string[] = garmentSection && isGarmentDetailsContent(garmentSection.content)\n      ? garmentSection.content.colors\n      : [];\n    let total = 0;\n    colors.forEach((color: string) => {\n      const qty = reportData.quantities[color]?.[size]?.[field];\n      total += qty ? Number.parseInt(qty, 10) : 0;\n    });\n    return total;\n  };\n\n  const calculateGrandTotal = (field: string) => {\n    const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n    const colors: string[] = garmentSection && isGarmentDetailsContent(garmentSection.content)\n      ? garmentSection.content.colors\n      : [];\n    let total = 0;\n    colors.forEach((color: string) => {\n      total += calculateRowTotal(color, field);\n    });\n    return total;\n  };\n\n  const evaluateAqlStatus = () => {\n    const lotSize = calculateGrandTotal(\"offeredQty\");\n    const inspectionLevel = reportData.aqlSettings.inspectionLevel;\n    const aqlLevel = reportData.aqlSettings.aqlLevel;\n\n    // Check if the inspection level is one of the valid AQL inspection levels\n    if (isValidAqlInspectionLevel(inspectionLevel)) {\n      const code = getAqlCodeLetter(lotSize, inspectionLevel);\n      const plan = code ? getSamplePlan(code, aqlLevel) : null;\n\n      if (plan) {\n        const totalMajorDefects = calculateTotalDefects(\"major\");\n\n        const status = totalMajorDefects > plan.accept ? \"FAIL\" : \"PASS\";\n        setReportData(prev => ({\n          ...prev,\n          aqlSettings: {\n            ...prev.aqlSettings,\n            status,\n          },\n        }));\n      }\n    } else {\n      // For non-standard inspection levels, use a default status\n      console.warn(`Inspection level ${inspectionLevel} is not supported by AQL tables. Using default status.`);\n      setReportData(prev => ({\n        ...prev,\n        aqlSettings: {\n          ...prev.aqlSettings,\n          status: \"PASS\", // Default to PASS for unsupported inspection levels\n        },\n      }));\n    }\n  };\n\n  // Helper function to check if an inspection level is valid for AQL calculations\n  const isValidAqlInspectionLevel = (level: InspectionLevel): level is AqlInspectionLevel => {\n    return level === \"I\" || level === \"II\" || level === \"III\";\n  };\n\n\n\n  const addReportDefect = () => {\n    setReportData((prev) => ({\n      ...prev,\n      defects: [...prev.defects, { type: \"\", remarks: \"\", critical: 0, major: 0, minor: 0 }],\n    }))\n  }\n\n  const updateDefect = (index: number, field: string, value: string | number) => {\n    setReportData((prev) => {\n      const newDefects = [...prev.defects]\n      newDefects[index] = { ...newDefects[index], [field]: value }\n      return { ...prev, defects: newDefects }\n    })\n  }\n\n  const handleDefectImageUpload = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    if (!files || files.length === 0) return\n\n    const newImages: string[] = []\n    let loadedCount = 0\n\n    Array.from(files).forEach((file) => {\n      if (file.type.match(/^image\\//)) {\n        const reader = new FileReader()\n        reader.onload = (event) => {\n          const result = event.target?.result as string\n          if (result) {\n            newImages.push(result)\n            loadedCount++\n\n            if (loadedCount === files.length) {\n              setDefectImages((prev) => {\n                const currentImages = prev[index] || []\n                return {\n                  ...prev,\n                  [index]: [...currentImages, ...newImages],\n                }\n              })\n            }\n          }\n        }\n        reader.readAsDataURL(file)\n      }\n    })\n  }\n\n  const removeDefectImage = (defectIndex: number, imageIndex: number) => {\n    setDefectImages((prev) => {\n      const newImages = { ...prev }\n      if (newImages[defectIndex]) {\n        newImages[defectIndex] = newImages[defectIndex].filter((_, idx) => idx !== imageIndex)\n      }\n      return newImages\n    })\n  }\n\n  const calculateTotalDefects = (field: string) => {\n    return reportData.defects.reduce((total, defect) => {\n      // Use type assertion to let TypeScript know we can index this\n      const defectItem = defect as DefectData;\n      const value = Number.parseInt(defectItem[field]?.toString() || \"0\", 10);\n      return total + (isNaN(value) ? 0 : value);\n    }, 0);\n  };\n\n  const addReportSize = () => {\n    if (!reportData.newSize.trim()) return;\n\n    const section = template.sections.find((s) => s.type === \"garmentDetails\");\n    if (!section || !isGarmentDetailsContent(section.content)) return;\n\n    const updatedSizes = [...section.content.sizes, reportData.newSize.trim()];\n    updateGarmentDetails(section.id, { sizes: updatedSizes });\n    setReportData((prev) => ({ ...prev, newSize: \"\" }));\n  };\n\n  const addReportColor = () => {\n    if (!reportData.newColor.trim()) return;\n\n    const section = template.sections.find((s) => s.type === \"garmentDetails\");\n    if (!section || !isGarmentDetailsContent(section.content)) return;\n\n    const updatedColors = [...section.content.colors, reportData.newColor.trim()];\n    updateGarmentDetails(section.id, { colors: updatedColors });\n    setReportData((prev) => ({ ...prev, newColor: \"\" }));\n  };\n\n  const toggleAqlEditing = () => {\n    setReportData((prev) => ({ ...prev, editingAql: !prev.editingAql }))\n  }\n\n  const updateAqlResult = (field: string, value: string) => {\n    setReportData((prev) => ({\n      ...prev,\n      aqlSettings: { ...prev.aqlSettings, [field]: value },\n    }))\n  }\n\n  const updateQuestionAnswer = (questionId: string, value: string | string[] | boolean | number | null) => {\n    setReportData((prev) => ({\n      ...prev,\n      questionAnswers: { ...prev.questionAnswers, [questionId]: value },\n    }))\n  }\n\n  // Print function using browser's native print capability\n  const printReport = () => {\n    try {\n      setIsExporting(true)\n      console.log(\"Starting print process...\")\n\n      // Validate template and report data\n      if (!template || !reportData) {\n        throw new Error(\"Template or report data is missing\")\n      }\n\n      // Ensure we have at least some sample data for testing that matches the image format\n      if (Object.keys(reportData.quantities).length === 0) {\n        setReportData(prev => ({\n          ...prev,\n          quantities: {\n            \"BLUE\": {\n              \"S\": { orderQty: \"5\", offeredQty: \"44\" },\n              \"M\": { orderQty: \"4\", offeredQty: \"4\" },\n              \"L\": { orderQty: \"4\", offeredQty: \"4\" },\n              \"XL\": { orderQty: \"4\", offeredQty: \"544\" },\n              \"XXL\": { orderQty: \"4\", offeredQty: \"44\" }\n            },\n            \"RED\": {\n              \"S\": { orderQty: \"5\", offeredQty: \"4\" },\n              \"M\": { orderQty: \"54\", offeredQty: \"44\" },\n              \"L\": { orderQty: \"5\", offeredQty: \"44\" },\n              \"XL\": { orderQty: \"55\", offeredQty: \"3\" },\n              \"XXL\": { orderQty: \"5\", offeredQty: \"22\" }\n            },\n            \"BLACK\": {\n              \"S\": { orderQty: \"5\", offeredQty: \"55\" },\n              \"M\": { orderQty: \"11\", offeredQty: \"2\" },\n              \"L\": { orderQty: \"3\", offeredQty: \"5\" },\n              \"XL\": { orderQty: \"3\", offeredQty: \"55\" },\n              \"XXL\": { orderQty: \"44\", offeredQty: \"54\" }\n            }\n          }\n        }));\n      }\n\n      if (reportData.defects.length === 0) {\n        setReportData(prev => ({\n          ...prev,\n          defects: [\n            { type: \"Stitching\", remarks: \"Loose threads\", critical: \"1\", major: \"2\", minor: \"3\" },\n            { type: \"Fabric\", remarks: \"Color variation\", critical: \"0\", major: \"3\", minor: \"2\" },\n            { type: \"Buttons\", remarks: \"Missing buttons\", critical: \"2\", major: \"1\", minor: \"0\" }\n          ]\n        }));\n      }\n\n      // Set default values for carton information if not provided\n      if (!reportData.cartonOffered) {\n        setReportData(prev => ({ ...prev, cartonOffered: \"50\" }));\n      }\n\n      if (!reportData.cartonToInspect) {\n        setReportData(prev => ({ ...prev, cartonToInspect: \"10\" }));\n      }\n\n      if (!reportData.cartonInspected) {\n        setReportData(prev => ({ ...prev, cartonInspected: \"10\" }));\n      }\n\n      // Use setTimeout to ensure state updates have been applied\n      setTimeout(() => {\n        // Store the current body classes and document title\n        const originalBodyClasses = document.body.className;\n        const originalTitle = document.title;\n\n        // Set a custom title for the printed document using the template title if available\n        document.title = template.title ? `${template.title} - Inspection Report` : \"Garment Inspection Report\";\n\n        // Add a print-specific class to the body\n        document.body.classList.add('printing');\n\n        // Add current date for the footer\n        document.documentElement.setAttribute('data-print-date', new Date().toLocaleDateString());\n\n        // Print the document\n        window.print();\n\n        // Restore the original body classes and title\n        document.body.className = originalBodyClasses;\n        document.title = originalTitle;\n\n        // Remove the date attribute\n        document.documentElement.removeAttribute('data-print-date');\n\n        console.log(\"Print process completed\");\n        setIsExporting(false);\n      }, 300);\n    } catch (error) {\n      console.error(\"Error during print process:\", error);\n      alert(\"Failed to print. Please try again. Error: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n      setIsExporting(false);\n    }\n  }\n\n  // Rendering Helpers\n  const renderResponseTypeIcon = (type: ResponseType) => {\n    switch (type) {\n      case \"Site\":\n        return <MapPin size={18} className=\"response-type-icon\" />\n      case \"Inspection date\":\n        return <Calendar size={18} className=\"response-type-icon\" />\n      case \"Person\":\n        return <User size={18} className=\"response-type-icon\" />\n      case \"Inspection location\":\n        return <MapPin size={18} className=\"response-type-icon\" />\n      case \"Text\":\n        return <div className=\"response-type-icon text-icon\">Aa</div>\n      case \"Number\":\n        return <div className=\"response-type-icon number-icon\">123</div>\n      case \"Checkbox\":\n        return (\n          <div className=\"response-type-icon checkbox-icon\">\n            <Check size={14} />\n          </div>\n        )\n      case \"Yes/No\":\n        return (\n          <div className=\"response-type-icon yes-no-icon\">\n            <span className=\"yes\">Y</span>/<span className=\"no\">N</span>\n          </div>\n        )\n      case \"Multiple choice\":\n        return <div className=\"response-type-icon multiple-choice-icon\">☰</div>\n      case \"Slider\":\n        return <div className=\"response-type-icon slider-icon\">⟷</div>\n      case \"Media\":\n        return <ImageIcon size={18} className=\"response-type-icon\" />\n      case \"Annotation\":\n        return <Edit size={18} className=\"response-type-icon\" />\n      case \"Date & Time\":\n        return <Clock size={18} className=\"response-type-icon\" />\n      default:\n        return <div className=\"response-type-icon\"></div>\n    }\n  }\n\n  const renderResponseTypeMenu = (sectionId: string, questionId: string) => {\n    if (showResponseTypeMenu !== questionId) return null\n    const responseTypes: ResponseType[] = [\n      \"Text\",\n      \"Number\",\n      \"Checkbox\",\n      \"Yes/No\",\n      \"Multiple choice\",\n      \"Slider\",\n      \"Media\",\n      \"Annotation\",\n      \"Date & Time\",\n      \"Site\",\n      \"Inspection date\",\n      \"Person\",\n      \"Inspection location\",\n    ]\n\n    return (\n      <div className=\"response-type-menu\">\n        <div className=\"response-type-menu-header\">\n          <h3>Select response type</h3>\n          <button className=\"close-button\" onClick={() => setShowResponseTypeMenu(null)}>\n            <X size={18} />\n          </button>\n        </div>\n        <div className=\"response-type-options\">\n          {responseTypes.map((type) => (\n            <button\n              key={type}\n              className=\"response-type-option\"\n              onClick={() => changeQuestionResponseType(sectionId, questionId, type)}\n            >\n              {renderResponseTypeIcon(type)}\n              <span>{type}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  const renderQuestion = (question: Question, sectionId: string, index: number) => {\n    const isActive = activeQuestionId === question.id\n    const isDragging = draggedItem?.type === \"question\" && draggedItem.id === question.id\n    const isDropTarget = dropTarget?.type === \"question\" && dropTarget.id === question.id\n\n    return (\n      <div\n        key={question.id}\n        ref={(el) => {\n          questionRefs.current[question.id] = el\n        }}\n        className={`question-item ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"}`}\n        onClick={() => setActiveQuestionId(question.id)}\n        draggable\n        onDragStart={() => handleDragStart(\"question\", question.id)}\n        onDragOver={(e) => handleDragOver(\"question\", question.id, e)}\n        onDrop={handleDrop}\n      >\n        <div className=\"question-header\">\n          <div className=\"question-drag-handle\">\n            <Move size={16} />\n          </div>\n          <div className=\"question-number\">{index + 1}</div>\n          <input\n            type=\"text\"\n            className=\"question-text\"\n            value={question.text}\n            onChange={(e) => updateQuestion(sectionId, question.id, { text: e.target.value })}\n            placeholder=\"Type question\"\n          />\n        </div>\n        <div className=\"question-body\">\n          <div className=\"response-type-selector\">\n            <div\n              className=\"selected-response-type\"\n              onClick={(e) => {\n                e.stopPropagation()\n                setShowResponseTypeMenu(showResponseTypeMenu === question.id ? null : question.id)\n              }}\n            >\n              {renderResponseTypeIcon(question.responseType)}\n              <span>{question.responseType}</span>\n              <ChevronDown size={16} />\n            </div>\n            {renderResponseTypeMenu(sectionId, question.id)}\n          </div>\n          {renderQuestionResponse(question, sectionId, updateQuestion)}\n        </div>\n        <div className=\"question-footer\">\n          <label className=\"required-checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={question.required}\n              onChange={(e) => updateQuestion(sectionId, question.id, { required: e.target.checked })}\n            />\n            <span>Required</span>\n          </label>\n          <label className=\"required-checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={question.flagged}\n              onChange={(e) => updateQuestion(sectionId, question.id, { flagged: e.target.checked })}\n            />\n            <span>Flag</span>\n          </label>\n          <button className=\"delete-question\" onClick={() => deleteQuestion(sectionId, question.id)}>\n            <Trash2 size={16} />\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  const renderGarmentDetailsSection = (section: AppSection) => {\n    if (section.type !== \"garmentDetails\") return null\n\n    const garmentContent = section.content as GarmentDetailsContent\n\n    return (\n      <div className=\"garment-details-content\">\n        <fieldset className=\"garment-fieldset aql-settings\">\n          <legend className=\"garment-legend\">\n            <Settings size={18} />\n            <span>AQL Settings</span>\n          </legend>\n          <div className=\"aql-grid\">\n            <div className=\"aql-select-group\">\n              <label htmlFor=\"aql-level\">AQL Level</label>\n              <select\n                id=\"aql-level\"\n                className=\"garment-select\"\n                value={garmentContent.aqlSettings.aqlLevel}\n                onChange={(e) => updateAQLSettings(section.id, \"aqlLevel\", e.target.value as AQLLevel)}\n              >\n                {AQL_LEVELS.map((level) => (\n                  <option key={level} value={level}>\n                    {level}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"aql-select-group\">\n              <label htmlFor=\"inspection-level\">Inspection Level</label>\n              <select\n                id=\"inspection-level\"\n                className=\"garment-select\"\n                value={garmentContent.aqlSettings.inspectionLevel}\n                onChange={(e) => updateAQLSettings(section.id, \"inspectionLevel\", e.target.value as InspectionLevel)}\n              >\n                {INSPECTION_LEVELS.map((level) => (\n                  <option key={level} value={level}>\n                    {level}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"aql-select-group\">\n              <label htmlFor=\"sampling-plan\">Sampling Plan</label>\n              <select\n                id=\"sampling-plan\"\n                className=\"garment-select\"\n                value={garmentContent.aqlSettings.samplingPlan}\n                onChange={(e) => updateAQLSettings(section.id, \"samplingPlan\", e.target.value as SamplingPlan)}\n              >\n                {SAMPLING_PLANS.map((plan) => (\n                  <option key={plan} value={plan}>\n                    {plan}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"aql-select-group\">\n              <label htmlFor=\"severity\">Severity</label>\n              <select\n                id=\"severity\"\n                className=\"garment-select\"\n                value={garmentContent.aqlSettings.severity}\n                onChange={(e) => updateAQLSettings(section.id, \"severity\", e.target.value as Severity)}\n              >\n                {SEVERITIES.map((severity) => (\n                  <option key={severity} value={severity}>\n                    {severity}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </fieldset>\n\n        <fieldset className=\"garment-fieldset quantity-grid\">\n          <legend className=\"garment-legend\">\n            <Ruler size={18} />\n            <span>Quantity Grid Configuration</span>\n          </legend>\n\n          <div className=\"garment-config-group\">\n            <label className=\"garment-label\">Sizes</label>\n            <ul className=\"garment-item-list\">\n              {garmentContent.sizes.map((size) => (\n                <li key={size} className=\"garment-item\">\n                  <span>{size}</span>\n                  <div className=\"garment-item-actions\">\n                    <button\n                      className=\"garment-item-edit\"\n                      onClick={() => {\n                        const newSize = prompt(\"Edit size\", size)\n                        if (newSize && newSize !== size) {\n                          const updatedSizes = garmentContent.sizes.map((s) => (s === size ? newSize : s))\n                          updateGarmentDetails(section.id, { sizes: updatedSizes })\n                        }\n                      }}\n                      aria-label={`Edit size ${size}`}\n                    >\n                      <Edit size={14} />\n                    </button>\n                    <button\n                      className=\"garment-item-remove\"\n                      onClick={() => removeSize(section.id, size)}\n                      aria-label={`Remove size ${size}`}\n                    >\n                      <X size={14} />\n                    </button>\n                  </div>\n                </li>\n              ))}\n            </ul>\n            <div className=\"garment-add-item\">\n              <input\n                type=\"text\"\n                className=\"garment-input\"\n                placeholder=\"New Size\"\n                value={newSize}\n                onChange={(e) => setNewSize(e.target.value)}\n                onKeyDown={(e) => e.key === \"Enter\" && addSize(section.id)}\n              />\n              <button className=\"garment-add-button\" onClick={() => addSize(section.id)}>\n                Add\n              </button>\n            </div>\n          </div>\n\n          <div className=\"garment-config-group\">\n            <label className=\"garment-label\">Colors</label>\n            <ul className=\"garment-item-list\">\n              {garmentContent.colors.map((color) => (\n                <li key={color} className=\"garment-item\">\n                  <span>{color}</span>\n                  <div className=\"garment-item-actions\">\n                    <button\n                      className=\"garment-item-edit\"\n                      onClick={() => {\n                        const newColor = prompt(\"Edit color\", color)\n                        if (newColor && newColor !== color) {\n                          const updatedColors = garmentContent.colors.map((c) => (c === color ? newColor : c))\n                          updateGarmentDetails(section.id, { colors: updatedColors })\n                        }\n                      }}\n                      aria-label={`Edit color ${color}`}\n                    >\n                      <Edit size={14} />\n                    </button>\n                    <button\n                      className=\"garment-item-remove\"\n                      onClick={() => removeColor(section.id, color)}\n                      aria-label={`Remove color ${color}`}\n                    >\n                      <X size={14} />\n                    </button>\n                  </div>\n                </li>\n              ))}\n            </ul>\n            <div className=\"garment-add-item\">\n              <input\n                type=\"text\"\n                className=\"garment-input\"\n                placeholder=\"New Color\"\n                value={newColor}\n                onChange={(e) => setNewColor(e.target.value)}\n                onKeyDown={(e) => e.key === \"Enter\" && addColor(section.id)}\n              />\n              <button className=\"garment-add-button\" onClick={() => addColor(section.id)}>\n                Add\n              </button>\n            </div>\n          </div>\n        </fieldset>\n\n        <fieldset className=\"garment-fieldset carton-counts\">\n          <legend className=\"garment-legend\">\n            <Box size={18} />\n            <span>Carton Counts</span>\n          </legend>\n\n          <div className=\"garment-checkbox-group\">\n            <label className=\"garment-checkbox-label\">\n              <input\n                type=\"checkbox\"\n                checked={garmentContent.includeCartonOffered}\n                onChange={() => toggleCartonSetting(section.id, \"includeCartonOffered\")}\n              />\n              <span>Include 'No. of Cartons Offered' field</span>\n            </label>\n          </div>\n\n          <div className=\"garment-checkbox-group\">\n            <label className=\"garment-checkbox-label\">\n              <input\n                type=\"checkbox\"\n                checked={garmentContent.includeCartonInspected}\n                onChange={() => toggleCartonSetting(section.id, \"includeCartonInspected\")}\n              />\n              <span>Include 'No. of Cartons Inspected' field</span>\n            </label>\n          </div>\n        </fieldset>\n\n        <fieldset className=\"garment-fieldset default-defects\">\n          <legend className=\"garment-legend\">\n            <List size={18} />\n            <span>Default Defect Types</span>\n          </legend>\n\n          <div className=\"garment-config-group\">\n            <label className=\"garment-label\">Initial Defect List</label>\n            <ul className=\"garment-item-list\">\n              {garmentContent.defaultDefects.map((defect) => (\n                <li key={defect} className=\"garment-item\">\n                  <span>{defect}</span>\n                  <button\n                    className=\"garment-item-remove\"\n                    onClick={() => removeDefect(section.id, defect)}\n                    aria-label={`Remove defect ${defect}`}\n                  >\n                    <X size={14} />\n                  </button>\n                </li>\n              ))}\n            </ul>\n            <div className=\"garment-add-item\">\n              <input\n                type=\"text\"\n                className=\"garment-input\"\n                placeholder=\"New Defect Type\"\n                value={newDefect}\n                onChange={(e) => setNewDefect(e.target.value)}\n                onKeyDown={(e) => e.key === \"Enter\" && addDefect(section.id)}\n              />\n              <button className=\"garment-add-button\" onClick={() => addDefect(section.id)}>\n                Add\n              </button>\n            </div>\n          </div>\n        </fieldset>\n      </div>\n    )\n  }\n\n  const renderStandardSection = (section: AppSection) => {\n    if (section.type !== \"standard\") return null\n\n    const standardContent = section.content as StandardSectionContent\n\n    return (\n      <>\n        {standardContent.description && <div className=\"section-description\">{standardContent.description}</div>}\n        <div className=\"questions-container\">\n          <div className=\"questions-header\">\n            <div className=\"question-label\">Question</div>\n            <div className=\"response-type-label\">Type of response</div>\n            <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\n              <Plus size={16} />\n            </button>\n          </div>\n          {standardContent.questions.map((question, idx) => renderQuestion(question, section.id, idx))}\n          <div className=\"question-actions\">\n            <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\n              <Plus size={16} /> Add Question\n            </button>\n          </div>\n        </div>\n      </>\n    )\n  }\n\n  const renderSection = (section: AppSection, index: number) => {\n    const isActive = activeSectionId === section.id\n    const isDragging = draggedItem?.type === \"section\" && draggedItem.id === section.id\n    const isDropTarget = dropTarget?.type === \"section\" && dropTarget.id === section.id\n    const isTitlePage = index === 0 && section.title === \"Title Page\"\n    const isGarmentDetails = section.type === \"garmentDetails\"\n    const isDraggable = !isTitlePage && !isGarmentDetails\n\n    return (\n      <div\n        key={section.id}\n        ref={(el) => {\n          sectionRefs.current[section.id] = el\n        }}\n        className={`section-container ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"} ${isGarmentDetails ? \"garment-details-section\" : \"\"}`}\n        onClick={() => setActiveSectionId(section.id)}\n        draggable={isDraggable}\n        onDragStart={() => isDraggable && handleDragStart(\"section\", section.id)}\n        onDragOver={(e) => handleDragOver(\"section\", section.id, e)}\n        onDrop={handleDrop}\n      >\n        <div className=\"section-header\">\n          <button\n            className=\"collapse-button\"\n            onClick={(e) => {\n              e.stopPropagation()\n              toggleSectionCollapse(section.id)\n            }}\n          >\n            {section.isCollapsed ? <ChevronUp size={18} /> : <ChevronDown size={18} />}\n          </button>\n          <div className=\"section-title-container\">\n            <input\n              type=\"text\"\n              className=\"section-title\"\n              value={section.title}\n              onChange={(e) => updateSection(section.id, { title: e.target.value })}\n              readOnly={isTitlePage || isGarmentDetails}\n            />\n            {!isTitlePage && !isGarmentDetails && (\n              <button className=\"edit-section-title\">\n                <Edit size={16} />\n              </button>\n            )}\n            {isGarmentDetails && (\n              <div className=\"section-icon\">\n                <Shirt size={16} />\n              </div>\n            )}\n          </div>\n          <div className=\"section-actions\">\n            <button\n              className=\"delete-section-button\"\n              onClick={(e) => {\n                e.stopPropagation()\n                deleteSection(section.id)\n              }}\n              disabled={isTitlePage}\n            >\n              <Trash2 size={16} />\n            </button>\n          </div>\n        </div>\n\n        {!section.isCollapsed && (\n          <>\n            {section.type === \"standard\" && renderStandardSection(section)}\n            {section.type === \"garmentDetails\" && renderGarmentDetailsSection(section)}\n          </>\n        )}\n      </div>\n    )\n  }\n\n  const renderReportQuestionResponse = (\n    question: Question,\n    reportData: ReportData,\n    updateQuestionAnswer: (questionId: string, value: string | string[] | boolean | number | null) => void\n  ) => {\n    const value =\n      reportData.questionAnswers[question.id] !== undefined ? reportData.questionAnswers[question.id] : question.value;\n\n    switch (question.responseType) {\n      case \"Text\":\n      case \"Site\":\n      case \"Person\":\n      case \"Inspection location\":\n        return (\n          <div className=\"report-response-field compact-field\">\n            {question.responseType === \"Inspection location\" ? (\n              <div className=\"location-field-report\">\n                <div className=\"location-input-wrapper\">\n                  <input\n                    type=\"text\"\n                    className=\"report-text-input\"\n                    value={(value as string) || \"\"}\n                    onChange={(e) => updateQuestionAnswer(question.id, e.target.value)}\n                    placeholder=\"Enter city, area, or address\"\n                  />\n                  <button\n                    onClick={() => {\n                      if (navigator.geolocation) {\n                        navigator.geolocation.getCurrentPosition(\n                          (position) => {\n                            // Get coordinates\n                            const coords = `${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`;\n\n                            // Try to get address from coordinates using reverse geocoding\n                            fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${position.coords.latitude}&lon=${position.coords.longitude}`)\n                              .then(response => response.json())\n                              .then(data => {\n                                let locationText = '';\n                                if (data && data.address) {\n                                  const address = data.address;\n                                  // Create a readable address from components\n                                  const components = [];\n                                  if (address.city || address.town || address.village) {\n                                    components.push(address.city || address.town || address.village);\n                                  }\n                                  if (address.state || address.county) {\n                                    components.push(address.state || address.county);\n                                  }\n                                  if (address.country) {\n                                    components.push(address.country);\n                                  }\n                                  locationText = components.join(', ');\n                                }\n\n                                // If we couldn't get a readable address, use coordinates\n                                if (!locationText) {\n                                  locationText = coords;\n                                }\n\n                                updateQuestionAnswer(question.id, locationText);\n                              })\n                              .catch(error => {\n                                console.error(\"Error getting location name:\", error);\n                                // Fallback to coordinates if geocoding fails\n                                updateQuestionAnswer(question.id, coords);\n                              });\n                          },\n                          (error) => {\n                            alert(\"Error getting location: \" + error.message);\n                          }\n                        );\n                      } else {\n                        alert(\"Geolocation is not supported by this browser.\");\n                      }\n                    }}\n                    className=\"report-location-button\"\n                    title=\"Get current location\"\n                  >\n                    <MapPin size={14} />\n                  </button>\n                </div>\n                {value && (\n                  <div className=\"location-display\">\n                    <MapPin size={12} />\n                    <span>{value}</span>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <input\n                type=\"text\"\n                className=\"report-text-input\"\n                value={(value as string) || \"\"}\n                onChange={(e) => updateQuestionAnswer(question.id, e.target.value)}\n                placeholder={`Enter ${question.responseType.toLowerCase()}`}\n              />\n            )}\n          </div>\n        );\n      case \"Number\":\n        return (\n          <div className=\"report-response-field\">\n            <input\n              type=\"number\"\n              className=\"report-number-input\"\n              value={(value as number) || \"\"}\n              onChange={(e) => updateQuestionAnswer(question.id, Number(e.target.value))}\n              placeholder=\"0\"\n            />\n          </div>\n        );\n      case \"Checkbox\":\n        return (\n          <div className=\"report-response-field\">\n            <label className=\"report-checkbox-label\">\n              <input\n                type=\"checkbox\"\n                checked={!!value}\n                onChange={(e) => updateQuestionAnswer(question.id, e.target.checked)}\n              />\n              <span>Yes</span>\n            </label>\n          </div>\n        );\n      case \"Yes/No\":\n        return (\n          <div className=\"report-response-field\">\n            <div className=\"report-yes-no-options\">\n              <label className=\"report-radio-label\">\n                <input\n                  type=\"radio\"\n                  name={`yesno-${question.id}`}\n                  value=\"Yes\"\n                  checked={value === \"Yes\"}\n                  onChange={() => updateQuestionAnswer(question.id, \"Yes\")}\n                />\n                <span>Yes</span>\n              </label>\n              <label className=\"report-radio-label\">\n                <input\n                  type=\"radio\"\n                  name={`yesno-${question.id}`}\n                  value=\"No\"\n                  checked={value === \"No\"}\n                  onChange={() => updateQuestionAnswer(question.id, \"No\")}\n                />\n                <span>No</span>\n              </label>\n              <label className=\"report-radio-label\">\n                <input\n                  type=\"radio\"\n                  name={`yesno-${question.id}`}\n                  value=\"N/A\"\n                  checked={value === \"N/A\"}\n                  onChange={() => updateQuestionAnswer(question.id, \"N/A\")}\n                />\n                <span>N/A</span>\n              </label>\n            </div>\n          </div>\n        );\n      case \"Multiple choice\":\n        return (\n          <div className=\"report-response-field\">\n            <select\n              className=\"report-select\"\n              value={(value as string) || \"\"}\n              onChange={(e) => updateQuestionAnswer(question.id, e.target.value)}\n            >\n              <option value=\"\">Select an option</option>\n              {(question.options || []).map((option, idx) => (\n                <option key={idx} value={option}>\n                  {option}\n                </option>\n              ))}\n            </select>\n          </div>\n        );\n      case \"Slider\":\n        return (\n          <div className=\"report-response-field\">\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              value={(value as number) || 0}\n              onChange={(e) => updateQuestionAnswer(question.id, Number(e.target.value))}\n              className=\"report-slider\"\n            />\n            <span className=\"report-slider-value\">{value || 0}</span>\n          </div>\n        );\n      case \"Media\":\n        return (\n          <div className=\"report-response-field\">\n            <input\n              type=\"file\"\n              accept=\"image/*,video/*\"\n              multiple\n              onChange={async (e) => {\n                const files = e.target.files;\n                if (!files || files.length === 0) return;\n\n                // Convert files to base64 and store them\n                const mediaFiles: string[] = [];\n\n                for (let i = 0; i < files.length; i++) {\n                  const file = files[i];\n                  const reader = new FileReader();\n\n                  reader.onload = async (event) => {\n                    const result = event.target?.result as string;\n                    if (result) {\n                      try {\n                        // Resize image if it's an image\n                        const resizedImage = file.type.startsWith('image/')\n                          ? await resizeImage(result)\n                          : result;\n\n                        mediaFiles.push(resizedImage);\n\n                        // Update the question with the new media files\n                        if (mediaFiles.length === files.length) {\n                          const currentValue = value as string[] || [];\n                          updateQuestionAnswer(question.id, [...currentValue, ...mediaFiles]);\n                        }\n                      } catch (error) {\n                        console.error(\"Error processing media file:\", error);\n                      }\n                    }\n                  };\n\n                  reader.readAsDataURL(file);\n                }\n              }}\n              className=\"report-media-file-input\"\n              id={`report-media-upload-${question.id}`}\n            />\n            <label htmlFor={`report-media-upload-${question.id}`} className=\"report-media-upload\">\n              <ImageIcon size={20} />\n              <span>Upload media</span>\n            </label>\n\n            {/* Display uploaded media previews */}\n            {Array.isArray(value) && value.length > 0 && (\n              <div className=\"report-media-previews\">\n                {(value as string[]).map((media, index) => (\n                  <div key={index} className=\"report-media-preview-item\">\n                    {media.startsWith('data:image') ? (\n                      <img src={media || \"/placeholder.svg\"} alt={`Uploaded media ${index + 1}`} />\n                    ) : (\n                      <div className=\"report-video-preview\">\n                        <FileText size={24} />\n                        <span>Media file {index + 1}</span>\n                      </div>\n                    )}\n                    <button\n                      className=\"report-remove-media-button\"\n                      onClick={() => {\n                        const updatedMedia = [...value as string[]];\n                        updatedMedia.splice(index, 1);\n                        updateQuestionAnswer(question.id, updatedMedia);\n                      }}\n                    >\n                      <X size={12} />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n      case \"Annotation\":\n        return (\n          <div className=\"report-response-field\">\n            <div className=\"annotation-placeholder-box\">\n              Annotation Placeholder (Report)\n            </div>\n          </div>\n        );\n      case \"Date & Time\":\n      case \"Inspection date\":\n        return (\n          <div className=\"report-response-field\">\n            <input\n              type=\"date\"\n              className=\"report-date-input\"\n              value={(value as string) || new Date().toISOString().split(\"T\")[0]}\n              onChange={(e) => updateQuestionAnswer(question.id, e.target.value)}\n            />\n          </div>\n        );\n      default:\n        return <div className=\"report-response-field\">Unsupported response type</div>;\n    }\n  };\n\n  const renderReportQuestion = (question: Question, questionIndex: number) => (\n    <div key={question.id} className=\"report-question-item compact-question\">\n      <div className=\"report-question-header\">\n        <span className=\"report-question-number\">{questionIndex + 1}.</span>\n        <span className=\"report-question-text\">{question.text}</span>\n        {question.required && <span className=\"report-required-badge\">Required</span>}\n      </div>\n      {renderReportQuestionResponse(question, reportData, updateQuestionAnswer)}\n    </div>\n  )\n\n  const renderReportTab = () => {\n    return (\n      <div className=\"report-preview-container\">\n        <div className=\"report-actions\">\n          <h2>Garment Inspection Report</h2>\n          <div className=\"report-action-buttons\">\n            <button className=\"export-pdf-button\" onClick={printReport} disabled={isExporting}>\n              <Printer size={18} />\n              <span>{isExporting ? \"Preparing...\" : \"Print Report\"}</span>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"report-preview\" ref={reportRef}>\n          <div className=\"report-header-preview\">\n            <div className=\"report-header-content\">\n              <div className=\"report-logo\">\n                {template.logo ? (\n                  <img src={template.logo} alt=\"Company logo\" />\n                ) : (\n                  <div className=\"logo-placeholder\">M.I.S</div>\n                )}\n              </div>\n              <div className=\"report-title-info\">\n                <h3>GARMENT INSPECTION REPORT</h3>\n                <p>{template.description || \"THIS DOCUMENT IS NON-NEGOTIABLE\"}</p>\n              </div>\n              <div className=\"report-header-spacer\"></div>\n            </div>\n          </div>\n\n          {/* Questions Section */}\n          {template.sections\n            .filter((section) => section.type === \"standard\")\n            .map((section) => (\n              <div key={section.id} className=\"report-section-preview\">\n                <h4>{section.title}</h4>\n                <div className=\"report-questions\">\n                  {(section.content as StandardSectionContent).questions.map((question, questionIndex) =>\n                    renderReportQuestion(question, questionIndex),\n                  )}\n                </div>\n              </div>\n            ))}\n\n          <div className=\"report-section-preview\">\n            <h4>Garment Details</h4>\n\n            {template.sections.some((s) => s.type === \"garmentDetails\") ? (\n              <div className=\"garment-grid-preview\">\n                <div className=\"grid-actions\">\n                  <div className=\"grid-action-item\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Add Size\"\n                      value={reportData.newSize}\n                      onChange={(e) => setReportData((prev) => ({ ...prev, newSize: e.target.value }))}\n                      className=\"grid-action-input\"\n                    />\n                    <button className=\"grid-action-button\" onClick={addReportSize}>\n                      Add Size\n                    </button>\n                  </div>\n                  <div className=\"grid-action-item\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"Add Color\"\n                      value={reportData.newColor}\n                      onChange={(e) => setReportData((prev) => ({ ...prev, newColor: e.target.value }))}\n                      className=\"grid-action-input\"\n                    />\n                    <button className=\"grid-action-button\" onClick={addReportColor}>\n                      Add Color\n                    </button>\n                  </div>\n                </div>\n\n                <table className=\"garment-table-preview\">\n                  <thead>\n                    <tr>\n                      <th>\n                        Color\n                        <div className=\"table-header-actions\">\n                          <button className=\"table-edit-button\" title=\"Edit Colors\">\n                            <Edit size={12} />\n                          </button>\n                        </div>\n                      </th>\n                      {(() => {\n                        const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n                        if (!garmentSection || !isGarmentDetailsContent(garmentSection.content)) return null;\n\n                        return garmentSection.content.sizes.map((size: string) => (\n                          <React.Fragment key={size}>\n                            <th colSpan={2} className=\"size-header\">\n                              {size}\n                              <div className=\"table-header-actions\">\n                                <button\n                                  className=\"table-delete-button\"\n                                  title={`Remove ${size}`}\n                                  onClick={() => {\n                                    if (window.confirm(`Are you sure you want to remove size \"${size}\"?`)) {\n                                      const section = template.sections.find((s) => s.type === \"garmentDetails\");\n                                      if (section && isGarmentDetailsContent(section.content)) {\n                                        const updatedSizes = section.content.sizes.filter(s => s !== size);\n                                        updateGarmentDetails(section.id, { sizes: updatedSizes });\n                                      }\n                                    }\n                                  }}\n                                >\n                                  <X size={12} />\n                                </button>\n                              </div>\n                            </th>\n                          </React.Fragment>\n                        ));\n                      })()}\n                      <th colSpan={2} className=\"size-header\">Total</th>\n                    </tr>\n                    <tr>\n                      <th></th>\n                      {(() => {\n                        const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n                        if (!garmentSection || !isGarmentDetailsContent(garmentSection.content)) return null;\n\n                        return garmentSection.content.sizes.map((size: string) => (\n                          <React.Fragment key={size}>\n                            <th className=\"qty-header\">Order Qty</th>\n                            <th className=\"qty-header\">Offered Qty</th>\n                          </React.Fragment>\n                        ));\n                      })()}\n                      <th className=\"qty-header\">Order Qty</th>\n                      <th className=\"qty-header\">Offered Qty</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {(() => {  // Outer IIFE for iterating over garment details section if it exists\n                      const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n\n                      // Perform the type guard check\n                      if (!garmentSection || !isGarmentDetailsContent(garmentSection.content)) {\n                        // If no garment section or its content isn't GarmentDetailsContent,\n                        // render nothing or a placeholder row.\n                        return null;\n                        // Example placeholder:\n                        // return <tr><td colSpan={/* calculate appropriate colSpan */}>Garment details not available.</td></tr>;\n                      }\n\n                      // **Crucial Change:** Assign the narrowed content to a new constant.\n                      // TypeScript will now know 'confirmedGarmentContent' is definitely 'GarmentDetailsContent'.\n                      const confirmedGarmentContent = garmentSection.content;\n\n                      // Now map over colors using the confirmed content\n                      return confirmedGarmentContent.colors.map((color: string) => (\n                        <tr key={color}>\n                          <td className=\"color-column\">\n                            <div className=\"color-cell\">\n                              <span>{color}</span>\n                              <button\n                                title={`Remove ${color}`}\n                                onClick={() => {\n                                  if (window.confirm(`Are you sure you want to remove color \"${color}\"?`)) {\n                                    const section = template.sections.find((s) => s.type === \"garmentDetails\");\n                                    if (section && isGarmentDetailsContent(section.content)) {\n                                      const updatedColors = section.content.colors.filter(c => c !== color);\n                                      updateGarmentDetails(section.id, { colors: updatedColors });\n                                    }\n                                  }\n                                }}\n                              >\n                                <X size={12} />\n                              </button>\n                            </div>\n                          </td>\n                          {(() => {\n                            // Inner IIFE for sizes. Use the 'confirmedGarmentContent' here as well.\n                            return confirmedGarmentContent.sizes.map((size: string) => ( // THIS IS THE TARGET LINE (around 1845)\n                              <React.Fragment key={size}>\n                                <td>\n                                  <input\n                                    type=\"number\"\n                                    className=\"qty-input\"\n                                    value={reportData.quantities[color]?.[size]?.orderQty || \"\"}\n                                    onChange={(e) => handleQuantityChange(color, size, \"orderQty\", e.target.value)}\n                                    placeholder=\"0\"\n                                  />\n                                </td>\n                                <td>\n                                  <input\n                                    type=\"number\"\n                                    className=\"qty-input\"\n                                    value={reportData.quantities[color]?.[size]?.offeredQty || \"\"}\n                                    onChange={(e) => handleQuantityChange(color, size, \"offeredQty\", e.target.value)}\n                                    placeholder=\"0\"\n                                  />\n                                </td>\n                              </React.Fragment>\n                            ));\n                          })()}\n                          <td className=\"total-cell\">{calculateRowTotal(color, \"orderQty\")}</td>\n                          <td className=\"total-cell\">{calculateRowTotal(color, \"offeredQty\")}</td>\n                        </tr>\n                      ));\n                    })()}\n                    <tr className=\"total-row\">\n                      <td className=\"color-column\">Total</td>\n                      {(() => {\n                        const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n                        if (!garmentSection || !isGarmentDetailsContent(garmentSection.content)) return null;\n\n                        return garmentSection.content.sizes.map((size: string) => (\n                          <React.Fragment key={size}>\n                            <td className=\"total-cell\">{calculateColumnTotal(size, \"orderQty\")}</td>\n                            <td className=\"total-cell\">{calculateColumnTotal(size, \"offeredQty\")}</td>\n                          </React.Fragment>\n                        ));\n                      })()}\n                      <td className=\"total-cell\">{calculateGrandTotal(\"orderQty\")}</td>\n                      <td className=\"total-cell\">{calculateGrandTotal(\"offeredQty\")}</td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                {(() => {\n                  const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n                  if (garmentSection && isGarmentDetailsContent(garmentSection.content) && garmentSection.content.includeCartonOffered) {\n                    return (\n                  <div className=\"carton-info\">\n                    <label>No of Carton Offered:</label>\n                    <input\n                      type=\"number\"\n                      className=\"carton-input\"\n                      value={reportData.cartonOffered}\n                      onChange={(e) => setReportData((prev) => ({ ...prev, cartonOffered: e.target.value }))}\n                    />\n                  </div>\n                    );\n                  }\n                  return null;\n                })()}\n\n                <div className=\"carton-info\">\n                  <label>No of Carton to Inspect:</label>\n                  <input\n                    type=\"number\"\n                    className=\"carton-input\"\n                    value={reportData.cartonToInspect}\n                    onChange={(e) => setReportData((prev) => ({ ...prev, cartonToInspect: e.target.value }))}\n                  />\n                </div>\n\n                {(() => {\n                  const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n                  if (garmentSection && isGarmentDetailsContent(garmentSection.content) && garmentSection.content.includeCartonInspected) {\n                    return (\n                  <div className=\"carton-info\">\n                    <label>No of Carton Inspected:</label>\n                    <input\n                      type=\"number\"\n                      className=\"carton-input\"\n                      value={reportData.cartonInspected}\n                      onChange={(e) => setReportData((prev) => ({ ...prev, cartonInspected: e.target.value }))}\n                    />\n                  </div>\n                    );\n                  }\n                  return null;\n                })()}\n              </div>\n            ) : (\n              <p>No garment details configured</p>\n            )}\n          </div>\n\n          <div className=\"report-section-preview\">\n            <h4>Defect Log</h4>\n\n            {template.sections.some((s) => s.type === \"garmentDetails\") ? (\n              <div className=\"defect-log-preview\">\n                <table className=\"defect-table-preview\">\n                  <thead>\n                    <tr>\n                      <th>Defect Type</th>\n                      <th>Remarks</th>\n                      <th>Critical</th>\n                      <th>Major</th>\n                      <th>Minor</th>\n                      <th>Total</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {reportData.defects.map((defect, index) => (\n                      <tr key={index}>\n                        <td>\n                          <input\n                            type=\"text\"\n                            className=\"defect-input\"\n                            value={defect.type}\n                            onChange={(e) => updateDefect(index, \"type\", e.target.value)}\n                            placeholder=\"Enter defect type\"\n                          />\n                        </td>\n                        <td>\n                          <input\n                            type=\"text\"\n                            className=\"defect-input\"\n                            value={defect.remarks}\n                            onChange={(e) => updateDefect(index, \"remarks\", e.target.value)}\n                            placeholder=\"Enter remarks\"\n                          />\n                        </td>\n                        <td>\n                          <input\n                            type=\"number\"\n                            className=\"defect-input\"\n                            value={defect.critical || 0}\n                            onChange={(e) => updateDefect(index, \"critical\", e.target.value)}\n                            placeholder=\"0\"\n                          />\n                        </td>\n                        <td>\n                          <input\n                            type=\"number\"\n                            className=\"defect-input\"\n                            value={defect.major}\n                            onChange={(e) => updateDefect(index, \"major\", e.target.value)}\n                            placeholder=\"0\"\n                          />\n                        </td>\n                        <td>\n                          <input\n                            type=\"number\"\n                            className=\"defect-input\"\n                            value={defect.minor}\n                            onChange={(e) => updateDefect(index, \"minor\", e.target.value)}\n                            placeholder=\"0\"\n                          />\n                        </td>\n                        <td>\n                          {Number.parseInt(defect.critical?.toString() || \"0\", 10) +\n                            Number.parseInt(defect.major?.toString() || \"0\", 10) +\n                            Number.parseInt(defect.minor?.toString() || \"0\", 10)}\n                        </td>\n                        <td className=\"defect-actions\">\n                          <label className=\"image-upload-label\">\n                            <input\n                              type=\"file\"\n                              accept=\"image/*\"\n                              multiple\n                              onChange={(e) => handleDefectImageUpload(index, e)}\n                              className=\"sr-only\"\n                            />\n                            <ImageIcon size={16} className=\"action-icon\" />\n                          </label>\n                          <button\n                            className=\"defect-action-button\"\n                            onClick={() => {\n                              const newDefects = [...reportData.defects]\n                              newDefects.splice(index, 1)\n                              setReportData((prev) => ({ ...prev, defects: newDefects }))\n                              setDefectImages((prev) => {\n                                const newImages = { ...prev }\n                                delete newImages[index]\n                                return newImages\n                              })\n                            }}\n                          >\n                            <Trash2 size={16} className=\"action-icon\" />\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                    <tr className=\"total-row\">\n                      <td colSpan={2}>Total</td>\n                      <td>{calculateTotalDefects(\"critical\")}</td>\n                      <td>{calculateTotalDefects(\"major\")}</td>\n                      <td>{calculateTotalDefects(\"minor\")}</td>\n                      <td>\n                        {calculateTotalDefects(\"critical\") +\n                          calculateTotalDefects(\"major\") +\n                          calculateTotalDefects(\"minor\")}\n                      </td>\n                      <td></td>\n                    </tr>\n                  </tbody>\n                </table>\n\n                <div className=\"add-defect-container\">\n                  <button className=\"add-defect-button\" onClick={addReportDefect}>\n                    <Plus size={16} /> Add Defect\n                  </button>\n                </div>\n\n                <div className=\"photograph-section\">\n                  <h5>Photographs</h5>\n                  <div className=\"defect-images-grid\">\n                    {Object.entries(defectImages).map(([defectIndex, images]) => {\n                      const index = Number.parseInt(defectIndex, 10)\n                      const defect = reportData.defects[index]\n                      if (!defect || !images.length) return null\n\n                      return images.map((image, imageIndex) => (\n                        <div key={`${defectIndex}-${imageIndex}`} className=\"defect-image-card\">\n                          <div className=\"defect-image-header\">\n                            <span className=\"defect-image-type\">{defect.type}</span>\n                            <button\n                              className=\"remove-image-button\"\n                              onClick={() => removeDefectImage(index, imageIndex)}\n                            >\n                              <X size={14} />\n                            </button>\n                          </div>\n                          <div className=\"defect-image-container\">\n                            <img\n                              src={image || \"/placeholder.svg\"}\n                              alt={`Defect: ${defect.type}`}\n                              className=\"defect-image\"\n                            />\n                          </div>\n                          <div className=\"defect-image-remarks\">{defect.remarks}</div>\n                        </div>\n                      ))\n                    })}\n                  </div>\n                </div>\n\n                <div className=\"aql-result-preview\">\n                  <div className=\"aql-header\">\n                    <h5>AQL Result</h5>\n                    <button className=\"edit-aql-button\" onClick={toggleAqlEditing}>\n                      <Edit size={16} />\n                    </button>\n                  </div>\n                  <div className=\"aql-info\">\n                    {reportData.editingAql ? (\n                      <>\n                        <div className=\"aql-edit-field\">\n                          <label>AQL Level:</label>\n                          <select\n                            value={reportData.aqlSettings.aqlLevel}\n                            onChange={(e) => updateAqlResult(\"aqlLevel\", e.target.value)}\n                            className=\"aql-edit-input\"\n                          >\n                            {AQL_LEVELS.map((level) => (\n                              <option key={level} value={level}>\n                                {level}\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        <div className=\"aql-edit-field\">\n                          <label>Inspection Level:</label>\n                          <select\n                            value={reportData.aqlSettings.inspectionLevel}\n                            onChange={(e) => updateAqlResult(\"inspectionLevel\", e.target.value)}\n                            className=\"aql-edit-input\"\n                          >\n                            {INSPECTION_LEVELS.map((level) => (\n                              <option key={level} value={level}>\n                                {level}\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        <div className=\"aql-edit-field\">\n                          <label>Sampling Plan:</label>\n                          <select\n                            value={reportData.aqlSettings.samplingPlan}\n                            onChange={(e) => updateAqlResult(\"samplingPlan\", e.target.value)}\n                            className=\"aql-edit-input\"\n                          >\n                            {SAMPLING_PLANS.map((plan) => (\n                              <option key={plan} value={plan}>\n                                {plan}\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        <div className=\"aql-edit-field\">\n                          <label>Severity:</label>\n                          <select\n                            value={reportData.aqlSettings.severity}\n                            onChange={(e) => updateAqlResult(\"severity\", e.target.value)}\n                            className=\"aql-edit-input\"\n                          >\n                            {SEVERITIES.map((severity) => (\n                              <option key={severity} value={severity}>\n                                {severity}\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        <div className=\"aql-edit-field\">\n                          <label>Status:</label>\n                          <select\n                            value={reportData.aqlSettings.status}\n                            onChange={(e) => updateAqlResult(\"status\", e.target.value)}\n                            className=\"aql-edit-input\"\n                          >\n                            <option value=\"PASS\">PASS</option>\n                            <option value=\"FAIL\">FAIL</option>\n                          </select>\n                        </div>\n                      </>\n                    ) : (\n                      <>\n                        <p>\n                          <strong>AQL Level:</strong> {reportData.aqlSettings.aqlLevel}\n                        </p>\n                        <p>\n                          <strong>Inspection Level:</strong> {reportData.aqlSettings.inspectionLevel}\n                        </p>\n                        <p>\n                          <strong>Sampling Plan:</strong> {reportData.aqlSettings.samplingPlan}\n                        </p>\n                        <p>\n                          <strong>Severity:</strong> {reportData.aqlSettings.severity}\n                        </p>\n                        <p className={`aql-status ${reportData.aqlSettings.status.toLowerCase()}`}>\n                          <strong>Status:</strong> {reportData.aqlSettings.status}\n                        </p>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <p>No defect types configured</p>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Initialize dates for the inspection session\n  useEffect(() => {\n    if (!startDate) {\n      const today = new Date();\n      setStartDate(today.toISOString().split('T')[0]);\n\n      // Set due date to 30 days from today by default\n      const thirtyDaysLater = new Date();\n      thirtyDaysLater.setDate(today.getDate() + 30);\n      setDueDate(thirtyDaysLater.toISOString().split('T')[0]);\n    }\n  }, [startDate, setStartDate, setDueDate]);\n\n  const renderAccessTab = () => {\n    // Get today's date in YYYY-MM-DD format for min attribute\n    const today = new Date().toISOString().split('T')[0];\n\n    const validateDates = () => {\n      const errors: {startDate?: string; dueDate?: string} = {};\n      const currentDate = new Date();\n      currentDate.setHours(0, 0, 0, 0);\n\n      const selectedStartDate = new Date(startDate);\n      const selectedDueDate = new Date(dueDate);\n\n      // Check if start date is in the past\n      if (selectedStartDate < currentDate) {\n        errors.startDate = \"Start date cannot be in the past\";\n      }\n\n      // Check if due date is before start date\n      if (selectedDueDate < selectedStartDate) {\n        errors.dueDate = \"Due date must be after start date\";\n      }\n\n      setDateErrors(errors);\n      return Object.keys(errors).length === 0;\n    };\n\n    const handleStartDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newStartDate = e.target.value;\n      setStartDate(newStartDate);\n\n      // Clear any existing errors for start date\n      setDateErrors(prev => ({...prev, startDate: undefined}));\n\n      // Ensure due date is not before start date\n      const startDateObj = new Date(newStartDate);\n      const dueDateObj = new Date(dueDate);\n\n      if (dueDateObj < startDateObj) {\n        // Set due date to start date if it's before the new start date\n        setDueDate(newStartDate);\n        // Clear any existing errors for due date\n        setDateErrors(prev => ({...prev, dueDate: undefined}));\n      }\n    };\n\n    const handleDueDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newDueDate = e.target.value;\n      setDueDate(newDueDate);\n\n      // Clear any existing errors for due date\n      setDateErrors(prev => ({...prev, dueDate: undefined}));\n\n      // Validate that due date is not before start date\n      const startDateObj = new Date(startDate);\n      const dueDateObj = new Date(newDueDate);\n\n      if (dueDateObj < startDateObj) {\n        setDateErrors(prev => ({\n          ...prev,\n          dueDate: \"Due date must be after start date\"\n        }));\n      }\n    };\n\n    const handlePublish = async () => {\n      // Validate dates before publishing\n      if (validateDates()) {\n        try {\n          // Update template with session dates\n          updateTemplate({\n            ...template,\n            startDate: startDate,\n            dueDate: dueDate,\n            lastSaved: new Date()\n          });\n\n          // Save the template to the backend\n          await handleSave();\n\n          // Mark as published in the database\n          const csrfToken = await fetchCSRFToken();\n          const formData = new FormData();\n          formData.append(\"template_id\", template.id);\n          formData.append(\"title\", template.title);\n          formData.append(\"publish\", \"true\");\n\n          const publishResponse = await fetch(\"http://localhost:8000/api/users/garment-template/\", {\n            method: \"POST\",\n            headers: {\n              \"X-CSRFToken\": csrfToken,\n            },\n            body: formData,\n            credentials: \"include\",\n          });\n\n          if (!publishResponse.ok) {\n            let errorData;\n            try {\n              errorData = await publishResponse.json();\n              throw new Error(errorData.error || \"Failed to publish template\");\n            } catch (jsonError) {\n              throw new Error(`Failed to publish template: ${publishResponse.statusText}`);\n            }\n          }\n\n          // Try to get the response data\n          let publishData;\n          try {\n            publishData = await publishResponse.json();\n            console.log(\"Publish response:\", publishData);\n\n            // If we got a template_id back from the server, update our template\n            if (publishData && publishData.template_id) {\n              updateTemplate({\n                id: publishData.template_id.toString(),\n                lastPublished: new Date()\n              });\n            }\n          } catch (error) {\n            console.warn(\"Could not parse publish response as JSON:\", error);\n          }\n\n          alert('Template published successfully!');\n          window.location.href = '/dashboard';\n        } catch (error: any) {\n          console.error(\"Error publishing template:\", error);\n          alert(`Failed to publish template: ${error.message || \"Unknown error\"}`);\n        }\n      } else {\n        // Show error message if validation fails\n        alert('Please correct the errors before publishing.');\n      }\n    };\n\n    return (\n      <div className=\"access-page-container\">\n        <h1 className=\"access-main-title\">Template Access & Settings</h1>\n        <p className=\"access-main-description\">Configure access permissions and inspection timeframe for this template.</p>\n\n        <div className=\"access-content\">\n          <div className=\"access-tab\">\n            <div className=\"session-section\">\n              <h2>\n                <Calendar size={20} className=\"section-icon\" />\n                Inspection Timeframe\n              </h2>\n              <p>Set the start and due dates for inspections using this template.</p>\n\n              <div className=\"date-fields\">\n                <div className=\"date-field\">\n                  <label htmlFor=\"start-date\">Start Date <span className=\"required-indicator\">*</span></label>\n                  <div className=\"date-input-container\">\n                    <input\n                      type=\"date\"\n                      id=\"start-date\"\n                      value={startDate}\n                      onChange={handleStartDateChange}\n                      min={today} // Prevent selecting dates before today\n                      className={`date-input ${dateErrors.startDate ? 'date-input-error' : ''}`}\n                      style={{appearance: \"none\", WebkitAppearance: \"none\"}}\n                    />\n                    <Calendar size={16} className=\"date-icon\" />\n                  </div>\n                  {dateErrors.startDate && (\n                    <div className=\"date-error-message\">{dateErrors.startDate}</div>\n                  )}\n                  <div className=\"date-helper-text\">Earliest date inspections can begin</div>\n                </div>\n\n                <div className=\"date-field\">\n                  <label htmlFor=\"due-date\">Due Date <span className=\"required-indicator\">*</span></label>\n                  <div className=\"date-input-container\">\n                    <input\n                      type=\"date\"\n                      id=\"due-date\"\n                      value={dueDate}\n                      onChange={handleDueDateChange}\n                      min={startDate} // Prevent selecting a due date before start date\n                      className={`date-input ${dateErrors.dueDate ? 'date-input-error' : ''}`}\n                      style={{appearance: \"none\", WebkitAppearance: \"none\"}}\n                    />\n                    <Calendar size={16} className=\"date-icon\" />\n                  </div>\n                  {dateErrors.dueDate && (\n                    <div className=\"date-error-message\">{dateErrors.dueDate}</div>\n                  )}\n                  <div className=\"date-helper-text\">Deadline for completing inspections</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"access-tab\">\n            <div className=\"permissions-section\">\n              <h2>\n                <User size={20} className=\"section-icon\" />\n                User Permissions\n              </h2>\n              <p>Manage who can access, edit, and use this template.</p>\n\n              <AccessManager\n                templateId={template.id}\n                templateTitle={template.title || \"Untitled Template\"}\n                initialUsers={[]}\n                onUpdatePermissions={(users) => {\n                  console.log(\"Updated permissions:\", users);\n                  // Here you would update the template with the new permissions\n                  // setTemplate({ ...template, permissions: users });\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"access-footer\">\n          <div className=\"publish-container\">\n            <button\n              className=\"publish-button\"\n              onClick={handlePublish}\n            >\n              <CheckCircle size={18} />\n              <span>Publish Template</span>\n            </button>\n            <p className=\"publish-note\">\n              Publishing will make this template available to all users with access permissions.\n            </p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Main Render\n  if (isLoading) {\n    console.log(\"Garment_Template: Rendering loading state\");\n    return (\n      <div className=\"garment-template-builder-page\">\n        <div className=\"loading-container\" style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '100vh',\n          fontSize: '24px',\n          fontWeight: 'bold'\n        }}>\n          <p>Loading garment template...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Log template data for debugging\n  console.log(\"Garment_Template: Rendering full template UI\");\n  console.log(\"Garment_Template: Current template data:\", template);\n  console.log(\"Garment_Template: Template sections:\", template.sections);\n\n  // Safety check for template structure\n  if (!template || !template.sections || !Array.isArray(template.sections) || template.sections.length === 0) {\n    console.error(\"Garment_Template: Invalid template structure detected\");\n    return (\n      <div className=\"garment-template-builder-page\">\n        <div className=\"error-container\" style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '100vh',\n          fontSize: '18px',\n          padding: '20px',\n          textAlign: 'center'\n        }}>\n          <h2 style={{ color: 'red', marginBottom: '20px' }}>Error Loading Template</h2>\n          <p>There was a problem loading the template data. The template structure appears to be invalid.</p>\n          <div style={{ marginTop: '20px' }}>\n            <button\n              onClick={() => window.location.href = '/templates'}\n              style={{\n                padding: '10px 20px',\n                backgroundColor: '#4a90e2',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                marginRight: '10px'\n              }}\n            >\n              Return to Templates\n            </button>\n            <button\n              onClick={() => {\n                // Reset to a new template\n                const defaultTemplate = getInitialTemplate();\n                setTemplate(defaultTemplate);\n                setActiveSectionId(defaultTemplate.sections[0]?.id || null);\n                setIsLoading(false);\n\n                // Force a re-render by setting a timeout\n                setTimeout(() => {\n                  console.log(\"Garment_Template: Forcing re-render with new template\");\n                }, 100);\n              }}\n              style={{\n                padding: '10px 20px',\n                backgroundColor: '#5cb85c',\n                color: 'white',\n                border: 'none',\n                borderRadius: '4px',\n                cursor: 'pointer'\n              }}\n            >\n              Create New Template\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"garment-template-builder-page\">\n      <div className=\"top-navigation\">\n        <div className=\"nav-left\">\n          <div className=\"company-name\">FASHCOGNITIVE</div>\n          <button className=\"back-button\" onClick={handleBack}>\n            <ArrowLeft size={16} />\n            <span>back</span>\n          </button>\n        </div>\n        <div className=\"nav-center\">\n          <div className=\"nav-tabs\">\n            <button className={`nav-tab ${activeTab === 0 ? \"active\" : \"\"}`} onClick={() => setActiveTab(0)}>\n              1. Build\n            </button>\n            <button className={`nav-tab ${activeTab === 1 ? \"active\" : \"\"}`} onClick={() => setActiveTab(1)}>\n              2. Report\n            </button>\n            <button className={`nav-tab ${activeTab === 2 ? \"active\" : \"\"}`} onClick={() => setActiveTab(2)}>\n              3. Access\n            </button>\n          </div>\n        </div>\n        <div className=\"nav-right\">\n          {activeTab === 0 && (\n            <button className=\"nav-next-button\" onClick={() => setActiveTab(1)}>\n              Next: Report\n              <ArrowRight size={16} />\n            </button>\n          )}\n          {activeTab === 1 && (\n            <button className=\"nav-next-button\" onClick={() => setActiveTab(2)}>\n              Next: Access\n              <ArrowRight size={16} />\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"builder-content\">\n        {activeTab === 0 && (\n          <div className=\"template-builder-container\">\n            <div className={`template-content ${showMobilePreview ? 'with-preview' : ''}`}>\n              <div className=\"template-header\">\n                <div className=\"template-logo\">\n                  {template.logo ? (\n                    <img\n                      src={template.logo || \"/placeholder.svg\"}\n                      alt=\"Template logo\"\n                      className=\"logo-image\"\n                      onClick={() => document.getElementById(\"logo-upload\")?.click()}\n                    />\n                  ) : (\n                    <div className=\"logo-placeholder\" onClick={() => document.getElementById(\"logo-upload\")?.click()}>\n                      <Plus size={24} />\n                    </div>\n                  )}\n                  <input\n                    id=\"logo-upload\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"sr-only\"\n                    onChange={handleLogoUpload}\n                  />\n                </div>\n                <div className=\"template-info\">\n                  <input\n                    type=\"text\"\n                    className=\"template-title\"\n                    value={template.title}\n                    onChange={(e) => updateTemplate({ title: e.target.value })}\n                    placeholder=\"Untitled garment template\"\n                  />\n                  <input\n                    type=\"text\"\n                    className=\"template-description\"\n                    value={template.description}\n                    onChange={(e) => updateTemplate({ description: e.target.value })}\n                    placeholder=\"Add a description for this garment inspection template\"\n                  />\n                </div>\n              </div>\n              <div className=\"sections-container\">\n                {template.sections.map((section, idx) => renderSection(section, idx))}\n              </div>\n              <div className=\"add-section-container\">\n                <button className=\"add-section-button\" onClick={addStandardSection}>\n                  <Plus size={16} /> Add Standard Page\n                </button>\n              </div>\n            </div>\n\n            {showMobilePreview ? (\n              <div className=\"mobile-preview-container\">\n                <div className=\"mobile-preview\">\n                  <div className=\"mobile-preview-header\">\n                    <button className=\"mobile-preview-close\" onClick={() => setShowMobilePreview(false)}>\n                      <X size={16} />\n                      <span>Hide Preview</span>\n                    </button>\n                  </div>\n                  <div className=\"mobile-device-container\">\n                    <div className=\"mobile-device\">\n                      <div className=\"mobile-device-notch\"></div>\n                      <div className=\"mobile-status-bar\">\n                        <div className=\"mobile-time\">\n                          {new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\n                        </div>\n                        <div className=\"mobile-status-icons\">\n                          <div className=\"mobile-signal\"></div>\n                          <div className=\"mobile-wifi\"></div>\n                          <div className=\"mobile-battery\"></div>\n                        </div>\n                      </div>\n                      <div className=\"mobile-content\">\n                        {template.logo && (\n                          <div className=\"mobile-header-content\">\n                            <div className=\"mobile-logo\">\n                              <img\n                                src={template.logo || \"/placeholder.svg\"}\n                                alt=\"Template logo\"\n                                className=\"mobile-logo-image\"\n                              />\n                            </div>\n                            <div className=\"mobile-template-title\">{template.title}</div>\n                          </div>\n                        )}\n\n                        <div className=\"mobile-preview-message\">\n                          <Shirt size={32} className=\"mobile-preview-icon\" />\n                          <h3>Garment Inspection Template</h3>\n                          <p>This is a preview of your garment inspection template.</p>\n                          <p>The template includes:</p>\n                          <ul>\n                            <li>{template.sections.filter((s) => s.type === \"standard\").length} standard sections</li>\n                            <li>\n                              {template.sections.some((s) => s.type === \"garmentDetails\")\n                                ? \"Garment Details section\"\n                                : \"No Garment Details section\"}\n                            </li>\n                            <li>\n                              {(() => {\n                                const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n                                return (garmentSection && isGarmentDetailsContent(garmentSection.content))\n                                  ? garmentSection.content.sizes.length\n                                  : 0;\n                              })()}{\" \"}\n                              sizes configured\n                            </li>\n                            <li>\n                              {(() => {\n                                const garmentSection = template.sections.find((s) => s.type === \"garmentDetails\");\n                                return (garmentSection && isGarmentDetailsContent(garmentSection.content))\n                                  ? garmentSection.content.colors.length\n                                  : 0;\n                              })()}{\" \"}\n                              colors configured\n                            </li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"mobile-preview-collapsed\">\n                <button className=\"show-mobile-preview-button\" onClick={() => setShowMobilePreview(true)}>\n                  <div className=\"mobile-icon\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <rect x=\"5\" y=\"2\" width=\"14\" height=\"20\" rx=\"2\" stroke=\"currentColor\" strokeWidth=\"2\" />\n                      <line x1=\"5\" y1=\"18\" x2=\"19\" y2=\"18\" stroke=\"currentColor\" strokeWidth=\"2\" />\n                      <line x1=\"9\" y1=\"21\" x2=\"15\" y2=\"21\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" />\n                    </svg>\n                  </div>\n                  <span>Show Preview</span>\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 1 && renderReportTab()}\n        {activeTab === 2 && renderAccessTab()}\n      </div>\n    </div>\n  )\n}\n\nexport default Garment_Template\n","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\login.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\home.tsx",["75","76","77","78","79"],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\Create_template.tsx",["80","81","82","83","84","85"],"\"use client\"\r\n\r\nimport type React from \"react\"\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { useState, useRef, useEffect } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport axios from \"axios\"\r\nimport {\r\n  ChevronDown,\r\n  ChevronUp,\r\n  Edit,\r\n  Plus,\r\n  Calendar,\r\n  User,\r\n  MapPin,\r\n  X,\r\n  Check,\r\n  ImageIcon,\r\n  Trash2,\r\n  Move,\r\n  Clock,\r\n  ArrowLeft,\r\n  Bell,\r\n  FileText,\r\n  MessageSquare,\r\n  CornerDownRight,\r\n  ArrowRight,\r\n  Equal,\r\n  Hash,\r\n  CircleEqual,\r\n  CircleSlash,\r\n  CircleDot,\r\n  ChevronsRight,\r\n  ChevronsLeft,\r\n  ListFilter,\r\n  AlertTriangle,\r\n  Upload,\r\n  Download,\r\n  Building,\r\n  Flag,\r\n  CheckCircle,\r\n} from \"lucide-react\"\r\nimport { jsPDF } from \"jspdf\"\r\nimport AccessManager from \"../pages/components/AccessManager\"\r\nimport { fetchCSRFToken } from \"../utils/csrf\"\r\nimport \"../assets/Create_template.css\"\r\nimport \"../pages/components/TemplateBuilderLayout.css\"\r\nimport \"../pages/components/FixTransitions.css\"\r\nimport \"../pages/components/ReportPageFix.css\"\r\nimport \"../pages/components/AccessPageFix.css\"\r\n\r\n// U\r\n// Utility functions\r\nfunction getCookie(name: string): string | null {\r\n  let cookieValue = null\r\n  if (document.cookie && document.cookie !== \"\") {\r\n    const cookies = document.cookie.split(\";\")\r\n    for (let i = 0; i < cookies.length; i++) {\r\n      const cookie = cookies[i].trim()\r\n      if (cookie.startsWith(name + \"=\")) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1))\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return cookieValue\r\n}\r\n\r\nconst resizeImage = (base64: string): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = document.createElement(\"img\")\r\n    img.crossOrigin = \"anonymous\"\r\n    img.src = base64\r\n    img.onload = () => {\r\n      const canvas = document.createElement(\"canvas\")\r\n      const MAX_WIDTH = 500\r\n      const scale = Math.min(MAX_WIDTH / img.width, 1)\r\n      canvas.width = img.width * scale\r\n      canvas.height = img.height * scale\r\n      const ctx = canvas.getContext(\"2d\")\r\n      if (ctx) {\r\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n        resolve(canvas.toDataURL(\"image/jpeg\", 0.8))\r\n      } else {\r\n        reject(new Error(\"Failed to get canvas context\"))\r\n      }\r\n    }\r\n    img.onerror = () => reject(new Error(\"Failed to load image\"))\r\n  })\r\n}\r\n\r\n// Types\r\ntype ResponseType =\r\n  | \"Site\"\r\n  | \"Inspection date\"\r\n  | \"Person\"\r\n  | \"Inspection location\"\r\n  | \"Text\"\r\n  | \"Number\"\r\n  | \"Checkbox\"\r\n  | \"Yes/No\"\r\n  | \"Multiple choice\"\r\n  | \"Slider\"\r\n  | \"Media\"\r\n  | \"Annotation\"\r\n  | \"Date & Time\"\r\n\r\ntype LogicOperator =\r\n  | \"equals\"\r\n  | \"notEquals\"\r\n  | \"greaterThan\"\r\n  | \"lessThan\"\r\n  | \"greaterThanOrEqual\"\r\n  | \"lessThanOrEqual\"\r\n  | \"between\"\r\n  | \"isOneOf\"\r\n  | \"isNotOneOf\"\r\n  | \"contains\"\r\n  | \"notContains\"\r\n  | \"startsWith\"\r\n  | \"endsWith\"\r\n  | \"matches\"\r\n\r\ntype TriggerAction = \"require_action\" | \"require_evidence\" | \"notify\" | \"ask_questions\" | \"display_message\"\r\n\r\ntype LogicCondition =\r\n  | \"is\"\r\n  | \"is not\"\r\n  | \"contains\"\r\n  | \"not contains\"\r\n  | \"starts with\"\r\n  | \"ends with\"\r\n  | \"matches (regex)\"\r\n  | \"less than\"\r\n  | \"less than or equal to\"\r\n  | \"equal to\"\r\n  | \"not equal to\"\r\n  | \"greater than or equal to\"\r\n  | \"greater than\"\r\n  | \"between\"\r\n  | \"not between\"\r\n  | \"is one of\"\r\n  | \"is not one of\"\r\n\r\ninterface LogicRule {\r\n  id: string\r\n  condition: LogicCondition\r\n  value: string | number | string[] | [number, number] | null\r\n  trigger: TriggerAction | null\r\n  triggerConfig?: any\r\n  message?: string\r\n  subQuestion?: {\r\n    text: string\r\n    responseType: ResponseType\r\n  }\r\n}\r\n\r\ninterface ConditionalLogicRule {\r\n  id: string\r\n  operator: LogicOperator\r\n  value: string | number | string[] | [number, number]\r\n  trigger: TriggerAction\r\n  subQuestion?: {\r\n    id: string\r\n    text: string\r\n    responseType: ResponseType\r\n    required: boolean\r\n    flagged: boolean\r\n    validation?: string\r\n  }\r\n  message?: string\r\n  actionDetails?: string\r\n  targetElementId?: string\r\n}\r\n\r\ninterface ConditionalLogic {\r\n  enabled: boolean\r\n  rules: ConditionalLogicRule[]\r\n}\r\n\r\ninterface Question {\r\n  id: string\r\n  text: string\r\n  responseType: ResponseType\r\n  required: boolean\r\n  flagged: boolean\r\n  options?: string[]\r\n  value?: string | string[] | boolean | number | null\r\n  conditionalLogic?: ConditionalLogic\r\n  conditionalProof?: string\r\n  logicRules?: LogicRule[]\r\n  multipleSelection?: boolean\r\n}\r\n\r\ninterface Section {\r\n  id: string\r\n  title: string\r\n  description?: string\r\n  questions: Question[]\r\n  isCollapsed: boolean\r\n}\r\n\r\ninterface Template {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  sections: Section[]\r\n  lastSaved?: Date\r\n  lastPublished?: Date\r\n  logo?: string\r\n}\r\n\r\n// Utility type guard\r\nconst isStringArray = (value: unknown): value is string[] =>\r\n  Array.isArray(value) && value.every((v: unknown) => typeof v === \"string\")\r\n\r\n// Helper function to check if a trigger should be shown based on the question's logic rules\r\nconst shouldShowTrigger = (question: Question, triggerType: TriggerAction): boolean => {\r\n  if (!question.logicRules || question.logicRules.length === 0 || !question.value) return false\r\n\r\n  for (const rule of question.logicRules) {\r\n    if (rule.trigger !== triggerType) continue\r\n\r\n    // Evaluate the condition based on the current value\r\n    const value = question.value\r\n    let conditionMet = false\r\n\r\n    switch (rule.condition) {\r\n      case \"is\":\r\n        conditionMet = value === rule.value\r\n        break\r\n      case \"is not\":\r\n        conditionMet = value !== rule.value\r\n        break\r\n      case \"contains\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.includes(rule.value)\r\n        break\r\n      case \"not contains\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && !value.includes(rule.value)\r\n        break\r\n      case \"starts with\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.startsWith(rule.value)\r\n        break\r\n      case \"ends with\":\r\n        conditionMet = typeof value === \"string\" && typeof rule.value === \"string\" && value.endsWith(rule.value)\r\n        break\r\n      case \"greater than\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value > rule.value\r\n        break\r\n      case \"less than\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value < rule.value\r\n        break\r\n      case \"equal to\":\r\n        conditionMet = value === rule.value\r\n        break\r\n      case \"not equal to\":\r\n        conditionMet = value !== rule.value\r\n        break\r\n      case \"greater than or equal to\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value >= rule.value\r\n        break\r\n      case \"less than or equal to\":\r\n        conditionMet = typeof value === \"number\" && typeof rule.value === \"number\" && value <= rule.value\r\n        break\r\n      case \"between\":\r\n        conditionMet =\r\n          Array.isArray(rule.value) &&\r\n          rule.value.length === 2 &&\r\n          typeof value === \"number\" &&\r\n          value > Number(rule.value[0]) &&\r\n          value < Number(rule.value[1])\r\n        break\r\n      case \"is one of\":\r\n        conditionMet = isStringArray(rule.value) && typeof value === \"string\" && rule.value.includes(value)\r\n        break\r\n      case \"is not one of\":\r\n        conditionMet = isStringArray(rule.value) && typeof value === \"string\" && !rule.value.includes(value)\r\n        break\r\n    }\r\n\r\n    if (conditionMet) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n// Helper function to get condition icon\r\nconst getConditionIcon = (condition: LogicCondition) => {\r\n  switch (condition) {\r\n    case \"is\":\r\n      return <CircleEqual className=\"condition-icon\" />\r\n    case \"is not\":\r\n      return <CircleSlash className=\"condition-icon\" />\r\n    case \"contains\":\r\n      return <CircleDot className=\"condition-icon\" />\r\n    case \"not contains\":\r\n      return <CircleSlash className=\"condition-icon\" />\r\n    case \"starts with\":\r\n      return <ChevronsRight className=\"condition-icon\" />\r\n    case \"ends with\":\r\n      return <ChevronsLeft className=\"condition-icon\" />\r\n    case \"matches (regex)\":\r\n      return <Hash className=\"condition-icon\" />\r\n    case \"less than\":\r\n      return <ArrowLeft className=\"condition-icon\" />\r\n    case \"less than or equal to\":\r\n      return <ArrowLeft className=\"condition-icon\" />\r\n    case \"equal to\":\r\n      return <Equal className=\"condition-icon\" />\r\n    case \"not equal to\":\r\n      return <CircleSlash className=\"condition-icon\" />\r\n    case \"greater than or equal to\":\r\n      return <ArrowRight className=\"condition-icon\" />\r\n    case \"greater than\":\r\n      return <ArrowRight className=\"condition-icon\" />\r\n    case \"between\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"not between\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"is one of\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    case \"is not one of\":\r\n      return <ListFilter className=\"condition-icon\" />\r\n    default:\r\n      return <Equal className=\"condition-icon\" />\r\n  }\r\n}\r\n\r\n// Enhanced Logic Components\r\nconst EnhancedLogicConditionSelector: React.FC<{\r\n  questionType: ResponseType\r\n  selectedCondition: LogicCondition\r\n  onConditionChange: (condition: LogicCondition) => void\r\n  className?: string\r\n}> = ({ questionType, selectedCondition, onConditionChange, className = \"\" }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [availableConditions, setAvailableConditions] = useState<LogicCondition[]>([])\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n\r\n  useEffect(() => {\r\n    const conditions: LogicCondition[] = (() => {\r\n      switch (questionType) {\r\n        case \"Text\":\r\n          return [\"is\", \"is not\", \"contains\", \"not contains\", \"starts with\", \"ends with\", \"matches (regex)\"]\r\n        case \"Number\":\r\n        case \"Slider\":\r\n          return [\r\n            \"less than\",\r\n            \"less than or equal to\",\r\n            \"equal to\",\r\n            \"not equal to\",\r\n            \"greater than or equal to\",\r\n            \"greater than\",\r\n            \"between\",\r\n            \"not between\",\r\n          ]\r\n        case \"Checkbox\":\r\n        case \"Yes/No\":\r\n          return [\"is\", \"is not\"]\r\n        case \"Multiple choice\":\r\n          return [\"is\", \"is not\", \"is one of\", \"is not one of\"]\r\n        case \"Media\":\r\n        case \"Annotation\":\r\n          return [\"is\", \"is not\"]\r\n        case \"Date & Time\":\r\n        case \"Inspection date\":\r\n          return [\"is\", \"is not\", \"less than\", \"greater than\", \"between\"]\r\n        case \"Site\":\r\n        case \"Person\":\r\n        case \"Inspection location\":\r\n          return [\"is\", \"is not\", \"is one of\", \"is not one of\"]\r\n        default:\r\n          return [\"is\", \"is not\"]\r\n      }\r\n    })()\r\n\r\n    setAvailableConditions(conditions)\r\n    if (!conditions.includes(selectedCondition) && conditions.length > 0) {\r\n      onConditionChange(conditions[0])\r\n    }\r\n  }, [questionType, selectedCondition, onConditionChange])\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n  }, [])\r\n\r\n  return (\r\n    <div className={`enhanced-logic-condition-selector ${className}`} ref={dropdownRef}>\r\n      <div className=\"selected-condition\" onClick={() => setIsOpen(!isOpen)}>\r\n        {getConditionIcon(selectedCondition)}\r\n        <span className=\"condition-text\">{selectedCondition}</span>\r\n        <ChevronDown className={`dropdown-arrow ${isOpen ? \"rotate\" : \"\"}`} />\r\n      </div>\r\n      {isOpen && (\r\n        <div className=\"enhanced-condition-dropdown\">\r\n          {availableConditions.map((condition) => (\r\n            <div\r\n              key={condition}\r\n              className={`enhanced-condition-option ${selectedCondition === condition ? \"selected\" : \"\"}`}\r\n              onClick={() => {\r\n                onConditionChange(condition)\r\n                setIsOpen(false)\r\n              }}\r\n            >\r\n              {getConditionIcon(condition)}\r\n              <span>{condition}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicValueInput: React.FC<{\r\n  questionType: ResponseType\r\n  condition: LogicCondition\r\n  value: string | number | string[] | [number, number] | null\r\n  onChange: (value: string | number | string[] | [number, number]) => void\r\n  options?: string[]\r\n  className?: string\r\n}> = ({ questionType, condition, value, onChange, options = [], className = \"\" }) => {\r\n  const [rangeStart, setRangeStart] = useState(\"\")\r\n  const [rangeEnd, setRangeEnd] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(value) && value.length === 2 && [\"between\", \"not between\"].includes(condition)) {\r\n      setRangeStart(String(value[0] || \"\"))\r\n      setRangeEnd(String(value[1] || \"\"))\r\n    }\r\n  }, [value, condition])\r\n\r\n  const handleRangeChange = () => {\r\n    if (rangeStart && rangeEnd) {\r\n      if (questionType === \"Number\") {\r\n        onChange([Number(rangeStart), Number(rangeEnd)] as [number, number])\r\n      } else {\r\n        onChange([rangeStart, rangeEnd] as [string, string])\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleOptionToggle = (option: string) => {\r\n    const currentValues = isStringArray(value) ? value : []\r\n    const newValues = currentValues.includes(option)\r\n      ? currentValues.filter((v) => v !== option)\r\n      : [...currentValues, option]\r\n    onChange(newValues)\r\n  }\r\n\r\n  if ([\"between\", \"not between\"].includes(condition)) {\r\n    return (\r\n      <div className={`enhanced-logic-range-input ${className}`}>\r\n        <input\r\n          type={questionType === \"Number\" ? \"number\" : \"text\"}\r\n          placeholder=\"Min\"\r\n          value={rangeStart}\r\n          onChange={(e) => {\r\n            setRangeStart(e.target.value)\r\n            if (rangeEnd) handleRangeChange()\r\n          }}\r\n          className=\"range-input-min\"\r\n        />\r\n        <span className=\"range-separator\">and</span>\r\n        <input\r\n          type={questionType === \"Number\" ? \"number\" : \"text\"}\r\n          placeholder=\"Max\"\r\n          value={rangeEnd}\r\n          onChange={(e) => {\r\n            setRangeEnd(e.target.value)\r\n            if (rangeStart) handleRangeChange()\r\n          }}\r\n          className=\"range-input-max\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if ([\"is one of\", \"is not one of\"].includes(condition) && options.length > 0) {\r\n    const currentValues = isStringArray(value) ? value : []\r\n    return (\r\n      <div className={`enhanced-logic-multi-select ${className}`}>\r\n        {options.map((option) => (\r\n          <label key={option} className=\"enhanced-multi-select-option\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"sr-only\"\r\n              checked={currentValues.includes(option)}\r\n              onChange={() => handleOptionToggle(option)}\r\n            />\r\n            <span className={currentValues.includes(option) ? \"selected\" : \"\"}>{option}</span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (questionType === \"Yes/No\") {\r\n    return (\r\n      <div className={`enhanced-logic-yes-no-select ${className}`}>\r\n        {[\"Yes\", \"No\", \"N/A\"].map((opt) => (\r\n          <label key={opt} className=\"enhanced-yes-no-option\">\r\n            <input\r\n              type=\"radio\"\r\n              className=\"sr-only\"\r\n              checked={value === opt}\r\n              onChange={() => onChange(opt)}\r\n              name=\"yes-no-value\"\r\n            />\r\n            <span className={value === opt ? \"selected\" : \"\"}>{opt}</span>\r\n          </label>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (questionType === \"Number\") {\r\n    return (\r\n      <input\r\n        type=\"number\"\r\n        value={(value as number) ?? \"\"}\r\n        onChange={(e) => onChange(Number(e.target.value))}\r\n        placeholder=\"Enter value\"\r\n        className={`enhanced-logic-number-input ${className}`}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      value={(value as string) ?? \"\"}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      placeholder=\"Enter value\"\r\n      className={`enhanced-logic-text-input ${className}`}\r\n    />\r\n  )\r\n}\r\n\r\nconst EnhancedLogicTriggerSelector: React.FC<{\r\n  selectedTrigger: TriggerAction | null\r\n  onTriggerSelect: (trigger: TriggerAction | null) => void\r\n  onConfigChange?: (config: any) => void\r\n  className?: string\r\n}> = ({ selectedTrigger, onTriggerSelect, onConfigChange, className = \"\" }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const dropdownRef = useRef<HTMLDivElement>(null)\r\n\r\n  const triggers: { value: TriggerAction; label: string; icon: React.ReactNode; description: string }[] = [\r\n    {\r\n      value: \"require_action\",\r\n      label: \"Require action\",\r\n      icon: <FileText className=\"trigger-icon\" />,\r\n      description: \"Require the user to take an action\",\r\n    },\r\n    {\r\n      value: \"require_evidence\",\r\n      label: \"Require evidence\",\r\n      icon: <ImageIcon className=\"trigger-icon\" />,\r\n      description: \"Require the user to upload evidence\",\r\n    },\r\n    {\r\n      value: \"notify\",\r\n      label: \"Notify\",\r\n      icon: <Bell className=\"trigger-icon\" />,\r\n      description: \"Send a notification\",\r\n    },\r\n    {\r\n      value: \"ask_questions\",\r\n      label: \"Ask questions\",\r\n      icon: <MessageSquare className=\"trigger-icon\" />,\r\n      description: \"Ask follow-up questions\",\r\n    },\r\n    {\r\n      value: \"display_message\",\r\n      label: \"Display message\",\r\n      icon: <AlertTriangle className=\"trigger-icon\" />,\r\n      description: \"Show a message to the user\",\r\n    },\r\n  ]\r\n\r\n  // Close dropdown when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\r\n  }, [])\r\n\r\n  const selectedTriggerInfo = selectedTrigger ? triggers.find((t) => t.value === selectedTrigger) : null\r\n\r\n  return (\r\n    <div className={`enhanced-logic-trigger-selector ${className}`} ref={dropdownRef}>\r\n      {!selectedTrigger ? (\r\n        <button className=\"enhanced-trigger-button\" onClick={() => setIsOpen(!isOpen)}>\r\n          <Plus className=\"trigger-plus-icon\" />\r\n          <span>Add trigger</span>\r\n        </button>\r\n      ) : (\r\n        <div className=\"enhanced-selected-trigger\">\r\n          {selectedTriggerInfo?.icon}\r\n          <span>{selectedTriggerInfo?.label}</span>\r\n          <button\r\n            className=\"enhanced-clear-trigger\"\r\n            onClick={(e) => {\r\n              e.stopPropagation()\r\n              onTriggerSelect(null)\r\n            }}\r\n          >\r\n            <X className=\"clear-icon\" />\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {isOpen && !selectedTrigger && (\r\n        <div className=\"enhanced-trigger-dropdown\">\r\n          {triggers.map((trigger) => (\r\n            <div\r\n              key={trigger.value}\r\n              className=\"enhanced-trigger-option\"\r\n              onClick={() => {\r\n                onTriggerSelect(trigger.value)\r\n                setIsOpen(false)\r\n              }}\r\n            >\r\n              <div className=\"enhanced-trigger-icon-container\">{trigger.icon}</div>\r\n              <div className=\"enhanced-trigger-details\">\r\n                <div className=\"enhanced-trigger-label\">{trigger.label}</div>\r\n                <div className=\"enhanced-trigger-description\">{trigger.description}</div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicTriggerConfig: React.FC<{\r\n  trigger: TriggerAction\r\n  config: any\r\n  onConfigChange: (config: any) => void\r\n}> = ({ trigger, config, onConfigChange }) => {\r\n  const [message, setMessage] = useState(config?.message || \"\")\r\n  const [questionText, setQuestionText] = useState(config?.subQuestion?.text || \"\")\r\n  const [responseType, setResponseType] = useState<ResponseType>(config?.subQuestion?.responseType || \"Text\")\r\n\r\n  useEffect(() => {\r\n    if (trigger === \"display_message\") {\r\n      onConfigChange({ ...config, message })\r\n    } else if (trigger === \"ask_questions\") {\r\n      onConfigChange({\r\n        ...config,\r\n        subQuestion: {\r\n          text: questionText,\r\n          responseType,\r\n        },\r\n      })\r\n    }\r\n  }, [trigger, message, questionText, responseType, config, onConfigChange])\r\n\r\n  if (trigger === \"display_message\") {\r\n    return (\r\n      <div className=\"enhanced-trigger-config\">\r\n        <label className=\"enhanced-trigger-config-label\">Message to display:</label>\r\n        <textarea\r\n          className=\"enhanced-logic-text-input\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Enter message to display to the user\"\r\n          rows={3}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (trigger === \"ask_questions\") {\r\n    return (\r\n      <div className=\"enhanced-trigger-config\">\r\n        <label className=\"enhanced-trigger-config-label\">Follow-up question:</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"enhanced-logic-text-input\"\r\n          value={questionText}\r\n          onChange={(e) => setQuestionText(e.target.value)}\r\n          placeholder=\"Enter follow-up question\"\r\n        />\r\n        <label className=\"enhanced-trigger-config-label mt-2\">Response type:</label>\r\n        <select\r\n          className=\"enhanced-logic-text-input\"\r\n          value={responseType}\r\n          onChange={(e) => setResponseType(e.target.value as ResponseType)}\r\n        >\r\n          <option value=\"Text\">Text</option>\r\n          <option value=\"Number\">Number</option>\r\n          <option value=\"Yes/No\">Yes/No</option>\r\n          <option value=\"Multiple choice\">Multiple choice</option>\r\n        </select>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nconst generateRuleId = () => `rule_${Math.random().toString(36).substring(2, 9)}`\r\n\r\nconst EnhancedLogicRuleBuilder: React.FC<{\r\n  questionType: ResponseType\r\n  rule: LogicRule\r\n  options?: string[]\r\n  onRuleChange: (rule: LogicRule) => void\r\n  onRuleDelete: () => void\r\n  questions?: Array<{ id: string; text: string }>\r\n  className?: string\r\n}> = ({ questionType, rule, options = [], onRuleChange, onRuleDelete, questions = [], className = \"\" }) => {\r\n  const [localRule, setLocalRule] = useState<LogicRule>(rule)\r\n  const [showConfig, setShowConfig] = useState(false)\r\n\r\n  useEffect(() => {\r\n    onRuleChange(localRule)\r\n  }, [localRule, onRuleChange])\r\n\r\n  useEffect(() => {\r\n    setLocalRule(rule)\r\n  }, [rule])\r\n\r\n  return (\r\n    <div className={`enhanced-logic-rule-builder ${className}`}>\r\n      <div className=\"enhanced-logic-rule-content\">\r\n        <div className=\"enhanced-logic-condition-row\">\r\n          <span className=\"enhanced-if-label\">If answer</span>\r\n          <EnhancedLogicConditionSelector\r\n            questionType={questionType}\r\n            selectedCondition={localRule.condition}\r\n            onConditionChange={(condition) => setLocalRule({ ...localRule, condition })}\r\n          />\r\n          <EnhancedLogicValueInput\r\n            questionType={questionType}\r\n            condition={localRule.condition}\r\n            value={localRule.value}\r\n            onChange={(value) => setLocalRule({ ...localRule, value })}\r\n            options={options}\r\n          />\r\n        </div>\r\n        <div className=\"enhanced-logic-trigger-row\">\r\n          <span className=\"enhanced-then-label\">then</span>\r\n          <EnhancedLogicTriggerSelector\r\n            selectedTrigger={localRule.trigger}\r\n            onTriggerSelect={(trigger) => {\r\n              setLocalRule({\r\n                ...localRule,\r\n                trigger,\r\n                triggerConfig: trigger ? {} : undefined,\r\n                message: trigger === \"display_message\" ? localRule.message || \"\" : undefined,\r\n                subQuestion:\r\n                  trigger === \"ask_questions\" ? localRule.subQuestion || { text: \"\", responseType: \"Text\" } : undefined,\r\n              })\r\n              setShowConfig(!!trigger)\r\n            }}\r\n            onConfigChange={(config) => setLocalRule({ ...localRule, triggerConfig: config })}\r\n          />\r\n          {localRule.trigger && (\r\n            <button\r\n              className=\"enhanced-config-button\"\r\n              onClick={() => setShowConfig(!showConfig)}\r\n              title=\"Configure trigger\"\r\n            >\r\n              <Edit size={16} />\r\n            </button>\r\n          )}\r\n        </div>\r\n        {showConfig && localRule.trigger && (\r\n          <div className=\"enhanced-logic-config-row\">\r\n            <EnhancedLogicTriggerConfig\r\n              trigger={localRule.trigger}\r\n              config={{\r\n                message: localRule.message,\r\n                subQuestion: localRule.subQuestion,\r\n              }}\r\n              onConfigChange={(config) => {\r\n                setLocalRule({\r\n                  ...localRule,\r\n                  message: config.message,\r\n                  subQuestion: config.subQuestion,\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <button className=\"enhanced-delete-rule-button\" onClick={onRuleDelete} aria-label=\"Delete rule\">\r\n        <Trash2 className=\"delete-icon\" />\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedLogicRulesContainer: React.FC<{\r\n  questionType: ResponseType\r\n  rules: LogicRule[]\r\n  options?: string[]\r\n  onRulesChange: (rules: LogicRule[]) => void\r\n  questions?: Array<{ id: string; text: string }>\r\n  onClose: () => void\r\n  className?: string\r\n}> = ({ questionType, rules, options = [], onRulesChange, questions = [], onClose, className = \"\" }) => {\r\n  const addNewRule = () => {\r\n    const defaultCondition: LogicCondition = questionType === \"Number\" ? \"equal to\" : \"is\"\r\n    const newRule: LogicRule = {\r\n      id: generateRuleId(),\r\n      condition: defaultCondition,\r\n      value: null,\r\n      trigger: null,\r\n    }\r\n    onRulesChange([...rules, newRule])\r\n  }\r\n\r\n  const updateRule = (index: number, updatedRule: LogicRule) => {\r\n    const newRules = [...rules]\r\n    newRules[index] = updatedRule\r\n    onRulesChange(newRules)\r\n  }\r\n\r\n  const deleteRule = (index: number) => {\r\n    const newRules = [...rules]\r\n    newRules.splice(index, 1)\r\n    onRulesChange(newRules)\r\n  }\r\n\r\n  return (\r\n    <div className={`enhanced-logic-rules-container ${className}`}>\r\n      <div className=\"enhanced-logic-header\">\r\n        <h3>Logic Rules</h3>\r\n        <button className=\"enhanced-close-button\" onClick={onClose} aria-label=\"Close\">\r\n          <X className=\"close-icon\" />\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"enhanced-logic-rules-list\">\r\n        {rules.length === 0 ? (\r\n          <div className=\"enhanced-empty-rules\">\r\n            <p>No rules added yet. Add your first rule below.</p>\r\n          </div>\r\n        ) : (\r\n          rules.map((rule, index) => (\r\n            <EnhancedLogicRuleBuilder\r\n              key={rule.id}\r\n              questionType={questionType}\r\n              rule={rule}\r\n              options={options}\r\n              onRuleChange={(updatedRule) => updateRule(index, updatedRule)}\r\n              onRuleDelete={() => deleteRule(index)}\r\n              questions={questions}\r\n              className=\"enhanced-logic-rule-item\"\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"enhanced-logic-rules-actions\">\r\n        <button className=\"enhanced-add-rule-button\" onClick={addNewRule}>\r\n          <Plus className=\"add-icon\" />\r\n          <span>Add rule</span>\r\n        </button>\r\n        <button className=\"enhanced-done-button\" onClick={onClose}>\r\n          Done\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst EnhancedAddLogicButton: React.FC<{\r\n  hasRules: boolean\r\n  onClick: () => void\r\n  className?: string\r\n}> = ({ hasRules, onClick, className = \"\" }) => {\r\n  return (\r\n    <button className={`enhanced-add-logic-button ${hasRules ? \"has-rules\" : \"\"} ${className}`} onClick={onClick}>\r\n      <CornerDownRight className=\"logic-icon\" />\r\n      <span>{hasRules ? \"Edit logic\" : \"Add logic\"}</span>\r\n      {hasRules && <span className=\"rules-badge\">!</span>}\r\n    </button>\r\n  )\r\n}\r\n\r\n// Enhanced Report Component\r\nconst Report: React.FC<{ template: Template }> = ({ template }) => {\r\n  const [activeTab, setActiveTab] = useState(\"summary\")\r\n\r\n  const generatePDF = async () => {\r\n    try {\r\n      // Show loading indicator\r\n      const loadingIndicator = document.createElement(\"div\")\r\n      loadingIndicator.style.position = \"fixed\"\r\n      loadingIndicator.style.top = \"0\"\r\n      loadingIndicator.style.left = \"0\"\r\n      loadingIndicator.style.width = \"100%\"\r\n      loadingIndicator.style.height = \"100%\"\r\n      loadingIndicator.style.backgroundColor = \"rgba(255, 255, 255, 0.8)\"\r\n      loadingIndicator.style.display = \"flex\"\r\n      loadingIndicator.style.justifyContent = \"center\"\r\n      loadingIndicator.style.alignItems = \"center\"\r\n      loadingIndicator.innerHTML =\r\n        '<div style=\"padding: 20px; background: white; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);\">Generating PDF...</div>'\r\n      document.body.appendChild(loadingIndicator)\r\n\r\n      // Create PDF document with professional layout\r\n      const doc = new jsPDF({\r\n        orientation: \"portrait\",\r\n        unit: \"mm\",\r\n        format: \"a4\",\r\n        compress: true,\r\n      })\r\n\r\n      const pageWidth = doc.internal.pageSize.getWidth()\r\n      const pageHeight = doc.internal.pageSize.getHeight()\r\n      const margin = 15\r\n      let yOffset = margin\r\n\r\n      // Add header with template title\r\n      doc.setFontSize(24)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(template.title, margin, yOffset + 10)\r\n\r\n      // Add date and inspector\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n\r\n      const preparedBy =\r\n        template.sections\r\n          .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n          ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"\r\n\r\n      const dateText = `${new Date().toLocaleDateString()} / ${preparedBy}`\r\n      doc.text(dateText, margin, yOffset + 20)\r\n\r\n      // Add status badge\r\n      const totalQuestions = template.sections.reduce((sum, section) => sum + section.questions.length, 0)\r\n      const answeredQuestions = template.sections.reduce(\r\n        (sum, section) => sum + section.questions.filter((q) => q.value !== null && q.value !== undefined).length,\r\n        0,\r\n      )\r\n      const scorePercentage = totalQuestions > 0 ? Math.round((answeredQuestions / totalQuestions) * 100) : 0\r\n\r\n      const statusText = scorePercentage === 100 ? \"Complete\" : \"Incomplete\"\r\n      const statusWidth = (doc.getStringUnitWidth(statusText) * 12) / doc.internal.scaleFactor\r\n\r\n      doc.setFillColor(\r\n        scorePercentage === 100 ? 76 : 244,\r\n        scorePercentage === 100 ? 175 : 67,\r\n        scorePercentage === 100 ? 80 : 54,\r\n      )\r\n      doc.roundedRect(pageWidth - margin - statusWidth - 10, yOffset + 5, statusWidth + 10, 8, 4, 4, \"F\")\r\n\r\n      doc.setTextColor(255, 255, 255)\r\n      doc.setFontSize(10)\r\n      doc.text(statusText, pageWidth - margin - 5, yOffset + 10, { align: \"right\" })\r\n\r\n      yOffset += 30\r\n\r\n      // Add horizontal line\r\n      doc.setDrawColor(220, 220, 220)\r\n      doc.line(margin, yOffset, pageWidth - margin, yOffset)\r\n      yOffset += 15\r\n\r\n      // Add score section\r\n      doc.setFontSize(14)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Score\", margin, yOffset)\r\n      yOffset += 10\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(`${answeredQuestions}/${totalQuestions} (${scorePercentage}%)`, margin, yOffset)\r\n      yOffset += 5\r\n\r\n      // Draw score bar\r\n      doc.setFillColor(240, 240, 240)\r\n      doc.rect(margin, yOffset, pageWidth - margin * 2, 5, \"F\")\r\n      doc.setFillColor(76, 175, 80)\r\n      doc.rect(margin, yOffset, (pageWidth - margin * 2) * (scorePercentage / 100), 5, \"F\")\r\n      yOffset += 20\r\n\r\n      // Add stats section in a grid layout\r\n      const flaggedItems = template.sections.reduce(\r\n        (sum, section) => sum + section.questions.filter((q) => q.flagged).length,\r\n        0,\r\n      )\r\n\r\n      const actionItems = template.sections.reduce(\r\n        (sum, section) =>\r\n          sum +\r\n          section.questions.filter(\r\n            (q) => shouldShowTrigger(q, \"require_action\") || shouldShowTrigger(q, \"require_evidence\"),\r\n          ).length,\r\n        0,\r\n      )\r\n\r\n      // Create a grid for stats\r\n      const statBoxWidth = (pageWidth - margin * 2 - 20) / 3\r\n\r\n      // Flagged items box\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Flagged items\", margin, yOffset + 15)\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(flaggedItems.toString(), margin, yOffset + 30)\r\n\r\n      // Actions box\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Actions\", margin + statBoxWidth + 10, yOffset + 15)\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(actionItems.toString(), margin + statBoxWidth + 10, yOffset + 30)\r\n\r\n      // Status box\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Status\", margin + statBoxWidth * 2 + 20, yOffset + 15)\r\n\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(\"In progress\", margin + statBoxWidth * 2 + 20, yOffset + 30)\r\n\r\n      yOffset += 50\r\n\r\n      // Add horizontal line\r\n      doc.setDrawColor(220, 220, 220)\r\n      doc.line(margin, yOffset, pageWidth - margin, yOffset)\r\n      yOffset += 15\r\n\r\n      // Add tabs section\r\n      doc.setFillColor(240, 240, 240)\r\n      doc.rect(margin, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\r\n      doc.setFillColor(255, 255, 255)\r\n      doc.rect(margin + (pageWidth - margin * 2) / 3, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\r\n      doc.setFillColor(240, 240, 240)\r\n      doc.rect(margin + (2 * (pageWidth - margin * 2)) / 3, yOffset, (pageWidth - margin * 2) / 3, 10, \"F\")\r\n\r\n      doc.setFontSize(10)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(\"Summary\", margin + (pageWidth - margin * 2) / 6, yOffset + 6, { align: \"center\" })\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\"Flagged Items\", margin + (pageWidth - margin * 2) / 2, yOffset + 6, { align: \"center\" })\r\n      doc.text(\"Media\", margin + (5 * (pageWidth - margin * 2)) / 6, yOffset + 6, { align: \"center\" })\r\n\r\n      yOffset += 20\r\n\r\n      // Add inspection summary\r\n      doc.setFontSize(16)\r\n      doc.setTextColor(0, 0, 0)\r\n      doc.text(\"Inspection Summary\", margin, yOffset)\r\n      yOffset += 10\r\n\r\n      doc.setFontSize(12)\r\n      doc.setTextColor(100, 100, 100)\r\n      doc.text(\r\n        `This report provides an overview of the safety inspection conducted at ${template.title}.`,\r\n        margin,\r\n        yOffset,\r\n      )\r\n      yOffset += 20\r\n\r\n      // Process each question with answer\r\n      const processedImages = new Map() // Cache for processed images\r\n\r\n      for (const section of template.sections) {\r\n        for (const question of section.questions) {\r\n          if (question.value !== null && question.value !== undefined) {\r\n            // Check if we need a new page\r\n            if (yOffset > pageHeight - 50) {\r\n              doc.addPage()\r\n              yOffset = margin + 20\r\n            }\r\n\r\n            // Draw question box\r\n            doc.setFillColor(255, 255, 255)\r\n            doc.rect(margin, yOffset, pageWidth - margin * 2, 40, \"F\")\r\n            doc.setDrawColor(230, 230, 230)\r\n            doc.rect(margin, yOffset, pageWidth - margin * 2, 40, \"S\")\r\n\r\n            // Add question icon based on value\r\n            if (question.value === \"Yes\" || question.value === true) {\r\n              doc.setFillColor(76, 175, 80)\r\n              doc.circle(margin + 15, yOffset + 15, 5, \"F\")\r\n            } else {\r\n              doc.setFillColor(244, 67, 54)\r\n              doc.circle(margin + 15, yOffset + 15, 5, \"F\")\r\n            }\r\n\r\n            // Add question text\r\n            doc.setFontSize(12)\r\n            doc.setTextColor(0, 0, 0)\r\n            doc.text(question.text, margin + 30, yOffset + 15)\r\n\r\n            // Add answer\r\n            doc.setFontSize(11)\r\n            doc.setTextColor(100, 100, 100)\r\n            const answerText =\r\n              question.responseType === \"Media\" || question.responseType === \"Annotation\"\r\n                ? \"Media uploaded\"\r\n                : String(question.value)\r\n            doc.text(answerText, margin + 30, yOffset + 30)\r\n\r\n            // Add flag if flagged\r\n            if (question.flagged) {\r\n              doc.setFillColor(244, 67, 54)\r\n              doc.rect(pageWidth - margin - 60, yOffset + 10, 50, 20, \"F\")\r\n              doc.setTextColor(255, 255, 255)\r\n              doc.text(\"Flagged\", pageWidth - margin - 50, yOffset + 22)\r\n            }\r\n\r\n            yOffset += 50\r\n\r\n            // Add media if available\r\n            if ((question.responseType === \"Media\" || question.responseType === \"Annotation\") && question.value) {\r\n              try {\r\n                // Check if we need a new page for the image\r\n                if (yOffset > pageHeight - 100) {\r\n                  doc.addPage()\r\n                  yOffset = margin + 20\r\n                }\r\n\r\n                // Check if we've already processed this image\r\n                const imageValue = question.value as string\r\n                let processedImage\r\n\r\n                if (processedImages.has(imageValue)) {\r\n                  processedImage = processedImages.get(imageValue)\r\n                } else {\r\n                  // Process the image to reduce size\r\n                  const img = document.createElement(\"img\")\r\n                  img.crossOrigin = \"anonymous\"\r\n\r\n                  // Create a promise to handle the image loading\r\n                  const imageLoaded = new Promise((resolve, reject) => {\r\n                    img.onload = () => {\r\n                      const canvas = document.createElement(\"canvas\")\r\n                      const MAX_WIDTH = 600\r\n                      const MAX_HEIGHT = 400\r\n\r\n                      let width = img.width\r\n                      let height = img.height\r\n\r\n                      // Calculate new dimensions while maintaining aspect ratio\r\n                      if (width > height) {\r\n                        if (width > MAX_WIDTH) {\r\n                          height *= MAX_WIDTH / width\r\n                          width = MAX_WIDTH\r\n                        }\r\n                      } else {\r\n                        if (height > MAX_HEIGHT) {\r\n                          width *= MAX_HEIGHT / height\r\n                          height = MAX_HEIGHT\r\n                        }\r\n                      }\r\n\r\n                      canvas.width = width\r\n                      canvas.height = height\r\n\r\n                      const ctx = canvas.getContext(\"2d\")\r\n                      if (ctx) {\r\n                        ctx.drawImage(img, 0, 0, width, height)\r\n                        // Use lower quality JPEG for smaller file size\r\n                        const optimizedImage = canvas.toDataURL(\"image/jpeg\", 0.5)\r\n                        processedImages.set(imageValue, optimizedImage)\r\n                        resolve(optimizedImage)\r\n                      } else {\r\n                        reject(new Error(\"Could not get canvas context\"))\r\n                      }\r\n                    }\r\n                    img.onerror = () => reject(new Error(\"Failed to load image\"))\r\n                  })\r\n\r\n                  img.src = imageValue\r\n\r\n                  try {\r\n                    processedImage = await imageLoaded\r\n                  } catch (err) {\r\n                    console.error(\"Error processing image:\", err)\r\n                    processedImage = imageValue // Fall back to original image\r\n                  }\r\n                }\r\n\r\n                // Add the image to the PDF\r\n                doc.addImage(processedImage, \"JPEG\", margin, yOffset, pageWidth - margin * 2, 80, undefined, \"FAST\")\r\n                yOffset += 90\r\n              } catch (error) {\r\n                console.error(\"Error adding image to PDF:\", error)\r\n                // Add error message instead of image\r\n                doc.setTextColor(244, 67, 54)\r\n                doc.text(\"Error loading image\", margin, yOffset + 10)\r\n                yOffset += 20\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Add footer to all pages\r\n      const totalPages = (doc as any).internal.pages.length - 1\r\n      for (let i = 1; i <= totalPages; i++) {\r\n        doc.setPage(i)\r\n        doc.setFontSize(10)\r\n        doc.setTextColor(150, 150, 150)\r\n        doc.text(`Generated on ${new Date().toLocaleString()}`, margin, pageHeight - 10)\r\n        doc.text(`Page ${i} of ${totalPages}`, pageWidth - margin, pageHeight - 10, { align: \"right\" })\r\n      }\r\n\r\n      // Save the PDF\r\n      doc.save(`${template.title}_Report.pdf`)\r\n\r\n      // Remove loading indicator\r\n      document.body.removeChild(loadingIndicator)\r\n    } catch (error) {\r\n      console.error(\"Error generating PDF:\", error)\r\n      alert(\"There was an error generating the PDF. Please try again.\")\r\n\r\n      // Make sure to remove loading indicator if there's an error\r\n      const loadingIndicator = document.querySelector('[style*=\"position: fixed\"][style*=\"z-index: 9999\"]')\r\n      if (loadingIndicator && loadingIndicator.parentNode) {\r\n        loadingIndicator.parentNode.removeChild(loadingIndicator)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Calculate report statistics\r\n  const totalQuestions = template.sections.reduce((sum, section) => sum + section.questions.length, 0)\r\n  const answeredQuestions = template.sections.reduce(\r\n    (sum, section) => sum + section.questions.filter((q) => q.value !== null && q.value !== undefined).length,\r\n    0,\r\n  )\r\n  const scorePercentage = totalQuestions > 0 ? Math.round((answeredQuestions / totalQuestions) * 100) : 0\r\n\r\n  // Count flagged items and actions\r\n  const flaggedItems = template.sections.reduce(\r\n    (sum, section) => sum + section.questions.filter((q) => q.flagged).length,\r\n    0,\r\n  )\r\n  const actionItems = template.sections.reduce(\r\n    (sum, section) =>\r\n      sum +\r\n      section.questions.filter(\r\n        (q) => shouldShowTrigger(q, \"require_action\") || shouldShowTrigger(q, \"require_evidence\"),\r\n      ).length,\r\n    0,\r\n  )\r\n\r\n  // Get media items\r\n  const mediaItems = template.sections.reduce(\r\n    (items, section) => {\r\n      const sectionMedia = section.questions\r\n        .filter((q) => (q.responseType === \"Media\" || q.responseType === \"Annotation\") && q.value)\r\n        .map((q) => ({\r\n          id: q.id,\r\n          caption: q.text,\r\n          thumbnail: q.value as string,\r\n        }))\r\n      return [...items, ...sectionMedia]\r\n    },\r\n    [] as Array<{ id: string; caption: string; thumbnail: string }>,\r\n  )\r\n\r\n  return (\r\n    <div className=\"report-container\" style={{ width: \"100%\" }}>\r\n      <div className=\"report-header\" style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        <h2>Report Preview</h2>\r\n        <button className=\"generate-pdf-button\" onClick={generatePDF}>\r\n          <Download className=\"download-icon\" />\r\n          Download PDF Report\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"report-card\">\r\n        <div className=\"report-card-header\">\r\n          <div className=\"report-title-section\">\r\n            {template.logo && (\r\n              <div className=\"report-logo\">\r\n                <img src={template.logo || \"/placeholder.svg\"} alt=\"Template logo\" />\r\n              </div>\r\n            )}\r\n            <div className=\"report-title-info\">\r\n              <h3>{template.title}</h3>\r\n              <p className=\"report-date\">\r\n                {new Date().toLocaleDateString()} /{\" \"}\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"report-completion-badge\">{scorePercentage === 100 ? \"Complete\" : \"Incomplete\"}</div>\r\n        </div>\r\n\r\n        <div className=\"report-stats\">\r\n          <div className=\"report-score-container\">\r\n            <p className=\"report-stat-label\">Score</p>\r\n            <div className=\"report-score-bar\">\r\n              <div className=\"report-score-progress\" style={{ width: `${scorePercentage}%` }}></div>\r\n            </div>\r\n            <span className=\"report-score-text\">\r\n              {answeredQuestions}/{totalQuestions} ({scorePercentage}%)\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"report-stat-grid\">\r\n            <div className=\"report-stat\">\r\n              <p className=\"report-stat-label\">Flagged items</p>\r\n              <div className=\"report-stat-value\">\r\n                <Flag className=\"report-stat-icon flagged\" />\r\n                <span>{flaggedItems}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"report-stat\">\r\n              <p className=\"report-stat-label\">Actions</p>\r\n              <div className=\"report-stat-value\">\r\n                <AlertTriangle className=\"report-stat-icon action\" />\r\n                <span>{actionItems}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"report-stat\">\r\n              <p className=\"report-stat-label\">Status</p>\r\n              <div className=\"report-stat-value\">\r\n                <Clock className=\"report-stat-icon status\" />\r\n                <span>In progress</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"report-site-info\">\r\n          <div className=\"report-site-info-grid\">\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <Building className=\"report-site-info-icon\" />\r\n                <p>Site conducted</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Site\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Site\" && q.value)?.value || \"Not specified\"}\r\n              </p>\r\n            </div>\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <Calendar className=\"report-site-info-icon\" />\r\n                <p>Conducted on</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Inspection date\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Inspection date\" && q.value)?.value ||\r\n                  new Date().toLocaleDateString()}\r\n              </p>\r\n            </div>\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <User className=\"report-site-info-icon\" />\r\n                <p>Prepared by</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Not specified\"}\r\n              </p>\r\n            </div>\r\n            <div className=\"report-site-info-item\">\r\n              <div className=\"report-site-info-label\">\r\n                <MapPin className=\"report-site-info-icon\" />\r\n                <p>Location</p>\r\n              </div>\r\n              <p className=\"report-site-info-value\">\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Inspection location\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Inspection location\" && q.value)?.value ||\r\n                  \"Not specified\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"report-tabs\">\r\n        <div className=\"report-tab-buttons\">\r\n          <button\r\n            className={`report-tab-button ${activeTab === \"summary\" ? \"active\" : \"\"}`}\r\n            onClick={() => setActiveTab(\"summary\")}\r\n          >\r\n            Summary\r\n          </button>\r\n          <button\r\n            className={`report-tab-button ${activeTab === \"flagged\" ? \"active\" : \"\"}`}\r\n            onClick={() => setActiveTab(\"flagged\")}\r\n          >\r\n            Flagged Items\r\n          </button>\r\n          <button\r\n            className={`report-tab-button ${activeTab === \"media\" ? \"active\" : \"\"}`}\r\n            onClick={() => setActiveTab(\"media\")}\r\n          >\r\n            Media\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"report-tab-content\">\r\n          {activeTab === \"summary\" && (\r\n            <div className=\"report-summary\">\r\n              <h3 className=\"report-section-title\">Inspection Summary</h3>\r\n              <p className=\"report-section-description\">\r\n                This report provides an overview of the safety inspection conducted at{\" \"}\r\n                {template.sections\r\n                  .find((s) => s.questions.some((q) => q.responseType === \"Site\" && q.value))\r\n                  ?.questions.find((q) => q.responseType === \"Site\" && q.value)?.value || \"the site\"}\r\n                .\r\n              </p>\r\n\r\n              <div className=\"report-questions-list\">\r\n                {template.sections.map((section) =>\r\n                  section.questions\r\n                    .filter((q) => q.value !== null && q.value !== undefined)\r\n                    .map((question) => (\r\n                      <div key={question.id} className={`report-question-item ${question.flagged ? \"flagged\" : \"\"}`}>\r\n                        <div className=\"report-question-header\">\r\n                          <div className=\"report-question-icon\">\r\n                            {question.value === \"Yes\" || question.value === true ? (\r\n                              <Check className=\"report-question-check\" />\r\n                            ) : (\r\n                              <AlertTriangle className=\"report-question-alert\" />\r\n                            )}\r\n                          </div>\r\n                          <div className=\"report-question-text\">\r\n                            <p>{question.text}</p>\r\n                            <div className=\"report-question-badges\">\r\n                              <span\r\n                                className={`report-question-answer ${question.value === \"Yes\" || question.value === true ? \"positive\" : \"negative\"}`}\r\n                              >\r\n                                {question.responseType === \"Media\" || question.responseType === \"Annotation\"\r\n                                  ? \"Media uploaded\"\r\n                                  : String(question.value)}\r\n                              </span>\r\n                              {question.flagged && (\r\n                                <span className=\"report-question-flag\">\r\n                                  <Flag className=\"report-flag-icon\" />\r\n                                  Flagged\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        {(question.responseType === \"Media\" || question.responseType === \"Annotation\") &&\r\n                          question.value && (\r\n                            <div className=\"report-question-media\">\r\n                              <img\r\n                                src={(question.value as string) || \"/placeholder.svg\"}\r\n                                alt={question.text}\r\n                                className=\"report-media-preview\"\r\n                              />\r\n                            </div>\r\n                          )}\r\n                      </div>\r\n                    )),\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === \"flagged\" && (\r\n            <div className=\"report-flagged\">\r\n              <div className=\"report-flagged-header\">\r\n                <h3 className=\"report-section-title\">Flagged Items</h3>\r\n                <span className=\"report-flagged-count\">\r\n                  {flaggedItems} flagged, {actionItems} action\r\n                </span>\r\n              </div>\r\n\r\n              <div className=\"report-questions-list\">\r\n                {template.sections.map((section) =>\r\n                  section.questions\r\n                    .filter((q) => q.flagged)\r\n                    .map((question) => (\r\n                      <div key={question.id} className=\"report-question-item flagged\">\r\n                        <div className=\"report-question-header\">\r\n                          <div className=\"report-question-icon\">\r\n                            <AlertTriangle className=\"report-question-alert\" />\r\n                          </div>\r\n                          <div className=\"report-question-text\">\r\n                            <p>{question.text}</p>\r\n                            <span className=\"report-question-answer negative\">\r\n                              {question.responseType === \"Media\" || question.responseType === \"Annotation\"\r\n                                ? \"Media uploaded\"\r\n                                : String(question.value || \"No\")}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n\r\n                        {(question.responseType === \"Media\" || question.responseType === \"Annotation\") &&\r\n                          question.value && (\r\n                            <div className=\"report-question-media\">\r\n                              <img\r\n                                src={(question.value as string) || \"/placeholder.svg\"}\r\n                                alt={question.text}\r\n                                className=\"report-media-preview\"\r\n                              />\r\n                            </div>\r\n                          )}\r\n\r\n                        <div className=\"report-question-action\">\r\n                          <div className=\"report-action-header\">\r\n                            <span className=\"report-action-status\">In progress</span>\r\n                            <span className=\"report-action-assignee\">\r\n                              <span className=\"report-action-label\">Assignee</span>\r\n                              Fred Smith\r\n                            </span>\r\n                            <span className=\"report-action-priority high\">\r\n                              <span className=\"report-action-label\">Priority</span>\r\n                              High\r\n                            </span>\r\n                          </div>\r\n\r\n                          <div className=\"report-action-due\">\r\n                            <span className=\"report-action-label\">Due</span>\r\n                            {new Date().toLocaleDateString()}\r\n                          </div>\r\n\r\n                          <div className=\"report-action-created\">\r\n                            <span className=\"report-action-label\">Created by</span>\r\n                            {template.sections\r\n                              .find((s) => s.questions.some((q) => q.responseType === \"Person\" && q.value))\r\n                              ?.questions.find((q) => q.responseType === \"Person\" && q.value)?.value || \"Inspector\"}\r\n                          </div>\r\n\r\n                          <div className=\"report-action-category\">Work Areas / Personal Protective Equipment (PPE)</div>\r\n                          <div className=\"report-action-description\">Make sure the team wear safety hard hats</div>\r\n                        </div>\r\n                      </div>\r\n                    )),\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab === \"media\" && (\r\n            <div className=\"report-media\">\r\n              <h3 className=\"report-section-title\">Media Summary</h3>\r\n\r\n              <div className=\"report-media-grid\">\r\n                {mediaItems.length > 0 ? (\r\n                  mediaItems.map((media) => (\r\n                    <div key={media.id} className=\"report-media-item\">\r\n                      <div className=\"report-media-image\">\r\n                        <img src={media.thumbnail || \"/placeholder.svg\"} alt={media.caption} />\r\n                        <div className=\"report-media-caption\">\r\n                          <p>{media.caption}</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                ) : (\r\n                  <div className=\"report-media-empty\">\r\n                    <ImageIcon className=\"report-media-empty-icon\" />\r\n                    <p>No media has been added to this report</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"report-footer\" style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <div className=\"report-footer-buttons\" style={{ display: \"flex\", justifyContent: \"center\", width: \"100%\" }}>\r\n          <button className=\"report-footer-button\">\r\n            <FileText className=\"report-footer-icon\" />\r\n            Web preview\r\n          </button>\r\n          <button className=\"report-footer-button primary\" onClick={generatePDF}>\r\n            <Download className=\"report-footer-icon\" />\r\n            PDF preview\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"report-mobile-fab\">\r\n        <button className=\"report-mobile-download\" onClick={generatePDF}>\r\n          <Download className=\"report-mobile-download-icon\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Main Component\r\nconst CreateTemplate = () => {\r\n  const navigate = useNavigate()\r\n\r\n  const [templateId, setTemplateId] = useState<string | null>(null)\r\n\r\n  const [templateData, setTemplateData] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n  })\r\n  const generateId = () => Math.random().toString(36).substring(2, 9)\r\n\r\n  const getDefaultQuestion = (responseType: ResponseType = \"Text\"): Question => ({\r\n    id: generateId(),\r\n    text: \"Type question\",\r\n    responseType,\r\n    required: false,\r\n    flagged: false,\r\n    multipleSelection: false,\r\n    options:\r\n      responseType === \"Multiple choice\" || responseType === \"Yes/No\"\r\n        ? [\"Option 1\", \"Option 2\", \"Option 3\"]\r\n        : undefined,\r\n    value: null,\r\n    logicRules: [],\r\n  })\r\n\r\n  const getDefaultSection = (title = \"Untitled Page\"): Section => ({\r\n    id: generateId(),\r\n    title,\r\n    questions: [],\r\n    isCollapsed: false,\r\n  })\r\n\r\n  const getInitialTemplate = (): Template => {\r\n    const titlePageSection: Section = {\r\n      id: generateId(),\r\n      title: \"Title Page\",\r\n      description: \"The Title Page is the first page of your inspection report. Customize it below.\",\r\n      questions: [\r\n        {\r\n          id: generateId(),\r\n          text: \"Site conducted\",\r\n          responseType: \"Site\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Conducted on\",\r\n          responseType: \"Inspection date\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Prepared by\",\r\n          responseType: \"Person\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n        {\r\n          id: generateId(),\r\n          text: \"Location\",\r\n          responseType: \"Inspection location\",\r\n          required: true,\r\n          flagged: false,\r\n          value: null,\r\n          logicRules: [],\r\n        },\r\n      ],\r\n      isCollapsed: false,\r\n    }\r\n\r\n    return {\r\n      id: generateId(),\r\n      title: \"Untitled template\",\r\n      description: \"Add a description\",\r\n      sections: [titlePageSection],\r\n      lastSaved: new Date(),\r\n      lastPublished: new Date(),\r\n      logo: undefined,\r\n    }\r\n  }\r\n  const [template, setTemplate] = useState<Template>({\r\n    id: generateId(), // Add the required id property\r\n    title: \"\",\r\n    description: \"\",\r\n    logo: undefined, // Changed from null to undefined\r\n    sections: [],\r\n    lastSaved: new Date(),\r\n    lastPublished: new Date(),\r\n  })\r\n  const [activeTab, setActiveTab] = useState<number>(0)\r\n\r\n  const [activeSectionId, setActiveSectionId] = useState<string | null>(null)\r\n  const [activeQuestionId, setActiveQuestionId] = useState<string | null>(null)\r\n  const [draggedItem, setDraggedItem] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\r\n  const [dropTarget, setDropTarget] = useState<{ type: \"question\" | \"section\"; id: string } | null>(null)\r\n  const [showResponseTypeMenu, setShowResponseTypeMenu] = useState<string | null>(null)\r\n  const [showMobilePreview, setShowMobilePreview] = useState<boolean>(true)\r\n  const [showLogicPanel, setShowLogicPanel] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  // Add a class to the document body when mobile preview is hidden\r\n  useEffect(() => {\r\n    if (showMobilePreview) {\r\n      document.body.classList.remove('mobile-preview-hidden')\r\n    } else {\r\n      document.body.classList.add('mobile-preview-hidden')\r\n    }\r\n  }, [showMobilePreview])\r\n\r\n  const questionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\r\n  const sectionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({})\r\n  const { id } = useParams();\r\n\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      axios\r\n        .get(`http://localhost:8000/api/users/templates/${id}/`)\r\n        .then((res) => {\r\n          setTemplate(res.data);\r\n          setTemplateData(res.data);\r\n          setIsLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to load template\", err);\r\n          setIsLoading(false);\r\n        });\r\n    } else {\r\n      const newTemplate = getInitialTemplate();\r\n      setTemplate(newTemplate);\r\n      setActiveSectionId(newTemplate.sections[0]?.id || null);\r\n      setIsLoading(false);\r\n    }\r\n  }, [id]);\r\n\r\n\r\n\r\n  if (isLoading || !template) {\r\n    return <div>Loading template...</div>\r\n  }\r\n\r\n  function toSnakeCase(obj: any): any {\r\n    if (Array.isArray(obj)) {\r\n      return obj.map(toSnakeCase);\r\n    } else if (obj !== null && typeof obj === \"object\") {\r\n      const newObj: any = {};\r\n      for (const key in obj) {\r\n        if (!obj.hasOwnProperty(key)) continue;\r\n        const snakeKey = key.replace(/([A-Z])/g, \"_$1\").toLowerCase();\r\n        newObj[snakeKey] = toSnakeCase(obj[key]);\r\n      }\r\n      return newObj;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n\r\n\r\n  function cleanTemplateForSave(template: Template, isNew: boolean): Partial<Template> {\r\n    return {\r\n      ...(isNew ? {} : { id: template.id }),\r\n      title: template.title,\r\n      description: template.description,\r\n      logo: template.logo,\r\n      sections: template.sections.map((section) => {\r\n        const newSectionId = isNew || typeof section.id === \"number\" ? generateId() : section.id;\r\n\r\n        return {\r\n          id: newSectionId,\r\n          title: section.title,\r\n          description: section.description,\r\n          isCollapsed: section.isCollapsed,\r\n          questions: section.questions.map((q) => {\r\n            const newQuestionId = isNew || typeof q.id === \"number\" ? generateId() : q.id;\r\n\r\n            return {\r\n              id: newQuestionId,\r\n              text: q.text,\r\n              responseType: q.responseType ?? \"Text\", // ensure fallback\r\n              required: q.required,\r\n              flagged: q.flagged,\r\n              options: q.options,\r\n              value: q.value,\r\n              conditionalLogic: q.conditionalLogic,\r\n              conditionalProof: q.conditionalProof,\r\n              logicRules: q.logicRules,\r\n              multipleSelection: q.multipleSelection,\r\n            };\r\n          }),\r\n        };\r\n      }),\r\n    };\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // Updated handleSave function with proper CSRF token handling\r\n  const handleSave = async () => {\r\n    const isNew = !id;\r\n\r\n    if (!template.title) {\r\n      alert(\"Please enter a template title\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const csrfToken = await fetchCSRFToken();\r\n      const formData = new FormData();\r\n\r\n      // Add title and description\r\n      formData.append(\"title\", template.title);\r\n      formData.append(\"description\", template.description);\r\n\r\n      // Add logo if exists\r\n      if (template.logo) {\r\n        if (typeof template.logo === \"string\" && template.logo.startsWith(\"data:\")) {\r\n          const response = await fetch(template.logo);\r\n          const blob = await response.blob();\r\n          formData.append(\"logo\", blob, \"logo.png\");\r\n        } else {\r\n          formData.append(\"logo\", template.logo);\r\n        }\r\n      }\r\n\r\n      // Add sections (correctly cleaned + snake_cased)\r\n      const cleaned = cleanTemplateForSave(template, isNew);\r\n      const snakeCaseSections = toSnakeCase(cleaned.sections);\r\n      formData.append(\"sections\", JSON.stringify(snakeCaseSections));\r\n\r\n      const url = isNew\r\n        ? \"http://localhost:8000/api/users/create_templates/\"\r\n        : `http://localhost:8000/api/users/templates/${id}/`;\r\n\r\n      const method = isNew ? \"POST\" : \"PATCH\";\r\n\r\n      const saveResponse = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          \"X-CSRFToken\": csrfToken,\r\n        },\r\n        body: formData,\r\n        credentials: \"include\",\r\n      });\r\n\r\n      if (!saveResponse.ok) {\r\n        const errorData = await saveResponse.json();\r\n        throw new Error(errorData.error || \"Failed to save template\");\r\n      }\r\n\r\n      alert(\"Template saved successfully!\");\r\n    } catch (error: any) {\r\n      console.error(\"Error saving template:\", error);\r\n      alert(`Failed to save template: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Template Management\r\n  const updateTemplate = (updates: Partial<Template>) => setTemplate((prev) => ({ ...prev, ...updates }))\r\n\r\n  const handleBack = () => {\r\n    if (window.confirm(\"Do you want to save before leaving?\")) handleSave()\r\n      navigate(\"/templates\")\r\n  }\r\n\r\n  const handleLogoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0]\r\n    if (file && file.size <= 5 * 1024 * 1024 && file.type.match(/^image\\//)) {\r\n      const reader = new FileReader()\r\n      reader.onload = async (event) => {\r\n        const result = event.target?.result as string\r\n        if (result) {\r\n          const resizedImage = await resizeImage(result)\r\n          updateTemplate({ logo: resizedImage })\r\n        }\r\n      }\r\n      reader.readAsDataURL(file)\r\n    }\r\n  }\r\n\r\n  // Section Management\r\n  const addSection = () => {\r\n    const newSection = getDefaultSection()\r\n    setTemplate((prev) => ({ ...prev, sections: [...prev.sections, newSection] }))\r\n    setActiveSectionId(newSection.id)\r\n    setTimeout(() => sectionRefs.current[newSection.id]?.scrollIntoView({ behavior: \"smooth\", block: \"start\" }), 100)\r\n  }\r\n\r\n  const updateSection = (sectionId: string, updates: Partial<Section>) => {\r\n    setTemplate((prev) => ({\r\n      ...prev,\r\n      sections: prev.sections.map((s) => (s.id === sectionId ? { ...s, ...updates } : s)),\r\n    }))\r\n  }\r\n\r\n  const deleteSection = (sectionId: string) => {\r\n    setTemplate((prev) => ({ ...prev, sections: prev.sections.filter((s) => s.id !== sectionId) }))\r\n  }\r\n\r\n  const toggleSectionCollapse = (sectionId: string) => {\r\n    updateSection(sectionId, { isCollapsed: !template.sections.find((s) => s.id === sectionId)?.isCollapsed })\r\n  }\r\n\r\n  // Question Management\r\n  const addQuestion = (sectionId: string, responseType: ResponseType = \"Text\") => {\r\n    const newQuestion = getDefaultQuestion(responseType)\r\n    updateSection(sectionId, {\r\n      questions: [...template.sections.find((s) => s.id === sectionId)!.questions, newQuestion],\r\n    })\r\n    setActiveQuestionId(newQuestion.id)\r\n  }\r\n\r\n  const updateQuestion = (sectionId: string, questionId: string, updates: Partial<Question>) => {\r\n    setTemplate((prev) => ({\r\n      ...prev,\r\n      sections: prev.sections.map((s) =>\r\n        s.id === sectionId\r\n          ? { ...s, questions: s.questions.map((q) => (q.id === questionId ? { ...q, ...updates } : q)) }\r\n          : s,\r\n      ),\r\n    }))\r\n  }\r\n\r\n  const deleteQuestion = (sectionId: string, questionId: string) => {\r\n    updateSection(sectionId, {\r\n      questions: template.sections.find((s) => s.id === sectionId)!.questions.filter((q) => q.id !== questionId),\r\n    })\r\n  }\r\n\r\n  const changeQuestionResponseType = (sectionId: string, questionId: string, responseType: ResponseType) => {\r\n    updateQuestion(sectionId, questionId, {\r\n      responseType,\r\n      options:\r\n        responseType === \"Multiple choice\" || responseType === \"Yes/No\"\r\n          ? [\"Option 1\", \"Option 2\", \"Option 3\"]\r\n          : undefined,\r\n      value: null,\r\n      logicRules: [],\r\n    })\r\n    setShowResponseTypeMenu(null)\r\n  }\r\n\r\n  // Drag and Drop\r\n  const handleDragStart = (type: \"question\" | \"section\", id: string) => setDraggedItem({ type, id })\r\n  const handleDragOver = (type: \"question\" | \"section\", id: string, e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    if (draggedItem && draggedItem.id !== id) setDropTarget({ type, id })\r\n  }\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault()\r\n    if (!draggedItem || !dropTarget) return\r\n\r\n    if (draggedItem.type === \"section\" && dropTarget.type === \"section\") {\r\n      const sections = [...template.sections]\r\n      const draggedIndex = sections.findIndex((s) => s.id === draggedItem.id)\r\n      const dropIndex = sections.findIndex((s) => s.id === dropTarget.id)\r\n      const [removed] = sections.splice(draggedIndex, 1)\r\n      sections.splice(dropIndex, 0, removed)\r\n      setTemplate((prev) => ({ ...prev, sections }))\r\n    } else if (draggedItem.type === \"question\" && dropTarget.type === \"question\") {\r\n      const draggedSection = template.sections.find((s) => s.questions.some((q) => q.id === draggedItem.id))\r\n      const dropSection = template.sections.find((s) => s.questions.some((q) => q.id === dropTarget.id))\r\n\r\n      if (draggedSection && dropSection) {\r\n        const newSections = [...template.sections]\r\n        const draggedSectionIndex = newSections.findIndex((s) => s.id === draggedSection.id)\r\n        const draggedQuestionIndex = newSections[draggedSectionIndex].questions.findIndex(\r\n          (q) => q.id === draggedItem.id,\r\n        )\r\n        const dropSectionIndex = newSections.findIndex((s) => s.id === dropSection.id)\r\n        const dropQuestionIndex = newSections[dropSectionIndex].questions.findIndex((q) => q.id === dropTarget.id)\r\n        const [removedQuestion] = newSections[draggedSectionIndex].questions.splice(draggedQuestionIndex, 1)\r\n        newSections[dropSectionIndex].questions.splice(dropQuestionIndex, 0, removedQuestion)\r\n        setTemplate((prev) => ({ ...prev, sections: newSections }))\r\n      }\r\n    }\r\n    setDraggedItem(null)\r\n    setDropTarget(null)\r\n  }\r\n\r\n  // Rendering Helpers\r\n  const renderResponseTypeIcon = (type: ResponseType) => {\r\n    switch (type) {\r\n      case \"Site\":\r\n        return <MapPin size={18} className=\"response-type-icon\" />\r\n      case \"Inspection date\":\r\n        return <Calendar size={18} className=\"response-type-icon\" />\r\n      case \"Person\":\r\n        return <User size={18} className=\"response-type-icon\" />\r\n      case \"Inspection location\":\r\n        return <MapPin size={18} className=\"response-type-icon\" />\r\n      case \"Text\":\r\n        return <div className=\"response-type-icon text-icon\">Aa</div>\r\n      case \"Number\":\r\n        return <div className=\"response-type-icon number-icon\">123</div>\r\n      case \"Checkbox\":\r\n        return (\r\n          <div className=\"response-type-icon checkbox-icon\">\r\n            <Check size={14} />\r\n          </div>\r\n        )\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"response-type-icon yes-no-icon\">\r\n            <span className=\"yes\">Y</span>/<span className=\"no\">N</span>\r\n          </div>\r\n        )\r\n      case \"Multiple choice\":\r\n        return <div className=\"response-type-icon multiple-choice-icon\">☰</div>\r\n      case \"Slider\":\r\n        return <div className=\"response-type-icon slider-icon\">⟷</div>\r\n      case \"Media\":\r\n        return <ImageIcon size={18} className=\"response-type-icon\" />\r\n      case \"Annotation\":\r\n        return <Edit size={18} className=\"response-type-icon\" />\r\n      case \"Date & Time\":\r\n        return <Clock size={18} className=\"response-type-icon\" />\r\n      default:\r\n        return <div className=\"response-type-icon\"></div>\r\n    }\r\n  }\r\n\r\n  const renderResponseTypeMenu = (sectionId: string, questionId: string) => {\r\n    if (showResponseTypeMenu !== questionId) return null\r\n    const responseTypes: ResponseType[] = [\r\n      \"Text\",\r\n      \"Number\",\r\n      \"Checkbox\",\r\n      \"Yes/No\",\r\n      \"Multiple choice\",\r\n      \"Slider\",\r\n      \"Media\",\r\n      \"Annotation\",\r\n      \"Date & Time\",\r\n      \"Site\",\r\n      \"Inspection date\",\r\n      \"Person\",\r\n      \"Inspection location\",\r\n    ]\r\n\r\n    return (\r\n      <div className=\"response-type-menu\">\r\n        <div className=\"response-type-menu-header\">\r\n          <h3>Select response type</h3>\r\n          <button className=\"close-button\" onClick={() => setShowResponseTypeMenu(null)}>\r\n            <X size={18} />\r\n          </button>\r\n        </div>\r\n        <div className=\"response-type-options\">\r\n          {responseTypes.map((type) => (\r\n            <button\r\n              key={type}\r\n              className=\"response-type-option\"\r\n              onClick={() => changeQuestionResponseType(sectionId, questionId, type)}\r\n            >\r\n              {renderResponseTypeIcon(type)}\r\n              <span>{type}</span>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderQuestionResponse = (question: Question, sectionId: string) => {\r\n    switch (question.responseType) {\r\n      case \"Text\":\r\n        return (\r\n          <div className=\"response-field text-field\">\r\n            <div className=\"text-input\">Text answer</div>\r\n          </div>\r\n        )\r\n      case \"Number\":\r\n        return (\r\n          <div className=\"response-field number-field\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"number-input\"\r\n              value={(question.value as number) || \"\"}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { value: Number(e.target.value) })}\r\n              placeholder=\"0\"\r\n            />\r\n          </div>\r\n        )\r\n      case \"Checkbox\":\r\n        return (\r\n          <div className=\"response-field checkbox-field\">\r\n            <div className=\"checkbox-input\">\r\n              <div className=\"checkbox\"></div>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"response-field yes-no-field\">\r\n            <div className=\"yes-no-options\">\r\n              <button className=\"yes-option\">Yes</button>\r\n              <button className=\"no-option\">No</button>\r\n              <button className=\"na-option\">N/A</button>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Multiple choice\":\r\n        return (\r\n          <div className=\"response-field multiple-choice-field\">\r\n            <div className=\"multiple-choice-options\">\r\n              {(question.options || []).map((option, idx) => (\r\n                <button key={idx} className={`choice-option choice-${idx % 4}`}>\r\n                  {option}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Slider\":\r\n        return (\r\n          <div className=\"response-field slider-field\">\r\n            <div className=\"slider-container\">\r\n              <div className=\"slider-track\">\r\n                <div className=\"slider-thumb\"></div>\r\n              </div>\r\n              <div className=\"slider-labels\">\r\n                <span>0</span>\r\n                <span>50</span>\r\n                <span>100</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Media\":\r\n        return (\r\n          <div className=\"response-field media-field\">\r\n            <div className=\"media-upload\">\r\n              <ImageIcon size={20} />\r\n              <span>Upload media</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Annotation\":\r\n        return (\r\n          <div className=\"response-field annotation-field\">\r\n            <div className=\"annotation-area\">\r\n              <Edit size={20} />\r\n              <span>Add annotation</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Date & Time\":\r\n      case \"Inspection date\":\r\n        return (\r\n          <div className=\"response-field date-time-field\">\r\n            <div className=\"date-time-input\">\r\n              <Calendar size={16} />\r\n              <span>{new Date().toLocaleDateString()}</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Site\":\r\n      case \"Person\":\r\n      case \"Inspection location\":\r\n        return (\r\n          <div className=\"response-field dropdown-input\">\r\n            <div className=\"dropdown-input\">\r\n              <span>Select {question.responseType.toLowerCase()}</span>\r\n              <ChevronDown size={16} />\r\n            </div>\r\n          </div>\r\n        )\r\n      default:\r\n        // Exhaustive type check to ensure all ResponseType values are handled\r\n        const _exhaustiveCheck: never = question.responseType\r\n        return <div className=\"response-field\">Unsupported response type</div>\r\n    }\r\n  }\r\n\r\n  const renderQuestion = (question: Question, sectionId: string, index: number) => {\r\n    const isActive = activeQuestionId === question.id\r\n    const isDragging = draggedItem?.type === \"question\" && draggedItem.id === question.id\r\n    const isDropTarget = dropTarget?.type === \"question\" && dropTarget.id === question.id\r\n\r\n    return (\r\n      <div\r\n        key={question.id}\r\n        ref={(el) => {\r\n          questionRefs.current[question.id] = el\r\n        }}\r\n        className={`question-item ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"}`}\r\n        onClick={() => setActiveQuestionId(question.id)}\r\n        draggable\r\n        onDragStart={(e) => handleDragStart(\"question\", question.id)}\r\n        onDragOver={(e) => handleDragOver(\"question\", question.id, e)}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div className=\"question-header\">\r\n          <div className=\"question-drag-handle\">\r\n            <Move size={16} />\r\n          </div>\r\n          <div className=\"question-number\">{index + 1}</div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"question-text\"\r\n            value={question.text}\r\n            onChange={(e) => updateQuestion(sectionId, question.id, { text: e.target.value })}\r\n            placeholder=\"Type question\"\r\n          />\r\n        </div>\r\n        <div className=\"question-body\">\r\n          <div className=\"response-type-selector\">\r\n            <div\r\n              className=\"selected-response-type\"\r\n              onClick={(e) => {\r\n                e.stopPropagation()\r\n                setShowResponseTypeMenu(showResponseTypeMenu === question.id ? null : question.id)\r\n              }}\r\n            >\r\n              {renderResponseTypeIcon(question.responseType)}\r\n              <span>{question.responseType}</span>\r\n              <ChevronDown size={16} />\r\n            </div>\r\n            {renderResponseTypeMenu(sectionId, question.id)}\r\n          </div>\r\n          {renderQuestionResponse(question, sectionId)}\r\n        </div>\r\n        <div className=\"question-footer\">\r\n          <EnhancedAddLogicButton\r\n            hasRules={question.logicRules?.length ? true : false}\r\n            onClick={() => setShowLogicPanel(showLogicPanel === question.id ? null : question.id)}\r\n          />\r\n          <label className=\"required-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={question.required}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { required: e.target.checked })}\r\n            />\r\n            <span>Required</span>\r\n          </label>\r\n          <label className=\"required-checkbox\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={question.flagged}\r\n              onChange={(e) => updateQuestion(sectionId, question.id, { flagged: e.target.checked })}\r\n            />\r\n            <span>Flag</span>\r\n          </label>\r\n          <button className=\"delete-question\" onClick={() => deleteQuestion(sectionId, question.id)}>\r\n            <Trash2 size={16} />\r\n          </button>\r\n          {showLogicPanel === question.id && (\r\n            <EnhancedLogicRulesContainer\r\n              questionType={question.responseType}\r\n              rules={question.logicRules || []}\r\n              options={question.options || []}\r\n              onRulesChange={(rules) => updateQuestion(sectionId, question.id, { logicRules: rules })}\r\n              questions={template.sections.flatMap((s) => s.questions.map((q) => ({ id: q.id, text: q.text })))}\r\n              onClose={() => setShowLogicPanel(null)}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderSection = (section: Section, index: number) => {\r\n    const isActive = activeSectionId === section.id\r\n    const isDragging = draggedItem?.type === \"section\" && draggedItem.id === section.id\r\n    const isDropTarget = dropTarget?.type === \"section\" && dropTarget.id === section.id\r\n    const isTitlePage = index === 0\r\n\r\n    return (\r\n      <div\r\n        key={section.id}\r\n        ref={(el) => {\r\n          sectionRefs.current[section.id] = el\r\n        }}\r\n        className={`section-container ${isActive ? \"active\" : \"\"} ${isDragging ? \"dragging\" : \"\"} ${isDropTarget ? \"drop-target\" : \"\"}`}\r\n        onClick={() => setActiveSectionId(section.id)}\r\n        draggable={!isTitlePage}\r\n        onDragStart={(e) => !isTitlePage && handleDragStart(\"section\", section.id)}\r\n        onDragOver={(e) => handleDragOver(\"section\", section.id, e)}\r\n        onDrop={handleDrop}\r\n      >\r\n        <div className=\"section-header\">\r\n          <button\r\n            className=\"collapse-button\"\r\n            onClick={(e) => {\r\n              e.stopPropagation()\r\n              toggleSectionCollapse(section.id)\r\n            }}\r\n          >\r\n            {section.isCollapsed ? <ChevronUp size={18} /> : <ChevronDown size={18} />}\r\n          </button>\r\n          <div className=\"section-title-container\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"section-title\"\r\n              value={section.title}\r\n              onChange={(e) => updateSection(section.id, { title: e.target.value })}\r\n              readOnly={isTitlePage}\r\n            />\r\n            {!isTitlePage && (\r\n              <button className=\"edit-section-title\">\r\n                <Edit size={16} />\r\n              </button>\r\n            )}\r\n          </div>\r\n          {!isTitlePage && (\r\n            <div className=\"section-actions\">\r\n              <button\r\n                className=\"delete-section-button\"\r\n                onClick={(e) => {\r\n                  e.stopPropagation()\r\n                  if (window.confirm(\"Are you sure you want to delete this section?\")) deleteSection(section.id)\r\n                }}\r\n              >\r\n                <Trash2 size={16} />\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {!section.isCollapsed && (\r\n          <>\r\n            {section.description && (\r\n              <div className=\"section-description\">\r\n                {section.description}\r\n                {isTitlePage && <p>customize the Title Page below</p>}\r\n              </div>\r\n            )}\r\n            <div className=\"questions-container\">\r\n              <div className=\"questions-header\">\r\n                <div className=\"question-label\">Question</div>\r\n                <div className=\"response-type-label\">Type of response</div>\r\n                <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\r\n                  <Plus size={16} />\r\n                </button>\r\n              </div>\r\n              {section.questions.map((question, idx) => renderQuestion(question, section.id, idx))}\r\n              <div className=\"question-actions\">\r\n                <button className=\"add-question-button\" onClick={() => addQuestion(section.id)}>\r\n                  <Plus size={16} /> Add Question\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Updated handlePublishTemplate function with proper CSRF token handling\r\n  const handlePublishTemplate = async () => {\r\n    try {\r\n      // 1. First, get a fresh CSRF token\r\n      const csrfToken = await fetchCSRFToken()\r\n\r\n      // 2. Prepare the form data\r\n      const formData = new FormData()\r\n      formData.append(\"title\", template.title)\r\n      formData.append(\"description\", template.description)\r\n\r\n      // 3. Handle the logo if it exists\r\n      if (template.logo) {\r\n        // If logo is a base64 string, convert to blob\r\n        if (typeof template.logo === \"string\" && template.logo.startsWith(\"data:\")) {\r\n          const response = await fetch(template.logo)\r\n          const blob = await response.blob()\r\n          formData.append(\"logo\", blob, \"logo.png\")\r\n        } else {\r\n          formData.append(\"logo\", template.logo)\r\n        }\r\n      }\r\n\r\n      // 4. Add sections data\r\n      const isNew = !id;\r\n      const cleanedTemplate = cleanTemplateForSave(template, isNew)\r\n      formData.append(\"sections\", JSON.stringify(cleanedTemplate.sections))\r\n\r\n      // 5. Make the API request with the fresh CSRF token\r\n      const publishResponse = await fetch(\"http://localhost:8000/api/users/create_templates/\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"X-CSRFToken\": csrfToken,\r\n        },\r\n        body: formData,\r\n        credentials: \"include\", // Important: include cookies\r\n      })\r\n\r\n      if (!publishResponse.ok) {\r\n        const errorData = await publishResponse.json()\r\n        throw new Error(errorData.error || \"Failed to publish template\")\r\n      }\r\n\r\n      // Success handling\r\n      setTemplate((prev) => ({\r\n        ...prev,\r\n        lastSaved: new Date(),\r\n        lastPublished: new Date(),\r\n      }))\r\n\r\n      console.log(\"Template published successfully!\")\r\n      alert(\"Template published and saved successfully!\")\r\n      navigate(\"/templates\")\r\n    } catch (error: unknown) {\r\n      console.error(\"Error publishing template:\", error)\r\n\r\n      if (axios.isAxiosError(error)) {\r\n        if (error.response?.status === 403) {\r\n          alert(\"Authentication error. Please log in again.\")\r\n          navigate(`/login?returnUrl=${encodeURIComponent(window.location.pathname)}`)\r\n        } else {\r\n          alert(`Failed to publish template: ${error.response?.data?.error || error.message}`)\r\n        }\r\n      } else {\r\n        alert(\"Failed to publish template: Unknown error occurred.\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // Render trigger UI components based on the trigger type\r\n  const renderTriggerUI = (question: Question, activeSection: Section) => {\r\n    if (shouldShowTrigger(question, \"require_evidence\")) {\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-trigger-header\">\r\n            <Upload size={16} />\r\n            <span>Evidence Required</span>\r\n          </div>\r\n          <div className=\"mobile-media-upload\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*,video/*\"\r\n              className=\"sr-only\"\r\n              id={`evidence-upload-${question.id}`}\r\n              onChange={(e) => {\r\n                if (e.target.files && e.target.files[0]) {\r\n                  const reader = new FileReader()\r\n                  reader.onload = (event) => {\r\n                    if (event.target?.result) {\r\n                      updateQuestion(activeSection.id, question.id, { conditionalProof: event.target.result as string })\r\n                    }\r\n                  }\r\n                  reader.readAsDataURL(e.target.files[0])\r\n                }\r\n              }}\r\n            />\r\n            {!question.conditionalProof ? (\r\n              <label htmlFor={`evidence-upload-${question.id}`} className=\"mobile-media-placeholder\">\r\n                <ImageIcon size={20} />\r\n                <span>Upload evidence (photo or video)</span>\r\n              </label>\r\n            ) : (\r\n              <div className=\"mobile-media-preview\">\r\n                <img\r\n                  src={question.conditionalProof || \"/placeholder.svg\"}\r\n                  alt=\"Evidence\"\r\n                  className=\"mobile-media-image\"\r\n                />\r\n                <button\r\n                  className=\"mobile-media-remove\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault()\r\n                    e.stopPropagation()\r\n                    updateQuestion(activeSection.id, question.id, { conditionalProof: undefined })\r\n                  }}\r\n                >\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"require_action\")) {\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-trigger-header\">\r\n            <FileText size={16} />\r\n            <span>Action Required</span>\r\n          </div>\r\n          <div className=\"mobile-action-form\">\r\n            <input type=\"text\" className=\"mobile-text-input\" placeholder=\"Describe the action taken...\" />\r\n            <div className=\"mobile-action-buttons\">\r\n              <button className=\"mobile-action-button\">Submit Action</button>\r\n              <button className=\"mobile-action-button secondary\">Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"notify\")) {\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-notification-banner\">\r\n            <Bell size={16} />\r\n            <span>Notification has been sent to the relevant team members.</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"display_message\")) {\r\n      // Get the message from the rule that triggered this\r\n      const rule = question.logicRules?.find(\r\n        (r) => r.trigger === \"display_message\"\r\n      )\r\n      const message = rule?.message || \"Important: This response requires immediate attention.\"\r\n\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-message-banner\">\r\n            <AlertTriangle size={16} />\r\n            <span>{message}</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (shouldShowTrigger(question, \"ask_questions\")) {\r\n      // Get the subQuestion from the rule that triggered this\r\n      const rule = question.logicRules?.find((r) => r.trigger === \"ask_questions\")\r\n      const subQuestionText = rule?.subQuestion?.text || \"Please provide more details about this issue\"\r\n      const responseType = rule?.subQuestion?.responseType || \"Text\"\r\n\r\n      return (\r\n        <div className=\"mobile-trigger-container\">\r\n          <div className=\"mobile-trigger-header\">\r\n            <MessageSquare size={16} />\r\n            <span>Follow-up Questions</span>\r\n          </div>\r\n          <div className=\"mobile-subquestion\">\r\n            <div className=\"mobile-question-text\">\r\n              <span className=\"mobile-required\">*</span>\r\n              {subQuestionText}\r\n            </div>\r\n            <div className=\"mobile-question-response\">\r\n              {responseType === \"Text\" && (\r\n                <textarea className=\"mobile-text-input\" rows={3} placeholder=\"Enter details here...\"></textarea>\r\n              )}\r\n              {responseType === \"Yes/No\" && (\r\n                <div className=\"mobile-yes-no\">\r\n                  <button className=\"mobile-yes\">Yes</button>\r\n                  <button className=\"mobile-no\">No</button>\r\n                  <button className=\"mobile-na\">N/A</button>\r\n                </div>\r\n              )}\r\n              {responseType === \"Number\" && <input type=\"number\" className=\"mobile-number-input\" placeholder=\"0\" />}\r\n              {responseType === \"Multiple choice\" && (\r\n                <div className=\"mobile-multiple-choice\">\r\n                  <button className=\"mobile-choice\">Option 1</button>\r\n                  <button className=\"mobile-choice\">Option 2</button>\r\n                  <button className=\"mobile-choice\">Option 3</button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"mobile-action-buttons\">\r\n            <button className=\"mobile-action-button\">Submit Responses</button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  // Update the renderMobileQuestionResponse function to make it more interactive and realistic\r\n  const renderMobileQuestionResponse = (question: Question, activeSection: Section) => {\r\n    switch (question.responseType) {\r\n      case \"Text\":\r\n        return (\r\n          <input\r\n            type=\"text\"\r\n            className=\"mobile-text-input\"\r\n            placeholder=\"Text answer\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          />\r\n        )\r\n      case \"Number\":\r\n        return (\r\n          <input\r\n            type=\"number\"\r\n            className=\"mobile-number-input\"\r\n            placeholder=\"0\"\r\n            value={(question.value as number) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: Number(e.target.value) })}\r\n          />\r\n        )\r\n      case \"Checkbox\":\r\n        return (\r\n          <div\r\n            className=\"mobile-checkbox\"\r\n            onClick={() => updateQuestion(activeSection.id, question.id, { value: !question.value })}\r\n          >\r\n            <div className={`mobile-checkbox-box ${question.value ? \"checked\" : \"\"}`}>\r\n              {question.value && <Check size={16} />}\r\n            </div>\r\n            <span>Check if applicable</span>\r\n          </div>\r\n        )\r\n      case \"Yes/No\":\r\n        return (\r\n          <div className=\"mobile-yes-no\">\r\n            <button\r\n              className={`mobile-yes ${question.value === \"Yes\" ? \"selected\" : \"\"}`}\r\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"Yes\" })}\r\n            >\r\n              Yes\r\n            </button>\r\n            <button\r\n              className={`mobile-no ${question.value === \"No\" ? \"selected\" : \"\"}`}\r\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"No\" })}\r\n            >\r\n              No\r\n            </button>\r\n            <button\r\n              className={`mobile-na ${question.value === \"N/A\" ? \"selected\" : \"\"}`}\r\n              onClick={() => updateQuestion(activeSection.id, question.id, { value: \"N/A\" })}\r\n            >\r\n              N/A\r\n            </button>\r\n          </div>\r\n        )\r\n      case \"Multiple choice\":\r\n        return (\r\n          <div className=\"mobile-multiple-choice\">\r\n            {(question.options || []).map((option, idx) => (\r\n              <button\r\n                key={idx}\r\n                className={`mobile-choice ${question.value === option ? \"selected\" : \"\"}`}\r\n                onClick={() => updateQuestion(activeSection.id, question.id, { value: option })}\r\n              >\r\n                {option}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        )\r\n      case \"Slider\":\r\n        return (\r\n          <div className=\"mobile-slider\">\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              className=\"mobile-slider-input\"\r\n              value={(question.value as number) || 50}\r\n              onChange={(e) => updateQuestion(activeSection.id, question.id, { value: Number(e.target.value) })}\r\n            />\r\n            <div className=\"mobile-slider-labels\">\r\n              <span>0</span>\r\n              <span>50</span>\r\n              <span>100</span>\r\n            </div>\r\n          </div>\r\n        )\r\n      case \"Media\":\r\n        return (\r\n          <label className=\"mobile-media-upload\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*,video/*\"\r\n              className=\"sr-only\"\r\n              onChange={(e) => {\r\n                if (e.target.files && e.target.files[0]) {\r\n                  const reader = new FileReader()\r\n                  reader.onload = (event) => {\r\n                    if (event.target?.result) {\r\n                      updateQuestion(activeSection.id, question.id, { value: event.target.result as string })\r\n                    }\r\n                  }\r\n                  reader.readAsDataURL(e.target.files[0])\r\n                }\r\n              }}\r\n            />\r\n            {!question.value ? (\r\n              <>\r\n                <ImageIcon size={20} />\r\n                <span>Upload media (photo or video)</span>\r\n              </>\r\n            ) : (\r\n              <div className=\"mobile-media-preview\">\r\n                <img\r\n                  src={(question.value as string) || \"/placeholder.svg\"}\r\n                  alt=\"Uploaded media\"\r\n                  className=\"mobile-media-image\"\r\n                />\r\n                <button\r\n                  className=\"mobile-media-remove\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault()\r\n                    e.stopPropagation()\r\n                    updateQuestion(activeSection.id, question.id, { value: null })\r\n                  }}\r\n                >\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </label>\r\n        )\r\n      case \"Annotation\":\r\n        return (\r\n          <div className=\"mobile-annotation\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              className=\"sr-only\"\r\n              id={`annotation-${question.id}`}\r\n              onChange={(e) => {\r\n                if (e.target.files && e.target.files[0]) {\r\n                  const reader = new FileReader()\r\n                  reader.onload = (event) => {\r\n                    if (event.target?.result) {\r\n                      updateQuestion(activeSection.id, question.id, { value: event.target.result as string })\r\n                    }\r\n                  }\r\n                  reader.readAsDataURL(e.target.files[0])\r\n                }\r\n              }}\r\n            />\r\n            {!question.value ? (\r\n              <label htmlFor={`annotation-${question.id}`} className=\"mobile-annotation-placeholder\">\r\n                <Edit size={20} />\r\n                <span>Add annotation</span>\r\n              </label>\r\n            ) : (\r\n              <div className=\"mobile-annotation-preview\">\r\n                <img\r\n                  src={(question.value as string) || \"/placeholder.svg\"}\r\n                  alt=\"Annotation\"\r\n                  className=\"mobile-annotation-image\"\r\n                />\r\n                <button\r\n                  className=\"mobile-annotation-remove\"\r\n                  onClick={() => updateQuestion(activeSection.id, question.id, { value: null })}\r\n                >\r\n                  <X size={16} />\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n      case \"Date & Time\":\r\n      case \"Inspection date\":\r\n        return (\r\n          <input\r\n            type=\"datetime-local\"\r\n            className=\"mobile-date-time\"\r\n            value={(question.value as string) || new Date().toISOString().slice(0, 16)}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          />\r\n        )\r\n      case \"Site\":\r\n        const siteOptions = [\"Main Site\", \"Secondary Site\", \"Remote Location\", \"Headquarters\"]\r\n        return (\r\n          <select\r\n            className=\"mobile-dropdown-field\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select site\r\n            </option>\r\n            {siteOptions.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )\r\n      case \"Person\":\r\n        const personOptions = [\"John Doe\", \"Jane Smith\", \"Alex Johnson\", \"Sam Wilson\"]\r\n        return (\r\n          <select\r\n            className=\"mobile-dropdown-field\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select person\r\n            </option>\r\n            {personOptions.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )\r\n      case \"Inspection location\":\r\n        const locationOptions = [\"Main Building\", \"Warehouse\", \"Office\", \"Factory Floor\", \"Parking Lot\"]\r\n        return (\r\n          <select\r\n            className=\"mobile-dropdown-field\"\r\n            value={(question.value as string) || \"\"}\r\n            onChange={(e) => updateQuestion(activeSection.id, question.id, { value: e.target.value })}\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select location\r\n            </option>\r\n            {locationOptions.map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        )\r\n      default:\r\n        return <div className=\"mobile-text-input\">Response placeholder</div>\r\n    }\r\n  }\r\n\r\n  const renderMobilePreview = () => {\r\n    if (!showMobilePreview) {\r\n      return (\r\n        <div className=\"mobile-preview-collapsed\">\r\n          <button className=\"show-mobile-preview-button\" onClick={() => setShowMobilePreview(true)}>\r\n            <div className=\"mobile-icon\">\r\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <rect x=\"5\" y=\"2\" width=\"14\" height=\"20\" rx=\"2\" stroke=\"currentColor\" strokeWidth=\"2\" />\r\n                <line x1=\"5\" y1=\"18\" x2=\"19\" y2=\"18\" stroke=\"currentColor\" strokeWidth=\"2\" />\r\n                <line x1=\"9\" y1=\"21\" x2=\"15\" y2=\"21\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" />\r\n              </svg>\r\n            </div>\r\n            <span>Show Preview</span>\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Add null check for template\r\n    if (!template) {\r\n      return <div className=\"mobile-preview\">Loading...</div>\r\n    }\r\n\r\n    const activeSection = template.sections?.find((s) => s.id === activeSectionId) || template.sections?.[0]\r\n\r\n    if (!activeSection) {\r\n      return (\r\n        <div className=\"mobile-preview\">\r\n          <div className=\"mobile-preview-header\">\r\n            <button className=\"mobile-preview-close\" onClick={() => setShowMobilePreview(false)}>\r\n              <X size={16} />\r\n              <span>Hide Preview</span>\r\n            </button>\r\n          </div>\r\n          <div className=\"mobile-device-container\">\r\n            <div className=\"mobile-device\">\r\n              <div className=\"mobile-content\">\r\n                <div className=\"mobile-template-title\">{template.title || \"Untitled Template\"}</div>\r\n                <div className=\"mobile-page-indicator\">No pages added yet.</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"mobile-preview\">\r\n        <div className=\"mobile-preview-header\">\r\n          <button className=\"mobile-preview-close\" onClick={() => setShowMobilePreview(false)}>\r\n            <X size={16} />\r\n            <span>Hide Preview</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"mobile-device-container\">\r\n          <div className=\"mobile-device\">\r\n            <div className=\"mobile-device-notch\"></div>\r\n            <div className=\"mobile-status-bar\">\r\n              <div className=\"mobile-time\">\r\n                {new Date().toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\r\n              </div>\r\n              <div className=\"mobile-status-icons\">\r\n                <div className=\"mobile-signal\"></div>\r\n                <div className=\"mobile-wifi\"></div>\r\n                <div className=\"mobile-battery\"></div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mobile-content\">\r\n              {template.logo && (\r\n                <div className=\"mobile-header-content\">\r\n                  <div className=\"mobile-logo\">\r\n                    <img src={template.logo || \"/placeholder.svg\"} alt=\"Template logo\" className=\"mobile-logo-image\" />\r\n                  </div>\r\n                  <div className=\"mobile-template-title\">{template.title}</div>\r\n                </div>\r\n              )}\r\n              <div className=\"mobile-page-indicator\">\r\n                Page {template.sections.indexOf(activeSection) + 1} of {template.sections.length}\r\n              </div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"mobile-page-title\"\r\n                value={activeSection.title}\r\n                onChange={(e) => updateSection(activeSection.id, { title: e.target.value })}\r\n                placeholder=\"Enter page title\"\r\n              />\r\n\r\n              {activeSection.description && (\r\n                <div className=\"mobile-section-description\">{activeSection.description}</div>\r\n              )}\r\n\r\n              <div className=\"mobile-questions\">\r\n                {activeSection.questions.map((question) => (\r\n                  <div key={question.id} className=\"mobile-question\">\r\n                    <div className=\"mobile-question-text\">\r\n                      {question.required && <span className=\"mobile-required\">*</span>}\r\n                      {question.flagged && <span className=\"mobile-flagged\">⚑</span>}\r\n                      {question.text}\r\n                    </div>\r\n                    <div className=\"mobile-question-response\">\r\n                      {renderMobileQuestionResponse(question, activeSection)}\r\n                      {renderTriggerUI(question, activeSection)}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"mobile-nav-buttons\">\r\n              {template.sections.map((section) => (\r\n                <div\r\n                  key={section.id}\r\n                  className={`mobile-nav-dot ${section.id === activeSection.id ? \"active\" : \"\"}`}\r\n                  onClick={() => setActiveSectionId(section.id)}\r\n                ></div>\r\n              ))}\r\n            </div>\r\n            <div className=\"mobile-home-indicator\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Main Render\r\n  return (\r\n    <div className=\"template-builder\">\r\n      <div className=\"top-navigation\">\r\n        <div className=\"nav-left\">\r\n          <div className=\"company-name\">FASHCOGNITIVE</div>\r\n          <button className=\"back-button\" onClick={handleBack}>\r\n            <ArrowLeft size={16} />\r\n            <span>back</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"nav-center\">\r\n          <div className=\"nav-tabs\">\r\n            <button className={`nav-tab ${activeTab === 0 ? \"active\" : \"\"}`} onClick={() => setActiveTab(0)}>\r\n              1. Build\r\n            </button>\r\n            <button\r\n              className={`nav-tab ${activeTab === 2 ? \"active\" : \"\"}`}\r\n              onClick={() => setActiveTab(2)}\r\n              disabled={activeTab < 2}\r\n            >\r\n              2. Report\r\n            </button>\r\n            <button\r\n              className={`nav-tab ${activeTab === 3 ? \"active\" : \"\"}`}\r\n              onClick={() => setActiveTab(3)}\r\n              disabled={activeTab < 3}\r\n            >\r\n              3. Access\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"nav-right\"></div>\r\n      </div>\r\n\r\n      <div className=\"builder-content\">\r\n        {activeTab === 0 && (\r\n          <div className=\"template-builder-container\">\r\n            <div className={`template-content ${showMobilePreview ? 'with-preview' : ''}`}>\r\n              <div className=\"template-header\">\r\n                <div className=\"template-logo\">\r\n                  {template.logo ? (\r\n                    <img\r\n                      src={template.logo || \"/placeholder.svg\"}\r\n                      alt=\"Template logo\"\r\n                      className=\"logo-image\"\r\n                      onClick={() => document.getElementById(\"logo-upload\")?.click()}\r\n                    />\r\n                  ) : (\r\n                    <div className=\"logo-placeholder\" onClick={() => document.getElementById(\"logo-upload\")?.click()}>\r\n                      <Plus size={24} />\r\n                    </div>\r\n                  )}\r\n                  <input\r\n                    id=\"logo-upload\"\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    className=\"sr-only\"\r\n                    onChange={handleLogoUpload}\r\n                  />\r\n                </div>\r\n                <div className=\"template-info\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"template-title\"\r\n                    value={template.title}\r\n                    onChange={(e) => updateTemplate({ title: e.target.value })}\r\n                    placeholder=\"Untitled template\"\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"template-description\"\r\n                    value={template.description}\r\n                    onChange={(e) => updateTemplate({ description: e.target.value })}\r\n                    placeholder=\"Add a description\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"sections-container\">\r\n                {template.sections.map((section, idx) => renderSection(section, idx))}\r\n              </div>\r\n              <div className=\"add-section-container\">\r\n                <div className=\"add-section-actions\">\r\n                  <button className=\"add-section-button\" onClick={addSection}>\r\n                    <Plus size={16} /> Add Section\r\n                  </button>\r\n                  <button className=\"next-button\" onClick={() => setActiveTab(2)}>\r\n                    Next: Report\r\n                    <ArrowRight size={16} />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {renderMobilePreview()}\r\n          </div>\r\n        )}\r\n        {activeTab === 2 && (\r\n          <div className=\"report-page-container\">\r\n            <div style={{ width: \"100%\", maxWidth: \"1200px\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n              {!isLoading && template?.title && <Report template={template} />}\r\n            </div>\r\n            <div className=\"report-footer\" style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <button className=\"next-button\" onClick={() => setActiveTab(3)}>\r\n                Next: Access\r\n                <ArrowRight size={16} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {activeTab === 3 && (\r\n          <div className=\"access-page-container\">\r\n            <h1 className=\"access-main-title\">Template Access & Settings</h1>\r\n            <p className=\"access-main-description\">Configure access permissions and inspection timeframe for this template.</p>\r\n\r\n            <div className=\"access-content\">\r\n              <div className=\"access-tab\">\r\n                <div className=\"session-section\">\r\n                  <h2>\r\n                    <Calendar size={20} className=\"section-icon\" />\r\n                    Inspection Timeframe\r\n                  </h2>\r\n                  <p>Set the start and due dates for inspections using this template.</p>\r\n\r\n                  <div className=\"date-fields\">\r\n                    <div className=\"date-field\">\r\n                      <label htmlFor=\"startDate\">Start Date <span className=\"required-indicator\">*</span></label>\r\n                      <div className=\"date-input-container\">\r\n                        <input\r\n                          type=\"date\"\r\n                          id=\"startDate\"\r\n                          name=\"startDate\"\r\n                          min={new Date().toISOString().split('T')[0]}\r\n                          className=\"date-input\"\r\n                          style={{appearance: \"none\", WebkitAppearance: \"none\"}}\r\n                        />\r\n                        <Calendar size={16} className=\"date-icon\" />\r\n                      </div>\r\n                      <div className=\"date-helper-text\">Earliest date inspections can begin</div>\r\n                    </div>\r\n                    <div className=\"date-field\">\r\n                      <label htmlFor=\"dueDate\">Due Date <span className=\"required-indicator\">*</span></label>\r\n                      <div className=\"date-input-container\">\r\n                        <input\r\n                          type=\"date\"\r\n                          id=\"dueDate\"\r\n                          name=\"dueDate\"\r\n                          min={new Date().toISOString().split('T')[0]}\r\n                          className=\"date-input\"\r\n                          style={{appearance: \"none\", WebkitAppearance: \"none\"}}\r\n                        />\r\n                        <Calendar size={16} className=\"date-icon\" />\r\n                      </div>\r\n                      <div className=\"date-helper-text\">Deadline for completing inspections</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"access-tab\">\r\n                <div className=\"permissions-section\">\r\n                  <h2>\r\n                    <User size={20} className=\"section-icon\" />\r\n                    User Permissions\r\n                  </h2>\r\n                  <p>Manage who can access, edit, and use this template.</p>\r\n\r\n                  <AccessManager\r\n                    templateId={template.id}\r\n                    templateTitle={template.title || \"Untitled Template\"}\r\n                    initialUsers={[]}\r\n                    onUpdatePermissions={(users) => {\r\n                      console.log(\"Updated permissions:\", users)\r\n                      // Here you would update the template with the new permissions\r\n                      // setTemplate({ ...template, permissions: users });\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"access-footer\">\r\n              <button className=\"publish-button\" onClick={handlePublishTemplate}>\r\n                <Upload className=\"publish-icon\" />\r\n                Publish Template\r\n                <CheckCircle size={16} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateTemplate","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\aqlHelpers.ts",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\csrf.ts",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\components\\AccessManager.tsx",["86","87","88","89","90","91"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  User,\r\n  UserPlus,\r\n  Mail,\r\n  Shield,\r\n  Check,\r\n  X,\r\n  Edit2,\r\n  Trash2,\r\n  Search,\r\n  AlertCircle,\r\n  Info,\r\n  Copy,\r\n  ExternalLink,\r\n  Users\r\n} from 'lucide-react';\r\nimport './AccessManager.css';\r\n\r\n// Define permission types\r\nexport type PermissionLevel = 'owner' | 'admin' | 'editor' | 'viewer';\r\n\r\nexport interface UserPermission {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  permissionLevel: PermissionLevel;\r\n  status: 'active' | 'pending' | 'expired';\r\n  lastAccessed?: Date;\r\n}\r\n\r\nexport interface Connection {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n  initials: string;\r\n  status: 'active' | 'pending' | 'declined';\r\n}\r\n\r\ninterface CurrentUser {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\ninterface AccessManagerProps {\r\n  templateId: string;\r\n  templateTitle: string;\r\n  initialUsers?: UserPermission[];\r\n  onUpdatePermissions?: (users: UserPermission[]) => void;\r\n}\r\n\r\nconst generateId = () => Math.random().toString(36).substring(2, 9);\r\n\r\nconst getPermissionLabel = (level: PermissionLevel): string => {\r\n  switch (level) {\r\n    case 'owner':\r\n      return 'Owner';\r\n    case 'admin':\r\n      return 'Administrator';\r\n    case 'editor':\r\n      return 'Editor';\r\n    case 'viewer':\r\n      return 'Viewer';\r\n    default:\r\n      return 'Unknown';\r\n  }\r\n};\r\n\r\nconst getPermissionDescription = (level: PermissionLevel): string => {\r\n  switch (level) {\r\n    case 'owner':\r\n      return 'Full control including template deletion and ownership transfer';\r\n    case 'admin':\r\n      return 'Can edit template, manage users, and publish';\r\n    case 'editor':\r\n      return 'Can edit template content but cannot publish or manage users';\r\n    case 'viewer':\r\n      return 'Can only view and use the template';\r\n    default:\r\n      return '';\r\n  }\r\n};\r\n\r\nconst AccessManager: React.FC<AccessManagerProps> = ({\r\n  templateId,\r\n  templateTitle,\r\n  initialUsers = [],\r\n  onUpdatePermissions\r\n}) => {\r\n  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Fetch current user data\r\n  useEffect(() => {\r\n    const fetchCurrentUser = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/users/auth-status/', {\r\n          withCredentials: true\r\n        });\r\n        setCurrentUser(response.data.user);\r\n      } catch (error) {\r\n        console.error('Failed to fetch current user:', error);\r\n        // If we can't get the user from API, try to get from localStorage\r\n        const email = localStorage.getItem('username');\r\n        if (email) {\r\n          setCurrentUser({\r\n            id: 0,\r\n            username: email.split('@')[0],\r\n            email: email\r\n          });\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCurrentUser();\r\n  }, []);\r\n\r\n  // Create default owner based on current user\r\n  const createDefaultOwner = (): UserPermission => {\r\n    return {\r\n      id: generateId(),\r\n      name: currentUser ? (currentUser.username || currentUser.email.split('@')[0]) : 'You',\r\n      email: currentUser ? currentUser.email : 'current.user@example.com',\r\n      permissionLevel: 'owner',\r\n      status: 'active',\r\n      lastAccessed: new Date()\r\n    };\r\n  };\r\n\r\n  const [users, setUsers] = useState<UserPermission[]>(\r\n    initialUsers.length > 0 ? initialUsers : [createDefaultOwner()]\r\n  );\r\n\r\n  // Update default owner when current user is loaded\r\n  useEffect(() => {\r\n    if (!isLoading && currentUser && initialUsers.length === 0) {\r\n      setUsers([createDefaultOwner()]);\r\n    }\r\n  }, [currentUser, isLoading, initialUsers.length]);\r\n\r\n  const [showInviteForm, setShowInviteForm] = useState(false);\r\n  const [newUserEmail, setNewUserEmail] = useState('');\r\n  const [newUserPermission, setNewUserPermission] = useState<PermissionLevel>('viewer');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [editingUserId, setEditingUserId] = useState<string | null>(null);\r\n  const [showShareLink, setShowShareLink] = useState(false);\r\n  const [shareLink, setShareLink] = useState('');\r\n  const [linkCopied, setLinkCopied] = useState(false);\r\n  const [showPermissionDetails, setShowPermissionDetails] = useState(false);\r\n  const [showConnectionsModal, setShowConnectionsModal] = useState(false);\r\n  const [inviteTab, setInviteTab] = useState<'email' | 'connections'>('email');\r\n\r\n  // Sample connections data for demonstration\r\n  // Map to store individual permission levels for each connection\r\n  const [connectionPermissions, setConnectionPermissions] = useState<Record<string, PermissionLevel>>({});\r\n\r\n  const [connections, setConnections] = useState<Connection[]>([\r\n    {\r\n      id: '1',\r\n      name: 'Grace Miller',\r\n      email: 'grace.miller@example.com',\r\n      initials: 'GM',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'John Martinez',\r\n      email: 'john.martinez@example.com',\r\n      initials: 'JM',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Sarah Johnson',\r\n      email: 'sarah.johnson@example.com',\r\n      initials: 'SJ',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '4',\r\n      name: 'Michael Brown',\r\n      email: 'michael.brown@example.com',\r\n      initials: 'MB',\r\n      status: 'active'\r\n    },\r\n    {\r\n      id: '5',\r\n      name: 'Emily Davis',\r\n      email: 'emily.davis@example.com',\r\n      initials: 'ED',\r\n      status: 'active'\r\n    }\r\n  ]);\r\n\r\n  // Generate a share link\r\n  useEffect(() => {\r\n    setShareLink(`https://fashcognitive.com/templates/share/${templateId}?token=${generateId()}`);\r\n  }, [templateId]);\r\n\r\n  // Update parent component when users change\r\n  useEffect(() => {\r\n    if (onUpdatePermissions) {\r\n      onUpdatePermissions(users);\r\n    }\r\n  }, [users, onUpdatePermissions]);\r\n\r\n  const handleAddUser = () => {\r\n    if (!newUserEmail.trim()) return;\r\n\r\n    // Check if user already exists\r\n    if (users.some(user => user.email.toLowerCase() === newUserEmail.toLowerCase())) {\r\n      alert('This user has already been invited.');\r\n      return;\r\n    }\r\n\r\n    const newUser: UserPermission = {\r\n      id: generateId(),\r\n      name: newUserEmail.split('@')[0], // Extract name from email\r\n      email: newUserEmail,\r\n      permissionLevel: newUserPermission,\r\n      status: 'pending'\r\n    };\r\n\r\n    setUsers([...users, newUser]);\r\n    setNewUserEmail('');\r\n    setNewUserPermission('viewer');\r\n    setShowInviteForm(false);\r\n  };\r\n\r\n  const handleAddConnection = (connection: Connection, permissionLevel: PermissionLevel) => {\r\n    // Check if connection already exists as a user\r\n    if (users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())) {\r\n      alert('This user has already been invited.');\r\n      return;\r\n    }\r\n\r\n    const newUser: UserPermission = {\r\n      id: generateId(),\r\n      name: connection.name,\r\n      email: connection.email,\r\n      avatar: connection.avatar,\r\n      permissionLevel: permissionLevel,\r\n      status: 'pending'\r\n    };\r\n\r\n    setUsers([...users, newUser]);\r\n    setShowInviteForm(false);\r\n  };\r\n\r\n  // Initialize connection permissions with default values\r\n  useEffect(() => {\r\n    const newPermissions: Record<string, PermissionLevel> = {};\r\n    connections.forEach(connection => {\r\n      if (!connectionPermissions[connection.id]) {\r\n        newPermissions[connection.id] = 'viewer';\r\n      }\r\n    });\r\n\r\n    if (Object.keys(newPermissions).length > 0) {\r\n      setConnectionPermissions(prev => ({ ...prev, ...newPermissions }));\r\n    }\r\n  }, [connections, connectionPermissions]);\r\n\r\n  const handleConnectionPermissionChange = (connectionId: string, permissionLevel: PermissionLevel) => {\r\n    setConnectionPermissions(prev => ({\r\n      ...prev,\r\n      [connectionId]: permissionLevel\r\n    }));\r\n  };\r\n\r\n  // Filter connections that are not already users\r\n  const availableConnections = connections.filter(\r\n    connection => !users.some(user => user.email.toLowerCase() === connection.email.toLowerCase())\r\n  );\r\n\r\n  const handleUpdatePermission = (userId: string, permissionLevel: PermissionLevel) => {\r\n    setUsers(users.map(user =>\r\n      user.id === userId ? { ...user, permissionLevel } : user\r\n    ));\r\n    setEditingUserId(null);\r\n  };\r\n\r\n  const handleRemoveUser = (userId: string) => {\r\n    // Don't allow removing the owner\r\n    if (users.find(user => user.id === userId)?.permissionLevel === 'owner') {\r\n      alert('You cannot remove the owner of the template.');\r\n      return;\r\n    }\r\n\r\n    setUsers(users.filter(user => user.id !== userId));\r\n  };\r\n\r\n  const handleTransferOwnership = (userId: string) => {\r\n    // Find current owner and new owner\r\n    const currentOwner = users.find(user => user.permissionLevel === 'owner');\r\n    const newOwner = users.find(user => user.id === userId);\r\n\r\n    if (!currentOwner || !newOwner) return;\r\n\r\n    // Swap permissions\r\n    setUsers(users.map(user => {\r\n      if (user.id === currentOwner.id) {\r\n        return { ...user, permissionLevel: 'admin' };\r\n      }\r\n      if (user.id === userId) {\r\n        return { ...user, permissionLevel: 'owner' };\r\n      }\r\n      return user;\r\n    }));\r\n\r\n    setEditingUserId(null);\r\n  };\r\n\r\n  const copyShareLink = () => {\r\n    navigator.clipboard.writeText(shareLink);\r\n    setLinkCopied(true);\r\n    setTimeout(() => setLinkCopied(false), 2000);\r\n  };\r\n\r\n  // Filter users based on search term\r\n  const filteredUsers = users.filter(user =>\r\n    user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    user.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"access-manager\">\r\n      <div style={{ width: '100%', maxWidth: '1000px' }}>\r\n      <div className=\"access-header\">\r\n        <h2>Manage Access</h2>\r\n        <p>Control who can view and edit \"{templateTitle}\"</p>\r\n      </div>\r\n\r\n      {isLoading && (\r\n        <div style={{ textAlign: 'center', padding: '20px' }}>\r\n          <p>Loading user information...</p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"access-actions\">\r\n        <div className=\"search-container\">\r\n          <Search size={18} className=\"search-icon\" />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search users...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"search-input\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"action-buttons\">\r\n          <button\r\n            className=\"share-link-button\"\r\n            onClick={() => setShowShareLink(!showShareLink)}\r\n          >\r\n            <ExternalLink size={16} />\r\n            Share Link\r\n          </button>\r\n\r\n          <button\r\n            className=\"invite-button\"\r\n            onClick={() => setShowInviteForm(!showInviteForm)}\r\n          >\r\n            <UserPlus size={16} />\r\n            Invite User\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {showShareLink && (\r\n        <div className=\"share-link-container\">\r\n          <div className=\"share-link-header\">\r\n            <h3>Share Template</h3>\r\n            <button className=\"close-button\" onClick={() => setShowShareLink(false)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n          <p>Anyone with this link can view this template:</p>\r\n          <div className=\"share-link-input\">\r\n            <input type=\"text\" value={shareLink} readOnly />\r\n            <button onClick={copyShareLink}>\r\n              <Copy size={16} />\r\n              {linkCopied ? 'Copied!' : 'Copy'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showInviteForm && (\r\n        <div className=\"invite-form\">\r\n          <div className=\"invite-form-header\">\r\n            <h3>Invite User</h3>\r\n            <button className=\"close-button\" onClick={() => setShowInviteForm(false)}>\r\n              <X size={16} />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"invite-tabs\">\r\n            <button\r\n              className={`invite-tab ${inviteTab === 'email' ? 'active' : ''}`}\r\n              onClick={() => setInviteTab('email')}\r\n            >\r\n              <Mail size={16} />\r\n              Email\r\n            </button>\r\n            <button\r\n              className={`invite-tab ${inviteTab === 'connections' ? 'active' : ''}`}\r\n              onClick={() => setInviteTab('connections')}\r\n            >\r\n              <Users size={16} />\r\n              My Connections\r\n            </button>\r\n          </div>\r\n\r\n          {inviteTab === 'email' ? (\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>Email Address</label>\r\n                <div className=\"email-input\">\r\n                  <Mail size={18} className=\"email-icon\" />\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email address\"\r\n                    value={newUserEmail}\r\n                    onChange={(e) => setNewUserEmail(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Permission Level\r\n                  <button\r\n                    className=\"info-button\"\r\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\r\n                  >\r\n                    <Info size={14} />\r\n                  </button>\r\n                </label>\r\n                <select\r\n                  value={newUserPermission}\r\n                  onChange={(e) => setNewUserPermission(e.target.value as PermissionLevel)}\r\n                >\r\n                  <option value=\"viewer\">Viewer</option>\r\n                  <option value=\"editor\">Editor</option>\r\n                  <option value=\"admin\">Administrator</option>\r\n                </select>\r\n              </div>\r\n\r\n              {showPermissionDetails && (\r\n                <div className=\"permission-details\">\r\n                  <div className=\"permission-item\">\r\n                    <h4>Viewer</h4>\r\n                    <p>Can view and use the template but cannot make changes</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Editor</h4>\r\n                    <p>Can edit template content but cannot publish or manage users</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Administrator</h4>\r\n                    <p>Can edit template, manage users, and publish</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Owner</h4>\r\n                    <p>Full control including template deletion and ownership transfer</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\r\n                <button\r\n                  className=\"send-invite-button\"\r\n                  onClick={handleAddUser}\r\n                  disabled={!newUserEmail.trim()}\r\n                >\r\n                  Send Invite\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"tab-content\">\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  Permission Levels\r\n                  <button\r\n                    className=\"info-button\"\r\n                    onClick={() => setShowPermissionDetails(!showPermissionDetails)}\r\n                  >\r\n                    <Info size={14} />\r\n                  </button>\r\n                </label>\r\n                <p className=\"permission-hint\">Set permission level for each connection individually</p>\r\n              </div>\r\n\r\n              {showPermissionDetails && (\r\n                <div className=\"permission-details\">\r\n                  <div className=\"permission-item\">\r\n                    <h4>Viewer</h4>\r\n                    <p>Can view and use the template but cannot make changes</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Editor</h4>\r\n                    <p>Can edit template content but cannot publish or manage users</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Administrator</h4>\r\n                    <p>Can edit template, manage users, and publish</p>\r\n                  </div>\r\n                  <div className=\"permission-item\">\r\n                    <h4>Owner</h4>\r\n                    <p>Full control including template deletion and ownership transfer</p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"connections-list-container\">\r\n                <h4 className=\"connections-list-title\">\r\n                  Select from your connections\r\n                  <span className=\"connections-count\">({availableConnections.length})</span>\r\n                </h4>\r\n\r\n                {availableConnections.length === 0 ? (\r\n                  <div className=\"no-connections-message\">\r\n                    <p>All your connections have already been invited to this template.</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"connections-select-list\">\r\n                    {availableConnections.map(connection => (\r\n                      <div key={connection.id} className=\"connection-select-item\">\r\n                        <div className=\"connection-info\">\r\n                          {connection.avatar ? (\r\n                            <img src={connection.avatar} alt={connection.name} className=\"connection-avatar\" />\r\n                          ) : (\r\n                            <div className=\"connection-initials\">{connection.initials}</div>\r\n                          )}\r\n                          <div className=\"connection-details\">\r\n                            <span className=\"connection-name\">{connection.name}</span>\r\n                            <span className=\"connection-email\">{connection.email}</span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"connection-actions\">\r\n                          <select\r\n                            className=\"connection-permission-select\"\r\n                            value={connectionPermissions[connection.id] || 'viewer'}\r\n                            onChange={(e) => handleConnectionPermissionChange(connection.id, e.target.value as PermissionLevel)}\r\n                          >\r\n                            <option value=\"viewer\">Viewer</option>\r\n                            <option value=\"editor\">Editor</option>\r\n                            <option value=\"admin\">Admin</option>\r\n                          </select>\r\n                          <button\r\n                            className=\"add-connection-btn\"\r\n                            onClick={() => handleAddConnection(connection, connectionPermissions[connection.id] || 'viewer')}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"invite-actions\">\r\n                <button className=\"cancel-button\" onClick={() => setShowInviteForm(false)}>Cancel</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"users-list-container\">\r\n        <div className=\"users-list-header\">\r\n          <div className=\"user-column\">User</div>\r\n          <div className=\"permission-column\">Permission</div>\r\n          <div className=\"status-column\">Status</div>\r\n          <div className=\"actions-column\">Actions</div>\r\n        </div>\r\n\r\n        <div className=\"users-list\">\r\n          {filteredUsers.length === 0 ? (\r\n            <div className=\"no-users\">\r\n              <AlertCircle size={24} />\r\n              <p>No users found matching \"{searchTerm}\"</p>\r\n            </div>\r\n          ) : (\r\n            filteredUsers.map(user => (\r\n              <div key={user.id} className=\"user-item\">\r\n                <div className=\"user-info\">\r\n                  <div className=\"user-avatar\">\r\n                    {user.avatar ? (\r\n                      <img src={user.avatar} alt={user.name} />\r\n                    ) : (\r\n                      <div className=\"avatar-placeholder\">\r\n                        {user.name.charAt(0).toUpperCase()}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"user-details\">\r\n                    <div className=\"user-name\">{user.name}</div>\r\n                    <div className=\"user-email\">{user.email}</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"user-permission\">\r\n                  {editingUserId === user.id ? (\r\n                    <select\r\n                      value={user.permissionLevel}\r\n                      onChange={(e) => handleUpdatePermission(user.id, e.target.value as PermissionLevel)}\r\n                      className=\"permission-select\"\r\n                    >\r\n                      <option value=\"viewer\">Viewer</option>\r\n                      <option value=\"editor\">Editor</option>\r\n                      <option value=\"admin\">Administrator</option>\r\n                      <option value=\"owner\">Owner (Transfer Ownership)</option>\r\n                    </select>\r\n                  ) : (\r\n                    <div className={`permission-badge ${user.permissionLevel}`}>\r\n                      <Shield size={14} />\r\n                      <span>{getPermissionLabel(user.permissionLevel)}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"user-status\">\r\n                  <div className={`status-badge ${user.status}`}>\r\n                    {user.status === 'active' && <Check size={14} />}\r\n                    {user.status === 'pending' && <Mail size={14} />}\r\n                    {user.status === 'expired' && <AlertCircle size={14} />}\r\n                    <span>{user.status.charAt(0).toUpperCase() + user.status.slice(1)}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"user-actions\">\r\n                  {user.permissionLevel !== 'owner' && (\r\n                    <>\r\n                      {editingUserId === user.id ? (\r\n                        <button\r\n                          className=\"save-button\"\r\n                          onClick={() => setEditingUserId(null)}\r\n                        >\r\n                          <Check size={16} />\r\n                        </button>\r\n                      ) : (\r\n                        <button\r\n                          className=\"edit-button\"\r\n                          onClick={() => setEditingUserId(user.id)}\r\n                        >\r\n                          <Edit2 size={16} />\r\n                        </button>\r\n                      )}\r\n                      <button\r\n                        className=\"delete-button\"\r\n                        onClick={() => handleRemoveUser(user.id)}\r\n                      >\r\n                        <Trash2 size={16} />\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                  {user.permissionLevel === 'owner' && (\r\n                    <div className=\"owner-badge\">\r\n                      <User size={14} />\r\n                      <span>Owner</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccessManager;\r\n","D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\pages\\components\\ConnectionsPanel.tsx",[],"D:\\intern\\FC\\fashcognitive-intern\\frontend\\src\\utils\\aqlTables.ts",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":193,"column":6,"nodeType":"98","endLine":193,"endColumn":8,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":1436,"column":9,"nodeType":"102","messageId":"103","endLine":1436,"endColumn":26},{"ruleId":"96","severity":1,"message":"104","line":305,"column":34,"nodeType":"102","endLine":305,"endColumn":41},{"ruleId":"100","severity":1,"message":"105","line":316,"column":23,"nodeType":"102","messageId":"103","endLine":316,"endColumn":38},{"ruleId":"100","severity":1,"message":"106","line":317,"column":20,"nodeType":"102","messageId":"103","endLine":317,"endColumn":32},{"ruleId":"100","severity":1,"message":"107","line":320,"column":25,"nodeType":"102","messageId":"103","endLine":320,"endColumn":42},{"ruleId":"100","severity":1,"message":"108","line":321,"column":27,"nodeType":"102","messageId":"103","endLine":321,"endColumn":46},{"ruleId":"100","severity":1,"message":"109","line":55,"column":10,"nodeType":"102","messageId":"103","endLine":55,"endColumn":19},{"ruleId":"100","severity":1,"message":"110","line":1615,"column":10,"nodeType":"102","messageId":"103","endLine":1615,"endColumn":20},{"ruleId":"100","severity":1,"message":"111","line":1615,"column":22,"nodeType":"102","messageId":"103","endLine":1615,"endColumn":35},{"ruleId":"100","severity":1,"message":"112","line":1617,"column":10,"nodeType":"102","messageId":"103","endLine":1617,"endColumn":22},{"ruleId":"96","severity":1,"message":"113","line":1754,"column":6,"nodeType":"98","endLine":1754,"endColumn":10,"suggestions":"114"},{"ruleId":"100","severity":1,"message":"115","line":2193,"column":15,"nodeType":"102","messageId":"103","endLine":2193,"endColumn":38},{"ruleId":"100","severity":1,"message":"116","line":73,"column":7,"nodeType":"102","messageId":"103","endLine":73,"endColumn":31},{"ruleId":"96","severity":1,"message":"117","line":145,"column":6,"nodeType":"98","endLine":145,"endColumn":51,"suggestions":"118"},{"ruleId":"100","severity":1,"message":"119","line":156,"column":10,"nodeType":"102","messageId":"103","endLine":156,"endColumn":30},{"ruleId":"100","severity":1,"message":"120","line":156,"column":32,"nodeType":"102","messageId":"103","endLine":156,"endColumn":55},{"ruleId":"100","severity":1,"message":"121","line":163,"column":23,"nodeType":"102","messageId":"103","endLine":163,"endColumn":37},{"ruleId":"100","severity":1,"message":"122","line":299,"column":9,"nodeType":"102","messageId":"103","endLine":299,"endColumn":32},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'endpointsToTry' and 'loggedInUser'. Either include them or remove the dependency array.","ArrayExpression",["125"],"@typescript-eslint/no-unused-vars","'evaluateAqlStatus' is assigned a value but never used.","Identifier","unusedVar","The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","'featuresVisible' is assigned a value but never used.","'statsVisible' is assigned a value but never used.","'industriesVisible' is assigned a value but never used.","'testimonialsVisible' is assigned a value but never used.","'getCookie' is defined but never used.","'templateId' is assigned a value but never used.","'setTemplateId' is assigned a value but never used.","'templateData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getInitialTemplate'. Either include it or remove the dependency array.",["126"],"'_exhaustiveCheck' is assigned a value but never used.","'getPermissionDescription' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'createDefaultOwner'. Either include it or remove the dependency array.",["127"],"'showConnectionsModal' is assigned a value but never used.","'setShowConnectionsModal' is assigned a value but never used.","'setConnections' is assigned a value but never used.","'handleTransferOwnership' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [endpointsToTry, loggedInUser]",{"range":"134","text":"135"},"Update the dependencies array to be: [getInitialTemplate, id]",{"range":"136","text":"137"},"Update the dependencies array to be: [currentUser, isLoading, initialUsers.length, createDefaultOwner]",{"range":"138","text":"139"},[6008,6010],"[endpointsToTry, loggedInUser]",[63144,63148],"[getInitialTemplate, id]",[3737,3782],"[currentUser, isLoading, initialUsers.length, createDefaultOwner]"]